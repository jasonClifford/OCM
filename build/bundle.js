/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	(function webpackMissingModule() { throw new Error("Cannot find module \"C:\\Users\\Jason\\Desktop\\REACT\\Applications\\OCM_C1\\build\""); }());


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(39);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(186);

	var _About = __webpack_require__(249);

	var _About2 = _interopRequireDefault(_About);

	var _Contact = __webpack_require__(250);

	var _Contact2 = _interopRequireDefault(_Contact);

	var _Home = __webpack_require__(251);

	var _Home2 = _interopRequireDefault(_Home);

	var _Layout = __webpack_require__(401);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _Title = __webpack_require__(417);

	var _Title2 = _interopRequireDefault(_Title);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	__webpack_require__(418);

	var app = document.getElementById('app');

	_reactDom2.default.render(_react2.default.createElement(
	  _reactRouter.Router,
	  { history: _reactRouter.browserHistory },
	  _react2.default.createElement(
	    _reactRouter.Route,
	    { path: "/", component: _Layout2.default },
	    _react2.default.createElement(_reactRouter.IndexRoute, { component: _Title2.default }),
	    _react2.default.createElement(_reactRouter.Route, { path: "home", component: _Home2.default }),
	    _react2.default.createElement(_reactRouter.Route, { path: "about", component: _About2.default }),
	    _react2.default.createElement(_reactRouter.Route, { path: "contact", component: _Contact2.default })
	  )
	), app);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactBaseClasses = __webpack_require__(6);
	var ReactChildren = __webpack_require__(15);
	var ReactDOMFactories = __webpack_require__(23);
	var ReactElement = __webpack_require__(17);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(34);

	var createReactClass = __webpack_require__(35);
	var onlyChild = __webpack_require__(38);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var lowPriorityWarning = __webpack_require__(14);
	  var canDefineProperty = __webpack_require__(11);
	  var ReactElementValidator = __webpack_require__(24);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};

	if (process.env.NODE_ENV !== 'production') {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };

	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}

	var React = {
	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	if (process.env.NODE_ENV !== 'production') {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });

	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }

	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(5);

	var ReactNoopUpdateQueue = __webpack_require__(8);

	var canDefineProperty = __webpack_require__(11);
	var emptyObject = __webpack_require__(12);
	var invariant = __webpack_require__(13);
	var lowPriorityWarning = __webpack_require__(14);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(9);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(10);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = lowPriorityWarning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(16);
	var ReactElement = __webpack_require__(17);

	var emptyFunction = __webpack_require__(10);
	var traverseAllChildren = __webpack_require__(20);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(18);

	var warning = __webpack_require__(9);
	var canDefineProperty = __webpack_require__(11);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(19);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(18);
	var REACT_ELEMENT_TYPE = __webpack_require__(19);

	var getIteratorFn = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var KeyEscapeUtils = __webpack_require__(22);
	var warning = __webpack_require__(9);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(17);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(24);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(18);
	var ReactComponentTreeHook = __webpack_require__(25);
	var ReactElement = __webpack_require__(17);

	var checkReactTypeSpec = __webpack_require__(26);

	var canDefineProperty = __webpack_require__(11);
	var getIteratorFn = __webpack_require__(21);
	var warning = __webpack_require__(9);
	var lowPriorityWarning = __webpack_require__(14);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }

	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }

	        info += ReactComponentTreeHook.getCurrentStackAddendum();

	        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
	        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	        ReactComponentTreeHook.popNonStandardWarningStack();
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(18);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,

	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }

	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }

	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }

	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactPropTypeLocationNames = __webpack_require__(27);
	var ReactPropTypesSecret = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(25);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(17),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(30);

	module.exports = factory(isValidElement);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(31);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(10);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var ReactPropTypesSecret = __webpack_require__(32);
	var checkPropTypes = __webpack_require__(33);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(13);
	  var warning = __webpack_require__(9);
	  var ReactPropTypesSecret = __webpack_require__(32);
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.6.1';

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(6),
	    Component = _require.Component;

	var _require2 = __webpack_require__(17),
	    isValidElement = _require2.isValidElement;

	var ReactNoopUpdateQueue = __webpack_require__(8);
	var factory = __webpack_require__(36);

	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(37);

	var emptyObject = __webpack_require__(12);
	var _invariant = __webpack_require__(13);

	if (process.env.NODE_ENV !== 'production') {
	  var warning = __webpack_require__(9);
	}

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (process.env.NODE_ENV !== 'production') {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (process.env.NODE_ENV !== 'production') {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }
	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isInherited = name in Constructor;
	      _invariant(
	        !isInherited,
	        'ReactClass: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be ' +
	          'due to a mixin.',
	        name
	      );
	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (process.env.NODE_ENV !== 'production') {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if (process.env.NODE_ENV !== 'production') {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	module.exports = factory;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactElement = __webpack_require__(17);

	var invariant = __webpack_require__(13);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(40);


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactDefaultInjection = __webpack_require__(45);
	var ReactMount = __webpack_require__(174);
	var ReactReconciler = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(63);
	var ReactVersion = __webpack_require__(179);

	var findDOMNode = __webpack_require__(180);
	var getHostComponentFromComposite = __webpack_require__(181);
	var renderSubtreeIntoContainer = __webpack_require__(182);
	var warning = __webpack_require__(9);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	  /* eslint-enable camelcase */
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(55);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(69);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(183);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(184);
	  var ReactDOMInvalidARIAHook = __webpack_require__(185);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var DOMProperty = __webpack_require__(43);
	var ReactDOMComponentFlags = __webpack_require__(44);

	var invariant = __webpack_require__(13);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(46);
	var BeforeInputEventPlugin = __webpack_require__(47);
	var ChangeEventPlugin = __webpack_require__(62);
	var DefaultEventPluginOrder = __webpack_require__(80);
	var EnterLeaveEventPlugin = __webpack_require__(81);
	var HTMLDOMPropertyConfig = __webpack_require__(86);
	var ReactComponentBrowserEnvironment = __webpack_require__(87);
	var ReactDOMComponent = __webpack_require__(100);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactDOMEmptyComponent = __webpack_require__(145);
	var ReactDOMTreeTraversal = __webpack_require__(146);
	var ReactDOMTextComponent = __webpack_require__(147);
	var ReactDefaultBatchingStrategy = __webpack_require__(148);
	var ReactEventListener = __webpack_require__(149);
	var ReactInjection = __webpack_require__(152);
	var ReactReconcileTransaction = __webpack_require__(153);
	var SVGDOMPropertyConfig = __webpack_require__(161);
	var SelectEventPlugin = __webpack_require__(162);
	var SimpleEventPlugin = __webpack_require__(163);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(48);
	var ExecutionEnvironment = __webpack_require__(55);
	var FallbackCompositionState = __webpack_require__(56);
	var SyntheticCompositionEvent = __webpack_require__(59);
	var SyntheticInputEvent = __webpack_require__(61);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);
	var EventPluginUtils = __webpack_require__(51);

	var accumulateInto = __webpack_require__(53);
	var forEachAccumulated = __webpack_require__(54);
	var warning = __webpack_require__(9);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var EventPluginRegistry = __webpack_require__(50);
	var EventPluginUtils = __webpack_require__(51);
	var ReactErrorUtils = __webpack_require__(52);

	var accumulateInto = __webpack_require__(53);
	var forEachAccumulated = __webpack_require__(54);
	var invariant = __webpack_require__(13);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }
	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactErrorUtils = __webpack_require__(52);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ }),
/* 55 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(57);

	var getTextContentAccessor = __webpack_require__(58);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(57);

	var emptyFunction = __webpack_require__(10);
	var warning = __webpack_require__(9);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);
	var EventPropagators = __webpack_require__(48);
	var ExecutionEnvironment = __webpack_require__(55);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(63);
	var SyntheticEvent = __webpack_require__(60);

	var inputValueTracking = __webpack_require__(76);
	var getEventTarget = __webpack_require__(77);
	var isEventSupported = __webpack_require__(78);
	var isTextInputElement = __webpack_require__(79);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
	  event.type = 'change';
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getInstIfValueChanged(targetInst, nativeEvent) {
	  var updated = inputValueTracking.updateValueIfChanged(targetInst);
	  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

	  if (updated || simulated) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}

	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.

	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst, nativeEvent);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topClick') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }

	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes,

	  _allowSimulatedPassThrough: true,
	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	};

	module.exports = ChangeEventPlugin;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var CallbackQueue = __webpack_require__(64);
	var PooledClass = __webpack_require__(57);
	var ReactFeatureFlags = __webpack_require__(65);
	var ReactReconciler = __webpack_require__(66);
	var Transaction = __webpack_require__(75);

	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(57);

	var invariant = __webpack_require__(13);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 65 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(67);
	var ReactInstrumentation = __webpack_require__(69);

	var warning = __webpack_require__(9);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
	  {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(68);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(70);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(71);
	var ReactHostOperationHistoryHook = __webpack_require__(72);
	var ReactComponentTreeHook = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(55);

	var performanceNow = __webpack_require__(73);
	var warning = __webpack_require__(9);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  if (measurementName) {
	    performance.clearMeasures(measurementName);
	  }
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(9);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(74);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /* eslint-disable space-before-function-paren */

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    /* eslint-enable space-before-function-paren */
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(41);

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(inst) {
	  return inst._wrapperState.valueTracker;
	}

	function attachTracker(inst, tracker) {
	  inst._wrapperState.valueTracker = tracker;
	}

	function detachTracker(inst) {
	  delete inst._wrapperState.valueTracker;
	}

	function getValueFromNode(node) {
	  var value;
	  if (node) {
	    value = isCheckable(node) ? '' + node.checked : node.value;
	  }
	  return value;
	}

	var inputValueTracking = {
	  // exposed for testing
	  _getTrackerFromNode: function (node) {
	    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
	  },


	  track: function (inst) {
	    if (getTracker(inst)) {
	      return;
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var valueField = isCheckable(node) ? 'checked' : 'value';
	    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	    var currentValue = '' + node[valueField];

	    // if someone has already defined a value or Safari, then bail
	    // and don't track value will cause over reporting of changes,
	    // but it's better then a hard failure
	    // (needed for certain tests that spyOn input values and Safari)
	    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	      return;
	    }

	    Object.defineProperty(node, valueField, {
	      enumerable: descriptor.enumerable,
	      configurable: true,
	      get: function () {
	        return descriptor.get.call(this);
	      },
	      set: function (value) {
	        currentValue = '' + value;
	        descriptor.set.call(this, value);
	      }
	    });

	    attachTracker(inst, {
	      getValue: function () {
	        return currentValue;
	      },
	      setValue: function (value) {
	        currentValue = '' + value;
	      },
	      stopTracking: function () {
	        detachTracker(inst);
	        delete node[valueField];
	      }
	    });
	  },

	  updateValueIfChanged: function (inst) {
	    if (!inst) {
	      return false;
	    }
	    var tracker = getTracker(inst);

	    if (!tracker) {
	      inputValueTracking.track(inst);
	      return true;
	    }

	    var lastValue = tracker.getValue();
	    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

	    if (nextValue !== lastValue) {
	      tracker.setValue(nextValue);
	      return true;
	    }

	    return false;
	  },
	  stopTracking: function (inst) {
	    var tracker = getTracker(inst);
	    if (tracker) {
	      tracker.stopTracking();
	    }
	  }
	};

	module.exports = inputValueTracking;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ }),
/* 79 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(41);
	var SyntheticMouseEvent = __webpack_require__(82);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(83);
	var ViewportMetrics = __webpack_require__(84);

	var getEventModifierState = __webpack_require__(85);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	var getEventTarget = __webpack_require__(77);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {
	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	};

	module.exports = ViewportMetrics;

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(43);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }

	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(88);
	var ReactDOMIDOperations = __webpack_require__(99);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(89);
	var Danger = __webpack_require__(95);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactInstrumentation = __webpack_require__(69);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(92);
	var setInnerHTML = __webpack_require__(91);
	var setTextContent = __webpack_require__(93);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: {
	                toIndex: update.toIndex,
	                content: update.content.toString()
	              }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(90);
	var setInnerHTML = __webpack_require__(91);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(92);
	var setTextContent = __webpack_require__(93);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);
	var DOMNamespaces = __webpack_require__(90);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(92);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xfeff) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);
	var escapeTextContentForBrowser = __webpack_require__(94);
	var setInnerHTML = __webpack_require__(91);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var DOMLazyTree = __webpack_require__(89);
	var ExecutionEnvironment = __webpack_require__(55);

	var createNodesFromMarkup = __webpack_require__(96);
	var emptyFunction = __webpack_require__(10);
	var invariant = __webpack_require__(13);

	var Danger = {
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(55);

	var createArrayFromMixed = __webpack_require__(97);
	var getMarkupWrap = __webpack_require__(98);
	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(13);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(55);

	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(88);
	var ReactDOMComponentTree = __webpack_require__(41);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var AutoFocusUtils = __webpack_require__(101);
	var CSSPropertyOperations = __webpack_require__(103);
	var DOMLazyTree = __webpack_require__(89);
	var DOMNamespaces = __webpack_require__(90);
	var DOMProperty = __webpack_require__(43);
	var DOMPropertyOperations = __webpack_require__(111);
	var EventPluginHub = __webpack_require__(49);
	var EventPluginRegistry = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactDOMComponentFlags = __webpack_require__(44);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactDOMInput = __webpack_require__(116);
	var ReactDOMOption = __webpack_require__(119);
	var ReactDOMSelect = __webpack_require__(120);
	var ReactDOMTextarea = __webpack_require__(121);
	var ReactInstrumentation = __webpack_require__(69);
	var ReactMultiChild = __webpack_require__(122);
	var ReactServerRenderingTransaction = __webpack_require__(141);

	var emptyFunction = __webpack_require__(10);
	var escapeTextContentForBrowser = __webpack_require__(94);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(78);
	var shallowEqual = __webpack_require__(131);
	var inputValueTracking = __webpack_require__(76);
	var validateDOMNesting = __webpack_require__(144);
	var warning = __webpack_require__(9);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { string: true, number: true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trackInputValue() {
	  inputValueTracking.track(this);
	}

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	var newlineEatingTags = {
	  listing: true,
	  pre: true,
	  textarea: true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	      case 'textarea':
	        inputValueTracking.stopTracking(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }
	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(41);

	var focusNode = __webpack_require__(102);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(55);
	var ReactInstrumentation = __webpack_require__(69);

	var camelizeStyleName = __webpack_require__(105);
	var dangerousStyleValue = __webpack_require__(107);
	var hyphenateStyleName = __webpack_require__(108);
	var memoizeStringOnly = __webpack_require__(110);
	var warning = __webpack_require__(9);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styleValue, component);
	        }
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      if (process.env.NODE_ENV !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styles[styleName], component);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (isCustomProperty) {
	        style.setProperty(styleName, styleValue);
	      } else if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(106);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(104);
	var warning = __webpack_require__(9);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(109);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ }),
/* 109 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ }),
/* 110 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(43);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactInstrumentation = __webpack_require__(69);

	var quoteAttributeValueForBrowser = __webpack_require__(112);
	var warning = __webpack_require__(9);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(94);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var EventPluginRegistry = __webpack_require__(50);
	var ReactEventEmitterMixin = __webpack_require__(114);
	var ViewportMetrics = __webpack_require__(84);

	var getVendorPrefixedEventName = __webpack_require__(115);
	var isEventSupported = __webpack_require__(78);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	});

	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var DOMPropertyOperations = __webpack_require__(111);
	var LinkedValueUtils = __webpack_require__(117);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(63);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;

	        if (
	        // eslint-disable-next-line
	        value != valueAsNumber ||
	        // eslint-disable-next-line
	        value == valueAsNumber && node.value != value) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	      } else if (node.value !== '' + value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactPropTypesSecret = __webpack_require__(118);
	var propTypesFactory = __webpack_require__(30);

	var React = __webpack_require__(3);
	var PropTypes = propTypesFactory(React.isValidElement);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var React = __webpack_require__(3);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactDOMSelect = __webpack_require__(120);

	var warning = __webpack_require__(9);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }
	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var LinkedValueUtils = __webpack_require__(117);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(63);

	var warning = __webpack_require__(9);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var LinkedValueUtils = __webpack_require__(117);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(63);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactComponentEnvironment = __webpack_require__(123);
	var ReactInstanceMap = __webpack_require__(124);
	var ReactInstrumentation = __webpack_require__(69);

	var ReactCurrentOwner = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(66);
	var ReactChildReconciler = __webpack_require__(125);

	var emptyFunction = __webpack_require__(10);
	var flattenChildren = __webpack_require__(140);
	var invariant = __webpack_require__(13);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	  }
	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	};

	module.exports = ReactInstanceMap;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(66);

	var instantiateReactComponent = __webpack_require__(126);
	var KeyEscapeUtils = __webpack_require__(136);
	var shouldUpdateReactComponent = __webpack_require__(132);
	var traverseAllChildren = __webpack_require__(137);
	var warning = __webpack_require__(9);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(25);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
	  {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
	  {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var ReactCompositeComponent = __webpack_require__(127);
	var ReactEmptyComponent = __webpack_require__(133);
	var ReactHostComponent = __webpack_require__(134);

	var getNextDebugID = __webpack_require__(135);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var React = __webpack_require__(3);
	var ReactComponentEnvironment = __webpack_require__(123);
	var ReactCurrentOwner = __webpack_require__(18);
	var ReactErrorUtils = __webpack_require__(52);
	var ReactInstanceMap = __webpack_require__(124);
	var ReactInstrumentation = __webpack_require__(69);
	var ReactNodeTypes = __webpack_require__(128);
	var ReactReconciler = __webpack_require__(66);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(129);
	}

	var emptyObject = __webpack_require__(12);
	var invariant = __webpack_require__(13);
	var shallowEqual = __webpack_require__(131);
	var shouldUpdateReactComponent = __webpack_require__(132);
	var warning = __webpack_require__(9);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null
	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var React = __webpack_require__(3);

	var invariant = __webpack_require__(13);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactPropTypeLocationNames = __webpack_require__(130);
	var ReactPropTypesSecret = __webpack_require__(118);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(25);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 135 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactCurrentOwner = __webpack_require__(18);
	var REACT_ELEMENT_TYPE = __webpack_require__(138);

	var getIteratorFn = __webpack_require__(139);
	var invariant = __webpack_require__(13);
	var KeyEscapeUtils = __webpack_require__(136);
	var warning = __webpack_require__(9);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 138 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(136);
	var traverseAllChildren = __webpack_require__(137);
	var warning = __webpack_require__(9);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(25);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(57);
	var Transaction = __webpack_require__(75);
	var ReactInstrumentation = __webpack_require__(69);
	var ReactServerUpdateQueue = __webpack_require__(142);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(143);

	var warning = __webpack_require__(9);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactCurrentOwner = __webpack_require__(18);
	var ReactInstanceMap = __webpack_require__(124);
	var ReactInstrumentation = __webpack_require__(69);
	var ReactUpdates = __webpack_require__(63);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var emptyFunction = __webpack_require__(10);
	var warning = __webpack_require__(9);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var DOMLazyTree = __webpack_require__(89);
	var ReactDOMComponentTree = __webpack_require__(41);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42),
	    _assign = __webpack_require__(5);

	var DOMChildrenOperations = __webpack_require__(88);
	var DOMLazyTree = __webpack_require__(89);
	var ReactDOMComponentTree = __webpack_require__(41);

	var escapeTextContentForBrowser = __webpack_require__(94);
	var invariant = __webpack_require__(13);
	var validateDOMNesting = __webpack_require__(144);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactUpdates = __webpack_require__(63);
	var Transaction = __webpack_require__(75);

	var emptyFunction = __webpack_require__(10);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var EventListener = __webpack_require__(150);
	var ExecutionEnvironment = __webpack_require__(55);
	var PooledClass = __webpack_require__(57);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(63);

	var getEventTarget = __webpack_require__(77);
	var getUnboundedScrollPosition = __webpack_require__(151);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(10);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 151 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(43);
	var EventPluginHub = __webpack_require__(49);
	var EventPluginUtils = __webpack_require__(51);
	var ReactComponentEnvironment = __webpack_require__(123);
	var ReactEmptyComponent = __webpack_require__(133);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactHostComponent = __webpack_require__(134);
	var ReactUpdates = __webpack_require__(63);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var CallbackQueue = __webpack_require__(64);
	var PooledClass = __webpack_require__(57);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactInputSelection = __webpack_require__(154);
	var ReactInstrumentation = __webpack_require__(69);
	var Transaction = __webpack_require__(75);
	var ReactUpdateQueue = __webpack_require__(143);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(155);

	var containsNode = __webpack_require__(157);
	var focusNode = __webpack_require__(102);
	var getActiveElement = __webpack_require__(160);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(55);

	var getNodeForCharacterOffset = __webpack_require__(156);
	var getTextContentAccessor = __webpack_require__(58);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ }),
/* 156 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(158);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(159);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ }),
/* 159 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ }),
/* 160 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ }),
/* 161 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(48);
	var ExecutionEnvironment = __webpack_require__(55);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(154);
	var SyntheticEvent = __webpack_require__(60);

	var getActiveElement = __webpack_require__(160);
	var isTextInputElement = __webpack_require__(79);
	var shallowEqual = __webpack_require__(131);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var EventListener = __webpack_require__(150);
	var EventPropagators = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(41);
	var SyntheticAnimationEvent = __webpack_require__(164);
	var SyntheticClipboardEvent = __webpack_require__(165);
	var SyntheticEvent = __webpack_require__(60);
	var SyntheticFocusEvent = __webpack_require__(166);
	var SyntheticKeyboardEvent = __webpack_require__(167);
	var SyntheticMouseEvent = __webpack_require__(82);
	var SyntheticDragEvent = __webpack_require__(170);
	var SyntheticTouchEvent = __webpack_require__(171);
	var SyntheticTransitionEvent = __webpack_require__(172);
	var SyntheticUIEvent = __webpack_require__(83);
	var SyntheticWheelEvent = __webpack_require__(173);

	var emptyFunction = __webpack_require__(10);
	var getEventCharCode = __webpack_require__(168);
	var invariant = __webpack_require__(13);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(83);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(83);

	var getEventCharCode = __webpack_require__(168);
	var getEventKey = __webpack_require__(169);
	var getEventModifierState = __webpack_require__(85);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(168);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1',
	  113: 'F2',
	  114: 'F3',
	  115: 'F4',
	  116: 'F5',
	  117: 'F6',
	  118: 'F7',
	  119: 'F8',
	  120: 'F9',
	  121: 'F10',
	  122: 'F11',
	  123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(82);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(83);

	var getEventModifierState = __webpack_require__(85);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(82);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var DOMLazyTree = __webpack_require__(89);
	var DOMProperty = __webpack_require__(43);
	var React = __webpack_require__(3);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactCurrentOwner = __webpack_require__(18);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactDOMContainerInfo = __webpack_require__(175);
	var ReactDOMFeatureFlags = __webpack_require__(176);
	var ReactFeatureFlags = __webpack_require__(65);
	var ReactInstanceMap = __webpack_require__(124);
	var ReactInstrumentation = __webpack_require__(69);
	var ReactMarkupChecksum = __webpack_require__(177);
	var ReactReconciler = __webpack_require__(66);
	var ReactUpdateQueue = __webpack_require__(143);
	var ReactUpdates = __webpack_require__(63);

	var emptyObject = __webpack_require__(12);
	var instantiateReactComponent = __webpack_require__(126);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(91);
	var shouldUpdateReactComponent = __webpack_require__(132);
	var warning = __webpack_require__(9);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, {
	      child: nextElement
	    });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(144);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(178);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ }),
/* 178 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.6.1';

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(42);

	var ReactCurrentOwner = __webpack_require__(18);
	var ReactDOMComponentTree = __webpack_require__(41);
	var ReactInstanceMap = __webpack_require__(124);

	var getHostComponentFromComposite = __webpack_require__(181);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(9);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(128);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(174);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(43);
	var EventPluginRegistry = __webpack_require__(50);
	var ReactComponentTreeHook = __webpack_require__(25);

	var warning = __webpack_require__(9);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(25);

	var warning = __webpack_require__(9);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(25);

	var warning = __webpack_require__(9);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.PropTypes = exports.RoutingContext = exports.RouterContext = exports.createRoutes = exports.useRoutes = exports.RouteContext = exports.Lifecycle = exports.History = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(187);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes2 = __webpack_require__(188);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes2.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes2.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(193);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(195);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(226);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(227);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(228);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(230);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(232);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(231);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(233);

	var _Route3 = _interopRequireDefault(_Route2);

	var _History2 = __webpack_require__(234);

	var _History3 = _interopRequireDefault(_History2);

	var _Lifecycle2 = __webpack_require__(235);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	var _RouteContext2 = __webpack_require__(236);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	var _useRoutes2 = __webpack_require__(237);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	var _RouterContext2 = __webpack_require__(223);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _RoutingContext2 = __webpack_require__(238);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	var _match2 = __webpack_require__(239);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(243);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(244);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(245);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(248);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(240);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* mixins */

	exports.History = _History3.default;
	exports.Lifecycle = _Lifecycle3.default;
	exports.RouteContext = _RouteContext3.default;

	/* utils */

	exports.useRoutes = _useRoutes3.default;
	exports.RouterContext = _RouterContext3.default;
	exports.RoutingContext = _RoutingContext3.default;
	exports.PropTypes = _PropTypes3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.router = exports.routes = exports.route = exports.components = exports.component = exports.location = exports.history = exports.falsy = exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(2);

	var _deprecateObjectProperties = __webpack_require__(189);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _InternalPropTypes = __webpack_require__(192);

	var InternalPropTypes = _interopRequireWildcard(_InternalPropTypes);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

	// Deprecated stuff below:

	var falsy = exports.falsy = InternalPropTypes.falsy;
	var history = exports.history = InternalPropTypes.history;
	var location = exports.location = locationShape;
	var component = exports.component = InternalPropTypes.component;
	var components = exports.components = InternalPropTypes.components;
	var route = exports.route = InternalPropTypes.route;
	var routes = exports.routes = InternalPropTypes.routes;
	var router = exports.router = routerShape;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var deprecatePropType = function deprecatePropType(propType, message) {
	      return function () {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	        return propType.apply(undefined, arguments);
	      };
	    };

	    var deprecateInternalPropType = function deprecateInternalPropType(propType) {
	      return deprecatePropType(propType, 'This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.');
	    };

	    var deprecateRenamedPropType = function deprecateRenamedPropType(propType, name) {
	      return deprecatePropType(propType, 'The `' + name + '` prop type is now exported as `' + name + 'Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.');
	    };

	    exports.falsy = falsy = deprecateInternalPropType(falsy);
	    exports.history = history = deprecateInternalPropType(history);
	    exports.component = component = deprecateInternalPropType(component);
	    exports.components = components = deprecateInternalPropType(components);
	    exports.route = route = deprecateInternalPropType(route);
	    exports.routes = routes = deprecateInternalPropType(routes);

	    exports.location = location = deprecateRenamedPropType(location, 'location');
	    exports.router = router = deprecateRenamedPropType(router, 'router');
	  })();
	}

	var defaultExport = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route,
	  // For some reason, routes was never here.
	  router: router
	};

	if (process.env.NODE_ENV !== 'production') {
	  defaultExport = (0, _deprecateObjectProperties2.default)(defaultExport, 'The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.');
	}

	exports.default = defaultExport;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.canUseMembrane = undefined;

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseMembrane = exports.canUseMembrane = false;

	// No-op by default.
	var deprecateObjectProperties = function deprecateObjectProperties(object) {
	  return object;
	};

	if (process.env.NODE_ENV !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', {
	      get: function get() {
	        return true;
	      }
	    }).x) {
	      exports.canUseMembrane = canUseMembrane = true;
	    }
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	  if (canUseMembrane) {
	    deprecateObjectProperties = function deprecateObjectProperties(object, message) {
	      // Wrap the deprecated object in a membrane to warn on property access.
	      var membrane = {};

	      var _loop = function _loop(prop) {
	        if (!Object.prototype.hasOwnProperty.call(object, prop)) {
	          return 'continue';
	        }

	        if (typeof object[prop] === 'function') {
	          // Can't use fat arrow here because of use of arguments below.
	          membrane[prop] = function () {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	            return object[prop].apply(object, arguments);
	          };
	          return 'continue';
	        }

	        // These properties are non-enumerable to prevent React dev tools from
	        // seeing them and causing spurious warnings when accessing them. In
	        // principle this could be done with a proxy, but support for the
	        // ownKeys trap on proxies is not universal, even among browsers that
	        // otherwise support proxies.
	        Object.defineProperty(membrane, prop, {
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	            return object[prop];
	          }
	        });
	      };

	      for (var prop in object) {
	        var _ret = _loop(prop);

	        if (_ret === 'continue') continue;
	      }

	      return membrane;
	    };
	  }
	}

	exports.default = deprecateObjectProperties;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(191);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(2);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;


	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames;
	  var paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createHashHistory = __webpack_require__(196);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _useQueries = __webpack_require__(212);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager = __webpack_require__(215);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _InternalPropTypes = __webpack_require__(192);

	var _RouterContext = __webpack_require__(223);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(187);

	var _RouterUtils = __webpack_require__(225);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}

	/* istanbul ignore next: sanity check */
	function isUnsupportedHistory(history) {
	  // v3 histories expose getCurrentLocation, but aren't currently supported.
	  return history && history.getCurrentLocation;
	}

	var _React$PropTypes = _react2.default.PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',


	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // Deprecated:
	    parseQueryString: func,
	    stringifyQuery: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : void 0;

	    var _createRouterObjects = this.createRouterObjects();

	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;


	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });

	    this.history = history;
	    this.router = router;
	  },
	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext;
	    }

	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;


	    !!isUnsupportedHistory(history) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v3.x. ' + 'This version of React Router is not compatible with v3 history ' + 'objects. Please use history v2.x instead.') : (0, _invariant2.default)(false) : void 0;

	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }

	    var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	    var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
	    var routingHistory = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);

	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },
	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;


	    var createHistory = void 0;
	    if (history) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : void 0;
	      createHistory = function createHistory() {
	        return history;
	      };
	    } else {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : void 0;
	      createHistory = _createHashHistory2.default;
	    }

	    return (0, _useQueries2.default)(createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },


	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;

	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(198);

	var _PathUtils = __webpack_require__(199);

	var _ExecutionEnvironment = __webpack_require__(200);

	var _DOMUtils = __webpack_require__(201);

	var _DOMStateStorage = __webpack_require__(202);

	var _createDOMHistory = __webpack_require__(203);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 198 */
/***/ (function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ }),
/* 201 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'use strict';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(200);

	var _DOMUtils = __webpack_require__(201);

	var _createHistory = __webpack_require__(204);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));

	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen
	  });
	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _deepEqual = __webpack_require__(205);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _PathUtils = __webpack_require__(199);

	var _AsyncUtils = __webpack_require__(208);

	var _Actions = __webpack_require__(198);

	var _createLocation2 = __webpack_require__(209);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(210);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(211);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if (typeof action === 'object') {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}

	exports['default'] = createHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(206);
	var isArguments = __webpack_require__(207);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ }),
/* 206 */
/***/ (function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;

	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ }),
/* 208 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _Actions = __webpack_require__(198);

	var _PathUtils = __webpack_require__(199);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _PathUtils.parsePath(location);

	  if (typeof action === 'object') {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}

	exports['default'] = createLocation;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecate(fn, message) {
	  return function () {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}

	exports['default'] = deprecate;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(213);

	var _runTransitionHook = __webpack_require__(210);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(199);

	var _deprecate = __webpack_require__(211);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }

	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }

	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(214);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(216);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(217);

	var _isActive2 = __webpack_require__(219);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(220);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(222);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    var indexOnly = void 0;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState);

	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var changeRoutes = _computeChangedRoutes.changeRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;


	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];

	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	      RouteHooks[routeID] = [hook];

	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);

	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : void 0;

	        hooks.push(hook);
	      }
	    }

	    return function () {
	      var hooks = RouteHooks[routeID];

	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    });
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}

	//export default useRoutes

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(193);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(218);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createTransitionHook(hook, route, asyncArity) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (hook.length < asyncArity) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3));

	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };

	      return;
	    }

	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](state, nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(193);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(218);

	var _makeStateWithLocation = __webpack_require__(221);

	var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (!getComponent) {
	    callback();
	    return;
	  }

	  var location = nextState.location;

	  var nextStateWithLocation = (0, _makeStateWithLocation2.default)(nextState, location);

	  getComponent.call(route, nextStateWithLocation, callback);
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = makeStateWithLocation;

	var _deprecateObjectProperties = __webpack_require__(189);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function makeStateWithLocation(state, location) {
	  if (process.env.NODE_ENV !== 'production' && _deprecateObjectProperties.canUseMembrane) {
	    var stateWithLocation = _extends({}, state);

	    // I don't use deprecateObjectProperties here because I want to keep the
	    // same code path between development and production, in that we just
	    // assign extra properties to the copy of the state object in both cases.

	    var _loop = function _loop(prop) {
	      if (!Object.prototype.hasOwnProperty.call(location, prop)) {
	        return 'continue';
	      }

	      Object.defineProperty(stateWithLocation, prop, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Accessing location properties directly from the first argument to `getComponent`, `getComponents`, `getChildRoutes`, and `getIndexRoute` is deprecated. That argument is now the router state (`nextState` or `partialNextState`) rather than the location. To access the location, use `nextState.location` or `partialNextState.location`.') : void 0;
	          return location[prop];
	        }
	      });
	    };

	    for (var prop in location) {
	      var _ret = _loop(prop);

	      if (_ret === 'continue') continue;
	    }

	    return stateWithLocation;
	  }

	  return _extends({}, state, location);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(218);

	var _makeStateWithLocation = __webpack_require__(221);

	var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);

	var _PatternUtils = __webpack_require__(193);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(187);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);

	  route.getChildRoutes(partialNextStateWithLocation, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);

	    route.getIndexRoute(partialNextStateWithLocation, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _deprecateObjectProperties = __webpack_require__(189);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _getRouteParams = __webpack_require__(224);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _RouteUtils = __webpack_require__(187);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',


	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },


	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;

	    if (!router) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`<RouterContext>` expects a `router` rather than a `history`') : void 0;

	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      location = (0, _deprecateObjectProperties2.default)(location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }

	    return { history: history, location: location, router: router };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(193);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;

	var _deprecateObjectProperties = __webpack_require__(189);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}

	// deprecated
	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);

	  if (process.env.NODE_ENV !== 'production') {
	    history = (0, _deprecateObjectProperties2.default)(history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }

	  return history;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(188);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;


	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;

	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }

	  return to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',


	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    !this.context.router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    var _props = this.props;
	    var to = _props.to;
	    var query = _props.query;
	    var hash = _props.hash;
	    var state = _props.state;

	    var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });

	    this.context.router.push(location);
	  },
	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : void 0;

	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;


	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (to == null) {
	        return _react2.default.createElement('a', props);
	      }

	      var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(location);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(location, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(226);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withRouter;

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(229);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _PropTypes = __webpack_require__(188);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      var props = _extends({}, this.props, { router: router });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 229 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(231);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(187);

	var _PatternUtils = __webpack_require__(193);

	var _InternalPropTypes = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;


	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(187);

	var _InternalPropTypes = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(187);

	var _InternalPropTypes = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */

	var Route = _react2.default.createClass({
	  displayName: 'Route',


	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _InternalPropTypes = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {

	  contextTypes: {
	    history: _InternalPropTypes.history
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : void 0;
	    this.history = this.context.history;
	  }
	};

	exports.default = History;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var object = _react2.default.PropTypes.object;

	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */

	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },

	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },

	  componentDidMount: function componentDidMount() {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : void 0;
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : (0, _invariant2.default)(false) : void 0;

	    var route = this.props.route || this.context.route;

	    !route ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : (0, _invariant2.default)(false) : void 0;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }
	};

	exports.default = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var object = _react2.default.PropTypes.object;

	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */

	var RouteContext = {

	  propTypes: {
	    route: object.isRequired
	  },

	  childContextTypes: {
	    route: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : void 0;
	  }
	};

	exports.default = RouteContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _useQueries = __webpack_require__(212);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _createTransitionManager = __webpack_require__(215);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : void 0;

	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var routes = _ref.routes;

	    var options = _objectWithoutProperties(_ref, ['routes']);

	    var history = (0, _useQueries2.default)(createHistory)(options);
	    var transitionManager = (0, _createTransitionManager2.default)(history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}

	exports.default = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(223);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var RoutingContext = _react2.default.createClass({
	  displayName: 'RoutingContext',
	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : void 0;
	  },
	  render: function render() {
	    return _react2.default.createElement(_RouterContext2.default, this.props);
	  }
	});

	exports.default = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _Actions = __webpack_require__(198);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(240);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(215);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(187);

	var _RouterUtils = __webpack_require__(225);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history;
	  var routes = _ref.routes;
	  var location = _ref.location;

	  var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  var unlisten = void 0;

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    // Pick up the location from the history via synchronous history.listen
	    // call if needed.
	    unlisten = history.listen(function (historyLocation) {
	      location = historyLocation;
	    });
	  }

	  var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
	  history = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation && router.createLocation(redirectLocation, _Actions.REPLACE), nextState && _extends({}, nextState, {
	      history: history,
	      router: router,
	      matchContext: { history: history, transitionManager: transitionManager, router: router }
	    }));

	    // Defer removing the listener to here to prevent DOM histories from having
	    // to unwind DOM event listeners unnecessarily, in case callback renders a
	    // <Router> and attaches another history listener.
	    if (unlisten) {
	      unlisten();
	    }
	  });
	}

	exports.default = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(212);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(241);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(242);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}
	module.exports = exports['default'];

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _ExecutionEnvironment = __webpack_require__(200);

	var _PathUtils = __webpack_require__(199);

	var _runTransitionHook = __webpack_require__(210);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(211);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var basename = options.basename;

	    var checkedBaseHref = false;

	    function checkBaseHref() {
	      if (checkedBaseHref) {
	        return;
	      }

	      // Automatically use the value of <base href> in HTML
	      // documents as basename if it's not explicitly given.
	      if (basename == null && _ExecutionEnvironment.canUseDOM) {
	        var base = document.getElementsByTagName('base')[0];
	        var baseHref = base && base.getAttribute('href');

	        if (baseHref != null) {
	          basename = baseHref;

	          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Automatically setting basename using <base href> is deprecated and will ' + 'be removed in the next major release. The semantics of <base href> are ' + 'subtly different from basename. Please pass the basename explicitly in ' + 'the options to createHistory') : undefined;
	        }
	      }

	      checkedBaseHref = true;
	    }

	    function addBasename(location) {
	      checkBaseHref();

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      checkBaseHref();

	      if (!basename) return location;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(197);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathUtils = __webpack_require__(199);

	var _Actions = __webpack_require__(198);

	var _createHistory = __webpack_require__(204);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(212);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(241);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(223);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(190);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length <= 0 || arguments[0] === undefined ? _react.createElement : arguments[0];
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(246);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(247);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(194);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(198);

	var _PathUtils = __webpack_require__(199);

	var _ExecutionEnvironment = __webpack_require__(200);

	var _DOMUtils = __webpack_require__(201);

	var _DOMStateStorage = __webpack_require__(202);

	var _createDOMHistory = __webpack_require__(203);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    try {
	      historyState = historyState || window.history.state || {};
	    } catch (e) {
	      historyState = {};
	    }

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null);
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };

	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(243);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(196);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(247);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(186);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import Date from "./Pages/About/Components/Date.js";


	var About = _react2.default.createClass({
	  displayName: "About",
	  render: function render() {
	    return _react2.default.createElement(
	      "div",
	      { className: "mainContainer" },
	      _react2.default.createElement(
	        "div",
	        { className: "LinkPrev" },
	        _react2.default.createElement(
	          _reactRouter.Link,
	          { to: "home" },
	          "Home"
	        )
	      ),
	      _react2.default.createElement(
	        "div",
	        { id: "AboutContent" },
	        _react2.default.createElement(
	          "h1",
	          null,
	          "this is About!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	        ),
	        _react2.default.createElement(
	          "h1",
	          null,
	          "this is About!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	        ),
	        _react2.default.createElement(
	          "h1",
	          null,
	          "this is About!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	        ),
	        _react2.default.createElement(
	          "h1",
	          null,
	          "this is About!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	        ),
	        _react2.default.createElement(
	          "h1",
	          null,
	          "this is About!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	        )
	      ),
	      _react2.default.createElement(
	        "div",
	        { className: "LinkNext" },
	        _react2.default.createElement(
	          _reactRouter.Link,
	          { to: "contact" },
	          "Contact"
	        )
	      )
	    );
	  }
	});
	exports.default = About;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Contact = function (_React$Component) {
	  _inherits(Contact, _React$Component);

	  function Contact() {
	    _classCallCheck(this, Contact);

	    return _possibleConstructorReturn(this, (Contact.__proto__ || Object.getPrototypeOf(Contact)).apply(this, arguments));
	  }

	  _createClass(Contact, [{
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement(
	        "div",
	        { className: "mainContainer" },
	        _react2.default.createElement(
	          "div",
	          null,
	          _react2.default.createElement(
	            "h1",
	            null,
	            "this is Contact!!!!!!!!!!!!!!!! Tri-tip prosciutto biltong shank landjaeger sausage picanha alcatra short ribs strip steak. Porchetta sirloin flank jowl andouille sausage bresaola prosciutto hamburger chicken. Bresaola cupim turducken pork belly tail pancetta chuck cow swine chicken turkey. Boudin pork salami shank corned beef tenderloin. Beef corned beef filet mignon t-bone pork loin, shoulder ground round landjaeger cow meatloaf andouille tri-tip."
	          )
	        )
	      );
	    }
	  }]);

	  return Contact;
	}(_react2.default.Component);

	exports.default = Contact;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(186);

	var _AsideHome = __webpack_require__(252);

	var _AsideHome2 = _interopRequireDefault(_AsideHome);

	var _NeuroNetwork = __webpack_require__(271);

	var _NeuroNetwork2 = _interopRequireDefault(_NeuroNetwork);

	var _reactMotion = __webpack_require__(253);

	var _reactHtml5video = __webpack_require__(400);

	var _reactHtml5video2 = _interopRequireDefault(_reactHtml5video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var FlyInVid = 'https://s3.ca-central-1.amazonaws.com/ocmediavideo/Main.mp4';
	var InkVid = 'https://s3.ca-central-1.amazonaws.com/ocmediavideo/Ink.mp4';

	var Home = _react2.default.createClass({
	    displayName: "Home",
	    handleTouchStart: function handleTouchStart(e) {
	        e.preventDefault();
	    },
	    navaAbout: function navaAbout() {
	        var Messanger = window.location.pathname;

	        if (Messanger === "/home") {
	            //set curent path to..
	            var Messanger = 1;
	        }
	        if (Messanger === "/about") {
	            //set curent path to..
	            var Messanger = 2;
	        }
	        if (Messanger === "/contact") {
	            //set curent path to..
	            var Messanger = 3;
	        }

	        _reactRouter.browserHistory.push({
	            pathname: 'about',
	            state: { message: Messanger }
	        });
	        //console.log(Messanger);
	    },
	    navaAboutTouch: function navaAboutTouch(e) {
	        e.preventDefault();
	        this.navaAbout();
	    },
	    render: function render() {
	        var _this = this;

	        return _react2.default.createElement(
	            "div",
	            { className: "mainContainer" },
	            _react2.default.createElement(
	                "div",
	                { className: "LinkNext" },
	                _react2.default.createElement(
	                    "a",
	                    {
	                        onMouseDown: function onMouseDown() {
	                            _this.navaAbout();
	                        },
	                        onTouchStart: function onTouchStart() {
	                            _this.navaAboutTouch;
	                        }
	                    },
	                    _react2.default.createElement(
	                        "svg",
	                        { id: "LinkDwnLgo", width: "50px", height: "50px", viewBox: "0 0 50 50" },
	                        _react2.default.createElement(
	                            "g",
	                            null,
	                            _react2.default.createElement("path", { className: "st0", d: "M25,1.6C12.1,1.6,1.6,12.1,1.6,25S12.1,48.4,25,48.4S48.4,37.9,48.4,25S37.9,1.6,25,1.6z M25,46.1\r C13.3,46.1,3.9,36.7,3.9,25S13.3,3.9,25,3.9S46.1,13.3,46.1,25S36.7,46.1,25,46.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M22.1,32.4c0.3,0.5,0.9,0.7,0.9,1.3c-0.2,0.1-0.4,0.1-0.6-0.1c-0.1-0.1-0.2-0.1-0.2-0.1\r c-0.7,0.2-1.2-0.2-1.8-0.6c-0.3-0.2-0.4-0.4-0.5-0.7c0-0.1-0.2-0.2-0.3-0.2c-0.4,0-0.5-0.2-0.3-0.5c0.2-0.4,0.2-0.7,0-1.1\r c-0.1-0.2,0-0.7,0.1-1c0,0,0,0,0.1,0c0.5-0.1,0.9-0.2,1.4-0.3c0.1,0,0.2,0,0.2-0.1c0.1,0,0.1-0.1,0.2-0.2c-0.1,0-0.1-0.1-0.2-0.1\r c-0.3,0-0.6,0-0.9,0.1c-0.4,0.1-0.9,0.1-1.3,0.2c-0.1,0-0.2-0.2-0.3-0.3c0-0.1,0-0.3,0-0.3c0.1-0.1,0.3-0.2,0.5-0.2\r c0.3,0,0.5-0.1,0.6-0.4c0.1-0.3,0.3-0.6,0.4-0.9c0.1-0.3,0-0.4-0.3-0.5c-0.2,0-0.5-0.1-0.7-0.1c-0.2-0.1-0.4-0.3-0.3-0.5\r c0.2-0.4,0-0.7-0.4-0.9c0.1,0,0.1-0.1,0.2-0.1c0.2-0.1,0.3-0.3,0.2-0.5c-0.1-0.2-0.1-0.5-0.4-0.5c-0.1,0-0.3-0.1-0.4-0.1\r c0.1-0.1,0.2-0.1,0.3-0.2c0.1,0,0.2-0.1,0.2-0.1c0.2-0.2,0.4-0.2,0.6,0.1c0.1,0.1,0.4,0.1,0.6,0.2c0.1,0,0.1,0,0.2,0\r c0.3,0.2,0.5,0.2,0.8,0.1c0.1,0,0.3,0.2,0.4,0.3c0.2-0.1,0.1-0.3-0.1-1c0.3,0.2,0.5,0.7,0.4,1.1c-0.1,0.2-0.3,0.2-0.4,0.2\r c-0.3-0.2-0.3,0.1-0.4,0.2c-0.1,0.6-0.2,1.1-0.3,1.7c0,0.1,0.1,0.2,0.1,0.3c0.1,0.1,0.3,0.2,0.4,0.3c0.2,0.2,0.3,0.3,0.2,0.6\r c0,0.1,0,0.2,0,0.3c0,0,0.1,0.1,0.2,0.1c0,0,0.1-0.1,0.1-0.1c0.1-0.2,0.1-0.5,0.2-0.7c0-0.1,0.1-0.2,0.2-0.2\r c0.1,0.1,0.1,0.1,0.2,0.2c0,0,0,0,0.1,0.1c0.1-0.1,0.1-0.2,0.2-0.4c0.1,0.3,0.1,0.5,0.2,0.7c0.2,0.7,0.5,1,1.2,1c0.4,0,0.7,0,1.1,0\r c0.1,0,0.2,0,0.2-0.1c0.3-0.1,0.6-0.3,0.9-0.4c0.3-0.1,0.4-0.3,0.2-0.6C26,27,26,27,26.1,27.1c0.4,0.3,0.9,0.3,1.2-0.1\r c0.2-0.2,0.4-0.4,0.5-0.7C28,26.2,28,26,27.8,26c-0.2-0.1-0.5-0.3-0.7-0.4c0.1-0.1,0.3-0.1,0.3-0.2c0.1-0.6,0.5-0.8,0.9-1\r c0.1-0.1,0.2-0.1,0.2-0.3c-0.1-0.2-0.2-0.2-0.3-0.1c-0.4,0.1-0.9,0.3-1.4,0c0.3-0.3,0.5-0.7,0.9-0.8c0.2-0.1,0.4-0.1,0.6-0.2\r c0.5-0.2,0.9-0.5,1.4-0.8c0.1,0,0.2,0,0.2,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.1-0.1,0.1-0.2,0.2c-0.3,0.3-0.6,0.7-1,1\r c-0.1,0.1-0.2,0.1-0.3,0.2c0.2,0.2,0.6,0.2,0.7-0.1c0.1-0.4,0.4-0.5,0.7-0.6c0.4-0.2,0.7-0.3,1.1-0.4c0.3-0.1,0.5-0.1,0.8-0.1\r c0.1,0,0.2-0.1,0.3-0.1c0.4-0.3,0.7-0.5,1.2-0.5c0.2,0,0.5,0,0.7-0.1c0.1,0,0.1-0.1,0.2-0.1c0-0.1-0.1-0.1-0.1-0.2\r c0,0-0.1-0.1-0.1-0.1c-0.3-0.3-0.3-0.6,0-0.8c0.2-0.2,0.5-0.3,0.8-0.4c0.4-0.1,0.4-0.2,0.2-0.6c-0.1-0.1-0.1-0.3-0.2-0.4\r c-0.3-0.2-0.4-0.5-0.8-0.5c0,0-0.1,0-0.1-0.1c-0.1-0.1-0.1-0.8,0-0.9c0.6-0.5,1.2-1.1,1.8-1.6c0,0,0.1-0.1,0.1-0.1\r c0-0.1,0.1-0.3,0.1-0.4c0-0.1-0.2-0.1-0.3-0.1c-0.1,0-0.2,0-0.2,0.1c-0.2-0.3-0.1-0.3,0.2-0.6c-0.5-0.2-1-0.5-1.5-0.7\r c-0.4-0.1-0.8-0.2-1.1-0.3c-0.2,0-0.3-0.1-0.5-0.2c-0.1,0-0.2-0.1-0.3-0.1c-0.1,0-0.1,0.2-0.1,0.3c-0.4-0.3-0.8-0.6-1.2-1\r c-0.2-0.2-0.4-0.4-0.6-0.6c-0.1-0.1-0.3-0.1-0.4-0.1c0.2-0.4,0.6-0.2,0.9-0.2c0,0,0-0.1,0-0.1c-0.5-0.1-1.1-0.2-1.6-0.3\r c0,0,0,0.1-0.1,0.1c0.2,0.1,0.3,0.3,0.5,0.4c-0.1,0.1-0.2,0.3-0.4,0.4c-0.2-0.1-0.3-0.2-0.5-0.4c-0.1-0.1-0.2-0.1-0.3-0.2\r c-0.6-0.3-0.7-0.2-0.9,0.5c0,0.1-0.1,0.3-0.1,0.4c0,0-0.1,0-0.1,0c0-0.2,0-0.5,0-0.7c-0.6-0.2-1.3-0.2-1.8-0.5c0,0,0-0.1,0-0.1\r c0.2,0,0.4,0,0.6,0c0.2,0,0.4,0.1,0.6,0.1c0.1,0,0.2,0,0.4-0.1c-0.1-0.2-0.1-0.4-0.2-0.5c-0.2-0.1-0.5-0.2-0.8-0.2\r c-0.3-0.1-0.6-0.1-0.9-0.2c-0.1,0-0.1-0.1-0.2-0.1c0.4,0.1,0.8,0.2,1.2,0.2c0.2,0,0.3-0.1,0.5-0.1c0.1,0,0.1,0,0.2,0\r c0.4,0.1,0.7,0.1,1.1,0.2c0.1,0,0.2,0.1,0.2,0.2c0,0,0,0,0,0.1c-0.2,0-0.4-0.1-0.6-0.1c0.1,0.3,0.7,0.2,0.4,0.7\r c0.3,0.1,0.6,0.2,0.8-0.1c0.1-0.1,0.2-0.1,0.3-0.1c0.1,0,0.2,0,0.3,0c0.1,0,0.2-0.1,0.2-0.2c-0.1-0.1-0.1-0.2-0.2-0.2\r c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.2-0.1-0.3-0.2c0.1-0.1,0.2-0.2,0.3-0.2c0.1,0,0.1-0.1,0.2-0.1c-0.5-0.5-1.1-0.4-1.7-0.3\r c-0.1,0-0.2,0.1-0.2,0.1c0,0-0.1,0.1-0.1,0.1c-0.4,0-0.8,0.1-1.1,0.1c0.2-0.1,0.3-0.1,0.5-0.2c-0.2-0.1-0.5-0.2-0.7-0.4\r c0,0,0-0.1,0-0.1c0.1,0,0.3,0,0.4,0c0.5,0.1,1,0.2,1.5,0.1c0.1,0,0.2-0.1,0.2,0.1c0.1,0,0.2,0,0.2,0c0.3-0.2,0.6-0.2,0.9-0.1\r c0.4,0.1,0.7,0.2,1.1,0.3c0.1,0,0.2,0.1,0.2,0.2c0.2,0.4,0.5,0.3,0.8,0.3c0.3,0,0.5-0.1,0.8-0.1c0.6-0.1,1.1,0,1.6,0.4\r c0.1,0.1,0.2,0.2,0.3,0.3c0.5,0.5,1.1,1,1.7,1.3c0.8,0.4,1.4,1,2.1,1.5c0.3,0.2,0.7,0.5,1,0.8c0.6,0.6,1,1.3,1,2.3\r c0,0.3,0.1,0.6,0.1,1c-0.2-0.3-0.3-0.5-0.4-0.7c-0.1-0.2-0.3-0.4-0.4-0.6c-0.3-0.3-0.6-0.5-0.9-0.8c0,0.1-0.1,0.4-0.2,0.5\r c-0.1,0.1-0.4,0-0.7,0c-0.1,0.2,0.1,0.7-0.5,0.7c0.2,0.2,0.4,0.2,0.5,0.4c0.2,0.2,0.5,0.5,0.7,0.7c0.2,0.1,0.4,0.2,0.6,0.3\r c0.1,0.1,0.3,0.2,0.4,0.3c0.3,0.3,0.7,0.2,0.9-0.3c0.4,0.4,0.8,0.7,1.1,1c-0.2,0-0.4,0-0.6,0.1c-0.1,0-0.2,0.1-0.2,0.1\r c0,0.4-0.4,0.5-0.7,0.6c-0.2,0.1-0.4,0.2-0.2,0.5c0,0,0,0.1,0,0.2c-0.1,0.2,0.1,0.6,0.3,0.7c0.3,0.1,0.5,0.3,0.6,0.6\r c0,0.1,0.1,0.1,0.2,0.1c0.2,0.1,0.4,0.1,0.6,0.1c0.1,0,0.3-0.1,0.5-0.2c-0.1,0.4-0.2,0.8-0.3,1.2c-0.1,0.3-0.2,0.6-0.3,0.8\r c-0.1,0.3-0.3,0.6-0.5,0.9c-0.7,0.6-1.2,1.4-1.8,2.1c-0.3,0.3-0.7,0.7-1,1c-0.6,0.5-1.2,0.9-1.8,1.3c-0.3,0.2-0.5,0.3-0.8,0.4\r c-0.5,0.2-0.9,0.5-1.4,0.7c-0.7,0.2-1.5,0.4-2.3,0.6c-0.2,0.1-0.4,0.2-0.7,0.2c-0.5,0.1-1,0.1-1.4,0.2c-0.5,0.1-0.9,0.3-1.4,0.4\r c-0.4,0.1-0.9,0.2-1.3,0.3c-0.2,0-0.3,0-0.4-0.2c0-0.1-0.2-0.2-0.3-0.2c-0.1-0.1-0.3-0.1-0.4-0.1c-0.2-0.1-0.4-0.2-0.4-0.4\r c0-0.2-0.1-0.4-0.4-0.4c-0.9,0-1.5-0.6-2.2-1.1c-0.1-0.1-0.3-0.2-0.4-0.3c-0.1-0.1-0.2-0.2-0.3-0.3c-0.2,0.2-0.2,0.3,0.1,0.5\r c0.5,0.3,1,0.7,1.5,1c0.1,0.1,0.2,0.2,0.2,0.3c0,0-0.1,0.1-0.2,0.2c-0.2,0.1-0.4,0.1-0.6,0.2c-0.2,0.1-0.2,0.2-0.1,0.3\r c0,0,0.1,0.1,0.1,0.1c0,0.1,0,0.1,0,0.2c0,0-0.1,0.1-0.2,0C22.3,32.5,22.2,32.4,22.1,32.4z M37.3,21.8c0,0,0.1,0,0.1,0\r c0.2-0.4,0.3-0.9,0.5-1.3c0,0,0.1,0,0.1,0c0,0.1,0.1,0.3,0.1,0.4c-0.2,0.7-0.4,1.3-1,1.7c-0.1,0.1-0.2,0.2-0.2,0.4\r c-0.1,0.2,0.1,0.3,0.2,0.3c0.1,0,0.2-0.1,0.3-0.2c0.1-0.8,0.6-1.3,1-2c0.2-0.3,0.1-0.6-0.2-0.7c-0.3-0.2-0.5-0.2-0.9-0.1\r C37.5,20.8,37.1,21.3,37.3,21.8z M36,19.5c0.3-0.4,0.4-0.4,1-0.5c0.1,0,0.2-0.1,0.2-0.1c0-0.2-0.1-0.4-0.1-0.6\r c-0.1,0-0.3,0.1-0.4,0.1c-0.1,0-0.1,0.1-0.1,0.1c-0.2,0.2-0.4,0.5-0.6,0.8c-0.1,0.2-0.2,0.4-0.3,0.7c0,0.1,0.1,0.2,0.2,0.2\r c0.2,0,0.3,0,0.5,0c0.2-0.1,0.4-0.3,0.6,0c0.2-0.5,0.2-0.5-0.3-0.6C36.4,19.6,36.2,19.6,36,19.5z M36.6,13.9\r C36.6,13.8,36.7,13.8,36.6,13.9c-0.2-0.3-0.5-0.5-0.9-0.7c-0.4-0.3-0.9-0.6-1.4-0.6c-0.3,0-0.4,0-0.4,0.3c0,0.1,0.1,0.2,0.2,0.3\r c0.2,0.1,0.4,0.2,0.6,0.3c0.2,0.1,0.4,0.1,0.6,0c0.1,0,0.2,0,0.3,0C36,13.5,36.3,13.7,36.6,13.9z M39.8,19.6\r c-0.1-0.1-0.1-0.2-0.1-0.2c-0.3-0.1-0.7-0.1-1-0.2c0,0-0.1,0.2-0.1,0.2c0.1,0.3,0.2,0.7,0.1,1c0,0,0.1,0.2,0.1,0.2\r c0.3,0,0.5-0.1,0.5-0.4C39.3,19.9,39.4,19.6,39.8,19.6z M24,30.8c0-0.1,0-0.1,0-0.1c-0.5-0.6-1.1-1.1-1.6-1.7\r c-0.1-0.1-0.2-0.1-0.4-0.2c0,0.1,0.1,0.3,0.1,0.4c0,0,0,0.1,0.1,0.1c0.5,0.5,1,0.9,1.5,1.4C23.7,30.7,23.8,30.7,24,30.8z\r M33.2,11.6c-0.2-0.6-1.1-0.6-1.7-0.1c0.3,0.1,0.5,0.2,0.7,0.3C32.5,11.7,32.8,11.6,33.2,11.6z M31.4,23.9c0.3,0.3,0.6,0.5,1,0.3\r c0.2-0.1,0.5-0.1,0.8-0.2c0.2-0.1,0.3-0.2,0.3-0.4c-0.1,0-0.1,0-0.1,0c-0.4,0.1-0.9,0.3-1.3,0.2C31.7,23.8,31.6,23.9,31.4,23.9z\r M38.8,21.1c0,0.1,0,0.1,0,0.2c0,0.3,0,0.5-0.2,0.8c-0.2,0.3-0.4,0.6-0.5,0.9c-0.1,0.2-0.1,0.4-0.2,0.6c0.1,0,0.1,0,0.2,0.1\r c0.1-0.2,0.3-0.4,0.4-0.7c0.2-0.5,0.4-0.9,0.6-1.4C38.9,21.3,38.9,21.2,38.8,21.1z M38.1,14.9c0,0.3,0,0.5,0.3,0.5\r c0.2,0,0.2,0.1,0.2,0.3c0,0.3,0.1,0.3,0.3,0.2c0-0.2-0.1-0.3,0-0.4c0-0.2,0-0.3-0.2-0.4C38.5,15.1,38.3,15,38.1,14.9z M36.6,18\r c0,0,0-0.1-0.1-0.1c0,0-0.1,0-0.2,0c-0.2,0.2-0.4,0.3-0.7,0.2c-0.1,0-0.2,0.1-0.2,0.2c0,0.1,0,0.2,0,0.3c0.1,0,0.2,0,0.3-0.1\r c0.2-0.1,0.4-0.2,0.6-0.2C36.6,18.3,36.6,18.2,36.6,18z M36.5,14.3c-0.4-0.1-0.7-0.1-1-0.2c0,0,0,0.1,0,0.1\r c0.1,0.1,0.1,0.1,0.2,0.2C36,14.8,36,14.8,36.5,14.3z M36.9,22.7c-0.1,0-0.3,0-0.4,0c-0.1,0-0.2,0.1-0.2,0.1\r c-0.1,0.1-0.1,0.2-0.1,0.4c0.1,0,0.2,0.1,0.3,0C36.8,23.1,36.8,22.9,36.9,22.7z M33.7,12.9c0-0.3-0.2-0.5-0.5-0.6\r c-0.1,0-0.2,0-0.3,0c0.1,0.1,0.1,0.2,0.2,0.3C33.3,12.7,33.5,12.8,33.7,12.9z M29.6,24c-0.1,0.1-0.2,0.2-0.3,0.3\r c0.2,0.1,0.3,0.2,0.4,0.3c0.1-0.1,0.2-0.2,0.3-0.3C29.9,24.2,29.7,24.1,29.6,24z M38.3,24.1C38.3,24.1,38.3,24,38.3,24.1\r c-0.2-0.1-0.4-0.2-0.6-0.2c-0.1,0-0.2,0.1-0.3,0.1c0.1,0.1,0.2,0.1,0.3,0.1C37.9,24.1,38.1,24.1,38.3,24.1z M33.4,13.5\r c0,0,0-0.1,0.1-0.1c-0.2-0.1-0.4-0.2-0.6-0.3c0,0,0,0.1-0.1,0.1C32.9,13.4,33.1,13.6,33.4,13.5z M37.3,15.5c0.1,0,0.1,0,0.2,0.1\r c0-0.1,0.1-0.3,0.1-0.4c0,0-0.1,0-0.2-0.1C37.4,15.3,37.3,15.4,37.3,15.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M14.4,15.1c-0.1,0.4-0.3,0.7-0.4,1.1c0,0,0,0.1,0.1,0.2c0.1-0.2,0.2-0.3,0.3-0.5c0,0,0.1,0.1,0.1,0.1\r c0,0.3-0.1,0.5-0.2,0.7c0,0.1,0,0.2,0,0.3c0.1,0,0.2,0,0.3,0c0,0,0,0,0,0c-0.2,0.1-0.4,0.3-0.7,0.4c-0.8,0.2-1.1,0.8-1.3,1.5\r c-0.1,0.2,0,0.5,0,0.7c0,0.2,0.1,0.3-0.2,0.4c0-0.3-0.1-0.6-0.1-0.9c0,0-0.1,0-0.1,0c-0.1,0.2-0.2,0.4-0.3,0.6\r c-0.1,0.4-0.3,0.7-0.7,0.8c-0.2,0-0.3,0.2-0.4,0.3c-0.2,0.3-0.4,0.7-0.6,1c-0.1-0.4-0.2-0.8-0.3-1.2c0,0,0,0-0.1,0\r c-0.1,0.3-0.3,0.7-0.5,1c-0.1-0.1-0.1-0.1-0.2-0.2c0,0,0,0.1-0.1,0.1c-0.3,0.5-0.5,1-0.4,1.6c0.1,0.4,0,0.8,0,1.2\r c0,0.1,0,0.2,0,0.3c0.5-0.1,0.6-0.5,0.6-0.9c0,0,0.1,0,0.1,0c0,0.1,0.1,0.2,0.1,0.4c0,0.2-0.1,0.5-0.1,0.7c0,0.3-0.1,0.4-0.4,0.3\r c-0.1,0-0.3,0.1-0.5,0.1c-0.1-0.3-0.3-0.5,0.1-0.8c-0.3-0.1-0.3-0.2-0.2-0.4c0.2-0.3,0.2-0.6,0.1-0.9c-0.1-0.7,0-1.4,0.5-2.1\r c0.4-0.5,0.6-1.1,0.6-1.7c0-0.4,0.3-0.8,0.6-1.1c0.2-0.2,0.3-0.4,0.4-0.7c0.1-0.5,0.2-0.9,0.6-1.2c0.2-0.2,0.4-0.4,0.6-0.5\r c0,0,0.1-0.1,0.1-0.1c-0.1-0.3,0.2-0.6,0.2-0.9c0-0.1,0.1-0.2,0.2-0.3c0.2-0.3,0.4-0.6,0.6-0.9c0.1-0.1,0.1-0.2,0.3-0.2\r c0.1,0,0.2-0.2,0.3-0.3c0.1-0.1,0.1-0.2,0.2-0.3c0,0,0.1,0,0.2-0.1c0,0.1,0,0.1,0,0.2c-0.1,0.2-0.1,0.5-0.4,0.6\r c0,0-0.1,0.1-0.1,0.2c-0.1,0.1-0.1,0.3-0.2,0.4c-0.2,0.3-0.3,0.3-0.4,0c-0.3,0.3-0.3,0.6-0.1,1c0.3-0.1,0.5-0.2,0.6-0.5\r c0.1-0.2,0.3-0.4,0.4-0.6c0,0,0-0.1,0-0.1c0-0.5,0.3-0.8,0.6-1.1c-0.1,0.5-0.2,1.1-0.4,1.6c0,0.2-0.2,0.4-0.4,0.4\r c-0.5,0.2-0.6,0.6-0.7,1c-0.1,0.4-0.1,0.8-0.3,1.2c-0.1,0.4-0.5,0.6-0.8,0.7c-0.3,0.2-0.6,0.4-0.7,0.8c0.2,0,0.4,0,0.6,0\r c-0.3,0.6-1,0.8-1.2,1.4c0.1,0,0.1,0.1,0.2,0.1c0,0,0.1,0,0.1,0c0.4-0.5,0.8-1,1.2-1.5c0,0,0.1-0.1,0.1-0.2c0-0.5,0.3-0.7,0.6-1\r c0.2-0.2,0.3-0.3,0.5-0.5c0,0,0.1-0.1,0.1-0.1c0.4-0.1,0.3-0.4,0.4-0.7c0-0.3,0-0.6,0.1-0.9C13.8,15.1,14,15,14.4,15.1z M11.3,16.6\r C11.2,16.6,11.2,16.6,11.3,16.6c-0.3,0.6-0.4,1.2-0.6,1.9C11.4,18,11.1,17.3,11.3,16.6z M9.6,19.6c0,0,0.1,0,0.1,0.1\r c0.2-0.3,0.4-0.6,0.5-0.9c0,0-0.1,0-0.1-0.1C10,19,9.8,19.3,9.6,19.6z M12,16.1c0,0-0.1,0-0.1-0.1c-0.1,0.3-0.2,0.6-0.4,0.8\r c0,0,0.1,0,0.1,0.1C11.8,16.7,11.9,16.4,12,16.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M15.6,31.6c0.4,0.1,0.6,0.1,0.9,0.1c0.1-0.6,0.5-0.8,1-0.5c0.2,0.1,0.3,0.2,0.5,0.3c0.3,0.2,0.5,0.4,0.5,0.8\r c0.7-0.2,1.1,0.4,1.6,0.7c0,0,0,0.2-0.1,0.3c-0.3,0.3-0.7,0.4-1.1,0.4c-0.4,0-0.8,0-1.2,0.1c-0.1,0-0.3,0.1-0.4,0.2\r c-0.2,0.2-0.3,0.4-0.6,0.5c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.1-0.4,0.1-0.6,0.2c0,0,0-0.1,0-0.1c0.2-0.1,0.5-0.2,0.7-0.4\r c0,0,0-0.1-0.1-0.1c-0.1,0-0.1,0.1-0.2,0.1c-0.1,0-0.2,0.1-0.3,0.1c0-0.1,0-0.2-0.1-0.2c-0.1-0.1-0.3-0.3-0.4-0.4\r c-0.1-0.1-0.3-0.1-0.5-0.2c0.1-0.1,0.2-0.3,0.3-0.4c-0.1-0.2-0.6-0.1-0.6-0.6c0.2,0.1,0.3,0.2,0.5,0.3c0.5,0.3,1.1,0.2,1.2-0.4\r c0-0.1,0-0.2-0.1-0.3C15.9,32.4,15.8,32,15.6,31.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M32,17.7c-0.3-0.1-0.5,0-0.8,0.2c-0.1,0-0.3-0.1-0.4-0.2c-0.1-0.1-0.1-0.3,0-0.4c0.3-0.4,0.7-0.7,1.1-1.1\r c0.1-0.1,0.3-0.1,0.4,0c0.2,0.2,0.3,0.4,0.5,0.6c0,0,0,0.1,0,0.1C32.7,17.2,32.2,17.7,32,17.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M28.8,16.8c-0.1,0.3-0.2,0.5-0.2,0.8c0,0.3,0.2,0.6,0.3,0.8c0.2,0.3,0.3,0.7,0.2,1.1c-0.1-0.2-0.1-0.4-0.2-0.5\r c-0.1-0.1-0.2-0.2-0.3-0.3c-0.5-0.1-0.9-0.5-1-1c0-0.3,0.1-0.5,0.4-0.6C28.2,17.1,28.5,17,28.8,16.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M15.6,22.9c0-0.1,0-0.3,0-0.4c0.1-0.7,0.3-1.5,0.5-2.2c0.1-0.4,0.3-0.8,0.5-1.1c0.4-0.5,0.6-1.1,0.7-1.7\r c0.1-0.4,0.3-0.7,0.6-0.8c-0.8,2.1-1.8,4-2.1,6.3C15.7,23,15.7,23,15.6,22.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M18.7,11c-0.2,0.1-0.4,0.3-0.6,0.4c0,0-0.1-0.1-0.2-0.1c0,0.1,0,0.3-0.1,0.4c0.2,0,0.4,0.1,0.5,0.1\r c0,0,0,0.1,0,0.1c-0.4,0-0.7,0.1-1.1,0.1c-0.1,0-0.2,0.1-0.3,0.2c0,0,0,0.1,0,0.1c-0.1,0.1-0.3,0.2-0.4,0.3\r c-0.1-0.1-0.2-0.3-0.2-0.4c0-0.5,0.2-0.7,0.7-0.7c0.4,0,0.7,0,1-0.3C18.1,11,18.4,11,18.7,11C18.6,11,18.7,11,18.7,11z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M25.1,23.9c0-0.2-0.1-0.4-0.1-0.6c-0.1-1,0.2-1.9,0.7-2.7c0.1-0.1,0.1-0.3,0.2-0.3c0.1-0.1,0.2-0.1,0.3-0.1\r c0,0.1,0.1,0.2,0.1,0.3c0,0.1,0,0.1-0.1,0.2c-0.6,1-0.9,2.1-0.9,3.3C25.2,23.9,25.2,23.9,25.1,23.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M30.5,21.1c-0.4,0.2-0.7,0.2-1.1,0.1c-0.3-0.1-0.6,0.1-0.9,0.1c-0.2,0-0.3,0.1-0.5,0.1c-0.1,0-0.2-0.1-0.2-0.1\r c0,0,0.1-0.2,0.1-0.2c0.4,0,0.6-0.3,0.9-0.4C29.5,20.6,30,20.6,30.5,21.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M28.8,13.6c0.2-0.1,0.4-0.2,0.6-0.2c0,0,0,0.1,0,0.1c0.1,0.2,0.2,0.4,0.4,0.5c0.6,0.6,1.2,1.1,2,1.3\r c0.3,0.1,0.5,0.3,0.6,0.6c-0.7-0.3-1.3-0.6-2-1c-0.2-0.1-0.4-0.3-0.5-0.5c-0.2-0.4-0.5-0.6-0.9-0.7c0,0-0.1-0.1-0.1-0.1\r C28.8,13.6,28.8,13.6,28.8,13.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M21.5,13.4c0.2-0.3,0.5-0.6,0.7-0.8l0,0c0.4-0.4,0.3-0.9,0.3-1.3c-0.1,0-0.2,0-0.3,0.1c0-0.1,0-0.2,0-0.2\r c0.4,0,0.3-0.3,0.4-0.5c0,0,0,0,0.1-0.1c0,0.1,0.1,0.2,0.1,0.3c0,0.2,0,0.4,0,0.5c0.1,0.5-0.2,0.9-0.5,1.3\r c-0.1,0.1-0.1,0.2-0.2,0.3c0.4,0.1,0.7,0.2,1.1,0.3c-0.2,0.2-0.4,0.3-0.6,0.2C22.3,13.1,21.9,13.1,21.5,13.4L21.5,13.4z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M32,19.2c-0.2-0.1-0.3-0.2-0.4-0.3c0-0.1,0-0.3,0.1-0.4c0.1-0.2,0.3-0.4,0.5-0.6c0,0,0.1-0.1,0.2-0.1\r c0,0,0.1,0,0.1,0.1c0.5,0.2,0.6,0.4,0.2,0.8C32.5,18.9,32.3,19,32,19.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M23.6,23c0.1,0.2,0.2,0.5,0.2,0.8c0,0.3-0.3,0.4-0.5,0.4c-0.3,0-0.5,0-0.7-0.2c-0.1-0.1,0.1-0.4,0.3-0.6\r C23.1,23.3,23.3,23.2,23.6,23z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M19,12.4c0.2-0.1,0.4-0.1,0.6-0.2c0.3,0,0.5-0.1,0.8-0.1c0.1,0,0.2,0,0.3,0.1c0.1,0,0.3,0.1,0.4,0.1\r c0.1,0,0.2,0.1,0.2,0.1c0,0.1,0,0.2-0.1,0.2c-0.2,0.1-0.4,0.2-0.6,0c-0.2-0.2-0.4-0.2-0.6,0c-0.2,0.1-0.4,0.2-0.4-0.2\r c0-0.1-0.1-0.1-0.2-0.1C19.3,12.4,19.2,12.4,19,12.4C19.1,12.4,19,12.4,19,12.4z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M14.8,15.6c0-0.2-0.1-0.4,0-0.5c0.2-0.4,0.5-0.8,0.7-1.1c0.1-0.2,0.3-0.4,0.5-0.6\r C16.2,13.8,15.7,14.7,14.8,15.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M19.7,18.9c0.2,0.2,0.2,1.3,0.1,2.4C19.5,20.8,19.4,19.4,19.7,18.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M21.6,10.5c0.1,0.5,0.1,0.9-0.4,1.1c0.1-0.2,0.2-0.4,0.3-0.7c-0.4,0.1-0.8,0.1-1.2-0.2\r C20.9,10.6,21.3,10.6,21.6,10.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M16.7,13.7c-0.2,0.5-1.8,2.6-2,2.6c0-0.3,0.1-0.6,0.4-0.7c0.1,0,0.1-0.1,0.2-0.1c0.4-0.5,0.8-1.1,1.2-1.6\r C16.6,13.8,16.6,13.8,16.7,13.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M13.7,30.8c-0.2-0.1-0.5,0-0.6-0.3c0,0-0.1-0.1-0.2-0.1c-0.1-0.1-0.1-0.2-0.1-0.3c0-0.1,0.1-0.2,0.1-0.2\r c0.1,0,0.2,0,0.3,0.1c0.2,0.1,0.4,0.3,0.5,0.5c0.1,0.1,0.1,0.2,0.2,0.3C13.8,30.8,13.8,30.8,13.7,30.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M23.6,13.2c0.1-0.6,0.1-1.2,0.2-1.7c0.2,0.1,0.4,0.1,0.6,0.2c-0.4,0.3-0.3,0.7-0.3,1.1\r C24,13,23.9,13.1,23.6,13.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M29.2,16.8c0.4,0.3,0.5,0.7,0.4,1c0,0.1-0.1,0.2-0.1,0.2c-0.1,0-0.1-0.1-0.2-0.1c-0.1-0.1-0.1-0.2-0.2-0.2\r C28.9,17.3,28.9,17.1,29.2,16.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M9.3,21.7c0.1,0.2,0.2,0.3,0.3,0.4c0,0.1,0,0.3,0,0.3c-0.2,0.2-0.4,0.4-0.6,0.5C8.8,22.8,9,22.1,9.3,21.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M13.7,20.1c0.1-0.4,0.3-0.6,0.6-0.9c0.1-0.1,0.3-0.2,0.4-0.4c0.2-0.3,0.4-0.5,0.5-0.8c0.1,0.2,0,0.8-0.3,0.9\r c-0.5,0.3-0.9,0.5-1.1,1.1C13.8,20.1,13.7,20.1,13.7,20.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M14.1,18.3c0.1-0.6,1.1-1.5,1.6-1.4C14.9,17.1,14.7,17.9,14.1,18.3z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M20.2,11.7c-0.2,0-0.4,0-0.6,0c-0.1,0-0.2-0.2-0.2-0.3c0.1-0.1,0.2-0.3,0.4-0.3c0.1-0.1,0.3,0,0.4,0\r c0,0.1,0,0.3,0,0.5C20.1,11.6,20.2,11.6,20.2,11.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M32.9,19.7c0.1-0.2,0.2-0.4,0.3-0.7c0,0-0.1-0.1-0.2-0.1c0.1-0.1,0.1-0.1,0.2-0.1c0.1,0,0.2,0,0.3,0\r c0,0.2,0.1,0.4,0,0.5C33.5,19.5,33.4,19.8,32.9,19.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M22.8,16.9c-0.7,0.4-1.6-0.1-1.9-0.7C21.4,16.5,22,16.9,22.8,16.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M10.1,25.8c0.6,0.5,0.6,0.5,1.4,0.1c0,0,0.1,0,0.1,0c-0.1,0.2-0.2,0.4-0.4,0.6c0,0.1-0.2,0.1-0.3,0\r c-0.2-0.1-0.5-0.2-0.7-0.4C10,26.1,10,26,10.1,25.8C10,25.9,10,25.9,10.1,25.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M17,16.6c-0.3,0.3-0.6,0.6-0.9,0.9C16,17.2,16,17.1,16,17c0.2-0.1,0.3-0.3,0.4-0.3c0.2-0.1,0.4-0.2,0.5-0.3\r C17,16.5,17,16.5,17,16.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M22.2,12.5c-0.1,0.1-0.2,0.2-0.3,0.3c-0.1,0-0.2,0-0.3,0c0-0.1,0-0.2,0-0.3c0.2-0.2,0.4-0.4,0.6-0.5\r c0,0,0.1,0,0.1,0.1C22.3,12.2,22.3,12.4,22.2,12.5L22.2,12.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M13.2,29.8c-0.1-0.1-0.2-0.3-0.1-0.4c0-0.1,0.2-0.2,0.3-0.4c0.1,0.1,0.2,0.2,0.2,0.2c0,0.2-0.2,0.3-0.2,0.5\r C13.3,29.8,13.2,29.8,13.2,29.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M18.7,12.6c-0.3,0.4-0.6,0.8-1,1.3C17.7,13.5,18,13.1,18.7,12.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M13.2,21.9c0.1-0.5,0.2-1,0.3-1.6C13.6,20.7,13.4,21.8,13.2,21.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M10,23.4c-0.2,0.2-0.3,0.3-0.4,0.4c0-0.1-0.1-0.2-0.1-0.2c0.1-0.2,0.2-0.3,0.3-0.4C9.8,23.2,9.9,23.3,10,23.4z\r " }),
	                            _react2.default.createElement("path", { className: "st0", d: "M21.5,13.4c-0.2,0.2-0.4,0.2-0.8,0.2c0.2-0.2,0.3-0.3,0.4-0.5C21.3,13.1,21.4,13.3,21.5,13.4L21.5,13.4z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M10.5,24.8c-0.2,0.2-0.4,0.3-0.6,0.5c0-0.2,0-0.4-0.1-0.7C10.1,24.7,10.2,24.8,10.5,24.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M33.3,16.6c0-0.3,0-0.6,0-0.9C33.6,15.9,33.6,16.3,33.3,16.6z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M21.7,19.3c0.1-0.3,0.3-0.5,0.4-0.8C22.2,18.8,22,19.2,21.7,19.3C21.7,19.3,21.7,19.3,21.7,19.3z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M11.2,24.1c0,0.4,0,0.5-0.6,0.4C10.7,24.3,10.7,24.3,11.2,24.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M24.7,9.8c0.4-0.1,0.7,0.1,1,0.3c0,0,0,0.1,0,0.1C25.3,10,25,9.9,24.7,9.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M16.4,13.7c-0.1-0.2-0.1-0.4-0.2-0.6c0,0,0.1-0.1,0.1-0.1c0.1,0,0.1,0,0.2,0.1c0.1,0.2,0.1,0.4,0,0.6\r C16.5,13.7,16.4,13.7,16.4,13.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M21.2,16.2c0.1-0.4,0.3-0.8,0.4-1.3C21.7,15.3,21.5,15.9,21.2,16.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M24.8,26.1c-0.2-0.2-0.3-0.4-0.2-0.6c0-0.1,0.1-0.1,0.2-0.2c0,0.1,0.1,0.1,0.1,0.2\r C24.9,25.8,24.9,25.9,24.8,26.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M29.1,14.8c0,0.3-0.1,0.5-0.1,0.8c-0.1,0-0.1,0-0.2,0c0-0.3,0.1-0.5,0.1-0.8C28.9,14.7,29,14.8,29.1,14.8z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M29.4,18.9c-0.2-0.3-0.4-0.6-0.6-0.9c0,0,0.1,0,0.1-0.1c0.2,0.3,0.4,0.6,0.6,0.9\r C29.5,18.8,29.5,18.8,29.4,18.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M15.2,13.1c-0.2-0.3-0.1-0.5,0.2-0.8C15.3,12.6,15.2,12.9,15.2,13.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M35.1,15.7c0,0.4-0.4,0.4-0.6,0.6C34.6,16,34.7,15.9,35.1,15.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M12.7,27.5c-0.1-0.3,0.2-0.5,0.3-0.8c0,0,0.1,0,0.1,0C13,27,12.9,27.3,12.7,27.5\r C12.7,27.5,12.7,27.5,12.7,27.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M31.4,21.2c0.2-0.1,0.4-0.2,0.6-0.4C32.1,21.3,31.7,21.3,31.4,21.2C31.5,21.3,31.5,21.3,31.4,21.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M11.9,26.2c0.3,0.3,0.3,0.4,0,0.7C11.9,26.7,11.9,26.5,11.9,26.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M41.6,20.7c0,0.2,0,0.4,0.1,0.6C41.3,21.1,41.3,20.9,41.6,20.7z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M12.5,32.5c0.2,0.1,0.3,0.2,0.5,0.3c0,0,0,0.1,0,0.2c-0.1,0-0.1,0.1-0.2,0c-0.1-0.1-0.2-0.2-0.4-0.3\r C12.4,32.6,12.4,32.5,12.5,32.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M19.6,17.2c0,0.3,0,0.5,0,0.8C19.3,17.8,19.3,17.5,19.6,17.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M20.9,14c0.4,0.1,0.4,0.2,0.3,0.8C21,14.5,21,14.3,20.9,14z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M15.5,16.4c0.1-0.1,0.2-0.3,0.2-0.4c0,0,0.1,0,0.1,0.1c0,0.2,0,0.4-0.2,0.4C15.6,16.5,15.5,16.4,15.5,16.4z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M13,25c-0.1,0.1-0.2,0.2-0.2,0.2c0-0.1-0.1-0.1-0.1-0.2c0-0.1,0.1-0.1,0.2-0.2C12.9,24.8,13,24.9,13,25z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M23.3,32.9c0.1-0.1,0.2-0.2,0.3-0.2c0,0,0.1,0.1,0.1,0.1c-0.1,0.1-0.2,0.2-0.3,0.2\r C23.4,33,23.3,32.9,23.3,32.9z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M24,18.5c0,0.2-0.1,0.4-0.1,0.6c0,0-0.1,0-0.1,0c0-0.2,0.1-0.4,0.1-0.6C23.9,18.5,24,18.5,24,18.5z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M19.9,15.1c-0.1-0.2-0.1-0.4-0.2-0.5c0,0,0.1,0,0.1,0c0,0.2,0.1,0.4,0.1,0.5C20,15,20,15.1,19.9,15.1z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M23.6,22c0-0.2,0-0.4,0-0.6c0,0,0.1,0,0.1,0C23.7,21.6,23.7,21.8,23.6,22C23.6,22,23.6,22,23.6,22z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M8.2,26.2c0.1-0.1,0.2-0.2,0.2-0.3c0,0,0.1,0.1,0.1,0.1C8.4,26.2,8.3,26.3,8.2,26.2\r C8.2,26.3,8.2,26.3,8.2,26.2z" }),
	                            _react2.default.createElement("path", { className: "st0", d: "M23.4,12.7c0-0.1,0.1-0.3,0.1-0.4c0,0,0.1,0,0.1,0c0,0.1-0.1,0.3-0.1,0.4C23.5,12.7,23.4,12.7,23.4,12.7z" })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        "svg",
	                        { id: "HomeArowDwn", width: "50px", height: "50px", viewBox: "0 0 50 50" },
	                        _react2.default.createElement(
	                            "style",
	                            { type: "text/css" },
	                            ".st0{fill:none;stroke:#ffffff;stroke-miterlimit:10;}"
	                        ),
	                        _react2.default.createElement(
	                            "g",
	                            null,
	                            _react2.default.createElement("path", { className: "st0", d: "M2.5,2.2c0.1,0.4,22.3,46,22.3,46l22.7-46C33.1,14.5,18.1,14.9,2.5,2.2z" })
	                        )
	                    )
	                )
	            ),
	            _react2.default.createElement(_AsideHome2.default, null),
	            _react2.default.createElement(_NeuroNetwork2.default, null)
	        );
	    }
	});
	exports.default = Home;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactMotion = __webpack_require__(253);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var AsideHome = _react2.default.createClass({
	  displayName: 'AsideHome',
	  getInitialState: function getInitialState() {
	    return { open: false };
	  },
	  handleMouseDown: function handleMouseDown() {
	    this.setState({ open: !this.state.open });
	  },
	  handleTouchStart: function handleTouchStart(e) {
	    e.preventDefault();
	    this.handleMouseDown();
	  },
	  ParaEnt: function ParaEnt(el) {
	    var PTitle = document.getElementById("PageTitle");
	    var Para2 = document.getElementById("Para2");
	    var Para3 = document.getElementById("Para3");
	    var Para4 = document.getElementById("Para4");

	    PTitle.style.transition = "opacity 0.25s linear 1s, left 0.25s linear 1s";
	    Para2.style.transition = "opacity 0.25s linear 1.25s, left 0.25s linear 1.25s";
	    Para3.style.transition = "opacity 0.25s linear 1.5s, left 0.25s linear 1.5s";
	    Para4.style.transition = "opacity 0.25s linear 1.75s, left 0.25s linear 1.75s";

	    PTitle.style.opacity = "1";
	    PTitle.style.left = "0px";
	    Para2.style.opacity = "1";
	    Para2.style.left = "60px";
	    Para3.style.opacity = "1";
	    Para3.style.left = "25px";
	    Para4.style.opacity = "1";
	    Para4.style.left = "25px";
	  },
	  HomePic: function HomePic(el) {
	    var Hpic1 = document.getElementById("Pic1home");
	    var Hpic2 = document.getElementById("Pic2home");
	    var Hpic3 = document.getElementById("Pic3home");
	    Hpic1.style.transition = "opacity 2s linear 1.25s";
	    Hpic2.style.transition = "opacity 2s linear 1.5s";
	    Hpic3.style.transition = "opacity 2s linear 1.75s";

	    Hpic1.style.opacity = "1";
	    Hpic2.style.opacity = "1";
	    Hpic3.style.opacity = "1";
	  },
	  render: function render() {
	    var _this = this;

	    return _react2.default.createElement(
	      'div',
	      { id: 'Aside' },
	      _react2.default.createElement(
	        'div',
	        { id: 'HomeAsideBtn',
	          onMouseDown: function onMouseDown() {
	            _this.handleMouseDown();_this.ParaEnt("PageTitle,Para2,Para3,Para4");_this.HomePic("Pic1home,Pic2home,Pic3home");
	          },

	          onTouchStart: function onTouchStart() {
	            _this.handleTouchStart;
	          } },
	        _react2.default.createElement(
	          'div',
	          { id: 'LearnMoreArrow' },
	          'Learn More',
	          _react2.default.createElement('div', { id: 'topArrow' }),
	          _react2.default.createElement('div', { id: 'btmArrow' })
	        )
	      ),
	      _react2.default.createElement(
	        _reactMotion.Motion,
	        { style: { x: (0, _reactMotion.spring)(this.state.open ? 0 : 1900) } },
	        function (_ref) {
	          var x = _ref.x;
	          return (
	            // children is a callback which should accept the current value of
	            // `style`

	            _react2.default.createElement(
	              'div',
	              { id: 'HomeAsidePane', style: {
	                  WebkitTransform: 'translate3d(' + x + 'px, 0, 0)',
	                  transform: 'translate3d(' + x + 'px, 0, 0)'
	                } },
	              _react2.default.createElement(
	                'div',
	                { id: 'HomeAsidePaneWraper' },
	                _react2.default.createElement(
	                  'div',
	                  { id: 'PageTitle' },
	                  _react2.default.createElement(
	                    'h1',
	                    null,
	                    ' Our Missionnnn: '
	                  )
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Pic1home', alt: 'Radix Norm Buisness cards' },
	                  _react2.default.createElement('img', { src: './images/Business-Card-MockUp.png' })
	                ),
	                _react2.default.createElement(
	                  'svg',
	                  { id: 'MarkerO', viewBox: '0 0 50 50' },
	                  _react2.default.createElement(
	                    'style',
	                    null,
	                    '.st0{fill:none;stroke-miterlimit:10;stroke: #00ff00;}'
	                  ),
	                  _react2.default.createElement('circle', { className: 'st0', cx: '25', cy: '25', r: '18' })
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Pic2home', alt: 'Kerridge Website' },
	                  _react2.default.createElement('img', { src: './images/KerrBigWebSm.PNG' })
	                ),
	                _react2.default.createElement(
	                  'svg',
	                  { id: 'MarkerO2', viewBox: '0 0 50 50' },
	                  _react2.default.createElement(
	                    'style',
	                    null,
	                    '.st0{fill:none;stroke-miterlimit:10; stroke: #00ff00;}'
	                  ),
	                  _react2.default.createElement('circle', { className: 'st0', cx: '25', cy: '25', r: '18' })
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Para2' },
	                  _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Occipital Core Media is a boutique marketing and media design firm. Our goal is to create everything from rich interactive web sites to branding and marketing campaigns. '
	                  )
	                ),
	                _react2.default.createElement(
	                  'svg',
	                  { id: 'MarkerO3', viewBox: '0 0 50 50' },
	                  _react2.default.createElement(
	                    'style',
	                    null,
	                    '.st0{fill:none;stroke-miterlimit:10;}'
	                  ),
	                  _react2.default.createElement('circle', { className: 'st0', cx: '25', cy: '25', r: '18' })
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Pic3home', alt: 'Kerridge Website' },
	                  _react2.default.createElement('img', { src: './images/QCApp.jpg' })
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Para3' },
	                  _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Using traditional  and digital mixed media, we engage users on a personal level to create memorable experiences.'
	                  )
	                ),
	                _react2.default.createElement(
	                  'svg',
	                  { id: 'MarkerO4', viewBox: '0 0 50 50' },
	                  _react2.default.createElement(
	                    'style',
	                    null,
	                    '.st0{fill:none;stroke-miterlimit:10;stroke: #00ff00;}'
	                  ),
	                  _react2.default.createElement('circle', { className: 'st0', cx: '25', cy: '25', r: '18' })
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'Para4' },
	                  _react2.default.createElement(
	                    'h2',
	                    null,
	                    'We can create a range of custom software solutions that enhance productivity, streamline business workflows, and generate marketable customer feedback. If you want to be seen in a bold new light by your customer base, Occipital Core Media can help.'
	                  )
	                ),
	                _react2.default.createElement(
	                  'div',
	                  { id: 'CloseBtn',
	                    onMouseDown: function onMouseDown() {
	                      _this.handleMouseDown();
	                    },

	                    onTouchStart: function onTouchStart() {
	                      _this.handleTouchStart;
	                    } },
	                  _react2.default.createElement(
	                    'svg',
	                    { id: 'SVGclose', viewBox: '0 0 60 60' },
	                    _react2.default.createElement(
	                      'style',
	                      { type: 'text/css' },
	                      '.ClosX{fill:none;\n                  stroke-width:1.152;\n                  stroke-linecap:round;\n                  stroke-miterlimit:10;\n                  stroke: #fd9a2b;}'
	                    ),
	                    _react2.default.createElement('circle', { className: 'ClosX', cx: '30', cy: '30', r: '27.7' }),
	                    _react2.default.createElement('line', { className: 'ClosX', x1: '11.9', y1: '48.1', x2: '48.1', y2: '11.9' }),
	                    _react2.default.createElement('line', { className: 'ClosX', x1: '11.9', y1: '11.9', x2: '48.1', y2: '48.1' })
	                  )
	                )
	              )
	            )
	          );
	        }
	      )
	    );
	  }
	});

	exports.default = AsideHome;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Motion = __webpack_require__(254);

	exports.Motion = _interopRequire(_Motion);

	var _StaggeredMotion = __webpack_require__(265);

	exports.StaggeredMotion = _interopRequire(_StaggeredMotion);

	var _TransitionMotion = __webpack_require__(266);

	exports.TransitionMotion = _interopRequire(_TransitionMotion);

	var _spring = __webpack_require__(268);

	exports.spring = _interopRequire(_spring);

	var _presets = __webpack_require__(269);

	exports.presets = _interopRequire(_presets);

	var _stripStyle = __webpack_require__(256);

	exports.stripStyle = _interopRequire(_stripStyle);

	// deprecated, dummy warning function

	var _reorderKeys = __webpack_require__(270);

	exports.reorderKeys = _interopRequire(_reorderKeys);

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(255);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(256);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(257);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(258);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(259);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(261);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createReactClass = __webpack_require__(264);

	var _createReactClass2 = _interopRequireDefault(_createReactClass);

	var msPerFrame = 1000 / 60;

	var Motion = _createReactClass2['default']({
	  propTypes: {
	    // TOOD: warn against putting a config in here
	    defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),
	    style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,
	    children: _propTypes2['default'].func.isRequired,
	    onRest: _propTypes2['default'].func
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;

	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  },

	  wasAnimating: false,
	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyle: null,
	  // after checking for unreadPropStyle != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(destStyle) {
	    var dirty = false;
	    var _state = this.state;
	    var currentStyle = _state.currentStyle;
	    var currentVelocity = _state.currentVelocity;
	    var lastIdealStyle = _state.lastIdealStyle;
	    var lastIdealVelocity = _state.lastIdealVelocity;

	    for (var key in destStyle) {
	      if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	        continue;
	      }

	      var styleValue = destStyle[key];
	      if (typeof styleValue === 'number') {
	        if (!dirty) {
	          dirty = true;
	          currentStyle = _extends({}, currentStyle);
	          currentVelocity = _extends({}, currentVelocity);
	          lastIdealStyle = _extends({}, lastIdealStyle);
	          lastIdealVelocity = _extends({}, lastIdealVelocity);
	        }

	        currentStyle[key] = styleValue;
	        currentVelocity[key] = 0;
	        lastIdealStyle[key] = styleValue;
	        lastIdealVelocity[key] = 0;
	      }
	    }

	    if (dirty) {
	      this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	    }
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function (timestamp) {
	      // check if we need to animate in the first place
	      var propsStyle = _this.props.style;
	      if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	        if (_this.wasAnimating && _this.props.onRest) {
	          _this.props.onRest();
	        }

	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.wasAnimating = false;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      _this.wasAnimating = true;

	      var currentTime = timestamp || _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var newLastIdealStyle = {};
	      var newLastIdealVelocity = {};
	      var newCurrentStyle = {};
	      var newCurrentVelocity = {};

	      for (var key in propsStyle) {
	        if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
	          continue;
	        }

	        var styleValue = propsStyle[key];
	        if (typeof styleValue === 'number') {
	          newCurrentStyle[key] = styleValue;
	          newCurrentVelocity[key] = 0;
	          newLastIdealStyle[key] = styleValue;
	          newLastIdealVelocity[key] = 0;
	        } else {
	          var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	          var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	          for (var i = 0; i < framesToCatchUp; i++) {
	            var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            newLastIdealStyleValue = _stepper[0];
	            newLastIdealVelocityValue = _stepper[1];
	          }

	          var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	          var nextIdealX = _stepper2[0];
	          var nextIdealV = _stepper2[1];

	          newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	          newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	          newLastIdealStyle[key] = newLastIdealStyleValue;
	          newLastIdealVelocity[key] = newLastIdealVelocityValue;
	        }
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyle: newCurrentStyle,
	        currentVelocity: newCurrentVelocity,
	        lastIdealStyle: newLastIdealStyle,
	        lastIdealVelocity: newLastIdealVelocity
	      });

	      _this.unreadPropStyle = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }

	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = Motion;
	module.exports = exports['default'];

/***/ }),
/* 255 */
/***/ (function(module, exports) {

	

	// currently used to initiate the velocity style object to 0
	'use strict';

	exports.__esModule = true;
	exports['default'] = mapToZero;

	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ }),
/* 256 */
/***/ (function(module, exports) {

	
	// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by
	// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}

	'use strict';

	exports.__esModule = true;
	exports['default'] = stripStyle;

	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ }),
/* 257 */
/***/ (function(module, exports) {

	

	// stepper is used a lot. Saves allocation to return the same array wrapper.
	// This is fine and danger-free against mutations because the callsite
	// immediately destructures it and gets the numbers inside without passing the
	"use strict";

	exports.__esModule = true;
	exports["default"] = stepper;

	var reusedTuple = [0, 0];

	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2

	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);

	  // Damping, in kg / s
	  var Fdamper = -b * v;

	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;

	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;

	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }

	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}

	module.exports = exports["default"];
	// array reference around.

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(260)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}

	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function() {
	  root.requestAnimationFrame = raf
	  root.cancelAnimationFrame = caf
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	//# sourceMappingURL=performance-now.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 261 */
/***/ (function(module, exports) {

	

	// usage assumption: currentStyle values have already been rendered but it says
	// nothing of whether currentStyle is stale (see unreadPropStyle)
	'use strict';

	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;

	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }

	    if (currentVelocity[key] !== 0) {
	      return false;
	    }

	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports['default'];

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(31)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(263)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(10);
	var invariant = __webpack_require__(13);
	var ReactPropTypesSecret = __webpack_require__(32);

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var React = __webpack_require__(2);
	var factory = __webpack_require__(36);

	if (typeof React === 'undefined') {
	  throw Error(
	    'create-react-class could not find the React object. If you are using script tags, ' +
	      'make sure that React is being loaded before create-react-class.'
	  );
	}

	// Hack to grab NoopUpdateQueue from isomorphic React
	var ReactNoopUpdateQueue = new React.Component().updater;

	module.exports = factory(
	  React.Component,
	  React.isValidElement,
	  ReactNoopUpdateQueue
	);


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(255);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(256);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(257);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(258);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(259);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(261);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createReactClass = __webpack_require__(264);

	var _createReactClass2 = _interopRequireDefault(_createReactClass);

	var msPerFrame = 1000 / 60;

	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	var StaggeredMotion = _createReactClass2['default']({
	  propTypes: {
	    // TOOD: warn against putting a config in here
	    defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),
	    styles: _propTypes2['default'].func.isRequired,
	    children: _propTypes2['default'].func.isRequired
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;

	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  },

	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyles: null,
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {
	    var _state = this.state;
	    var currentStyles = _state.currentStyles;
	    var currentVelocities = _state.currentVelocities;
	    var lastIdealStyles = _state.lastIdealStyles;
	    var lastIdealVelocities = _state.lastIdealVelocities;

	    var someDirty = false;
	    for (var i = 0; i < unreadPropStyles.length; i++) {
	      var unreadPropStyle = unreadPropStyles[i];
	      var dirty = false;

	      for (var key in unreadPropStyle) {
	        if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	          continue;
	        }

	        var styleValue = unreadPropStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            someDirty = true;
	            currentStyles[i] = _extends({}, currentStyles[i]);
	            currentVelocities[i] = _extends({}, currentVelocities[i]);
	            lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	            lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	          }
	          currentStyles[i][key] = styleValue;
	          currentVelocities[i][key] = 0;
	          lastIdealStyles[i][key] = styleValue;
	          lastIdealVelocities[i][key] = 0;
	        }
	      }
	    }

	    if (someDirty) {
	      this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	    }
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function (timestamp) {
	      var destStyles = _this.props.styles(_this.state.lastIdealStyles);

	      // check if we need to animate in the first place
	      if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      var currentTime = timestamp || _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var newLastIdealStyles = [];
	      var newLastIdealVelocities = [];
	      var newCurrentStyles = [];
	      var newCurrentVelocities = [];

	      for (var i = 0; i < destStyles.length; i++) {
	        var destStyle = destStyles[i];
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};

	        for (var key in destStyle) {
	          if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	            continue;
	          }

	          var styleValue = destStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	            for (var j = 0; j < framesToCatchUp; j++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        newCurrentStyles[i] = newCurrentStyle;
	        newCurrentVelocities[i] = newCurrentVelocity;
	        newLastIdealStyles[i] = newLastIdealStyle;
	        newLastIdealVelocities[i] = newLastIdealVelocity;
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyles: newCurrentStyles,
	        currentVelocities: newCurrentVelocities,
	        lastIdealStyles: newLastIdealStyles,
	        lastIdealVelocities: newLastIdealVelocities
	      });

	      _this.unreadPropStyles = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(255);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(256);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(257);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _mergeDiff = __webpack_require__(267);

	var _mergeDiff2 = _interopRequireDefault(_mergeDiff);

	var _performanceNow = __webpack_require__(258);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(259);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(261);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createReactClass = __webpack_require__(264);

	var _createReactClass2 = _interopRequireDefault(_createReactClass);

	var msPerFrame = 1000 / 60;

	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  // Copy the value to a `const` so that Flow understands that the const won't
	  // change and will be non-nullable in the callback below.
	  var cUnreadPropStyles = unreadPropStyles;
	  if (cUnreadPropStyles == null) {
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    for (var j = 0; j < cUnreadPropStyles.length; j++) {
	      if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          key: cUnreadPropStyles[j].key,
	          data: cUnreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}

	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }

	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }

	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }

	  return true;
	}

	// core key merging logic

	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key

	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });

	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;

	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }

	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}

	var TransitionMotion = _createReactClass2['default']({
	  propTypes: {
	    defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	      key: _propTypes2['default'].string.isRequired,
	      data: _propTypes2['default'].any,
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired
	    })),
	    styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	      key: _propTypes2['default'].string.isRequired,
	      data: _propTypes2['default'].any,
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired
	    }))]).isRequired,
	    children: _propTypes2['default'].func.isRequired,
	    willEnter: _propTypes2['default'].func,
	    willLeave: _propTypes2['default'].func,
	    didLeave: _propTypes2['default'].func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      },
	      didLeave: function didLeave() {}
	    };
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;
	    var didLeave = _props.didLeave;

	    var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles;

	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });

	    var _mergeAndSync = mergeAndSync(
	    // Because this is an old-style createReactClass component, Flow doesn't
	    // understand that the willEnter and willLeave props have default values
	    // and will always be present.
	    willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);

	    var mergedPropsStyles = _mergeAndSync[0];
	    var currentStyles = _mergeAndSync[1];
	    var currentVelocities = _mergeAndSync[2];
	    var lastIdealStyles = _mergeAndSync[3];
	    var lastIdealVelocities = _mergeAndSync[4];
	    // oldLastIdealVelocities really

	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  },

	  unmounting: false,
	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyles: null,
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {
	    var _mergeAndSync2 = mergeAndSync(this.props.willEnter, this.props.willLeave, this.props.didLeave, this.state.mergedPropsStyles, unreadPropStyles, this.state.currentStyles, this.state.currentVelocities, this.state.lastIdealStyles, this.state.lastIdealVelocities);

	    var mergedPropsStyles = _mergeAndSync2[0];
	    var currentStyles = _mergeAndSync2[1];
	    var currentVelocities = _mergeAndSync2[2];
	    var lastIdealStyles = _mergeAndSync2[3];
	    var lastIdealVelocities = _mergeAndSync2[4];

	    for (var i = 0; i < unreadPropStyles.length; i++) {
	      var unreadPropStyle = unreadPropStyles[i].style;
	      var dirty = false;

	      for (var key in unreadPropStyle) {
	        if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	          continue;
	        }

	        var styleValue = unreadPropStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyles[i] = _extends({}, currentStyles[i]);
	            currentVelocities[i] = _extends({}, currentVelocities[i]);
	            lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	            lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            mergedPropsStyles[i] = {
	              key: mergedPropsStyles[i].key,
	              data: mergedPropsStyles[i].data,
	              style: _extends({}, mergedPropsStyles[i].style)
	            };
	          }
	          currentStyles[i][key] = styleValue;
	          currentVelocities[i][key] = 0;
	          lastIdealStyles[i][key] = styleValue;
	          lastIdealVelocities[i][key] = 0;
	          mergedPropsStyles[i].style[key] = styleValue;
	        }
	      }
	    }

	    // unlike the other 2 components, we can't detect staleness and optionally
	    // opt out of setState here. each style object's data might contain new
	    // stuff we're not/cannot compare
	    this.setState({
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      mergedPropsStyles: mergedPropsStyles,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities
	    });
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    if (this.unmounting) {
	      return;
	    }

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function (timestamp) {
	      // https://github.com/chenglou/react-motion/pull/420
	      // > if execution passes the conditional if (this.unmounting), then
	      // executes async defaultRaf and after that component unmounts and after
	      // that the callback of defaultRaf is called, then setState will be called
	      // on unmounted component.
	      if (_this.unmounting) {
	        return;
	      }

	      var propStyles = _this.props.styles;
	      var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;

	      // check if we need to animate in the first place
	      if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      var currentTime = timestamp || _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var _mergeAndSync3 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	      var newMergedPropsStyles = _mergeAndSync3[0];
	      var newCurrentStyles = _mergeAndSync3[1];
	      var newCurrentVelocities = _mergeAndSync3[2];
	      var newLastIdealStyles = _mergeAndSync3[3];
	      var newLastIdealVelocities = _mergeAndSync3[4];

	      for (var i = 0; i < newMergedPropsStyles.length; i++) {
	        var newMergedPropsStyle = newMergedPropsStyles[i].style;
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};

	        for (var key in newMergedPropsStyle) {
	          if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
	            continue;
	          }

	          var styleValue = newMergedPropsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = newLastIdealStyles[i][key];
	            var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	            for (var j = 0; j < framesToCatchUp; j++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        newLastIdealStyles[i] = newLastIdealStyle;
	        newLastIdealVelocities[i] = newLastIdealVelocity;
	        newCurrentStyles[i] = newCurrentStyle;
	        newCurrentVelocities[i] = newCurrentVelocity;
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyles: newCurrentStyles,
	        currentVelocities: newCurrentVelocities,
	        lastIdealStyles: newLastIdealStyles,
	        lastIdealVelocities: newLastIdealVelocities,
	        mergedPropsStyles: newMergedPropsStyles
	      });

	      _this.unreadPropStyles = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    var styles = props.styles;
	    if (typeof styles === 'function') {
	      this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = styles;
	    }

	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.unmounting = true;
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = TransitionMotion;
	module.exports = exports['default'];

	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function

	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives

/***/ }),
/* 267 */
/***/ (function(module, exports) {

	

	// core keys merging algorithm. If previous render's keys are [a, b], and the
	// next render's [c, b, d], what's the final merged keys and ordering?

	// - c and a must both be before b
	// - b before d
	// - ordering between a and c ambiguous

	// this reduces to merging two partially ordered lists (e.g. lists where not
	// every item has a definite ordering, like comparing a and c above). For the
	// ambiguous ordering we deterministically choose to place the next render's
	// item after the previous'; so c after a

	// this is called a topological sorting. Except the existing algorithms don't
	// work well with js bc of the amount of allocation, and isn't optimized for our
	// current use-case bc the runtime is linear in terms of edges (see wiki for
	// meaning), which is huge when two lists have many common elements
	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeDiff;

	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster

	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }

	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }

	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];

	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev

	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	          continue;
	        }

	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}

	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = spring;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presets = __webpack_require__(269);

	var _presets2 = _interopRequireDefault(_presets);

	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});

	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}

	module.exports = exports['default'];

/***/ }),
/* 269 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = reorderKeys;

	var hasWarned = false;

	function reorderKeys() {
	  if (process.env.NODE_ENV === 'development') {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _jquery = __webpack_require__(272);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactThreeRenderer = __webpack_require__(274);

	var _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrbitControls = __webpack_require__(399)(THREE);

	var NeuroNetwork = function (_Component) {
	    _inherits(NeuroNetwork, _Component);

	    function NeuroNetwork(props, context) {
	        _classCallCheck(this, NeuroNetwork);

	        var _this = _possibleConstructorReturn(this, (NeuroNetwork.__proto__ || Object.getPrototypeOf(NeuroNetwork)).call(this, props, context));

	        _this.state = { controls: {} };
	        return _this;
	    }

	    _createClass(NeuroNetwork, [{
	        key: 'GetControls',
	        value: function GetControls(camRef) {
	            var refRenderElement = document.getElementsByTagName("canvas")[0];
	            var controls = new OrbitControls(camRef, refRenderElement);
	            controls.autoRotate = true;
	            controls.autoRotateSpeed = 0.05;
	            return controls;
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.setState({ controls: this.GetControls(this.refs.camRef) });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _reactThreeRenderer2.default,
	                {
	                    mainCamera: 'camera',
	                    width: 1600 //{700} just designate a px value.  window.innerWidth
	                    , height: 1600 //{700}                            window.innerHeight 
	                    , onAnimate: this.state.controls.update
	                },
	                _react2.default.createElement(
	                    'scene',
	                    null,
	                    _react2.default.createElement('perspectiveCamera', {
	                        name: 'camera',
	                        lookAt: new THREE.Vector3(0, 0, 0),
	                        position: new THREE.Vector3(0, 0, 5),
	                        ref: 'camRef'
	                    }),
	                    _react2.default.createElement(
	                        'mesh',
	                        null,
	                        _react2.default.createElement('boxGeometry', {
	                            width: 1,
	                            height: 1,
	                            depth: 1 }),
	                        _react2.default.createElement('meshBasicMaterial', {
	                            wireframe: true,
	                            color: 0x00ff00

	                        })
	                    )
	                )
	            );
	        }
	    }]);

	    return NeuroNetwork;
	}(_react.Component);

	exports.default = NeuroNetwork;

	//https://github.com/benwinding/Test-react-three-renderer/blob/master/src/index.js

	//https://stackoverflow.com/questions/41248287/how-to-connect-threejs-to-react

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.2.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( ">tbody", elem )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with computed style
		var valueIsBorderBox,
			styles = getStyles( elem ),
			val = curCSS( elem, name, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if ( val === "auto" ) {
			val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var doc, docElem, rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( jQuery.isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.THREE = global.THREE || {})));
	}(this, (function (exports) { 'use strict';

		// Polyfills

		if ( Number.EPSILON === undefined ) {

			Number.EPSILON = Math.pow( 2, - 52 );

		}

		if ( Number.isInteger === undefined ) {

			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

			Number.isInteger = function ( value ) {

				return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

			};

		}

		//

		if ( Math.sign === undefined ) {

			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

			Math.sign = function ( x ) {

				return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

			};

		}

		if ( Function.prototype.name === undefined ) {

			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

			Object.defineProperty( Function.prototype, 'name', {

				get: function () {

					return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

				}

			} );

		}

		if ( Object.assign === undefined ) {

			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

			( function () {

				Object.assign = function ( target ) {

					'use strict';

					if ( target === undefined || target === null ) {

						throw new TypeError( 'Cannot convert undefined or null to object' );

					}

					var output = Object( target );

					for ( var index = 1; index < arguments.length; index ++ ) {

						var source = arguments[ index ];

						if ( source !== undefined && source !== null ) {

							for ( var nextKey in source ) {

								if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

									output[ nextKey ] = source[ nextKey ];

								}

							}

						}

					}

					return output;

				};

			} )();

		}

		/**
		 * https://github.com/mrdoob/eventdispatcher.js/
		 */

		function EventDispatcher() {}

		Object.assign( EventDispatcher.prototype, {

			addEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) this._listeners = {};

				var listeners = this._listeners;

				if ( listeners[ type ] === undefined ) {

					listeners[ type ] = [];

				}

				if ( listeners[ type ].indexOf( listener ) === - 1 ) {

					listeners[ type ].push( listener );

				}

			},

			hasEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) return false;

				var listeners = this._listeners;

				return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

			},

			removeEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) return;

				var listeners = this._listeners;
				var listenerArray = listeners[ type ];

				if ( listenerArray !== undefined ) {

					var index = listenerArray.indexOf( listener );

					if ( index !== - 1 ) {

						listenerArray.splice( index, 1 );

					}

				}

			},

			dispatchEvent: function ( event ) {

				if ( this._listeners === undefined ) return;

				var listeners = this._listeners;
				var listenerArray = listeners[ event.type ];

				if ( listenerArray !== undefined ) {

					event.target = this;

					var array = listenerArray.slice( 0 );

					for ( var i = 0, l = array.length; i < l; i ++ ) {

						array[ i ].call( this, event );

					}

				}

			}

		} );

		var REVISION = '86';
		var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
		var CullFaceNone = 0;
		var CullFaceBack = 1;
		var CullFaceFront = 2;
		var CullFaceFrontBack = 3;
		var FrontFaceDirectionCW = 0;
		var FrontFaceDirectionCCW = 1;
		var BasicShadowMap = 0;
		var PCFShadowMap = 1;
		var PCFSoftShadowMap = 2;
		var FrontSide = 0;
		var BackSide = 1;
		var DoubleSide = 2;
		var FlatShading = 1;
		var SmoothShading = 2;
		var NoColors = 0;
		var FaceColors = 1;
		var VertexColors = 2;
		var NoBlending = 0;
		var NormalBlending = 1;
		var AdditiveBlending = 2;
		var SubtractiveBlending = 3;
		var MultiplyBlending = 4;
		var CustomBlending = 5;
		var AddEquation = 100;
		var SubtractEquation = 101;
		var ReverseSubtractEquation = 102;
		var MinEquation = 103;
		var MaxEquation = 104;
		var ZeroFactor = 200;
		var OneFactor = 201;
		var SrcColorFactor = 202;
		var OneMinusSrcColorFactor = 203;
		var SrcAlphaFactor = 204;
		var OneMinusSrcAlphaFactor = 205;
		var DstAlphaFactor = 206;
		var OneMinusDstAlphaFactor = 207;
		var DstColorFactor = 208;
		var OneMinusDstColorFactor = 209;
		var SrcAlphaSaturateFactor = 210;
		var NeverDepth = 0;
		var AlwaysDepth = 1;
		var LessDepth = 2;
		var LessEqualDepth = 3;
		var EqualDepth = 4;
		var GreaterEqualDepth = 5;
		var GreaterDepth = 6;
		var NotEqualDepth = 7;
		var MultiplyOperation = 0;
		var MixOperation = 1;
		var AddOperation = 2;
		var NoToneMapping = 0;
		var LinearToneMapping = 1;
		var ReinhardToneMapping = 2;
		var Uncharted2ToneMapping = 3;
		var CineonToneMapping = 4;
		var UVMapping = 300;
		var CubeReflectionMapping = 301;
		var CubeRefractionMapping = 302;
		var EquirectangularReflectionMapping = 303;
		var EquirectangularRefractionMapping = 304;
		var SphericalReflectionMapping = 305;
		var CubeUVReflectionMapping = 306;
		var CubeUVRefractionMapping = 307;
		var RepeatWrapping = 1000;
		var ClampToEdgeWrapping = 1001;
		var MirroredRepeatWrapping = 1002;
		var NearestFilter = 1003;
		var NearestMipMapNearestFilter = 1004;
		var NearestMipMapLinearFilter = 1005;
		var LinearFilter = 1006;
		var LinearMipMapNearestFilter = 1007;
		var LinearMipMapLinearFilter = 1008;
		var UnsignedByteType = 1009;
		var ByteType = 1010;
		var ShortType = 1011;
		var UnsignedShortType = 1012;
		var IntType = 1013;
		var UnsignedIntType = 1014;
		var FloatType = 1015;
		var HalfFloatType = 1016;
		var UnsignedShort4444Type = 1017;
		var UnsignedShort5551Type = 1018;
		var UnsignedShort565Type = 1019;
		var UnsignedInt248Type = 1020;
		var AlphaFormat = 1021;
		var RGBFormat = 1022;
		var RGBAFormat = 1023;
		var LuminanceFormat = 1024;
		var LuminanceAlphaFormat = 1025;
		var RGBEFormat = RGBAFormat;
		var DepthFormat = 1026;
		var DepthStencilFormat = 1027;
		var RGB_S3TC_DXT1_Format = 2001;
		var RGBA_S3TC_DXT1_Format = 2002;
		var RGBA_S3TC_DXT3_Format = 2003;
		var RGBA_S3TC_DXT5_Format = 2004;
		var RGB_PVRTC_4BPPV1_Format = 2100;
		var RGB_PVRTC_2BPPV1_Format = 2101;
		var RGBA_PVRTC_4BPPV1_Format = 2102;
		var RGBA_PVRTC_2BPPV1_Format = 2103;
		var RGB_ETC1_Format = 2151;
		var LoopOnce = 2200;
		var LoopRepeat = 2201;
		var LoopPingPong = 2202;
		var InterpolateDiscrete = 2300;
		var InterpolateLinear = 2301;
		var InterpolateSmooth = 2302;
		var ZeroCurvatureEnding = 2400;
		var ZeroSlopeEnding = 2401;
		var WrapAroundEnding = 2402;
		var TrianglesDrawMode = 0;
		var TriangleStripDrawMode = 1;
		var TriangleFanDrawMode = 2;
		var LinearEncoding = 3000;
		var sRGBEncoding = 3001;
		var GammaEncoding = 3007;
		var RGBEEncoding = 3002;
		var LogLuvEncoding = 3003;
		var RGBM7Encoding = 3004;
		var RGBM16Encoding = 3005;
		var RGBDEncoding = 3006;
		var BasicDepthPacking = 3200;
		var RGBADepthPacking = 3201;

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		var _Math = {

			DEG2RAD: Math.PI / 180,
			RAD2DEG: 180 / Math.PI,

			generateUUID: function () {

				// http://www.broofa.com/Tools/Math.uuid.htm

				var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
				var uuid = new Array( 36 );
				var rnd = 0, r;

				return function generateUUID() {

					for ( var i = 0; i < 36; i ++ ) {

						if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

							uuid[ i ] = '-';

						} else if ( i === 14 ) {

							uuid[ i ] = '4';

						} else {

							if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
							r = rnd & 0xf;
							rnd = rnd >> 4;
							uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

						}

					}

					return uuid.join( '' );

				};

			}(),

			clamp: function ( value, min, max ) {

				return Math.max( min, Math.min( max, value ) );

			},

			// compute euclidian modulo of m % n
			// https://en.wikipedia.org/wiki/Modulo_operation

			euclideanModulo: function ( n, m ) {

				return ( ( n % m ) + m ) % m;

			},

			// Linear mapping from range <a1, a2> to range <b1, b2>

			mapLinear: function ( x, a1, a2, b1, b2 ) {

				return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

			},

			// https://en.wikipedia.org/wiki/Linear_interpolation

			lerp: function ( x, y, t ) {

				return ( 1 - t ) * x + t * y;

			},

			// http://en.wikipedia.org/wiki/Smoothstep

			smoothstep: function ( x, min, max ) {

				if ( x <= min ) return 0;
				if ( x >= max ) return 1;

				x = ( x - min ) / ( max - min );

				return x * x * ( 3 - 2 * x );

			},

			smootherstep: function ( x, min, max ) {

				if ( x <= min ) return 0;
				if ( x >= max ) return 1;

				x = ( x - min ) / ( max - min );

				return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

			},

			// Random integer from <low, high> interval

			randInt: function ( low, high ) {

				return low + Math.floor( Math.random() * ( high - low + 1 ) );

			},

			// Random float from <low, high> interval

			randFloat: function ( low, high ) {

				return low + Math.random() * ( high - low );

			},

			// Random float from <-range/2, range/2> interval

			randFloatSpread: function ( range ) {

				return range * ( 0.5 - Math.random() );

			},

			degToRad: function ( degrees ) {

				return degrees * _Math.DEG2RAD;

			},

			radToDeg: function ( radians ) {

				return radians * _Math.RAD2DEG;

			},

			isPowerOfTwo: function ( value ) {

				return ( value & ( value - 1 ) ) === 0 && value !== 0;

			},

			nearestPowerOfTwo: function ( value ) {

				return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

			},

			nextPowerOfTwo: function ( value ) {

				value --;
				value |= value >> 1;
				value |= value >> 2;
				value |= value >> 4;
				value |= value >> 8;
				value |= value >> 16;
				value ++;

				return value;

			}

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author philogb / http://blog.thejit.org/
		 * @author egraether / http://egraether.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */

		function Vector2( x, y ) {

			this.x = x || 0;
			this.y = y || 0;

		}

		Object.defineProperties( Vector2.prototype, {

			"width" : {

				get: function () {

					return this.x;

				},

				set: function ( value ) {

					this.x = value;

				}

			},

			"height" : {

				get: function () {

					return this.y;

				},

				set: function ( value ) {

					this.y = value;

				}

			}

		} );

		Object.assign( Vector2.prototype, {

			isVector2: true,

			set: function ( x, y ) {

				this.x = x;
				this.y = y;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

				return this;

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;

				return this;

			},

			multiply: function ( v ) {

				this.x *= v.x;
				this.y *= v.y;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				this.x *= scalar;
				this.y *= scalar;

				return this;

			},

			divide: function ( v ) {

				this.x /= v.x;
				this.y /= v.y;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );

				return this;

			},

			clamp: function ( min, max ) {

				// assumes min < max, componentwise

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );

				return this;

			},

			clampScalar: function () {

				var min = new Vector2();
				var max = new Vector2();

				return function clampScalar( minVal, maxVal ) {

					min.set( minVal, minVal );
					max.set( maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			clampLength: function ( min, max ) {

				var length = this.length();

				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

			},

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y;

			},

			lengthSq: function () {

				return this.x * this.x + this.y * this.y;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y );

			},

			lengthManhattan: function() {

				return Math.abs( this.x ) + Math.abs( this.y );

			},

			normalize: function () {

				return this.divideScalar( this.length() || 1 );

			},

			angle: function () {

				// computes the angle in radians with respect to the positive x-axis

				var angle = Math.atan2( this.y, this.x );

				if ( angle < 0 ) angle += 2 * Math.PI;

				return angle;

			},

			distanceTo: function ( v ) {

				return Math.sqrt( this.distanceToSquared( v ) );

			},

			distanceToSquared: function ( v ) {

				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;

			},

			distanceToManhattan: function ( v ) {

				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

			},

			setLength: function ( length ) {

				return this.normalize().multiplyScalar( length );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;

				return array;

			},

			fromBufferAttribute: function ( attribute, index, offset ) {

				if ( offset !== undefined ) {

					console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

				}

				this.x = attribute.getX( index );
				this.y = attribute.getY( index );

				return this;

			},

			rotateAround: function ( center, angle ) {

				var c = Math.cos( angle ), s = Math.sin( angle );

				var x = this.x - center.x;
				var y = this.y - center.y;

				this.x = x * c - y * s + center.x;
				this.y = x * s + y * c + center.y;

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */

		var textureId = 0;

		function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

			Object.defineProperty( this, 'id', { value: textureId ++ } );

			this.uuid = _Math.generateUUID();

			this.name = '';

			this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
			this.mipmaps = [];

			this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

			this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
			this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

			this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

			this.format = format !== undefined ? format : RGBAFormat;
			this.type = type !== undefined ? type : UnsignedByteType;

			this.offset = new Vector2( 0, 0 );
			this.repeat = new Vector2( 1, 1 );

			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
			this.encoding = encoding !== undefined ? encoding : LinearEncoding;

			this.version = 0;
			this.onUpdate = null;

		}

		Texture.DEFAULT_IMAGE = undefined;
		Texture.DEFAULT_MAPPING = UVMapping;

		Object.defineProperty( Texture.prototype, "needsUpdate", {

			set: function ( value ) {

				if ( value === true ) this.version ++;

			}

		} );

		Object.assign( Texture.prototype, EventDispatcher.prototype, {

			constructor: Texture,

			isTexture: true,

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.name = source.name;

				this.image = source.image;
				this.mipmaps = source.mipmaps.slice( 0 );

				this.mapping = source.mapping;

				this.wrapS = source.wrapS;
				this.wrapT = source.wrapT;

				this.magFilter = source.magFilter;
				this.minFilter = source.minFilter;

				this.anisotropy = source.anisotropy;

				this.format = source.format;
				this.type = source.type;

				this.offset.copy( source.offset );
				this.repeat.copy( source.repeat );

				this.generateMipmaps = source.generateMipmaps;
				this.premultiplyAlpha = source.premultiplyAlpha;
				this.flipY = source.flipY;
				this.unpackAlignment = source.unpackAlignment;
				this.encoding = source.encoding;

				return this;

			},

			toJSON: function ( meta ) {

				if ( meta.textures[ this.uuid ] !== undefined ) {

					return meta.textures[ this.uuid ];

				}

				function getDataURL( image ) {

					var canvas;

					if ( image.toDataURL !== undefined ) {

						canvas = image;

					} else {

						canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
						canvas.width = image.width;
						canvas.height = image.height;

						canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

					}

					if ( canvas.width > 2048 || canvas.height > 2048 ) {

						return canvas.toDataURL( 'image/jpeg', 0.6 );

					} else {

						return canvas.toDataURL( 'image/png' );

					}

				}

				var output = {
					metadata: {
						version: 4.5,
						type: 'Texture',
						generator: 'Texture.toJSON'
					},

					uuid: this.uuid,
					name: this.name,

					mapping: this.mapping,

					repeat: [ this.repeat.x, this.repeat.y ],
					offset: [ this.offset.x, this.offset.y ],
					wrap: [ this.wrapS, this.wrapT ],

					minFilter: this.minFilter,
					magFilter: this.magFilter,
					anisotropy: this.anisotropy,

					flipY: this.flipY
				};

				if ( this.image !== undefined ) {

					// TODO: Move to THREE.Image

					var image = this.image;

					if ( image.uuid === undefined ) {

						image.uuid = _Math.generateUUID(); // UGH

					}

					if ( meta.images[ image.uuid ] === undefined ) {

						meta.images[ image.uuid ] = {
							uuid: image.uuid,
							url: getDataURL( image )
						};

					}

					output.image = image.uuid;

				}

				meta.textures[ this.uuid ] = output;

				return output;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			},

			transformUv: function ( uv ) {

				if ( this.mapping !== UVMapping ) return;

				uv.multiply( this.repeat );
				uv.add( this.offset );

				if ( uv.x < 0 || uv.x > 1 ) {

					switch ( this.wrapS ) {

						case RepeatWrapping:

							uv.x = uv.x - Math.floor( uv.x );
							break;

						case ClampToEdgeWrapping:

							uv.x = uv.x < 0 ? 0 : 1;
							break;

						case MirroredRepeatWrapping:

							if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

								uv.x = Math.ceil( uv.x ) - uv.x;

							} else {

								uv.x = uv.x - Math.floor( uv.x );

							}
							break;

					}

				}

				if ( uv.y < 0 || uv.y > 1 ) {

					switch ( this.wrapT ) {

						case RepeatWrapping:

							uv.y = uv.y - Math.floor( uv.y );
							break;

						case ClampToEdgeWrapping:

							uv.y = uv.y < 0 ? 0 : 1;
							break;

						case MirroredRepeatWrapping:

							if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

								uv.y = Math.ceil( uv.y ) - uv.y;

							} else {

								uv.y = uv.y - Math.floor( uv.y );

							}
							break;

					}

				}

				if ( this.flipY ) {

					uv.y = 1 - uv.y;

				}

			}

		} );

		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function Vector4( x, y, z, w ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;

		}

		Object.assign( Vector4.prototype, {

			isVector4: true,

			set: function ( x, y, z, w ) {

				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
				this.w = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setZ: function ( z ) {

				this.z = z;

				return this;

			},

			setW: function ( w ) {

				this.w = w;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					case 3: this.w = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

				return this;

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					case 3: return this.w;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y, this.z, this.w );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
				this.w = ( v.w !== undefined ) ? v.w : 1;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
				this.w += v.w;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;
				this.z += s;
				this.w += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
				this.w = a.w + b.w;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
				this.w += v.w * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
				this.w -= v.w;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;
				this.z -= s;
				this.w -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
				this.w = a.w - b.w;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

				return this;

			},

			applyMatrix4: function ( m ) {

				var x = this.x, y = this.y, z = this.z, w = this.w;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
				this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			setAxisAngleFromQuaternion: function ( q ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

				// q is assumed to be normalized

				this.w = 2 * Math.acos( q.w );

				var s = Math.sqrt( 1 - q.w * q.w );

				if ( s < 0.0001 ) {

					 this.x = 1;
					 this.y = 0;
					 this.z = 0;

				} else {

					 this.x = q.x / s;
					 this.y = q.y / s;
					 this.z = q.z / s;

				}

				return this;

			},

			setAxisAngleFromRotationMatrix: function ( m ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var angle, x, y, z,		// variables for result
					epsilon = 0.01,		// margin to allow for rounding errors
					epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

					te = m.elements,

					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

				if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
				     ( Math.abs( m13 - m31 ) < epsilon ) &&
				     ( Math.abs( m23 - m32 ) < epsilon ) ) {

					// singularity found
					// first check for identity matrix which must have +1 for all terms
					// in leading diagonal and zero in other terms

					if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
					     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
					     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
					     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

						// this singularity is identity matrix so angle = 0

						this.set( 1, 0, 0, 0 );

						return this; // zero angle, arbitrary axis

					}

					// otherwise this singularity is angle = 180

					angle = Math.PI;

					var xx = ( m11 + 1 ) / 2;
					var yy = ( m22 + 1 ) / 2;
					var zz = ( m33 + 1 ) / 2;
					var xy = ( m12 + m21 ) / 4;
					var xz = ( m13 + m31 ) / 4;
					var yz = ( m23 + m32 ) / 4;

					if ( ( xx > yy ) && ( xx > zz ) ) {

						// m11 is the largest diagonal term

						if ( xx < epsilon ) {

							x = 0;
							y = 0.707106781;
							z = 0.707106781;

						} else {

							x = Math.sqrt( xx );
							y = xy / x;
							z = xz / x;

						}

					} else if ( yy > zz ) {

						// m22 is the largest diagonal term

						if ( yy < epsilon ) {

							x = 0.707106781;
							y = 0;
							z = 0.707106781;

						} else {

							y = Math.sqrt( yy );
							x = xy / y;
							z = yz / y;

						}

					} else {

						// m33 is the largest diagonal term so base result on this

						if ( zz < epsilon ) {

							x = 0.707106781;
							y = 0.707106781;
							z = 0;

						} else {

							z = Math.sqrt( zz );
							x = xz / z;
							y = yz / z;

						}

					}

					this.set( x, y, z, angle );

					return this; // return 180 deg rotation

				}

				// as we have reached here there are no singularities so we can handle normally

				var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				                   ( m13 - m31 ) * ( m13 - m31 ) +
				                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

				if ( Math.abs( s ) < 0.001 ) s = 1;

				// prevent divide by zero, should not happen if matrix is orthogonal and should be
				// caught by singularity test above, but I've left it in just in case

				this.x = ( m32 - m23 ) / s;
				this.y = ( m13 - m31 ) / s;
				this.z = ( m21 - m12 ) / s;
				this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

				return this;

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
				this.w = Math.min( this.w, v.w );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
				this.w = Math.max( this.w, v.w );

				return this;

			},

			clamp: function ( min, max ) {

				// assumes min < max, componentwise

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
				this.w = Math.max( min.w, Math.min( max.w, this.w ) );

				return this;

			},

			clampScalar: function () {

				var min, max;

				return function clampScalar( minVal, maxVal ) {

					if ( min === undefined ) {

						min = new Vector4();
						max = new Vector4();

					}

					min.set( minVal, minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			clampLength: function ( min, max ) {

				var length = this.length();

				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

			},

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
				this.w = Math.floor( this.w );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
				this.w = Math.ceil( this.w );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
				this.w = Math.round( this.w );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
				this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
				this.w = - this.w;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

			},

			lengthSq: function () {

				return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

			},

			lengthManhattan: function () {

				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

			},

			normalize: function () {

				return this.divideScalar( this.length() || 1 );

			},

			setLength: function ( length ) {

				return this.normalize().multiplyScalar( length );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
				this.w += ( v.w - this.w ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
				this.w = array[ offset + 3 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
				array[ offset + 3 ] = this.w;

				return array;

			},

			fromBufferAttribute: function ( attribute, index, offset ) {

				if ( offset !== undefined ) {

					console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

				}

				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );
				this.w = attribute.getW( index );

				return this;

			}

		} );

		/**
		 * @author szimek / https://github.com/szimek/
		 * @author alteredq / http://alteredqualia.com/
		 * @author Marius Kintel / https://github.com/kintel
		 */

		/*
		 In options, we can specify:
		 * Texture parameters for an auto-generated target texture
		 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
		*/
		function WebGLRenderTarget( width, height, options ) {

			this.uuid = _Math.generateUUID();

			this.width = width;
			this.height = height;

			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;

			this.viewport = new Vector4( 0, 0, width, height );

			options = options || {};

			if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

			this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

		}

		Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

			isWebGLRenderTarget: true,

			setSize: function ( width, height ) {

				if ( this.width !== width || this.height !== height ) {

					this.width = width;
					this.height = height;

					this.dispose();

				}

				this.viewport.set( 0, 0, width, height );
				this.scissor.set( 0, 0, width, height );

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.width = source.width;
				this.height = source.height;

				this.viewport.copy( source.viewport );

				this.texture = source.texture.clone();

				this.depthBuffer = source.depthBuffer;
				this.stencilBuffer = source.stencilBuffer;
				this.depthTexture = source.depthTexture;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com
		 */

		function WebGLRenderTargetCube( width, height, options ) {

			WebGLRenderTarget.call( this, width, height, options );

			this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
			this.activeMipMapLevel = 0;

		}

		WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
		WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

		WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */

		function Quaternion( x, y, z, w ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;

		}

		Object.assign( Quaternion, {

			slerp: function ( qa, qb, qm, t ) {

				return qm.copy( qa ).slerp( qb, t );

			},

			slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

				// fuzz-free, array-based Quaternion SLERP operation

				var x0 = src0[ srcOffset0 + 0 ],
					y0 = src0[ srcOffset0 + 1 ],
					z0 = src0[ srcOffset0 + 2 ],
					w0 = src0[ srcOffset0 + 3 ],

					x1 = src1[ srcOffset1 + 0 ],
					y1 = src1[ srcOffset1 + 1 ],
					z1 = src1[ srcOffset1 + 2 ],
					w1 = src1[ srcOffset1 + 3 ];

				if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

					var s = 1 - t,

						cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

						dir = ( cos >= 0 ? 1 : - 1 ),
						sqrSin = 1 - cos * cos;

					// Skip the Slerp for tiny steps to avoid numeric problems:
					if ( sqrSin > Number.EPSILON ) {

						var sin = Math.sqrt( sqrSin ),
							len = Math.atan2( sin, cos * dir );

						s = Math.sin( s * len ) / sin;
						t = Math.sin( t * len ) / sin;

					}

					var tDir = t * dir;

					x0 = x0 * s + x1 * tDir;
					y0 = y0 * s + y1 * tDir;
					z0 = z0 * s + z1 * tDir;
					w0 = w0 * s + w1 * tDir;

					// Normalize in case we just did a lerp:
					if ( s === 1 - t ) {

						var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

						x0 *= f;
						y0 *= f;
						z0 *= f;
						w0 *= f;

					}

				}

				dst[ dstOffset ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;

			}

		} );

		Object.defineProperties( Quaternion.prototype, {

			x: {

				get: function () {

					return this._x;

				},

				set: function ( value ) {

					this._x = value;
					this.onChangeCallback();

				}

			},

			y: {

				get: function () {

					return this._y;

				},

				set: function ( value ) {

					this._y = value;
					this.onChangeCallback();

				}

			},

			z: {

				get: function () {

					return this._z;

				},

				set: function ( value ) {

					this._z = value;
					this.onChangeCallback();

				}

			},

			w: {

				get: function () {

					return this._w;

				},

				set: function ( value ) {

					this._w = value;
					this.onChangeCallback();

				}

			}

		} );

		Object.assign( Quaternion.prototype, {

			set: function ( x, y, z, w ) {

				this._x = x;
				this._y = y;
				this._z = z;
				this._w = w;

				this.onChangeCallback();

				return this;

			},

			clone: function () {

				return new this.constructor( this._x, this._y, this._z, this._w );

			},

			copy: function ( quaternion ) {

				this._x = quaternion.x;
				this._y = quaternion.y;
				this._z = quaternion.z;
				this._w = quaternion.w;

				this.onChangeCallback();

				return this;

			},

			setFromEuler: function ( euler, update ) {

				if ( ! ( euler && euler.isEuler ) ) {

					throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

				// http://www.mathworks.com/matlabcentral/fileexchange/
				// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
				//	content/SpinCalc.m

				var cos = Math.cos;
				var sin = Math.sin;

				var c1 = cos( x / 2 );
				var c2 = cos( y / 2 );
				var c3 = cos( z / 2 );

				var s1 = sin( x / 2 );
				var s2 = sin( y / 2 );
				var s3 = sin( z / 2 );

				if ( order === 'XYZ' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'YXZ' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				} else if ( order === 'ZXY' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'ZYX' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				} else if ( order === 'YZX' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'XZY' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				}

				if ( update !== false ) this.onChangeCallback();

				return this;

			},

			setFromAxisAngle: function ( axis, angle ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

				// assumes axis is normalized

				var halfAngle = angle / 2, s = Math.sin( halfAngle );

				this._x = axis.x * s;
				this._y = axis.y * s;
				this._z = axis.z * s;
				this._w = Math.cos( halfAngle );

				this.onChangeCallback();

				return this;

			},

			setFromRotationMatrix: function ( m ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var te = m.elements,

					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

					trace = m11 + m22 + m33,
					s;

				if ( trace > 0 ) {

					s = 0.5 / Math.sqrt( trace + 1.0 );

					this._w = 0.25 / s;
					this._x = ( m32 - m23 ) * s;
					this._y = ( m13 - m31 ) * s;
					this._z = ( m21 - m12 ) * s;

				} else if ( m11 > m22 && m11 > m33 ) {

					s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

					this._w = ( m32 - m23 ) / s;
					this._x = 0.25 * s;
					this._y = ( m12 + m21 ) / s;
					this._z = ( m13 + m31 ) / s;

				} else if ( m22 > m33 ) {

					s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

					this._w = ( m13 - m31 ) / s;
					this._x = ( m12 + m21 ) / s;
					this._y = 0.25 * s;
					this._z = ( m23 + m32 ) / s;

				} else {

					s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

					this._w = ( m21 - m12 ) / s;
					this._x = ( m13 + m31 ) / s;
					this._y = ( m23 + m32 ) / s;
					this._z = 0.25 * s;

				}

				this.onChangeCallback();

				return this;

			},

			setFromUnitVectors: function () {

				// assumes direction vectors vFrom and vTo are normalized

				var v1 = new Vector3();
				var r;

				var EPS = 0.000001;

				return function setFromUnitVectors( vFrom, vTo ) {

					if ( v1 === undefined ) v1 = new Vector3();

					r = vFrom.dot( vTo ) + 1;

					if ( r < EPS ) {

						r = 0;

						if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

							v1.set( - vFrom.y, vFrom.x, 0 );

						} else {

							v1.set( 0, - vFrom.z, vFrom.y );

						}

					} else {

						v1.crossVectors( vFrom, vTo );

					}

					this._x = v1.x;
					this._y = v1.y;
					this._z = v1.z;
					this._w = r;

					return this.normalize();

				};

			}(),

			inverse: function () {

				return this.conjugate().normalize();

			},

			conjugate: function () {

				this._x *= - 1;
				this._y *= - 1;
				this._z *= - 1;

				this.onChangeCallback();

				return this;

			},

			dot: function ( v ) {

				return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

			},

			lengthSq: function () {

				return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

			},

			length: function () {

				return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

			},

			normalize: function () {

				var l = this.length();

				if ( l === 0 ) {

					this._x = 0;
					this._y = 0;
					this._z = 0;
					this._w = 1;

				} else {

					l = 1 / l;

					this._x = this._x * l;
					this._y = this._y * l;
					this._z = this._z * l;
					this._w = this._w * l;

				}

				this.onChangeCallback();

				return this;

			},

			multiply: function ( q, p ) {

				if ( p !== undefined ) {

					console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
					return this.multiplyQuaternions( q, p );

				}

				return this.multiplyQuaternions( this, q );

			},

			premultiply: function ( q ) {

				return this.multiplyQuaternions( q, this );

			},

			multiplyQuaternions: function ( a, b ) {

				// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

				var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
				var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

				this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
				this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
				this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
				this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

				this.onChangeCallback();

				return this;

			},

			slerp: function ( qb, t ) {

				if ( t === 0 ) return this;
				if ( t === 1 ) return this.copy( qb );

				var x = this._x, y = this._y, z = this._z, w = this._w;

				// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

				var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

				if ( cosHalfTheta < 0 ) {

					this._w = - qb._w;
					this._x = - qb._x;
					this._y = - qb._y;
					this._z = - qb._z;

					cosHalfTheta = - cosHalfTheta;

				} else {

					this.copy( qb );

				}

				if ( cosHalfTheta >= 1.0 ) {

					this._w = w;
					this._x = x;
					this._y = y;
					this._z = z;

					return this;

				}

				var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

				if ( Math.abs( sinHalfTheta ) < 0.001 ) {

					this._w = 0.5 * ( w + this._w );
					this._x = 0.5 * ( x + this._x );
					this._y = 0.5 * ( y + this._y );
					this._z = 0.5 * ( z + this._z );

					return this;

				}

				var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
				var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
					ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

				this._w = ( w * ratioA + this._w * ratioB );
				this._x = ( x * ratioA + this._x * ratioB );
				this._y = ( y * ratioA + this._y * ratioB );
				this._z = ( z * ratioA + this._z * ratioB );

				this.onChangeCallback();

				return this;

			},

			equals: function ( quaternion ) {

				return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this._x = array[ offset ];
				this._y = array[ offset + 1 ];
				this._z = array[ offset + 2 ];
				this._w = array[ offset + 3 ];

				this.onChangeCallback();

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._w;

				return array;

			},

			onChange: function ( callback ) {

				this.onChangeCallback = callback;

				return this;

			},

			onChangeCallback: function () {}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function Vector3( x, y, z ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;

		}

		Object.assign( Vector3.prototype, {

			isVector3: true,

			set: function ( x, y, z ) {

				this.x = x;
				this.y = y;
				this.z = z;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;
				this.z = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setZ: function ( z ) {

				this.z = z;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

				return this;

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y, this.z );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;
				this.z = v.z;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;
				this.z += v.z;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;
				this.z += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;
				this.z -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;

				return this;

			},

			multiply: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
					return this.multiplyVectors( v, w );

				}

				this.x *= v.x;
				this.y *= v.y;
				this.z *= v.z;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

				return this;

			},

			multiplyVectors: function ( a, b ) {

				this.x = a.x * b.x;
				this.y = a.y * b.y;
				this.z = a.z * b.z;

				return this;

			},

			applyEuler: function () {

				var quaternion = new Quaternion();

				return function applyEuler( euler ) {

					if ( ! ( euler && euler.isEuler ) ) {

						console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

					}

					return this.applyQuaternion( quaternion.setFromEuler( euler ) );

				};

			}(),

			applyAxisAngle: function () {

				var quaternion = new Quaternion();

				return function applyAxisAngle( axis, angle ) {

					return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

				};

			}(),

			applyMatrix3: function ( m ) {

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
				this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

				return this;

			},

			applyMatrix4: function ( m ) {

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

				this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * w;
				this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * w;
				this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

				return this;

			},

			applyQuaternion: function ( q ) {

				var x = this.x, y = this.y, z = this.z;
				var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

				// calculate quat * vector

				var ix =  qw * x + qy * z - qz * y;
				var iy =  qw * y + qz * x - qx * z;
				var iz =  qw * z + qx * y - qy * x;
				var iw = - qx * x - qy * y - qz * z;

				// calculate result * inverse quat

				this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
				this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
				this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

				return this;

			},

			project: function () {

				var matrix = new Matrix4();

				return function project( camera ) {

					matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
					return this.applyMatrix4( matrix );

				};

			}(),

			unproject: function () {

				var matrix = new Matrix4();

				return function unproject( camera ) {

					matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
					return this.applyMatrix4( matrix );

				};

			}(),

			transformDirection: function ( m ) {

				// input: THREE.Matrix4 affine matrix
				// vector interpreted as a direction

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

				return this.normalize();

			},

			divide: function ( v ) {

				this.x /= v.x;
				this.y /= v.y;
				this.z /= v.z;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );

				return this;

			},

			clamp: function ( min, max ) {

				// assumes min < max, componentwise

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );

				return this;

			},

			clampScalar: function () {

				var min = new Vector3();
				var max = new Vector3();

				return function clampScalar( minVal, maxVal ) {

					min.set( minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			clampLength: function ( min, max ) {

				var length = this.length();

				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

			},

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y + this.z * v.z;

			},

			// TODO lengthSquared?

			lengthSq: function () {

				return this.x * this.x + this.y * this.y + this.z * this.z;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

			},

			lengthManhattan: function () {

				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

			},

			normalize: function () {

				return this.divideScalar( this.length() || 1 );

			},

			setLength: function ( length ) {

				return this.normalize().multiplyScalar( length );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			cross: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
					return this.crossVectors( v, w );

				}

				var x = this.x, y = this.y, z = this.z;

				this.x = y * v.z - z * v.y;
				this.y = z * v.x - x * v.z;
				this.z = x * v.y - y * v.x;

				return this;

			},

			crossVectors: function ( a, b ) {

				var ax = a.x, ay = a.y, az = a.z;
				var bx = b.x, by = b.y, bz = b.z;

				this.x = ay * bz - az * by;
				this.y = az * bx - ax * bz;
				this.z = ax * by - ay * bx;

				return this;

			},

			projectOnVector: function ( vector ) {

				var scalar = vector.dot( this ) / vector.lengthSq();

				return this.copy( vector ).multiplyScalar( scalar );

			},

			projectOnPlane: function () {

				var v1 = new Vector3();

				return function projectOnPlane( planeNormal ) {

					v1.copy( this ).projectOnVector( planeNormal );

					return this.sub( v1 );

				};

			}(),

			reflect: function () {

				// reflect incident vector off plane orthogonal to normal
				// normal is assumed to have unit length

				var v1 = new Vector3();

				return function reflect( normal ) {

					return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

				};

			}(),

			angleTo: function ( v ) {

				var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

				// clamp, to handle numerical problems

				return Math.acos( _Math.clamp( theta, - 1, 1 ) );

			},

			distanceTo: function ( v ) {

				return Math.sqrt( this.distanceToSquared( v ) );

			},

			distanceToSquared: function ( v ) {

				var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

				return dx * dx + dy * dy + dz * dz;

			},

			distanceToManhattan: function ( v ) {

				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

			},

			setFromSpherical: function ( s ) {

				var sinPhiRadius = Math.sin( s.phi ) * s.radius;

				this.x = sinPhiRadius * Math.sin( s.theta );
				this.y = Math.cos( s.phi ) * s.radius;
				this.z = sinPhiRadius * Math.cos( s.theta );

				return this;

			},

			setFromCylindrical: function ( c ) {

				this.x = c.radius * Math.sin( c.theta );
				this.y = c.y;
				this.z = c.radius * Math.cos( c.theta );

				return this;

			},

			setFromMatrixPosition: function ( m ) {

				var e = m.elements;

				this.x = e[ 12 ];
				this.y = e[ 13 ];
				this.z = e[ 14 ];

				return this;

			},

			setFromMatrixScale: function ( m ) {

				var sx = this.setFromMatrixColumn( m, 0 ).length();
				var sy = this.setFromMatrixColumn( m, 1 ).length();
				var sz = this.setFromMatrixColumn( m, 2 ).length();

				this.x = sx;
				this.y = sy;
				this.z = sz;

				return this;

			},

			setFromMatrixColumn: function ( m, index ) {

				return this.fromArray( m.elements, index * 4 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;

				return array;

			},

			fromBufferAttribute: function ( attribute, index, offset ) {

				if ( offset !== undefined ) {

					console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

				}

				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author jordi_ros / http://plattsoft.com
		 * @author D1plo1d / http://github.com/D1plo1d
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author timknip / http://www.floorplanner.com/
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function Matrix4() {

			this.elements = [

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			];

			if ( arguments.length > 0 ) {

				console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

			}

		}

		Object.assign( Matrix4.prototype, {

			isMatrix4: true,

			set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

				var te = this.elements;

				te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
				te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
				te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
				te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

				return this;

			},

			identity: function () {

				this.set(

					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1

				);

				return this;

			},

			clone: function () {

				return new Matrix4().fromArray( this.elements );

			},

			copy: function ( m ) {

				var te = this.elements;
				var me = m.elements;

				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
				te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
				te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
				te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

				return this;

			},

			copyPosition: function ( m ) {

				var te = this.elements, me = m.elements;

				te[ 12 ] = me[ 12 ];
				te[ 13 ] = me[ 13 ];
				te[ 14 ] = me[ 14 ];

				return this;

			},

			extractBasis: function ( xAxis, yAxis, zAxis ) {

				xAxis.setFromMatrixColumn( this, 0 );
				yAxis.setFromMatrixColumn( this, 1 );
				zAxis.setFromMatrixColumn( this, 2 );

				return this;

			},

			makeBasis: function ( xAxis, yAxis, zAxis ) {

				this.set(
					xAxis.x, yAxis.x, zAxis.x, 0,
					xAxis.y, yAxis.y, zAxis.y, 0,
					xAxis.z, yAxis.z, zAxis.z, 0,
					0,       0,       0,       1
				);

				return this;

			},

			extractRotation: function () {

				var v1 = new Vector3();

				return function extractRotation( m ) {

					var te = this.elements;
					var me = m.elements;

					var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
					var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
					var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

					te[ 0 ] = me[ 0 ] * scaleX;
					te[ 1 ] = me[ 1 ] * scaleX;
					te[ 2 ] = me[ 2 ] * scaleX;

					te[ 4 ] = me[ 4 ] * scaleY;
					te[ 5 ] = me[ 5 ] * scaleY;
					te[ 6 ] = me[ 6 ] * scaleY;

					te[ 8 ] = me[ 8 ] * scaleZ;
					te[ 9 ] = me[ 9 ] * scaleZ;
					te[ 10 ] = me[ 10 ] * scaleZ;

					return this;

				};

			}(),

			makeRotationFromEuler: function ( euler ) {

				if ( ! ( euler && euler.isEuler ) ) {

					console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

				}

				var te = this.elements;

				var x = euler.x, y = euler.y, z = euler.z;
				var a = Math.cos( x ), b = Math.sin( x );
				var c = Math.cos( y ), d = Math.sin( y );
				var e = Math.cos( z ), f = Math.sin( z );

				if ( euler.order === 'XYZ' ) {

					var ae = a * e, af = a * f, be = b * e, bf = b * f;

					te[ 0 ] = c * e;
					te[ 4 ] = - c * f;
					te[ 8 ] = d;

					te[ 1 ] = af + be * d;
					te[ 5 ] = ae - bf * d;
					te[ 9 ] = - b * c;

					te[ 2 ] = bf - ae * d;
					te[ 6 ] = be + af * d;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'YXZ' ) {

					var ce = c * e, cf = c * f, de = d * e, df = d * f;

					te[ 0 ] = ce + df * b;
					te[ 4 ] = de * b - cf;
					te[ 8 ] = a * d;

					te[ 1 ] = a * f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b;

					te[ 2 ] = cf * b - de;
					te[ 6 ] = df + ce * b;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'ZXY' ) {

					var ce = c * e, cf = c * f, de = d * e, df = d * f;

					te[ 0 ] = ce - df * b;
					te[ 4 ] = - a * f;
					te[ 8 ] = de + cf * b;

					te[ 1 ] = cf + de * b;
					te[ 5 ] = a * e;
					te[ 9 ] = df - ce * b;

					te[ 2 ] = - a * d;
					te[ 6 ] = b;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'ZYX' ) {

					var ae = a * e, af = a * f, be = b * e, bf = b * f;

					te[ 0 ] = c * e;
					te[ 4 ] = be * d - af;
					te[ 8 ] = ae * d + bf;

					te[ 1 ] = c * f;
					te[ 5 ] = bf * d + ae;
					te[ 9 ] = af * d - be;

					te[ 2 ] = - d;
					te[ 6 ] = b * c;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'YZX' ) {

					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

					te[ 0 ] = c * e;
					te[ 4 ] = bd - ac * f;
					te[ 8 ] = bc * f + ad;

					te[ 1 ] = f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b * e;

					te[ 2 ] = - d * e;
					te[ 6 ] = ad * f + bc;
					te[ 10 ] = ac - bd * f;

				} else if ( euler.order === 'XZY' ) {

					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

					te[ 0 ] = c * e;
					te[ 4 ] = - f;
					te[ 8 ] = d * e;

					te[ 1 ] = ac * f + bd;
					te[ 5 ] = a * e;
					te[ 9 ] = ad * f - bc;

					te[ 2 ] = bc * f - ad;
					te[ 6 ] = b * e;
					te[ 10 ] = bd * f + ac;

				}

				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;

				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;

				return this;

			},

			makeRotationFromQuaternion: function ( q ) {

				var te = this.elements;

				var x = q._x, y = q._y, z = q._z, w = q._w;
				var x2 = x + x, y2 = y + y, z2 = z + z;
				var xx = x * x2, xy = x * y2, xz = x * z2;
				var yy = y * y2, yz = y * z2, zz = z * z2;
				var wx = w * x2, wy = w * y2, wz = w * z2;

				te[ 0 ] = 1 - ( yy + zz );
				te[ 4 ] = xy - wz;
				te[ 8 ] = xz + wy;

				te[ 1 ] = xy + wz;
				te[ 5 ] = 1 - ( xx + zz );
				te[ 9 ] = yz - wx;

				te[ 2 ] = xz - wy;
				te[ 6 ] = yz + wx;
				te[ 10 ] = 1 - ( xx + yy );

				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;

				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;

				return this;

			},

			lookAt: function () {

				var x = new Vector3();
				var y = new Vector3();
				var z = new Vector3();

				return function lookAt( eye, target, up ) {

					var te = this.elements;

					z.subVectors( eye, target );

					if ( z.lengthSq() === 0 ) {

						// eye and target are in the same position

						z.z = 1;

					}

					z.normalize();
					x.crossVectors( up, z );

					if ( x.lengthSq() === 0 ) {

						// up and z are parallel

						if ( Math.abs( up.z ) === 1 ) {

							z.x += 0.0001;

						} else {

							z.z += 0.0001;

						}

						z.normalize();
						x.crossVectors( up, z );

					}

					x.normalize();
					y.crossVectors( z, x );

					te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
					te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
					te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

					return this;

				};

			}(),

			multiply: function ( m, n ) {

				if ( n !== undefined ) {

					console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
					return this.multiplyMatrices( m, n );

				}

				return this.multiplyMatrices( this, m );

			},

			premultiply: function ( m ) {

				return this.multiplyMatrices( m, this );

			},

			multiplyMatrices: function ( a, b ) {

				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;

				var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
				var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
				var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
				var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

				var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
				var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
				var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
				var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
				te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
				te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
				te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
				te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
				te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
				te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
				te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
				te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
				te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

				te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
				te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
				te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
				te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

				return this;

			},

			multiplyScalar: function ( s ) {

				var te = this.elements;

				te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
				te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
				te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
				te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

				return this;

			},

			applyToBufferAttribute: function () {

				var v1 = new Vector3();

				return function applyToBufferAttribute( attribute ) {

					for ( var i = 0, l = attribute.count; i < l; i ++ ) {

						v1.x = attribute.getX( i );
						v1.y = attribute.getY( i );
						v1.z = attribute.getZ( i );

						v1.applyMatrix4( this );

						attribute.setXYZ( i, v1.x, v1.y, v1.z );

					}

					return attribute;

				};

			}(),

			determinant: function () {

				var te = this.elements;

				var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
				var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
				var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
				var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

				//TODO: make this more efficient
				//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

				return (
					n41 * (
						+ n14 * n23 * n32
						 - n13 * n24 * n32
						 - n14 * n22 * n33
						 + n12 * n24 * n33
						 + n13 * n22 * n34
						 - n12 * n23 * n34
					) +
					n42 * (
						+ n11 * n23 * n34
						 - n11 * n24 * n33
						 + n14 * n21 * n33
						 - n13 * n21 * n34
						 + n13 * n24 * n31
						 - n14 * n23 * n31
					) +
					n43 * (
						+ n11 * n24 * n32
						 - n11 * n22 * n34
						 - n14 * n21 * n32
						 + n12 * n21 * n34
						 + n14 * n22 * n31
						 - n12 * n24 * n31
					) +
					n44 * (
						- n13 * n22 * n31
						 - n11 * n23 * n32
						 + n11 * n22 * n33
						 + n13 * n21 * n32
						 - n12 * n21 * n33
						 + n12 * n23 * n31
					)

				);

			},

			transpose: function () {

				var te = this.elements;
				var tmp;

				tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
				tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
				tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

				tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
				tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
				tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

				return this;

			},

			setPosition: function ( v ) {

				var te = this.elements;

				te[ 12 ] = v.x;
				te[ 13 ] = v.y;
				te[ 14 ] = v.z;

				return this;

			},

			getInverse: function ( m, throwOnDegenerate ) {

				// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
				var te = this.elements,
					me = m.elements,

					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
					n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
					n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
					n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

				var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

				if ( det === 0 ) {

					var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

					if ( throwOnDegenerate === true ) {

						throw new Error( msg );

					} else {

						console.warn( msg );

					}

					return this.identity();

				}

				var detInv = 1 / det;

				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
				te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
				te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

				te[ 4 ] = t12 * detInv;
				te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
				te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
				te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

				te[ 8 ] = t13 * detInv;
				te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
				te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
				te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

				te[ 12 ] = t14 * detInv;
				te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
				te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
				te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

				return this;

			},

			scale: function ( v ) {

				var te = this.elements;
				var x = v.x, y = v.y, z = v.z;

				te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
				te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
				te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
				te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

				return this;

			},

			getMaxScaleOnAxis: function () {

				var te = this.elements;

				var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
				var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
				var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

				return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

			},

			makeTranslation: function ( x, y, z ) {

				this.set(

					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1

				);

				return this;

			},

			makeRotationX: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					1, 0,  0, 0,
					0, c, - s, 0,
					0, s,  c, 0,
					0, 0,  0, 1

				);

				return this;

			},

			makeRotationY: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					 c, 0, s, 0,
					 0, 1, 0, 0,
					- s, 0, c, 0,
					 0, 0, 0, 1

				);

				return this;

			},

			makeRotationZ: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					c, - s, 0, 0,
					s,  c, 0, 0,
					0,  0, 1, 0,
					0,  0, 0, 1

				);

				return this;

			},

			makeRotationAxis: function ( axis, angle ) {

				// Based on http://www.gamedev.net/reference/articles/article1199.asp

				var c = Math.cos( angle );
				var s = Math.sin( angle );
				var t = 1 - c;
				var x = axis.x, y = axis.y, z = axis.z;
				var tx = t * x, ty = t * y;

				this.set(

					tx * x + c, tx * y - s * z, tx * z + s * y, 0,
					tx * y + s * z, ty * y + c, ty * z - s * x, 0,
					tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
					0, 0, 0, 1

				);

				 return this;

			},

			makeScale: function ( x, y, z ) {

				this.set(

					x, 0, 0, 0,
					0, y, 0, 0,
					0, 0, z, 0,
					0, 0, 0, 1

				);

				return this;

			},

			makeShear: function ( x, y, z ) {

				this.set(

					1, y, z, 0,
					x, 1, z, 0,
					x, y, 1, 0,
					0, 0, 0, 1

				);

				return this;

			},

			compose: function ( position, quaternion, scale ) {

				this.makeRotationFromQuaternion( quaternion );
				this.scale( scale );
				this.setPosition( position );

				return this;

			},

			decompose: function () {

				var vector = new Vector3();
				var matrix = new Matrix4();

				return function decompose( position, quaternion, scale ) {

					var te = this.elements;

					var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
					var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
					var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

					// if determine is negative, we need to invert one scale
					var det = this.determinant();
					if ( det < 0 ) sx = - sx;

					position.x = te[ 12 ];
					position.y = te[ 13 ];
					position.z = te[ 14 ];

					// scale the rotation part
					matrix.copy( this );

					var invSX = 1 / sx;
					var invSY = 1 / sy;
					var invSZ = 1 / sz;

					matrix.elements[ 0 ] *= invSX;
					matrix.elements[ 1 ] *= invSX;
					matrix.elements[ 2 ] *= invSX;

					matrix.elements[ 4 ] *= invSY;
					matrix.elements[ 5 ] *= invSY;
					matrix.elements[ 6 ] *= invSY;

					matrix.elements[ 8 ] *= invSZ;
					matrix.elements[ 9 ] *= invSZ;
					matrix.elements[ 10 ] *= invSZ;

					quaternion.setFromRotationMatrix( matrix );

					scale.x = sx;
					scale.y = sy;
					scale.z = sz;

					return this;

				};

			}(),

			makePerspective: function ( left, right, top, bottom, near, far ) {

				if ( far === undefined ) {

					console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

				}

				var te = this.elements;
				var x = 2 * near / ( right - left );
				var y = 2 * near / ( top - bottom );

				var a = ( right + left ) / ( right - left );
				var b = ( top + bottom ) / ( top - bottom );
				var c = - ( far + near ) / ( far - near );
				var d = - 2 * far * near / ( far - near );

				te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
				te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

				return this;

			},

			makeOrthographic: function ( left, right, top, bottom, near, far ) {

				var te = this.elements;
				var w = 1.0 / ( right - left );
				var h = 1.0 / ( top - bottom );
				var p = 1.0 / ( far - near );

				var x = ( right + left ) * w;
				var y = ( top + bottom ) * h;
				var z = ( far + near ) * p;

				te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
				te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

				return this;

			},

			equals: function ( matrix ) {

				var te = this.elements;
				var me = matrix.elements;

				for ( var i = 0; i < 16; i ++ ) {

					if ( te[ i ] !== me[ i ] ) return false;

				}

				return true;

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				for ( var i = 0; i < 16; i ++ ) {

					this.elements[ i ] = array[ i + offset ];

				}

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				var te = this.elements;

				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
				array[ offset + 3 ] = te[ 3 ];

				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];

				array[ offset + 8 ] = te[ 8 ];
				array[ offset + 9 ] = te[ 9 ];
				array[ offset + 10 ] = te[ 10 ];
				array[ offset + 11 ] = te[ 11 ];

				array[ offset + 12 ] = te[ 12 ];
				array[ offset + 13 ] = te[ 13 ];
				array[ offset + 14 ] = te[ 14 ];
				array[ offset + 15 ] = te[ 15 ];

				return array;

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.image = { data: data, width: width, height: height };

			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;

		}

		DataTexture.prototype = Object.create( Texture.prototype );
		DataTexture.prototype.constructor = DataTexture;

		DataTexture.prototype.isDataTexture = true;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

			Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.flipY = false;

		}

		CubeTexture.prototype = Object.create( Texture.prototype );
		CubeTexture.prototype.constructor = CubeTexture;

		CubeTexture.prototype.isCubeTexture = true;

		Object.defineProperty( CubeTexture.prototype, 'images', {

			get: function () {

				return this.image;

			},

			set: function ( value ) {

				this.image = value;

			}

		} );

		/**
		 * @author tschw
		 *
		 * Uniforms of a program.
		 * Those form a tree structure with a special top-level container for the root,
		 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
		 *
		 *
		 * Properties of inner nodes including the top-level container:
		 *
		 * .seq - array of nested uniforms
		 * .map - nested uniforms by name
		 *
		 *
		 * Methods of all nodes except the top-level container:
		 *
		 * .setValue( gl, value, [renderer] )
		 *
		 * 		uploads a uniform value(s)
		 *  	the 'renderer' parameter is needed for sampler uniforms
		 *
		 *
		 * Static methods of the top-level container (renderer factorizations):
		 *
		 * .upload( gl, seq, values, renderer )
		 *
		 * 		sets uniforms in 'seq' to 'values[id].value'
		 *
		 * .seqWithValue( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with corresponding entry in values
		 *
		 *
		 * Methods of the top-level container (renderer factorizations):
		 *
		 * .setValue( gl, name, value )
		 *
		 * 		sets uniform with  name 'name' to 'value'
		 *
		 * .set( gl, obj, prop )
		 *
		 * 		sets uniform from object and property with same name than uniform
		 *
		 * .setOptional( gl, obj, prop )
		 *
		 * 		like .set for an optional property of the object
		 *
		 */

		var emptyTexture = new Texture();
		var emptyCubeTexture = new CubeTexture();

		// --- Base for inner nodes (including the root) ---

		function UniformContainer() {

			this.seq = [];
			this.map = {};

		}

		// --- Utilities ---

		// Array Caches (provide typed arrays for temporary by size)

		var arrayCacheF32 = [];
		var arrayCacheI32 = [];

		// Float32Array caches used for uploading Matrix uniforms

		var mat4array = new Float32Array( 16 );
		var mat3array = new Float32Array( 9 );

		// Flattening for arrays of vectors and matrices

		function flatten( array, nBlocks, blockSize ) {

			var firstElem = array[ 0 ];

			if ( firstElem <= 0 || firstElem > 0 ) return array;
			// unoptimized: ! isNaN( firstElem )
			// see http://jacksondunstan.com/articles/983

			var n = nBlocks * blockSize,
				r = arrayCacheF32[ n ];

			if ( r === undefined ) {

				r = new Float32Array( n );
				arrayCacheF32[ n ] = r;

			}

			if ( nBlocks !== 0 ) {

				firstElem.toArray( r, 0 );

				for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

					offset += blockSize;
					array[ i ].toArray( r, offset );

				}

			}

			return r;

		}

		// Texture unit allocation

		function allocTexUnits( renderer, n ) {

			var r = arrayCacheI32[ n ];

			if ( r === undefined ) {

				r = new Int32Array( n );
				arrayCacheI32[ n ] = r;

			}

			for ( var i = 0; i !== n; ++ i )
				r[ i ] = renderer.allocTextureUnit();

			return r;

		}

		// --- Setters ---

		// Note: Defining these methods externally, because they come in a bunch
		// and this way their names minify.

		// Single scalar

		function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
		function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

		// Single float vector (from flat array or THREE.VectorN)

		function setValue2fv( gl, v ) {

			if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
			else gl.uniform2f( this.addr, v.x, v.y );

		}

		function setValue3fv( gl, v ) {

			if ( v.x !== undefined )
				gl.uniform3f( this.addr, v.x, v.y, v.z );
			else if ( v.r !== undefined )
				gl.uniform3f( this.addr, v.r, v.g, v.b );
			else
				gl.uniform3fv( this.addr, v );

		}

		function setValue4fv( gl, v ) {

			if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
			else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

		}

		// Single matrix (from flat array or MatrixN)

		function setValue2fm( gl, v ) {

			gl.uniformMatrix2fv( this.addr, false, v.elements || v );

		}

		function setValue3fm( gl, v ) {

			if ( v.elements === undefined ) {

				gl.uniformMatrix3fv( this.addr, false, v );

			} else {

				mat3array.set( v.elements );
				gl.uniformMatrix3fv( this.addr, false, mat3array );

			}

		}

		function setValue4fm( gl, v ) {

			if ( v.elements === undefined ) {

				gl.uniformMatrix4fv( this.addr, false, v );

			} else {

				mat4array.set( v.elements );
				gl.uniformMatrix4fv( this.addr, false, mat4array );

			}

		}

		// Single texture (2D / Cube)

		function setValueT1( gl, v, renderer ) {

			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTexture2D( v || emptyTexture, unit );

		}

		function setValueT6( gl, v, renderer ) {

			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTextureCube( v || emptyCubeTexture, unit );

		}

		// Integer / Boolean vectors or arrays thereof (always flat arrays)

		function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
		function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
		function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

		// Helper to pick the right setter for the singular case

		function getSingularSetter( type ) {

			switch ( type ) {

				case 0x1406: return setValue1f; // FLOAT
				case 0x8b50: return setValue2fv; // _VEC2
				case 0x8b51: return setValue3fv; // _VEC3
				case 0x8b52: return setValue4fv; // _VEC4

				case 0x8b5a: return setValue2fm; // _MAT2
				case 0x8b5b: return setValue3fm; // _MAT3
				case 0x8b5c: return setValue4fm; // _MAT4

				case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
				case 0x8b60: return setValueT6; // SAMPLER_CUBE

				case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

			}

		}

		// Array of scalars

		function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
		function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

		// Array of vectors (flat or from THREE classes)

		function setValueV2a( gl, v ) {

			gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

		}

		function setValueV3a( gl, v ) {

			gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

		}

		function setValueV4a( gl, v ) {

			gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

		}

		// Array of matrices (flat or from THREE clases)

		function setValueM2a( gl, v ) {

			gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

		}

		function setValueM3a( gl, v ) {

			gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

		}

		function setValueM4a( gl, v ) {

			gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

		}

		// Array of textures (2D / Cube)

		function setValueT1a( gl, v, renderer ) {

			var n = v.length,
				units = allocTexUnits( renderer, n );

			gl.uniform1iv( this.addr, units );

			for ( var i = 0; i !== n; ++ i ) {

				renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

			}

		}

		function setValueT6a( gl, v, renderer ) {

			var n = v.length,
				units = allocTexUnits( renderer, n );

			gl.uniform1iv( this.addr, units );

			for ( var i = 0; i !== n; ++ i ) {

				renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

			}

		}

		// Helper to pick the right setter for a pure (bottom-level) array

		function getPureArraySetter( type ) {

			switch ( type ) {

				case 0x1406: return setValue1fv; // FLOAT
				case 0x8b50: return setValueV2a; // _VEC2
				case 0x8b51: return setValueV3a; // _VEC3
				case 0x8b52: return setValueV4a; // _VEC4

				case 0x8b5a: return setValueM2a; // _MAT2
				case 0x8b5b: return setValueM3a; // _MAT3
				case 0x8b5c: return setValueM4a; // _MAT4

				case 0x8b5e: return setValueT1a; // SAMPLER_2D
				case 0x8b60: return setValueT6a; // SAMPLER_CUBE

				case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

			}

		}

		// --- Uniform Classes ---

		function SingleUniform( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.setValue = getSingularSetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

		function PureArrayUniform( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

		function StructuredUniform( id ) {

			this.id = id;

			UniformContainer.call( this ); // mix-in

		}

		StructuredUniform.prototype.setValue = function ( gl, value ) {

			// Note: Don't need an extra 'renderer' parameter, since samplers
			// are not allowed in structured uniforms.

			var seq = this.seq;

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ];
				u.setValue( gl, value[ u.id ] );

			}

		};

		// --- Top-level ---

		// Parser - builds up the property tree from the path strings

		var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

		// extracts
		// 	- the identifier (member name or array index)
		//  - followed by an optional right bracket (found when array index)
		//  - followed by an optional left bracket or dot (type of subscript)
		//
		// Note: These portions can be read in a non-overlapping fashion and
		// allow straightforward parsing of the hierarchy that WebGL encodes
		// in the uniform names.

		function addUniform( container, uniformObject ) {

			container.seq.push( uniformObject );
			container.map[ uniformObject.id ] = uniformObject;

		}

		function parseUniform( activeInfo, addr, container ) {

			var path = activeInfo.name,
				pathLength = path.length;

			// reset RegExp object, because of the early exit of a previous run
			RePathPart.lastIndex = 0;

			for ( ; ; ) {

				var match = RePathPart.exec( path ),
					matchEnd = RePathPart.lastIndex,

					id = match[ 1 ],
					idIsIndex = match[ 2 ] === ']',
					subscript = match[ 3 ];

				if ( idIsIndex ) id = id | 0; // convert to integer

				if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

					// bare name or "pure" bottom-level array "[0]" suffix

					addUniform( container, subscript === undefined ?
							new SingleUniform( id, activeInfo, addr ) :
							new PureArrayUniform( id, activeInfo, addr ) );

					break;

				} else {

					// step into inner node / create it in case it doesn't exist

					var map = container.map, next = map[ id ];

					if ( next === undefined ) {

						next = new StructuredUniform( id );
						addUniform( container, next );

					}

					container = next;

				}

			}

		}

		// Root Container

		function WebGLUniforms( gl, program, renderer ) {

			UniformContainer.call( this );

			this.renderer = renderer;

			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

			for ( var i = 0; i < n; ++ i ) {

				var info = gl.getActiveUniform( program, i ),
					path = info.name,
					addr = gl.getUniformLocation( program, path );

				parseUniform( info, addr, this );

			}

		}

		WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

			var u = this.map[ name ];

			if ( u !== undefined ) u.setValue( gl, value, this.renderer );

		};

		WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

			var v = object[ name ];

			if ( v !== undefined ) this.setValue( gl, name, v );

		};


		// Static interface

		WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ],
					v = values[ u.id ];

				if ( v.needsUpdate !== false ) {

					// note: always updating when .needsUpdate is undefined
					u.setValue( gl, v.value, renderer );

				}

			}

		};

		WebGLUniforms.seqWithValue = function ( seq, values ) {

			var r = [];

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ];
				if ( u.id in values ) r.push( u );

			}

			return r;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
			'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
			'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
			'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
			'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
			'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
			'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
			'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
			'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
			'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
			'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
			'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
			'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
			'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
			'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
			'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
			'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
			'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
			'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
			'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
			'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
			'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
			'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
			'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

		function Color( r, g, b ) {

			if ( g === undefined && b === undefined ) {

				// r is THREE.Color, hex or string
				return this.set( r );

			}

			return this.setRGB( r, g, b );

		}

		Object.assign( Color.prototype, {

			isColor: true,

			r: 1, g: 1, b: 1,

			set: function ( value ) {

				if ( value && value.isColor ) {

					this.copy( value );

				} else if ( typeof value === 'number' ) {

					this.setHex( value );

				} else if ( typeof value === 'string' ) {

					this.setStyle( value );

				}

				return this;

			},

			setScalar: function ( scalar ) {

				this.r = scalar;
				this.g = scalar;
				this.b = scalar;

				return this;

			},

			setHex: function ( hex ) {

				hex = Math.floor( hex );

				this.r = ( hex >> 16 & 255 ) / 255;
				this.g = ( hex >> 8 & 255 ) / 255;
				this.b = ( hex & 255 ) / 255;

				return this;

			},

			setRGB: function ( r, g, b ) {

				this.r = r;
				this.g = g;
				this.b = b;

				return this;

			},

			setHSL: function () {

				function hue2rgb( p, q, t ) {

					if ( t < 0 ) t += 1;
					if ( t > 1 ) t -= 1;
					if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
					if ( t < 1 / 2 ) return q;
					if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
					return p;

				}

				return function setHSL( h, s, l ) {

					// h,s,l ranges are in 0.0 - 1.0
					h = _Math.euclideanModulo( h, 1 );
					s = _Math.clamp( s, 0, 1 );
					l = _Math.clamp( l, 0, 1 );

					if ( s === 0 ) {

						this.r = this.g = this.b = l;

					} else {

						var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
						var q = ( 2 * l ) - p;

						this.r = hue2rgb( q, p, h + 1 / 3 );
						this.g = hue2rgb( q, p, h );
						this.b = hue2rgb( q, p, h - 1 / 3 );

					}

					return this;

				};

			}(),

			setStyle: function ( style ) {

				function handleAlpha( string ) {

					if ( string === undefined ) return;

					if ( parseFloat( string ) < 1 ) {

						console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

					}

				}


				var m;

				if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

					// rgb / hsl

					var color;
					var name = m[ 1 ];
					var components = m[ 2 ];

					switch ( name ) {

						case 'rgb':
						case 'rgba':

							if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// rgb(255,0,0) rgba(255,0,0,0.5)
								this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
								this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
								this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

								handleAlpha( color[ 5 ] );

								return this;

							}

							if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
								this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
								this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
								this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

								handleAlpha( color[ 5 ] );

								return this;

							}

							break;

						case 'hsl':
						case 'hsla':

							if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
								var h = parseFloat( color[ 1 ] ) / 360;
								var s = parseInt( color[ 2 ], 10 ) / 100;
								var l = parseInt( color[ 3 ], 10 ) / 100;

								handleAlpha( color[ 5 ] );

								return this.setHSL( h, s, l );

							}

							break;

					}

				} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

					// hex color

					var hex = m[ 1 ];
					var size = hex.length;

					if ( size === 3 ) {

						// #ff0
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

						return this;

					} else if ( size === 6 ) {

						// #ff0000
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

						return this;

					}

				}

				if ( style && style.length > 0 ) {

					// color keywords
					var hex = ColorKeywords[ style ];

					if ( hex !== undefined ) {

						// red
						this.setHex( hex );

					} else {

						// unknown color
						console.warn( 'THREE.Color: Unknown color ' + style );

					}

				}

				return this;

			},

			clone: function () {

				return new this.constructor( this.r, this.g, this.b );

			},

			copy: function ( color ) {

				this.r = color.r;
				this.g = color.g;
				this.b = color.b;

				return this;

			},

			copyGammaToLinear: function ( color, gammaFactor ) {

				if ( gammaFactor === undefined ) gammaFactor = 2.0;

				this.r = Math.pow( color.r, gammaFactor );
				this.g = Math.pow( color.g, gammaFactor );
				this.b = Math.pow( color.b, gammaFactor );

				return this;

			},

			copyLinearToGamma: function ( color, gammaFactor ) {

				if ( gammaFactor === undefined ) gammaFactor = 2.0;

				var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

				this.r = Math.pow( color.r, safeInverse );
				this.g = Math.pow( color.g, safeInverse );
				this.b = Math.pow( color.b, safeInverse );

				return this;

			},

			convertGammaToLinear: function () {

				var r = this.r, g = this.g, b = this.b;

				this.r = r * r;
				this.g = g * g;
				this.b = b * b;

				return this;

			},

			convertLinearToGamma: function () {

				this.r = Math.sqrt( this.r );
				this.g = Math.sqrt( this.g );
				this.b = Math.sqrt( this.b );

				return this;

			},

			getHex: function () {

				return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

			},

			getHexString: function () {

				return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

			},

			getHSL: function ( optionalTarget ) {

				// h,s,l ranges are in 0.0 - 1.0

				var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

				var r = this.r, g = this.g, b = this.b;

				var max = Math.max( r, g, b );
				var min = Math.min( r, g, b );

				var hue, saturation;
				var lightness = ( min + max ) / 2.0;

				if ( min === max ) {

					hue = 0;
					saturation = 0;

				} else {

					var delta = max - min;

					saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

					switch ( max ) {

						case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
						case g: hue = ( b - r ) / delta + 2; break;
						case b: hue = ( r - g ) / delta + 4; break;

					}

					hue /= 6;

				}

				hsl.h = hue;
				hsl.s = saturation;
				hsl.l = lightness;

				return hsl;

			},

			getStyle: function () {

				return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

			},

			offsetHSL: function ( h, s, l ) {

				var hsl = this.getHSL();

				hsl.h += h; hsl.s += s; hsl.l += l;

				this.setHSL( hsl.h, hsl.s, hsl.l );

				return this;

			},

			add: function ( color ) {

				this.r += color.r;
				this.g += color.g;
				this.b += color.b;

				return this;

			},

			addColors: function ( color1, color2 ) {

				this.r = color1.r + color2.r;
				this.g = color1.g + color2.g;
				this.b = color1.b + color2.b;

				return this;

			},

			addScalar: function ( s ) {

				this.r += s;
				this.g += s;
				this.b += s;

				return this;

			},

			sub: function( color ) {

				this.r = Math.max( 0, this.r - color.r );
				this.g = Math.max( 0, this.g - color.g );
				this.b = Math.max( 0, this.b - color.b );

				return this;

			},

			multiply: function ( color ) {

				this.r *= color.r;
				this.g *= color.g;
				this.b *= color.b;

				return this;

			},

			multiplyScalar: function ( s ) {

				this.r *= s;
				this.g *= s;
				this.b *= s;

				return this;

			},

			lerp: function ( color, alpha ) {

				this.r += ( color.r - this.r ) * alpha;
				this.g += ( color.g - this.g ) * alpha;
				this.b += ( color.b - this.b ) * alpha;

				return this;

			},

			equals: function ( c ) {

				return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.r = array[ offset ];
				this.g = array[ offset + 1 ];
				this.b = array[ offset + 2 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.r;
				array[ offset + 1 ] = this.g;
				array[ offset + 2 ] = this.b;

				return array;

			},

			toJSON: function () {

				return this.getHex();

			}

		} );

		/**
		 * Uniforms library for shared webgl shaders
		 */

		var UniformsLib = {

			common: {

				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },

				map: { value: null },
				offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

				specularMap: { value: null },
				alphaMap: { value: null },

				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				reflectivity: { value: 1.0 },
				refractionRatio: { value: 0.98 }

			},

			aomap: {

				aoMap: { value: null },
				aoMapIntensity: { value: 1 }

			},

			lightmap: {

				lightMap: { value: null },
				lightMapIntensity: { value: 1 }

			},

			emissivemap: {

				emissiveMap: { value: null }

			},

			bumpmap: {

				bumpMap: { value: null },
				bumpScale: { value: 1 }

			},

			normalmap: {

				normalMap: { value: null },
				normalScale: { value: new Vector2( 1, 1 ) }

			},

			displacementmap: {

				displacementMap: { value: null },
				displacementScale: { value: 1 },
				displacementBias: { value: 0 }

			},

			roughnessmap: {

				roughnessMap: { value: null }

			},

			metalnessmap: {

				metalnessMap: { value: null }

			},

			gradientmap: {

				gradientMap: { value: null }

			},

			fog: {

				fogDensity: { value: 0.00025 },
				fogNear: { value: 1 },
				fogFar: { value: 2000 },
				fogColor: { value: new Color( 0xffffff ) }

			},

			lights: {

				ambientLightColor: { value: [] },

				directionalLights: { value: [], properties: {
					direction: {},
					color: {},

					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },

				directionalShadowMap: { value: [] },
				directionalShadowMatrix: { value: [] },

				spotLights: { value: [], properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {},

					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },

				spotShadowMap: { value: [] },
				spotShadowMatrix: { value: [] },

				pointLights: { value: [], properties: {
					color: {},
					position: {},
					decay: {},
					distance: {},

					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },

				pointShadowMap: { value: [] },
				pointShadowMatrix: { value: [] },

				hemisphereLights: { value: [], properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				} },

				// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
				rectAreaLights: { value: [], properties: {
					color: {},
					position: {},
					width: {},
					height: {}
				} }

			},

			points: {

				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
				size: { value: 1.0 },
				scale: { value: 1.0 },
				map: { value: null },
				offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

			}

		};

		/**
		 * Uniform Utilities
		 */

		var UniformsUtils = {

			merge: function ( uniforms ) {

				var merged = {};

				for ( var u = 0; u < uniforms.length; u ++ ) {

					var tmp = this.clone( uniforms[ u ] );

					for ( var p in tmp ) {

						merged[ p ] = tmp[ p ];

					}

				}

				return merged;

			},

			clone: function ( uniforms_src ) {

				var uniforms_dst = {};

				for ( var u in uniforms_src ) {

					uniforms_dst[ u ] = {};

					for ( var p in uniforms_src[ u ] ) {

						var parameter_src = uniforms_src[ u ][ p ];

						if ( parameter_src && ( parameter_src.isColor ||
							parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
							parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
							parameter_src.isTexture ) ) {

							uniforms_dst[ u ][ p ] = parameter_src.clone();

						} else if ( Array.isArray( parameter_src ) ) {

							uniforms_dst[ u ][ p ] = parameter_src.slice();

						} else {

							uniforms_dst[ u ][ p ] = parameter_src;

						}

					}

				}

				return uniforms_dst;

			}

		};

		var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

		var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

		var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

		var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

		var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

		var begin_vertex = "\nvec3 transformed = vec3( position );\n";

		var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

		var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

		var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

		var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

		var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

		var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

		var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

		var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

		var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

		var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

		var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

		var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n";

		var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

		var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

		var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

		var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

		var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

		var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

		var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

		var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

		var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

		var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

		var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

		var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

		var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

		var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

		var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

		var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

		var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

		var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

		var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

		var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

		var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

		var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

		var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

		var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

		var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

		var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

		var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

		var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

		var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

		var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

		var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

		var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

		var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

		var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

		var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

		var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

		var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

		var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

		var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

		var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

		var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

		var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

		var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

		var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

		var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

		var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

		var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

		var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

		var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

		var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

		var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

		var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

		var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

		var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

		var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

		var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

		var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

		var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

		var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

		var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

		var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

		var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

		var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

		var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

		var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

		var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

		var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

		var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

		var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

		var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

		var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

		var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

		var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

		var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

		var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

		var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

		var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

		var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

		var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

		var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

		var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

		var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

		var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

		var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

		var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

		var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

		var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

		var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

		var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

		var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

		var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\n}\n";

		var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

		var ShaderChunk = {
			alphamap_fragment: alphamap_fragment,
			alphamap_pars_fragment: alphamap_pars_fragment,
			alphatest_fragment: alphatest_fragment,
			aomap_fragment: aomap_fragment,
			aomap_pars_fragment: aomap_pars_fragment,
			begin_vertex: begin_vertex,
			beginnormal_vertex: beginnormal_vertex,
			bsdfs: bsdfs,
			bumpmap_pars_fragment: bumpmap_pars_fragment,
			clipping_planes_fragment: clipping_planes_fragment,
			clipping_planes_pars_fragment: clipping_planes_pars_fragment,
			clipping_planes_pars_vertex: clipping_planes_pars_vertex,
			clipping_planes_vertex: clipping_planes_vertex,
			color_fragment: color_fragment,
			color_pars_fragment: color_pars_fragment,
			color_pars_vertex: color_pars_vertex,
			color_vertex: color_vertex,
			common: common,
			cube_uv_reflection_fragment: cube_uv_reflection_fragment,
			defaultnormal_vertex: defaultnormal_vertex,
			displacementmap_pars_vertex: displacementmap_pars_vertex,
			displacementmap_vertex: displacementmap_vertex,
			emissivemap_fragment: emissivemap_fragment,
			emissivemap_pars_fragment: emissivemap_pars_fragment,
			encodings_fragment: encodings_fragment,
			encodings_pars_fragment: encodings_pars_fragment,
			envmap_fragment: envmap_fragment,
			envmap_pars_fragment: envmap_pars_fragment,
			envmap_pars_vertex: envmap_pars_vertex,
			envmap_vertex: envmap_vertex,
			fog_vertex: fog_vertex,
			fog_pars_vertex: fog_pars_vertex,
			fog_fragment: fog_fragment,
			fog_pars_fragment: fog_pars_fragment,
			gradientmap_pars_fragment: gradientmap_pars_fragment,
			lightmap_fragment: lightmap_fragment,
			lightmap_pars_fragment: lightmap_pars_fragment,
			lights_lambert_vertex: lights_lambert_vertex,
			lights_pars: lights_pars,
			lights_phong_fragment: lights_phong_fragment,
			lights_phong_pars_fragment: lights_phong_pars_fragment,
			lights_physical_fragment: lights_physical_fragment,
			lights_physical_pars_fragment: lights_physical_pars_fragment,
			lights_template: lights_template,
			logdepthbuf_fragment: logdepthbuf_fragment,
			logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
			logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
			logdepthbuf_vertex: logdepthbuf_vertex,
			map_fragment: map_fragment,
			map_pars_fragment: map_pars_fragment,
			map_particle_fragment: map_particle_fragment,
			map_particle_pars_fragment: map_particle_pars_fragment,
			metalnessmap_fragment: metalnessmap_fragment,
			metalnessmap_pars_fragment: metalnessmap_pars_fragment,
			morphnormal_vertex: morphnormal_vertex,
			morphtarget_pars_vertex: morphtarget_pars_vertex,
			morphtarget_vertex: morphtarget_vertex,
			normal_flip: normal_flip,
			normal_fragment: normal_fragment,
			normalmap_pars_fragment: normalmap_pars_fragment,
			packing: packing,
			premultiplied_alpha_fragment: premultiplied_alpha_fragment,
			project_vertex: project_vertex,
			dithering_fragment: dithering_fragment,
			dithering_pars_fragment: dithering_pars_fragment,
			roughnessmap_fragment: roughnessmap_fragment,
			roughnessmap_pars_fragment: roughnessmap_pars_fragment,
			shadowmap_pars_fragment: shadowmap_pars_fragment,
			shadowmap_pars_vertex: shadowmap_pars_vertex,
			shadowmap_vertex: shadowmap_vertex,
			shadowmask_pars_fragment: shadowmask_pars_fragment,
			skinbase_vertex: skinbase_vertex,
			skinning_pars_vertex: skinning_pars_vertex,
			skinning_vertex: skinning_vertex,
			skinnormal_vertex: skinnormal_vertex,
			specularmap_fragment: specularmap_fragment,
			specularmap_pars_fragment: specularmap_pars_fragment,
			tonemapping_fragment: tonemapping_fragment,
			tonemapping_pars_fragment: tonemapping_pars_fragment,
			uv_pars_fragment: uv_pars_fragment,
			uv_pars_vertex: uv_pars_vertex,
			uv_vertex: uv_vertex,
			uv2_pars_fragment: uv2_pars_fragment,
			uv2_pars_vertex: uv2_pars_vertex,
			uv2_vertex: uv2_vertex,
			worldpos_vertex: worldpos_vertex,

			cube_frag: cube_frag,
			cube_vert: cube_vert,
			depth_frag: depth_frag,
			depth_vert: depth_vert,
			distanceRGBA_frag: distanceRGBA_frag,
			distanceRGBA_vert: distanceRGBA_vert,
			equirect_frag: equirect_frag,
			equirect_vert: equirect_vert,
			linedashed_frag: linedashed_frag,
			linedashed_vert: linedashed_vert,
			meshbasic_frag: meshbasic_frag,
			meshbasic_vert: meshbasic_vert,
			meshlambert_frag: meshlambert_frag,
			meshlambert_vert: meshlambert_vert,
			meshphong_frag: meshphong_frag,
			meshphong_vert: meshphong_vert,
			meshphysical_frag: meshphysical_frag,
			meshphysical_vert: meshphysical_vert,
			normal_frag: normal_frag,
			normal_vert: normal_vert,
			points_frag: points_frag,
			points_vert: points_vert,
			shadow_frag: shadow_frag,
			shadow_vert: shadow_vert
		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 */

		var ShaderLib = {

			basic: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.fog
				] ),

				vertexShader: ShaderChunk.meshbasic_vert,
				fragmentShader: ShaderChunk.meshbasic_frag

			},

			lambert: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) }
					}
				] ),

				vertexShader: ShaderChunk.meshlambert_vert,
				fragmentShader: ShaderChunk.meshlambert_frag

			},

			phong: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.gradientmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						specular: { value: new Color( 0x111111 ) },
						shininess: { value: 30 }
					}
				] ),

				vertexShader: ShaderChunk.meshphong_vert,
				fragmentShader: ShaderChunk.meshphong_frag

			},

			standard: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.roughnessmap,
					UniformsLib.metalnessmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						roughness: { value: 0.5 },
						metalness: { value: 0.5 },
						envMapIntensity: { value: 1 } // temporary
					}
				] ),

				vertexShader: ShaderChunk.meshphysical_vert,
				fragmentShader: ShaderChunk.meshphysical_frag

			},

			points: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.points,
					UniformsLib.fog
				] ),

				vertexShader: ShaderChunk.points_vert,
				fragmentShader: ShaderChunk.points_frag

			},

			dashed: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.fog,
					{
						scale: { value: 1 },
						dashSize: { value: 1 },
						totalSize: { value: 2 }
					}
				] ),

				vertexShader: ShaderChunk.linedashed_vert,
				fragmentShader: ShaderChunk.linedashed_frag

			},

			depth: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.displacementmap
				] ),

				vertexShader: ShaderChunk.depth_vert,
				fragmentShader: ShaderChunk.depth_frag

			},

			normal: {

				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					{
						opacity: { value: 1.0 }
					}
				] ),

				vertexShader: ShaderChunk.normal_vert,
				fragmentShader: ShaderChunk.normal_frag

			},

			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */

			cube: {

				uniforms: {
					tCube: { value: null },
					tFlip: { value: - 1 },
					opacity: { value: 1.0 }
				},

				vertexShader: ShaderChunk.cube_vert,
				fragmentShader: ShaderChunk.cube_frag

			},

			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */

			equirect: {

				uniforms: {
					tEquirect: { value: null },
					tFlip: { value: - 1 }
				},

				vertexShader: ShaderChunk.equirect_vert,
				fragmentShader: ShaderChunk.equirect_frag

			},

			distanceRGBA: {

				uniforms: {
					lightPos: { value: new Vector3() }
				},

				vertexShader: ShaderChunk.distanceRGBA_vert,
				fragmentShader: ShaderChunk.distanceRGBA_frag

			}

		};

		ShaderLib.physical = {

			uniforms: UniformsUtils.merge( [
				ShaderLib.standard.uniforms,
				{
					clearCoat: { value: 0 },
					clearCoatRoughness: { value: 0 }
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		};

		/**
		 * @author bhouston / http://clara.io
		 */

		function Box2( min, max ) {

			this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

		}

		Object.assign( Box2.prototype, {

			set: function ( min, max ) {

				this.min.copy( min );
				this.max.copy( max );

				return this;

			},

			setFromPoints: function ( points ) {

				this.makeEmpty();

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					this.expandByPoint( points[ i ] );

				}

				return this;

			},

			setFromCenterAndSize: function () {

				var v1 = new Vector2();

				return function setFromCenterAndSize( center, size ) {

					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( box ) {

				this.min.copy( box.min );
				this.max.copy( box.max );

				return this;

			},

			makeEmpty: function () {

				this.min.x = this.min.y = + Infinity;
				this.max.x = this.max.y = - Infinity;

				return this;

			},

			isEmpty: function () {

				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

			},

			getCenter: function ( optionalTarget ) {

				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

			},

			getSize: function ( optionalTarget ) {

				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

			},

			expandByPoint: function ( point ) {

				this.min.min( point );
				this.max.max( point );

				return this;

			},

			expandByVector: function ( vector ) {

				this.min.sub( vector );
				this.max.add( vector );

				return this;

			},

			expandByScalar: function ( scalar ) {

				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );

				return this;

			},

			containsPoint: function ( point ) {

				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ? false : true;

			},

			containsBox: function ( box ) {

				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y;

			},

			getParameter: function ( point, optionalTarget ) {

				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.

				var result = optionalTarget || new Vector2();

				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y )
				);

			},

			intersectsBox: function ( box ) {

				// using 4 splitting planes to rule out intersections

				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

			},

			clampPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new Vector2();
				return result.copy( point ).clamp( this.min, this.max );

			},

			distanceToPoint: function () {

				var v1 = new Vector2();

				return function distanceToPoint( point ) {

					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();

				};

			}(),

			intersect: function ( box ) {

				this.min.max( box.min );
				this.max.min( box.max );

				return this;

			},

			union: function ( box ) {

				this.min.min( box.min );
				this.max.max( box.max );

				return this;

			},

			translate: function ( offset ) {

				this.min.add( offset );
				this.max.add( offset );

				return this;

			},

			equals: function ( box ) {

				return box.min.equals( this.min ) && box.max.equals( this.max );

			}

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function LensFlarePlugin( renderer, flares ) {

			var gl = renderer.context;
			var state = renderer.state;

			var vertexBuffer, elementBuffer;
			var shader, program, attributes, uniforms;

			var tempTexture, occlusionTexture;

			function init() {

				var vertices = new Float32Array( [
					- 1, - 1,  0, 0,
					 1, - 1,  1, 0,
					 1,  1,  1, 1,
					- 1,  1,  0, 1
				] );

				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );

				// buffers

				vertexBuffer     = gl.createBuffer();
				elementBuffer    = gl.createBuffer();

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

				// textures

				tempTexture      = gl.createTexture();
				occlusionTexture = gl.createTexture();

				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"uniform sampler2D occlusionMap;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

				program = createProgram( shader );

				attributes = {
					vertex: gl.getAttribLocation ( program, "position" ),
					uv:     gl.getAttribLocation ( program, "uv" )
				};

				uniforms = {
					renderType:     gl.getUniformLocation( program, "renderType" ),
					map:            gl.getUniformLocation( program, "map" ),
					occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
					opacity:        gl.getUniformLocation( program, "opacity" ),
					color:          gl.getUniformLocation( program, "color" ),
					scale:          gl.getUniformLocation( program, "scale" ),
					rotation:       gl.getUniformLocation( program, "rotation" ),
					screenPosition: gl.getUniformLocation( program, "screenPosition" )
				};

			}

			/*
			 * Render lens flares
			 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
			 *         reads these back and calculates occlusion.
			 */

			this.render = function ( scene, camera, viewport ) {

				if ( flares.length === 0 ) return;

				var tempPosition = new Vector3();

				var invAspect = viewport.w / viewport.z,
					halfViewportWidth = viewport.z * 0.5,
					halfViewportHeight = viewport.w * 0.5;

				var size = 16 / viewport.w,
					scale = new Vector2( size * invAspect, size );

				var screenPosition = new Vector3( 1, 1, 0 ),
					screenPositionPixels = new Vector2( 1, 1 );

				var validArea = new Box2();

				validArea.min.set( viewport.x, viewport.y );
				validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

				if ( program === undefined ) {

					init();

				}

				gl.useProgram( program );

				state.initAttributes();
				state.enableAttribute( attributes.vertex );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();

				// loop through all lens flares to update their occlusion and positions
				// setup gl and common used attribs/uniforms

				gl.uniform1i( uniforms.occlusionMap, 0 );
				gl.uniform1i( uniforms.map, 1 );

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

				state.disable( gl.CULL_FACE );
				state.buffers.depth.setMask( false );

				for ( var i = 0, l = flares.length; i < l; i ++ ) {

					size = 16 / viewport.w;
					scale.set( size * invAspect, size );

					// calc object screen position

					var flare = flares[ i ];

					tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

					tempPosition.applyMatrix4( camera.matrixWorldInverse );
					tempPosition.applyMatrix4( camera.projectionMatrix );

					// setup arrays for gl programs

					screenPosition.copy( tempPosition );

					// horizontal and vertical coordinate of the lower left corner of the pixels to copy

					screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
					screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

					// screen cull

					if ( validArea.containsPoint( screenPositionPixels ) === true ) {

						// save current RGB to temp texture

						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, null );
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


						// render pink quad

						gl.uniform1i( uniforms.renderType, 0 );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

						state.disable( gl.BLEND );
						state.enable( gl.DEPTH_TEST );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


						// copy result to occlusionMap

						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


						// restore graphics

						gl.uniform1i( uniforms.renderType, 1 );
						state.disable( gl.DEPTH_TEST );

						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


						// update object positions

						flare.positionScreen.copy( screenPosition );

						if ( flare.customUpdateCallback ) {

							flare.customUpdateCallback( flare );

						} else {

							flare.updateLensFlares();

						}

						// render flares

						gl.uniform1i( uniforms.renderType, 2 );
						state.enable( gl.BLEND );

						for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

							var sprite = flare.lensFlares[ j ];

							if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

								screenPosition.x = sprite.x;
								screenPosition.y = sprite.y;
								screenPosition.z = sprite.z;

								size = sprite.size * sprite.scale / viewport.w;

								scale.x = size * invAspect;
								scale.y = size;

								gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
								gl.uniform2f( uniforms.scale, scale.x, scale.y );
								gl.uniform1f( uniforms.rotation, sprite.rotation );

								gl.uniform1f( uniforms.opacity, sprite.opacity );
								gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

								state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
								renderer.setTexture2D( sprite.texture, 1 );

								gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

							}

						}

					}

				}

				// restore gl

				state.enable( gl.CULL_FACE );
				state.enable( gl.DEPTH_TEST );
				state.buffers.depth.setMask( true );

				renderer.resetGLState();

			};

			function createProgram( shader ) {

				var program = gl.createProgram();

				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );

				var prefix = "precision " + renderer.getPrecision() + " float;\n";

				gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
				gl.shaderSource( vertexShader, prefix + shader.vertexShader );

				gl.compileShader( fragmentShader );
				gl.compileShader( vertexShader );

				gl.attachShader( program, fragmentShader );
				gl.attachShader( program, vertexShader );

				gl.linkProgram( program );

				return program;

			}

		}

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function SpritePlugin( renderer, sprites ) {

			var gl = renderer.context;
			var state = renderer.state;

			var vertexBuffer, elementBuffer;
			var program, attributes, uniforms;

			var texture;

			// decompose matrixWorld

			var spritePosition = new Vector3();
			var spriteRotation = new Quaternion();
			var spriteScale = new Vector3();

			function init() {

				var vertices = new Float32Array( [
					- 0.5, - 0.5,  0, 0,
					  0.5, - 0.5,  1, 0,
					  0.5,   0.5,  1, 1,
					- 0.5,   0.5,  0, 1
				] );

				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );

				vertexBuffer  = gl.createBuffer();
				elementBuffer = gl.createBuffer();

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

				program = createProgram();

				attributes = {
					position:			gl.getAttribLocation ( program, 'position' ),
					uv:					gl.getAttribLocation ( program, 'uv' )
				};

				uniforms = {
					uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
					uvScale:			gl.getUniformLocation( program, 'uvScale' ),

					rotation:			gl.getUniformLocation( program, 'rotation' ),
					scale:				gl.getUniformLocation( program, 'scale' ),

					color:				gl.getUniformLocation( program, 'color' ),
					map:				gl.getUniformLocation( program, 'map' ),
					opacity:			gl.getUniformLocation( program, 'opacity' ),

					modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
					projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

					fogType:			gl.getUniformLocation( program, 'fogType' ),
					fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
					fogNear:			gl.getUniformLocation( program, 'fogNear' ),
					fogFar:				gl.getUniformLocation( program, 'fogFar' ),
					fogColor:			gl.getUniformLocation( program, 'fogColor' ),

					alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
				};

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = 8;
				canvas.height = 8;

				var context = canvas.getContext( '2d' );
				context.fillStyle = 'white';
				context.fillRect( 0, 0, 8, 8 );

				texture = new Texture( canvas );
				texture.needsUpdate = true;

			}

			this.render = function ( scene, camera ) {

				if ( sprites.length === 0 ) return;

				// setup gl

				if ( program === undefined ) {

					init();

				}

				gl.useProgram( program );

				state.initAttributes();
				state.enableAttribute( attributes.position );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();

				state.disable( gl.CULL_FACE );
				state.enable( gl.BLEND );

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

				gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

				state.activeTexture( gl.TEXTURE0 );
				gl.uniform1i( uniforms.map, 0 );

				var oldFogType = 0;
				var sceneFogType = 0;
				var fog = scene.fog;

				if ( fog ) {

					gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

					if ( fog.isFog ) {

						gl.uniform1f( uniforms.fogNear, fog.near );
						gl.uniform1f( uniforms.fogFar, fog.far );

						gl.uniform1i( uniforms.fogType, 1 );
						oldFogType = 1;
						sceneFogType = 1;

					} else if ( fog.isFogExp2 ) {

						gl.uniform1f( uniforms.fogDensity, fog.density );

						gl.uniform1i( uniforms.fogType, 2 );
						oldFogType = 2;
						sceneFogType = 2;

					}

				} else {

					gl.uniform1i( uniforms.fogType, 0 );
					oldFogType = 0;
					sceneFogType = 0;

				}


				// update positions and sort

				for ( var i = 0, l = sprites.length; i < l; i ++ ) {

					var sprite = sprites[ i ];

					sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
					sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

				}

				sprites.sort( painterSortStable );

				// render all sprites

				var scale = [];

				for ( var i = 0, l = sprites.length; i < l; i ++ ) {

					var sprite = sprites[ i ];
					var material = sprite.material;

					if ( material.visible === false ) continue;

					sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

					gl.uniform1f( uniforms.alphaTest, material.alphaTest );
					gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

					sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

					scale[ 0 ] = spriteScale.x;
					scale[ 1 ] = spriteScale.y;

					var fogType = 0;

					if ( scene.fog && material.fog ) {

						fogType = sceneFogType;

					}

					if ( oldFogType !== fogType ) {

						gl.uniform1i( uniforms.fogType, fogType );
						oldFogType = fogType;

					}

					if ( material.map !== null ) {

						gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
						gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

					} else {

						gl.uniform2f( uniforms.uvOffset, 0, 0 );
						gl.uniform2f( uniforms.uvScale, 1, 1 );

					}

					gl.uniform1f( uniforms.opacity, material.opacity );
					gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

					gl.uniform1f( uniforms.rotation, material.rotation );
					gl.uniform2fv( uniforms.scale, scale );

					state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
					state.buffers.depth.setTest( material.depthTest );
					state.buffers.depth.setMask( material.depthWrite );

					if ( material.map ) {

						renderer.setTexture2D( material.map, 0 );

					} else {

						renderer.setTexture2D( texture, 0 );

					}

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

				}

				// restore gl

				state.enable( gl.CULL_FACE );

				renderer.resetGLState();

			};

			function createProgram() {

				var program = gl.createProgram();

				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

				gl.shaderSource( vertexShader, [

					'precision ' + renderer.getPrecision() + ' float;',

					'#define SHADER_NAME ' + 'SpriteMaterial',

					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform float rotation;',
					'uniform vec2 scale;',
					'uniform vec2 uvOffset;',
					'uniform vec2 uvScale;',

					'attribute vec2 position;',
					'attribute vec2 uv;',

					'varying vec2 vUV;',

					'void main() {',

						'vUV = uvOffset + uv * uvScale;',

						'vec2 alignedPosition = position * scale;',

						'vec2 rotatedPosition;',
						'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
						'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

						'vec4 finalPosition;',

						'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
						'finalPosition.xy += rotatedPosition;',
						'finalPosition = projectionMatrix * finalPosition;',

						'gl_Position = finalPosition;',

					'}'

				].join( '\n' ) );

				gl.shaderSource( fragmentShader, [

					'precision ' + renderer.getPrecision() + ' float;',

					'#define SHADER_NAME ' + 'SpriteMaterial',

					'uniform vec3 color;',
					'uniform sampler2D map;',
					'uniform float opacity;',

					'uniform int fogType;',
					'uniform vec3 fogColor;',
					'uniform float fogDensity;',
					'uniform float fogNear;',
					'uniform float fogFar;',
					'uniform float alphaTest;',

					'varying vec2 vUV;',

					'void main() {',

						'vec4 texture = texture2D( map, vUV );',

						'if ( texture.a < alphaTest ) discard;',

						'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

						'if ( fogType > 0 ) {',

							'float depth = gl_FragCoord.z / gl_FragCoord.w;',
							'float fogFactor = 0.0;',

							'if ( fogType == 1 ) {',

								'fogFactor = smoothstep( fogNear, fogFar, depth );',

							'} else {',

								'const float LOG2 = 1.442695;',
								'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
								'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

							'}',

							'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

						'}',

					'}'

				].join( '\n' ) );

				gl.compileShader( vertexShader );
				gl.compileShader( fragmentShader );

				gl.attachShader( program, vertexShader );
				gl.attachShader( program, fragmentShader );

				gl.linkProgram( program );

				return program;

			}

			function painterSortStable( a, b ) {

				if ( a.renderOrder !== b.renderOrder ) {

					return a.renderOrder - b.renderOrder;

				} else if ( a.z !== b.z ) {

					return b.z - a.z;

				} else {

					return b.id - a.id;

				}

			}

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		var materialId = 0;

		function Material() {

			Object.defineProperty( this, 'id', { value: materialId ++ } );

			this.uuid = _Math.generateUUID();

			this.name = '';
			this.type = 'Material';

			this.fog = true;
			this.lights = true;

			this.blending = NormalBlending;
			this.side = FrontSide;
			this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
			this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

			this.opacity = 1;
			this.transparent = false;

			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;

			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;

			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;

			this.colorWrite = true;

			this.precision = null; // override the renderer's default precision for this material

			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;

			this.dithering = false;

			this.alphaTest = 0;
			this.premultipliedAlpha = false;

			this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

			this.visible = true;

			this.needsUpdate = true;

		}

		Object.assign( Material.prototype, EventDispatcher.prototype, {

			isMaterial: true,

			onBeforeCompile: function () {},

			setValues: function ( values ) {

				if ( values === undefined ) return;

				for ( var key in values ) {

					var newValue = values[ key ];

					if ( newValue === undefined ) {

						console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
						continue;

					}

					var currentValue = this[ key ];

					if ( currentValue === undefined ) {

						console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
						continue;

					}

					if ( currentValue && currentValue.isColor ) {

						currentValue.set( newValue );

					} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

						currentValue.copy( newValue );

					} else if ( key === 'overdraw' ) {

						// ensure overdraw is backwards-compatible with legacy boolean type
						this[ key ] = Number( newValue );

					} else {

						this[ key ] = newValue;

					}

				}

			},

			toJSON: function ( meta ) {

				var isRoot = meta === undefined;

				if ( isRoot ) {

					meta = {
						textures: {},
						images: {}
					};

				}

				var data = {
					metadata: {
						version: 4.5,
						type: 'Material',
						generator: 'Material.toJSON'
					}
				};

				// standard Material serialization
				data.uuid = this.uuid;
				data.type = this.type;

				if ( this.name !== '' ) data.name = this.name;

				if ( this.color && this.color.isColor ) data.color = this.color.getHex();

				if ( this.roughness !== undefined ) data.roughness = this.roughness;
				if ( this.metalness !== undefined ) data.metalness = this.metalness;

				if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
				if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
				if ( this.shininess !== undefined ) data.shininess = this.shininess;
				if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
				if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

				if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
				if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
				if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
				if ( this.bumpMap && this.bumpMap.isTexture ) {

					data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
					data.bumpScale = this.bumpScale;

				}
				if ( this.normalMap && this.normalMap.isTexture ) {

					data.normalMap = this.normalMap.toJSON( meta ).uuid;
					data.normalScale = this.normalScale.toArray();

				}
				if ( this.displacementMap && this.displacementMap.isTexture ) {

					data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
					data.displacementScale = this.displacementScale;
					data.displacementBias = this.displacementBias;

				}
				if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
				if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

				if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
				if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

				if ( this.envMap && this.envMap.isTexture ) {

					data.envMap = this.envMap.toJSON( meta ).uuid;
					data.reflectivity = this.reflectivity; // Scale behind envMap

				}

				if ( this.gradientMap && this.gradientMap.isTexture ) {

					data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

				}

				if ( this.size !== undefined ) data.size = this.size;
				if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

				if ( this.blending !== NormalBlending ) data.blending = this.blending;
				if ( this.shading !== SmoothShading ) data.shading = this.shading;
				if ( this.side !== FrontSide ) data.side = this.side;
				if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

				if ( this.opacity < 1 ) data.opacity = this.opacity;
				if ( this.transparent === true ) data.transparent = this.transparent;

				data.depthFunc = this.depthFunc;
				data.depthTest = this.depthTest;
				data.depthWrite = this.depthWrite;

				if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
				if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
				if ( this.wireframe === true ) data.wireframe = this.wireframe;
				if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
				if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
				if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

				data.skinning = this.skinning;
				data.morphTargets = this.morphTargets;

				data.dithering = this.dithering;

				// TODO: Copied from Object3D.toJSON

				function extractFromCache( cache ) {

					var values = [];

					for ( var key in cache ) {

						var data = cache[ key ];
						delete data.metadata;
						values.push( data );

					}

					return values;

				}

				if ( isRoot ) {

					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );

					if ( textures.length > 0 ) data.textures = textures;
					if ( images.length > 0 ) data.images = images;

				}

				return data;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.name = source.name;

				this.fog = source.fog;
				this.lights = source.lights;

				this.blending = source.blending;
				this.side = source.side;
				this.shading = source.shading;
				this.vertexColors = source.vertexColors;

				this.opacity = source.opacity;
				this.transparent = source.transparent;

				this.blendSrc = source.blendSrc;
				this.blendDst = source.blendDst;
				this.blendEquation = source.blendEquation;
				this.blendSrcAlpha = source.blendSrcAlpha;
				this.blendDstAlpha = source.blendDstAlpha;
				this.blendEquationAlpha = source.blendEquationAlpha;

				this.depthFunc = source.depthFunc;
				this.depthTest = source.depthTest;
				this.depthWrite = source.depthWrite;

				this.colorWrite = source.colorWrite;

				this.precision = source.precision;

				this.polygonOffset = source.polygonOffset;
				this.polygonOffsetFactor = source.polygonOffsetFactor;
				this.polygonOffsetUnits = source.polygonOffsetUnits;

				this.dithering = source.dithering;

				this.alphaTest = source.alphaTest;

				this.premultipliedAlpha = source.premultipliedAlpha;

				this.overdraw = source.overdraw;

				this.visible = source.visible;
				this.clipShadows = source.clipShadows;
				this.clipIntersection = source.clipIntersection;

				var srcPlanes = source.clippingPlanes,
					dstPlanes = null;

				if ( srcPlanes !== null ) {

					var n = srcPlanes.length;
					dstPlanes = new Array( n );

					for ( var i = 0; i !== n; ++ i )
						dstPlanes[ i ] = srcPlanes[ i ].clone();

				}

				this.clippingPlanes = dstPlanes;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  defines: { "label" : "value" },
		 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
		 *
		 *  fragmentShader: <string>,
		 *  vertexShader: <string>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  lights: <bool>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		function ShaderMaterial( parameters ) {

			Material.call( this );

			this.type = 'ShaderMaterial';

			this.defines = {};
			this.uniforms = {};

			this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
			this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

			this.linewidth = 1;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes

			this.skinning = false; // set to use skinning attribute streams
			this.morphTargets = false; // set to use morph targets
			this.morphNormals = false; // set to use morph normals

			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};

			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv2': [ 0, 0 ]
			};

			this.index0AttributeName = undefined;

			if ( parameters !== undefined ) {

				if ( parameters.attributes !== undefined ) {

					console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

				}

				this.setValues( parameters );

			}

		}

		ShaderMaterial.prototype = Object.create( Material.prototype );
		ShaderMaterial.prototype.constructor = ShaderMaterial;

		ShaderMaterial.prototype.isShaderMaterial = true;

		ShaderMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;

			this.uniforms = UniformsUtils.clone( source.uniforms );

			this.defines = source.defines;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			this.lights = source.lights;
			this.clipping = source.clipping;

			this.skinning = source.skinning;

			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			this.extensions = source.extensions;

			return this;

		};

		ShaderMaterial.prototype.toJSON = function ( meta ) {

			var data = Material.prototype.toJSON.call( this, meta );

			data.uniforms = this.uniforms;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;

			return data;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / https://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */

		function MeshDepthMaterial( parameters ) {

			Material.call( this );

			this.type = 'MeshDepthMaterial';

			this.depthPacking = BasicDepthPacking;

			this.skinning = false;
			this.morphTargets = false;

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false;
			this.lights = false;

			this.setValues( parameters );

		}

		MeshDepthMaterial.prototype = Object.create( Material.prototype );
		MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

		MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

		MeshDepthMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.depthPacking = source.depthPacking;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			return this;

		};

		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function Box3( min, max ) {

			this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

		}

		Object.assign( Box3.prototype, {

			isBox3: true,

			set: function ( min, max ) {

				this.min.copy( min );
				this.max.copy( max );

				return this;

			},

			setFromArray: function ( array ) {

				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;

				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var x = array[ i ];
					var y = array[ i + 1 ];
					var z = array[ i + 2 ];

					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;

					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;

				}

				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );

				return this;

			},

			setFromBufferAttribute: function ( attribute ) {

				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;

				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;

				for ( var i = 0, l = attribute.count; i < l; i ++ ) {

					var x = attribute.getX( i );
					var y = attribute.getY( i );
					var z = attribute.getZ( i );

					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;

					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;

				}

				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );

				return this;

			},

			setFromPoints: function ( points ) {

				this.makeEmpty();

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					this.expandByPoint( points[ i ] );

				}

				return this;

			},

			setFromCenterAndSize: function () {

				var v1 = new Vector3();

				return function setFromCenterAndSize( center, size ) {

					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );

					return this;

				};

			}(),

			setFromObject: function ( object ) {

				this.makeEmpty();

				return this.expandByObject( object );

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( box ) {

				this.min.copy( box.min );
				this.max.copy( box.max );

				return this;

			},

			makeEmpty: function () {

				this.min.x = this.min.y = this.min.z = + Infinity;
				this.max.x = this.max.y = this.max.z = - Infinity;

				return this;

			},

			isEmpty: function () {

				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

			},

			getCenter: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

			},

			getSize: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

			},

			expandByPoint: function ( point ) {

				this.min.min( point );
				this.max.max( point );

				return this;

			},

			expandByVector: function ( vector ) {

				this.min.sub( vector );
				this.max.add( vector );

				return this;

			},

			expandByScalar: function ( scalar ) {

				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );

				return this;

			},

			expandByObject: function () {

				// Computes the world-axis-aligned bounding box of an object (including its children),
				// accounting for both the object's, and children's, world transforms

				var v1 = new Vector3();

				return function expandByObject( object ) {

					var scope = this;

					object.updateMatrixWorld( true );

					object.traverse( function ( node ) {

						var i, l;

						var geometry = node.geometry;

						if ( geometry !== undefined ) {

							if ( geometry.isGeometry ) {

								var vertices = geometry.vertices;

								for ( i = 0, l = vertices.length; i < l; i ++ ) {

									v1.copy( vertices[ i ] );
									v1.applyMatrix4( node.matrixWorld );

									scope.expandByPoint( v1 );

								}

							} else if ( geometry.isBufferGeometry ) {

								var attribute = geometry.attributes.position;

								if ( attribute !== undefined ) {

									for ( i = 0, l = attribute.count; i < l; i ++ ) {

										v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

										scope.expandByPoint( v1 );

									}

								}

							}

						}

					} );

					return this;

				};

			}(),

			containsPoint: function ( point ) {

				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ||
					point.z < this.min.z || point.z > this.max.z ? false : true;

			},

			containsBox: function ( box ) {

				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y &&
					this.min.z <= box.min.z && box.max.z <= this.max.z;

			},

			getParameter: function ( point, optionalTarget ) {

				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.

				var result = optionalTarget || new Vector3();

				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y ),
					( point.z - this.min.z ) / ( this.max.z - this.min.z )
				);

			},

			intersectsBox: function ( box ) {

				// using 6 splitting planes to rule out intersections.
				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ||
					box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

			},

			intersectsSphere: ( function () {

				var closestPoint = new Vector3();

				return function intersectsSphere( sphere ) {

					// Find the point on the AABB closest to the sphere center.
					this.clampPoint( sphere.center, closestPoint );

					// If that point is inside the sphere, the AABB and sphere intersect.
					return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

				};

			} )(),

			intersectsPlane: function ( plane ) {

				// We compute the minimum and maximum dot product values. If those values
				// are on the same side (back or front) of the plane, then there is no intersection.

				var min, max;

				if ( plane.normal.x > 0 ) {

					min = plane.normal.x * this.min.x;
					max = plane.normal.x * this.max.x;

				} else {

					min = plane.normal.x * this.max.x;
					max = plane.normal.x * this.min.x;

				}

				if ( plane.normal.y > 0 ) {

					min += plane.normal.y * this.min.y;
					max += plane.normal.y * this.max.y;

				} else {

					min += plane.normal.y * this.max.y;
					max += plane.normal.y * this.min.y;

				}

				if ( plane.normal.z > 0 ) {

					min += plane.normal.z * this.min.z;
					max += plane.normal.z * this.max.z;

				} else {

					min += plane.normal.z * this.max.z;
					max += plane.normal.z * this.min.z;

				}

				return ( min <= plane.constant && max >= plane.constant );

			},

			clampPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return result.copy( point ).clamp( this.min, this.max );

			},

			distanceToPoint: function () {

				var v1 = new Vector3();

				return function distanceToPoint( point ) {

					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();

				};

			}(),

			getBoundingSphere: function () {

				var v1 = new Vector3();

				return function getBoundingSphere( optionalTarget ) {

					var result = optionalTarget || new Sphere();

					this.getCenter( result.center );

					result.radius = this.getSize( v1 ).length() * 0.5;

					return result;

				};

			}(),

			intersect: function ( box ) {

				this.min.max( box.min );
				this.max.min( box.max );

				// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
				if( this.isEmpty() ) this.makeEmpty();

				return this;

			},

			union: function ( box ) {

				this.min.min( box.min );
				this.max.max( box.max );

				return this;

			},

			applyMatrix4: function () {

				var points = [
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3()
				];

				return function applyMatrix4( matrix ) {

					// transform of empty box is an empty box.
					if( this.isEmpty() ) return this;

					// NOTE: I am using a binary pattern to specify all 2^3 combinations below
					points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
					points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
					points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
					points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
					points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
					points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
					points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
					points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

					this.setFromPoints( points );

					return this;

				};

			}(),

			translate: function ( offset ) {

				this.min.add( offset );
				this.max.add( offset );

				return this;

			},

			equals: function ( box ) {

				return box.min.equals( this.min ) && box.max.equals( this.max );

			}

		} );

		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Sphere( center, radius ) {

			this.center = ( center !== undefined ) ? center : new Vector3();
			this.radius = ( radius !== undefined ) ? radius : 0;

		}

		Object.assign( Sphere.prototype, {

			set: function ( center, radius ) {

				this.center.copy( center );
				this.radius = radius;

				return this;

			},

			setFromPoints: function () {

				var box = new Box3();

				return function setFromPoints( points, optionalCenter ) {

					var center = this.center;

					if ( optionalCenter !== undefined ) {

						center.copy( optionalCenter );

					} else {

						box.setFromPoints( points ).getCenter( center );

					}

					var maxRadiusSq = 0;

					for ( var i = 0, il = points.length; i < il; i ++ ) {

						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

					}

					this.radius = Math.sqrt( maxRadiusSq );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( sphere ) {

				this.center.copy( sphere.center );
				this.radius = sphere.radius;

				return this;

			},

			empty: function () {

				return ( this.radius <= 0 );

			},

			containsPoint: function ( point ) {

				return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

			},

			distanceToPoint: function ( point ) {

				return ( point.distanceTo( this.center ) - this.radius );

			},

			intersectsSphere: function ( sphere ) {

				var radiusSum = this.radius + sphere.radius;

				return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

			},

			intersectsBox: function ( box ) {

				return box.intersectsSphere( this );

			},

			intersectsPlane: function ( plane ) {

				// We use the following equation to compute the signed distance from
				// the center of the sphere to the plane.
				//
				// distance = q * n - d
				//
				// If this distance is greater than the radius of the sphere,
				// then there is no intersection.

				return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

			},

			clampPoint: function ( point, optionalTarget ) {

				var deltaLengthSq = this.center.distanceToSquared( point );

				var result = optionalTarget || new Vector3();

				result.copy( point );

				if ( deltaLengthSq > ( this.radius * this.radius ) ) {

					result.sub( this.center ).normalize();
					result.multiplyScalar( this.radius ).add( this.center );

				}

				return result;

			},

			getBoundingBox: function ( optionalTarget ) {

				var box = optionalTarget || new Box3();

				box.set( this.center, this.center );
				box.expandByScalar( this.radius );

				return box;

			},

			applyMatrix4: function ( matrix ) {

				this.center.applyMatrix4( matrix );
				this.radius = this.radius * matrix.getMaxScaleOnAxis();

				return this;

			},

			translate: function ( offset ) {

				this.center.add( offset );

				return this;

			},

			equals: function ( sphere ) {

				return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 * @author tschw
		 */

		function Matrix3() {

			this.elements = [

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			];

			if ( arguments.length > 0 ) {

				console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

			}

		}

		Object.assign( Matrix3.prototype, {

			isMatrix3: true,

			set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

				var te = this.elements;

				te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
				te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
				te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

				return this;

			},

			identity: function () {

				this.set(

					1, 0, 0,
					0, 1, 0,
					0, 0, 1

				);

				return this;

			},

			clone: function () {

				return new this.constructor().fromArray( this.elements );

			},

			copy: function ( m ) {

				var te = this.elements;
				var me = m.elements;

				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
				te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
				te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

				return this;

			},

			setFromMatrix4: function ( m ) {

				var me = m.elements;

				this.set(

					me[ 0 ], me[ 4 ], me[  8 ],
					me[ 1 ], me[ 5 ], me[  9 ],
					me[ 2 ], me[ 6 ], me[ 10 ]

				);

				return this;

			},

			applyToBufferAttribute: function () {

				var v1 = new Vector3();

				return function applyToBufferAttribute( attribute ) {

					for ( var i = 0, l = attribute.count; i < l; i ++ ) {

						v1.x = attribute.getX( i );
						v1.y = attribute.getY( i );
						v1.z = attribute.getZ( i );

						v1.applyMatrix3( this );

						attribute.setXYZ( i, v1.x, v1.y, v1.z );

					}

					return attribute;

				};

			}(),

			multiply: function ( m ) {

				return this.multiplyMatrices( this, m );

			},

			premultiply: function ( m ) {

				return this.multiplyMatrices( m, this );

			},

			multiplyMatrices: function ( a, b ) {

				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;

				var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
				var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
				var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

				var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
				var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
				var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
				te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
				te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
				te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
				te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
				te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
				te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

				return this;

			},

			multiplyScalar: function ( s ) {

				var te = this.elements;

				te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
				te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
				te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

				return this;

			},

			determinant: function () {

				var te = this.elements;

				var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
					d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
					g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

				return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

			},

			getInverse: function ( matrix, throwOnDegenerate ) {

				if ( matrix && matrix.isMatrix4 ) {

					console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

				}

				var me = matrix.elements,
					te = this.elements,

					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
					n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
					n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

					t11 = n33 * n22 - n32 * n23,
					t12 = n32 * n13 - n33 * n12,
					t13 = n23 * n12 - n22 * n13,

					det = n11 * t11 + n21 * t12 + n31 * t13;

				if ( det === 0 ) {

					var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

					if ( throwOnDegenerate === true ) {

						throw new Error( msg );

					} else {

						console.warn( msg );

					}

					return this.identity();

				}

				var detInv = 1 / det;

				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
				te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

				te[ 3 ] = t12 * detInv;
				te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
				te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

				te[ 6 ] = t13 * detInv;
				te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
				te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

				return this;

			},

			transpose: function () {

				var tmp, m = this.elements;

				tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
				tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
				tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

				return this;

			},

			getNormalMatrix: function ( matrix4 ) {

				return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

			},

			transposeIntoArray: function ( r ) {

				var m = this.elements;

				r[ 0 ] = m[ 0 ];
				r[ 1 ] = m[ 3 ];
				r[ 2 ] = m[ 6 ];
				r[ 3 ] = m[ 1 ];
				r[ 4 ] = m[ 4 ];
				r[ 5 ] = m[ 7 ];
				r[ 6 ] = m[ 2 ];
				r[ 7 ] = m[ 5 ];
				r[ 8 ] = m[ 8 ];

				return this;

			},

			equals: function ( matrix ) {

				var te = this.elements;
				var me = matrix.elements;

				for ( var i = 0; i < 9; i ++ ) {

					if ( te[ i ] !== me[ i ] ) return false;

				}

				return true;

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				for ( var i = 0; i < 9; i ++ ) {

					this.elements[ i ] = array[ i + offset ];

				}

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				var te = this.elements;

				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];

				array[ offset + 3 ] = te[ 3 ];
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];

				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
				array[ offset + 8 ] = te[ 8 ];

				return array;

			}

		} );

		/**
		 * @author bhouston / http://clara.io
		 */

		function Plane( normal, constant ) {

			this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;

		}

		Object.assign( Plane.prototype, {

			set: function ( normal, constant ) {

				this.normal.copy( normal );
				this.constant = constant;

				return this;

			},

			setComponents: function ( x, y, z, w ) {

				this.normal.set( x, y, z );
				this.constant = w;

				return this;

			},

			setFromNormalAndCoplanarPoint: function ( normal, point ) {

				this.normal.copy( normal );
				this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

				return this;

			},

			setFromCoplanarPoints: function () {

				var v1 = new Vector3();
				var v2 = new Vector3();

				return function setFromCoplanarPoints( a, b, c ) {

					var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

					// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

					this.setFromNormalAndCoplanarPoint( normal, a );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( plane ) {

				this.normal.copy( plane.normal );
				this.constant = plane.constant;

				return this;

			},

			normalize: function () {

				// Note: will lead to a divide by zero if the plane is invalid.

				var inverseNormalLength = 1.0 / this.normal.length();
				this.normal.multiplyScalar( inverseNormalLength );
				this.constant *= inverseNormalLength;

				return this;

			},

			negate: function () {

				this.constant *= - 1;
				this.normal.negate();

				return this;

			},

			distanceToPoint: function ( point ) {

				return this.normal.dot( point ) + this.constant;

			},

			distanceToSphere: function ( sphere ) {

				return this.distanceToPoint( sphere.center ) - sphere.radius;

			},

			projectPoint: function ( point, optionalTarget ) {

				return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

			},

			orthoPoint: function ( point, optionalTarget ) {

				var perpendicularMagnitude = this.distanceToPoint( point );

				var result = optionalTarget || new Vector3();
				return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

			},

			intersectLine: function () {

				var v1 = new Vector3();

				return function intersectLine( line, optionalTarget ) {

					var result = optionalTarget || new Vector3();

					var direction = line.delta( v1 );

					var denominator = this.normal.dot( direction );

					if ( denominator === 0 ) {

						// line is coplanar, return origin
						if ( this.distanceToPoint( line.start ) === 0 ) {

							return result.copy( line.start );

						}

						// Unsure if this is the correct method to handle this case.
						return undefined;

					}

					var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

					if ( t < 0 || t > 1 ) {

						return undefined;

					}

					return result.copy( direction ).multiplyScalar( t ).add( line.start );

				};

			}(),

			intersectsLine: function ( line ) {

				// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

				var startSign = this.distanceToPoint( line.start );
				var endSign = this.distanceToPoint( line.end );

				return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

			},

			intersectsBox: function ( box ) {

				return box.intersectsPlane( this );

			},

			intersectsSphere: function ( sphere ) {

				return sphere.intersectsPlane( this );

			},

			coplanarPoint: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return result.copy( this.normal ).multiplyScalar( - this.constant );

			},

			applyMatrix4: function () {

				var v1 = new Vector3();
				var m1 = new Matrix3();

				return function applyMatrix4( matrix, optionalNormalMatrix ) {

					var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

					// transform normal based on theory here:
					// http://www.songho.ca/opengl/gl_normaltransform.html
					var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
					var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

					// recalculate constant (like in setFromNormalAndCoplanarPoint)
					this.constant = - referencePoint.dot( normal );

					return this;

				};

			}(),

			translate: function ( offset ) {

				this.constant = this.constant - offset.dot( this.normal );

				return this;

			},

			equals: function ( plane ) {

				return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / http://clara.io
		 */

		function Frustum( p0, p1, p2, p3, p4, p5 ) {

			this.planes = [

				( p0 !== undefined ) ? p0 : new Plane(),
				( p1 !== undefined ) ? p1 : new Plane(),
				( p2 !== undefined ) ? p2 : new Plane(),
				( p3 !== undefined ) ? p3 : new Plane(),
				( p4 !== undefined ) ? p4 : new Plane(),
				( p5 !== undefined ) ? p5 : new Plane()

			];

		}

		Object.assign( Frustum.prototype, {

			set: function ( p0, p1, p2, p3, p4, p5 ) {

				var planes = this.planes;

				planes[ 0 ].copy( p0 );
				planes[ 1 ].copy( p1 );
				planes[ 2 ].copy( p2 );
				planes[ 3 ].copy( p3 );
				planes[ 4 ].copy( p4 );
				planes[ 5 ].copy( p5 );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( frustum ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					planes[ i ].copy( frustum.planes[ i ] );

				}

				return this;

			},

			setFromMatrix: function ( m ) {

				var planes = this.planes;
				var me = m.elements;
				var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
				var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
				var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
				var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

				planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
				planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
				planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
				planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
				planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

				return this;

			},

			intersectsObject: function () {

				var sphere = new Sphere();

				return function intersectsObject( object ) {

					var geometry = object.geometry;

					if ( geometry.boundingSphere === null )
						geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere )
						.applyMatrix4( object.matrixWorld );

					return this.intersectsSphere( sphere );

				};

			}(),

			intersectsSprite: function () {

				var sphere = new Sphere();

				return function intersectsSprite( sprite ) {

					sphere.center.set( 0, 0, 0 );
					sphere.radius = 0.7071067811865476;
					sphere.applyMatrix4( sprite.matrixWorld );

					return this.intersectsSphere( sphere );

				};

			}(),

			intersectsSphere: function ( sphere ) {

				var planes = this.planes;
				var center = sphere.center;
				var negRadius = - sphere.radius;

				for ( var i = 0; i < 6; i ++ ) {

					var distance = planes[ i ].distanceToPoint( center );

					if ( distance < negRadius ) {

						return false;

					}

				}

				return true;

			},

			intersectsBox: function () {

				var p1 = new Vector3(),
					p2 = new Vector3();

				return function intersectsBox( box ) {

					var planes = this.planes;

					for ( var i = 0; i < 6; i ++ ) {

						var plane = planes[ i ];

						p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
						p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
						p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
						p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
						p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
						p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

						var d1 = plane.distanceToPoint( p1 );
						var d2 = plane.distanceToPoint( p2 );

						// if both outside plane, no intersection

						if ( d1 < 0 && d2 < 0 ) {

							return false;

						}

					}

					return true;

				};

			}(),

			containsPoint: function ( point ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					if ( planes[ i ].distanceToPoint( point ) < 0 ) {

						return false;

					}

				}

				return true;

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

			var _gl = _renderer.context,
				_state = _renderer.state,
				_frustum = new Frustum(),
				_projScreenMatrix = new Matrix4(),

				_lightShadows = _lights.shadows,

				_shadowMapSize = new Vector2(),
				_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

				_lookTarget = new Vector3(),
				_lightPositionWorld = new Vector3(),

				_MorphingFlag = 1,
				_SkinningFlag = 2,

				_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

				_depthMaterials = new Array( _NumberOfMaterialVariants ),
				_distanceMaterials = new Array( _NumberOfMaterialVariants ),

				_materialCache = {};

			var cubeDirections = [
				new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
				new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
			];

			var cubeUps = [
				new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
				new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
			];

			var cube2DViewPorts = [
				new Vector4(), new Vector4(), new Vector4(),
				new Vector4(), new Vector4(), new Vector4()
			];

			// init

			var depthMaterialTemplate = new MeshDepthMaterial();
			depthMaterialTemplate.depthPacking = RGBADepthPacking;
			depthMaterialTemplate.clipping = true;

			var distanceShader = ShaderLib[ "distanceRGBA" ];
			var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );

			for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

				var useMorphing = ( i & _MorphingFlag ) !== 0;
				var useSkinning = ( i & _SkinningFlag ) !== 0;

				var depthMaterial = depthMaterialTemplate.clone();
				depthMaterial.morphTargets = useMorphing;
				depthMaterial.skinning = useSkinning;

				_depthMaterials[ i ] = depthMaterial;

				var distanceMaterial = new ShaderMaterial( {
					defines: {
						'USE_SHADOWMAP': ''
					},
					uniforms: distanceUniforms,
					vertexShader: distanceShader.vertexShader,
					fragmentShader: distanceShader.fragmentShader,
					morphTargets: useMorphing,
					skinning: useSkinning,
					clipping: true
				} );

				_distanceMaterials[ i ] = distanceMaterial;

			}

			//

			var scope = this;

			this.enabled = false;

			this.autoUpdate = true;
			this.needsUpdate = false;

			this.type = PCFShadowMap;

			this.renderReverseSided = true;
			this.renderSingleSided = true;

			this.render = function ( scene, camera ) {

				if ( scope.enabled === false ) return;
				if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

				if ( _lightShadows.length === 0 ) return;

				// Set GL state for depth map.
				_state.disable( _gl.BLEND );
				_state.buffers.color.setClear( 1, 1, 1, 1 );
				_state.buffers.depth.setTest( true );
				_state.setScissorTest( false );

				// render depth map

				var faceCount;

				for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

					var light = _lightShadows[ i ];
					var shadow = light.shadow;
					var isPointLight = light && light.isPointLight;

					if ( shadow === undefined ) {

						console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
						continue;

					}

					var shadowCamera = shadow.camera;

					_shadowMapSize.copy( shadow.mapSize );
					_shadowMapSize.min( _maxShadowMapSize );

					if ( isPointLight ) {

						var vpWidth = _shadowMapSize.x;
						var vpHeight = _shadowMapSize.y;

						// These viewports map a cube-map onto a 2D texture with the
						// following orientation:
						//
						//  xzXZ
						//   y Y
						//
						// X - Positive x direction
						// x - Negative x direction
						// Y - Positive y direction
						// y - Negative y direction
						// Z - Positive z direction
						// z - Negative z direction

						// positive X
						cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
						// negative X
						cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
						// positive Z
						cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
						// negative Z
						cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
						// positive Y
						cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
						// negative Y
						cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

						_shadowMapSize.x *= 4.0;
						_shadowMapSize.y *= 2.0;

					}

					if ( shadow.map === null ) {

						var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

						shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
						shadow.map.texture.name = light.name + ".shadowMap";

						shadowCamera.updateProjectionMatrix();

					}

					if ( shadow.isSpotLightShadow ) {

						shadow.update( light );

					}

					var shadowMap = shadow.map;
					var shadowMatrix = shadow.matrix;

					_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
					shadowCamera.position.copy( _lightPositionWorld );

					if ( isPointLight ) {

						faceCount = 6;

						// for point lights we set the shadow matrix to be a translation-only matrix
						// equal to inverse of the light's position

						shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

					} else {

						faceCount = 1;

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );
						shadowCamera.updateMatrixWorld();

						// compute shadow matrix

						shadowMatrix.set(
							0.5, 0.0, 0.0, 0.5,
							0.0, 0.5, 0.0, 0.5,
							0.0, 0.0, 0.5, 0.5,
							0.0, 0.0, 0.0, 1.0
						);

						shadowMatrix.multiply( shadowCamera.projectionMatrix );
						shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					}

					_renderer.setRenderTarget( shadowMap );
					_renderer.clear();

					// render shadow map for each cube face (if omni-directional) or
					// run a single pass if not

					for ( var face = 0; face < faceCount; face ++ ) {

						if ( isPointLight ) {

							_lookTarget.copy( shadowCamera.position );
							_lookTarget.add( cubeDirections[ face ] );
							shadowCamera.up.copy( cubeUps[ face ] );
							shadowCamera.lookAt( _lookTarget );
							shadowCamera.updateMatrixWorld();

							var vpDimensions = cube2DViewPorts[ face ];
							_state.viewport( vpDimensions );

						}

						// update camera matrices and frustum

						_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
						_frustum.setFromMatrix( _projScreenMatrix );

						// set object matrices & frustum culling

						renderObject( scene, camera, shadowCamera, isPointLight );

					}

				}

				// Restore GL state.
				var clearColor = _renderer.getClearColor();
				var clearAlpha = _renderer.getClearAlpha();
				_renderer.setClearColor( clearColor, clearAlpha );

				scope.needsUpdate = false;

			};

			function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

				var geometry = object.geometry;

				var result = null;

				var materialVariants = _depthMaterials;
				var customMaterial = object.customDepthMaterial;

				if ( isPointLight ) {

					materialVariants = _distanceMaterials;
					customMaterial = object.customDistanceMaterial;

				}

				if ( ! customMaterial ) {

					var useMorphing = false;

					if ( material.morphTargets ) {

						if ( geometry && geometry.isBufferGeometry ) {

							useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

						} else if ( geometry && geometry.isGeometry ) {

							useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

						}

					}

					if ( object.isSkinnedMesh && material.skinning === false ) {

						console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

					}

					var useSkinning = object.isSkinnedMesh && material.skinning;

					var variantIndex = 0;

					if ( useMorphing ) variantIndex |= _MorphingFlag;
					if ( useSkinning ) variantIndex |= _SkinningFlag;

					result = materialVariants[ variantIndex ];

				} else {

					result = customMaterial;

				}

				if ( _renderer.localClippingEnabled &&
						material.clipShadows === true &&
						material.clippingPlanes.length !== 0 ) {

					// in this case we need a unique material instance reflecting the
					// appropriate state

					var keyA = result.uuid, keyB = material.uuid;

					var materialsForVariant = _materialCache[ keyA ];

					if ( materialsForVariant === undefined ) {

						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;

					}

					var cachedMaterial = materialsForVariant[ keyB ];

					if ( cachedMaterial === undefined ) {

						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;

					}

					result = cachedMaterial;

				}

				result.visible = material.visible;
				result.wireframe = material.wireframe;

				var side = material.side;

				if ( scope.renderSingleSided && side == DoubleSide ) {

					side = FrontSide;

				}

				if ( scope.renderReverseSided ) {

					if ( side === FrontSide ) side = BackSide;
					else if ( side === BackSide ) side = FrontSide;

				}

				result.side = side;

				result.clipShadows = material.clipShadows;
				result.clippingPlanes = material.clippingPlanes;

				result.wireframeLinewidth = material.wireframeLinewidth;
				result.linewidth = material.linewidth;

				if ( isPointLight && result.uniforms.lightPos !== undefined ) {

					result.uniforms.lightPos.value.copy( lightPositionWorld );

				}

				return result;

			}

			function renderObject( object, camera, shadowCamera, isPointLight ) {

				if ( object.visible === false ) return;

				var visible = object.layers.test( camera.layers );

				if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

					if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

						var geometry = _objects.update( object );
						var material = object.material;

						if ( Array.isArray( material ) ) {

							var groups = geometry.groups;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else if ( material.visible ) {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					renderObject( children[ i ], camera, shadowCamera, isPointLight );

				}

			}

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLAttributes( gl ) {

			var buffers = {};

			function createBuffer( attribute, bufferType ) {

				var array = attribute.array;
				var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

				var buffer = gl.createBuffer();

				gl.bindBuffer( bufferType, buffer );
				gl.bufferData( bufferType, array, usage );

				attribute.onUploadCallback();

				var type = gl.FLOAT;

				if ( array instanceof Float32Array ) {

					type = gl.FLOAT;

				} else if ( array instanceof Float64Array ) {

					console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

				} else if ( array instanceof Uint16Array ) {

					type = gl.UNSIGNED_SHORT;

				} else if ( array instanceof Int16Array ) {

					type = gl.SHORT;

				} else if ( array instanceof Uint32Array ) {

					type = gl.UNSIGNED_INT;

				} else if ( array instanceof Int32Array ) {

					type = gl.INT;

				} else if ( array instanceof Int8Array ) {

					type = gl.BYTE;

				} else if ( array instanceof Uint8Array ) {

					type = gl.UNSIGNED_BYTE;

				}

				return {
					buffer: buffer,
					type: type,
					bytesPerElement: array.BYTES_PER_ELEMENT,
					version: attribute.version
				};

			}

			function updateBuffer( buffer, attribute, bufferType ) {

				var array = attribute.array;
				var updateRange = attribute.updateRange;

				gl.bindBuffer( bufferType, buffer );

				if ( attribute.dynamic === false ) {

					gl.bufferData( bufferType, array, gl.STATIC_DRAW );

				} else if ( updateRange.count === - 1 ) {

					// Not using update ranges

					gl.bufferSubData( bufferType, 0, array );

				} else if ( updateRange.count === 0 ) {

					console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

				} else {

					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

					updateRange.count = -1; // reset range

				}

			}

			//

			function get( attribute ) {

				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

				return buffers[ attribute.uuid ];

			}

			function remove( attribute ) {

				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
				
				var data = buffers[ attribute.uuid ];

				if ( data ) {

					gl.deleteBuffer( data.buffer );

					delete buffers[ attribute.uuid ];

				}

			}

			function update( attribute, bufferType ) {

				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

				var data = buffers[ attribute.uuid ];

				if ( data === undefined ) {

					buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

				} else if ( data.version < attribute.version ) {

					updateBuffer( data.buffer, attribute, bufferType );

					data.version = attribute.version;

				}

			}

			return {

				get: get,
				remove: remove,
				update: update

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */

		function Euler( x, y, z, order ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || Euler.DefaultOrder;

		}

		Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

		Euler.DefaultOrder = 'XYZ';

		Object.defineProperties( Euler.prototype, {

			x: {

				get: function () {

					return this._x;

				},

				set: function ( value ) {

					this._x = value;
					this.onChangeCallback();

				}

			},

			y: {

				get: function () {

					return this._y;

				},

				set: function ( value ) {

					this._y = value;
					this.onChangeCallback();

				}

			},

			z: {

				get: function () {

					return this._z;

				},

				set: function ( value ) {

					this._z = value;
					this.onChangeCallback();

				}

			},

			order: {

				get: function () {

					return this._order;

				},

				set: function ( value ) {

					this._order = value;
					this.onChangeCallback();

				}

			}

		} );

		Object.assign( Euler.prototype, {

			isEuler: true,

			set: function ( x, y, z, order ) {

				this._x = x;
				this._y = y;
				this._z = z;
				this._order = order || this._order;

				this.onChangeCallback();

				return this;

			},

			clone: function () {

				return new this.constructor( this._x, this._y, this._z, this._order );

			},

			copy: function ( euler ) {

				this._x = euler._x;
				this._y = euler._y;
				this._z = euler._z;
				this._order = euler._order;

				this.onChangeCallback();

				return this;

			},

			setFromRotationMatrix: function ( m, order, update ) {

				var clamp = _Math.clamp;

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var te = m.elements;
				var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
				var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
				var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

				order = order || this._order;

				if ( order === 'XYZ' ) {

					this._y = Math.asin( clamp( m13, - 1, 1 ) );

					if ( Math.abs( m13 ) < 0.99999 ) {

						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );

					} else {

						this._x = Math.atan2( m32, m22 );
						this._z = 0;

					}

				} else if ( order === 'YXZ' ) {

					this._x = Math.asin( - clamp( m23, - 1, 1 ) );

					if ( Math.abs( m23 ) < 0.99999 ) {

						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );

					} else {

						this._y = Math.atan2( - m31, m11 );
						this._z = 0;

					}

				} else if ( order === 'ZXY' ) {

					this._x = Math.asin( clamp( m32, - 1, 1 ) );

					if ( Math.abs( m32 ) < 0.99999 ) {

						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );

					} else {

						this._y = 0;
						this._z = Math.atan2( m21, m11 );

					}

				} else if ( order === 'ZYX' ) {

					this._y = Math.asin( - clamp( m31, - 1, 1 ) );

					if ( Math.abs( m31 ) < 0.99999 ) {

						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );

					} else {

						this._x = 0;
						this._z = Math.atan2( - m12, m22 );

					}

				} else if ( order === 'YZX' ) {

					this._z = Math.asin( clamp( m21, - 1, 1 ) );

					if ( Math.abs( m21 ) < 0.99999 ) {

						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );

					} else {

						this._x = 0;
						this._y = Math.atan2( m13, m33 );

					}

				} else if ( order === 'XZY' ) {

					this._z = Math.asin( - clamp( m12, - 1, 1 ) );

					if ( Math.abs( m12 ) < 0.99999 ) {

						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );

					} else {

						this._x = Math.atan2( - m23, m33 );
						this._y = 0;

					}

				} else {

					console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

				}

				this._order = order;

				if ( update !== false ) this.onChangeCallback();

				return this;

			},

			setFromQuaternion: function () {

				var matrix = new Matrix4();

				return function setFromQuaternion( q, order, update ) {

					matrix.makeRotationFromQuaternion( q );

					return this.setFromRotationMatrix( matrix, order, update );

				};

			}(),

			setFromVector3: function ( v, order ) {

				return this.set( v.x, v.y, v.z, order || this._order );

			},

			reorder: function () {

				// WARNING: this discards revolution information -bhouston

				var q = new Quaternion();

				return function reorder( newOrder ) {

					q.setFromEuler( this );

					return this.setFromQuaternion( q, newOrder );

				};

			}(),

			equals: function ( euler ) {

				return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

			},

			fromArray: function ( array ) {

				this._x = array[ 0 ];
				this._y = array[ 1 ];
				this._z = array[ 2 ];
				if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

				this.onChangeCallback();

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._order;

				return array;

			},

			toVector3: function ( optionalResult ) {

				if ( optionalResult ) {

					return optionalResult.set( this._x, this._y, this._z );

				} else {

					return new Vector3( this._x, this._y, this._z );

				}

			},

			onChange: function ( callback ) {

				this.onChangeCallback = callback;

				return this;

			},

			onChangeCallback: function () {}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Layers() {

			this.mask = 1 | 0;

		}

		Object.assign( Layers.prototype, {

			set: function ( channel ) {

				this.mask = 1 << channel | 0;

			},

			enable: function ( channel ) {

				this.mask |= 1 << channel | 0;

			},

			toggle: function ( channel ) {

				this.mask ^= 1 << channel | 0;

			},

			disable: function ( channel ) {

				this.mask &= ~ ( 1 << channel | 0 );

			},

			test: function ( layers ) {

				return ( this.mask & layers.mask ) !== 0;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author elephantatwork / www.elephantatwork.ch
		 */

		var object3DId = 0;

		function Object3D() {

			Object.defineProperty( this, 'id', { value: object3DId ++ } );

			this.uuid = _Math.generateUUID();

			this.name = '';
			this.type = 'Object3D';

			this.parent = null;
			this.children = [];

			this.up = Object3D.DefaultUp.clone();

			var position = new Vector3();
			var rotation = new Euler();
			var quaternion = new Quaternion();
			var scale = new Vector3( 1, 1, 1 );

			function onRotationChange() {

				quaternion.setFromEuler( rotation, false );

			}

			function onQuaternionChange() {

				rotation.setFromQuaternion( quaternion, undefined, false );

			}

			rotation.onChange( onRotationChange );
			quaternion.onChange( onQuaternionChange );

			Object.defineProperties( this, {
				position: {
					enumerable: true,
					value: position
				},
				rotation: {
					enumerable: true,
					value: rotation
				},
				quaternion: {
					enumerable: true,
					value: quaternion
				},
				scale: {
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );

			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();

			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;

			this.layers = new Layers();
			this.visible = true;

			this.castShadow = false;
			this.receiveShadow = false;

			this.frustumCulled = true;
			this.renderOrder = 0;

			this.userData = {};
		}

		Object3D.DefaultUp = new Vector3( 0, 1, 0 );
		Object3D.DefaultMatrixAutoUpdate = true;

		Object.assign( Object3D.prototype, EventDispatcher.prototype, {

			isObject3D: true,

			onBeforeRender: function () {},
			onAfterRender: function () {},

			applyMatrix: function ( matrix ) {

				this.matrix.multiplyMatrices( matrix, this.matrix );

				this.matrix.decompose( this.position, this.quaternion, this.scale );

			},

			applyQuaternion: function ( q ) {

				this.quaternion.premultiply( q );

				return this;

			},

			setRotationFromAxisAngle: function ( axis, angle ) {

				// assumes axis is normalized

				this.quaternion.setFromAxisAngle( axis, angle );

			},

			setRotationFromEuler: function ( euler ) {

				this.quaternion.setFromEuler( euler, true );

			},

			setRotationFromMatrix: function ( m ) {

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				this.quaternion.setFromRotationMatrix( m );

			},

			setRotationFromQuaternion: function ( q ) {

				// assumes q is normalized

				this.quaternion.copy( q );

			},

			rotateOnAxis: function () {

				// rotate object on axis in object space
				// axis is assumed to be normalized

				var q1 = new Quaternion();

				return function rotateOnAxis( axis, angle ) {

					q1.setFromAxisAngle( axis, angle );

					this.quaternion.multiply( q1 );

					return this;

				};

			}(),

			rotateX: function () {

				var v1 = new Vector3( 1, 0, 0 );

				return function rotateX( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			rotateY: function () {

				var v1 = new Vector3( 0, 1, 0 );

				return function rotateY( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			rotateZ: function () {

				var v1 = new Vector3( 0, 0, 1 );

				return function rotateZ( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			translateOnAxis: function () {

				// translate object by distance along axis in object space
				// axis is assumed to be normalized

				var v1 = new Vector3();

				return function translateOnAxis( axis, distance ) {

					v1.copy( axis ).applyQuaternion( this.quaternion );

					this.position.add( v1.multiplyScalar( distance ) );

					return this;

				};

			}(),

			translateX: function () {

				var v1 = new Vector3( 1, 0, 0 );

				return function translateX( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			translateY: function () {

				var v1 = new Vector3( 0, 1, 0 );

				return function translateY( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			translateZ: function () {

				var v1 = new Vector3( 0, 0, 1 );

				return function translateZ( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			localToWorld: function ( vector ) {

				return vector.applyMatrix4( this.matrixWorld );

			},

			worldToLocal: function () {

				var m1 = new Matrix4();

				return function worldToLocal( vector ) {

					return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

				};

			}(),

			lookAt: function () {

				// This method does not support objects with rotated and/or translated parent(s)

				var m1 = new Matrix4();

				return function lookAt( vector ) {

					if ( this.isCamera ) {

						m1.lookAt( this.position, vector, this.up );

					} else {

						m1.lookAt( vector, this.position, this.up );

					}

					this.quaternion.setFromRotationMatrix( m1 );

				};

			}(),

			add: function ( object ) {

				if ( arguments.length > 1 ) {

					for ( var i = 0; i < arguments.length; i ++ ) {

						this.add( arguments[ i ] );

					}

					return this;

				}

				if ( object === this ) {

					console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
					return this;

				}

				if ( ( object && object.isObject3D ) ) {

					if ( object.parent !== null ) {

						object.parent.remove( object );

					}

					object.parent = this;
					object.dispatchEvent( { type: 'added' } );

					this.children.push( object );

				} else {

					console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

				}

				return this;

			},

			remove: function ( object ) {

				if ( arguments.length > 1 ) {

					for ( var i = 0; i < arguments.length; i ++ ) {

						this.remove( arguments[ i ] );

					}

					return this;

				}

				var index = this.children.indexOf( object );

				if ( index !== - 1 ) {

					object.parent = null;

					object.dispatchEvent( { type: 'removed' } );

					this.children.splice( index, 1 );

				}

				return this;
				
			},

			getObjectById: function ( id ) {

				return this.getObjectByProperty( 'id', id );

			},

			getObjectByName: function ( name ) {

				return this.getObjectByProperty( 'name', name );

			},

			getObjectByProperty: function ( name, value ) {

				if ( this[ name ] === value ) return this;

				for ( var i = 0, l = this.children.length; i < l; i ++ ) {

					var child = this.children[ i ];
					var object = child.getObjectByProperty( name, value );

					if ( object !== undefined ) {

						return object;

					}

				}

				return undefined;

			},

			getWorldPosition: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.updateMatrixWorld( true );

				return result.setFromMatrixPosition( this.matrixWorld );

			},

			getWorldQuaternion: function () {

				var position = new Vector3();
				var scale = new Vector3();

				return function getWorldQuaternion( optionalTarget ) {

					var result = optionalTarget || new Quaternion();

					this.updateMatrixWorld( true );

					this.matrixWorld.decompose( position, result, scale );

					return result;

				};

			}(),

			getWorldRotation: function () {

				var quaternion = new Quaternion();

				return function getWorldRotation( optionalTarget ) {

					var result = optionalTarget || new Euler();

					this.getWorldQuaternion( quaternion );

					return result.setFromQuaternion( quaternion, this.rotation.order, false );

				};

			}(),

			getWorldScale: function () {

				var position = new Vector3();
				var quaternion = new Quaternion();

				return function getWorldScale( optionalTarget ) {

					var result = optionalTarget || new Vector3();

					this.updateMatrixWorld( true );

					this.matrixWorld.decompose( position, quaternion, result );

					return result;

				};

			}(),

			getWorldDirection: function () {

				var quaternion = new Quaternion();

				return function getWorldDirection( optionalTarget ) {

					var result = optionalTarget || new Vector3();

					this.getWorldQuaternion( quaternion );

					return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

				};

			}(),

			raycast: function () {},

			traverse: function ( callback ) {

				callback( this );

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].traverse( callback );

				}

			},

			traverseVisible: function ( callback ) {

				if ( this.visible === false ) return;

				callback( this );

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].traverseVisible( callback );

				}

			},

			traverseAncestors: function ( callback ) {

				var parent = this.parent;

				if ( parent !== null ) {

					callback( parent );

					parent.traverseAncestors( callback );

				}

			},

			updateMatrix: function () {

				this.matrix.compose( this.position, this.quaternion, this.scale );

				this.matrixWorldNeedsUpdate = true;

			},

			updateMatrixWorld: function ( force ) {

				if ( this.matrixAutoUpdate ) this.updateMatrix();

				if ( this.matrixWorldNeedsUpdate || force ) {

					if ( this.parent === null ) {

						this.matrixWorld.copy( this.matrix );

					} else {

						this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

					}

					this.matrixWorldNeedsUpdate = false;

					force = true;

				}

				// update children

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].updateMatrixWorld( force );

				}

			},

			toJSON: function ( meta ) {

				// meta is '' when called from JSON.stringify
				var isRootObject = ( meta === undefined || meta === '' );

				var output = {};

				// meta is a hash used to collect geometries, materials.
				// not providing it implies that this is the root object
				// being serialized.
				if ( isRootObject ) {

					// initialize meta obj
					meta = {
						geometries: {},
						materials: {},
						textures: {},
						images: {}
					};

					output.metadata = {
						version: 4.5,
						type: 'Object',
						generator: 'Object3D.toJSON'
					};

				}

				// standard Object3D serialization

				var object = {};

				object.uuid = this.uuid;
				object.type = this.type;

				if ( this.name !== '' ) object.name = this.name;
				if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
				if ( this.castShadow === true ) object.castShadow = true;
				if ( this.receiveShadow === true ) object.receiveShadow = true;
				if ( this.visible === false ) object.visible = false;

				object.matrix = this.matrix.toArray();

				//

				function serialize( library, element ) {

					if ( library[ element.uuid ] === undefined ) {

						library[ element.uuid ] = element.toJSON( meta );

					}

					return element.uuid;

				}

				if ( this.geometry !== undefined ) {

					object.geometry = serialize( meta.geometries, this.geometry );

				}

				if ( this.material !== undefined ) {

					if ( Array.isArray( this.material ) ) {

						var uuids = [];

						for ( var i = 0, l = this.material.length; i < l; i ++ ) {

							uuids.push( serialize( meta.materials, this.material[ i ] ) );

						}

						object.material = uuids;

					} else {

						object.material = serialize( meta.materials, this.material );

					}

				}

				//

				if ( this.children.length > 0 ) {

					object.children = [];

					for ( var i = 0; i < this.children.length; i ++ ) {

						object.children.push( this.children[ i ].toJSON( meta ).object );

					}

				}

				if ( isRootObject ) {

					var geometries = extractFromCache( meta.geometries );
					var materials = extractFromCache( meta.materials );
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );

					if ( geometries.length > 0 ) output.geometries = geometries;
					if ( materials.length > 0 ) output.materials = materials;
					if ( textures.length > 0 ) output.textures = textures;
					if ( images.length > 0 ) output.images = images;

				}

				output.object = object;

				return output;

				// extract data from the cache hash
				// remove metadata on each item
				// and return as array
				function extractFromCache( cache ) {

					var values = [];
					for ( var key in cache ) {

						var data = cache[ key ];
						delete data.metadata;
						values.push( data );

					}
					return values;

				}

			},

			clone: function ( recursive ) {

				return new this.constructor().copy( this, recursive );

			},

			copy: function ( source, recursive ) {

				if ( recursive === undefined ) recursive = true;

				this.name = source.name;

				this.up.copy( source.up );

				this.position.copy( source.position );
				this.quaternion.copy( source.quaternion );
				this.scale.copy( source.scale );

				this.matrix.copy( source.matrix );
				this.matrixWorld.copy( source.matrixWorld );

				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

				this.layers.mask = source.layers.mask;
				this.visible = source.visible;

				this.castShadow = source.castShadow;
				this.receiveShadow = source.receiveShadow;

				this.frustumCulled = source.frustumCulled;
				this.renderOrder = source.renderOrder;

				this.userData = JSON.parse( JSON.stringify( source.userData ) );

				if ( recursive === true ) {

					for ( var i = 0; i < source.children.length; i ++ ) {

						var child = source.children[ i ];
						this.add( child.clone() );

					}

				}

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		function Camera() {

			Object3D.call( this );

			this.type = 'Camera';

			this.matrixWorldInverse = new Matrix4();
			this.projectionMatrix = new Matrix4();

		}

		Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Camera,

			isCamera: true,

			copy: function ( source, recursive ) {

				Object3D.prototype.copy.call( this, source, recursive );

				this.matrixWorldInverse.copy( source.matrixWorldInverse );
				this.projectionMatrix.copy( source.projectionMatrix );

				return this;

			},

			getWorldDirection: function () {

				var quaternion = new Quaternion();

				return function getWorldDirection( optionalTarget ) {

					var result = optionalTarget || new Vector3();

					this.getWorldQuaternion( quaternion );

					return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				};

			}(),

			updateMatrixWorld: function ( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				this.matrixWorldInverse.getInverse( this.matrixWorld );

			},

			clone: function () {

				return new this.constructor().copy( this );

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author arose / http://github.com/arose
		 */

		function OrthographicCamera( left, right, top, bottom, near, far ) {

			Camera.call( this );

			this.type = 'OrthographicCamera';

			this.zoom = 1;
			this.view = null;

			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;

			this.near = ( near !== undefined ) ? near : 0.1;
			this.far = ( far !== undefined ) ? far : 2000;

			this.updateProjectionMatrix();

		}

		OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

			constructor: OrthographicCamera,

			isOrthographicCamera: true,

			copy: function ( source, recursive ) {

				Camera.prototype.copy.call( this, source, recursive );

				this.left = source.left;
				this.right = source.right;
				this.top = source.top;
				this.bottom = source.bottom;
				this.near = source.near;
				this.far = source.far;

				this.zoom = source.zoom;
				this.view = source.view === null ? null : Object.assign( {}, source.view );

				return this;

			},

			setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};

				this.updateProjectionMatrix();

			},

			clearViewOffset: function() {

				this.view = null;
				this.updateProjectionMatrix();

			},

			updateProjectionMatrix: function () {

				var dx = ( this.right - this.left ) / ( 2 * this.zoom );
				var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
				var cx = ( this.right + this.left ) / 2;
				var cy = ( this.top + this.bottom ) / 2;

				var left = cx - dx;
				var right = cx + dx;
				var top = cy + dy;
				var bottom = cy - dy;

				if ( this.view !== null ) {

					var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
					var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
					var scaleW = ( this.right - this.left ) / this.view.width;
					var scaleH = ( this.top - this.bottom ) / this.view.height;

					left += scaleW * ( this.view.offsetX / zoomW );
					right = left + scaleW * ( this.view.width / zoomW );
					top -= scaleH * ( this.view.offsetY / zoomH );
					bottom = top - scaleH * ( this.view.height / zoomH );

				}

				this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

			},

			toJSON: function ( meta ) {

				var data = Object3D.prototype.toJSON.call( this, meta );

				data.object.zoom = this.zoom;
				data.object.left = this.left;
				data.object.right = this.right;
				data.object.top = this.top;
				data.object.bottom = this.bottom;
				data.object.near = this.near;
				data.object.far = this.far;

				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

				return data;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author greggman / http://games.greggman.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author tschw
		 */

		function PerspectiveCamera( fov, aspect, near, far ) {

			Camera.call( this );

			this.type = 'PerspectiveCamera';

			this.fov = fov !== undefined ? fov : 50;
			this.zoom = 1;

			this.near = near !== undefined ? near : 0.1;
			this.far = far !== undefined ? far : 2000;
			this.focus = 10;

			this.aspect = aspect !== undefined ? aspect : 1;
			this.view = null;

			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();

		}

		PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

			constructor: PerspectiveCamera,

			isPerspectiveCamera: true,

			copy: function ( source, recursive ) {

				Camera.prototype.copy.call( this, source, recursive );

				this.fov = source.fov;
				this.zoom = source.zoom;

				this.near = source.near;
				this.far = source.far;
				this.focus = source.focus;

				this.aspect = source.aspect;
				this.view = source.view === null ? null : Object.assign( {}, source.view );

				this.filmGauge = source.filmGauge;
				this.filmOffset = source.filmOffset;

				return this;

			},

			/**
			 * Sets the FOV by focal length in respect to the current .filmGauge.
			 *
			 * The default film gauge is 35, so that the focal length can be specified for
			 * a 35mm (full frame) camera.
			 *
			 * Values for focal length and film gauge must have the same unit.
			 */
			setFocalLength: function ( focalLength ) {

				// see http://www.bobatkins.com/photography/technical/field_of_view.html
				var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

				this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
				this.updateProjectionMatrix();

			},

			/**
			 * Calculates the focal length from the current .fov and .filmGauge.
			 */
			getFocalLength: function () {

				var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

				return 0.5 * this.getFilmHeight() / vExtentSlope;

			},

			getEffectiveFOV: function () {

				return _Math.RAD2DEG * 2 * Math.atan(
						Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

			},

			getFilmWidth: function () {

				// film not completely covered in portrait format (aspect < 1)
				return this.filmGauge * Math.min( this.aspect, 1 );

			},

			getFilmHeight: function () {

				// film not completely covered in landscape format (aspect > 1)
				return this.filmGauge / Math.max( this.aspect, 1 );

			},

			/**
			 * Sets an offset in a larger frustum. This is useful for multi-window or
			 * multi-monitor/multi-machine setups.
			 *
			 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
			 * the monitors are in grid like this
			 *
			 *   +---+---+---+
			 *   | A | B | C |
			 *   +---+---+---+
			 *   | D | E | F |
			 *   +---+---+---+
			 *
			 * then for each monitor you would call it like this
			 *
			 *   var w = 1920;
			 *   var h = 1080;
			 *   var fullWidth = w * 3;
			 *   var fullHeight = h * 2;
			 *
			 *   --A--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
			 *   --B--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
			 *   --C--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
			 *   --D--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
			 *   --E--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
			 *   --F--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
			 *
			 *   Note there is no reason monitors have to be the same size or in a grid.
			 */
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

				this.aspect = fullWidth / fullHeight;

				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};

				this.updateProjectionMatrix();

			},

			clearViewOffset: function () {

				this.view = null;
				this.updateProjectionMatrix();

			},

			updateProjectionMatrix: function () {

				var near = this.near,
					top = near * Math.tan(
							_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
					height = 2 * top,
					width = this.aspect * height,
					left = - 0.5 * width,
					view = this.view;

				if ( view !== null ) {

					var fullWidth = view.fullWidth,
						fullHeight = view.fullHeight;

					left += view.offsetX * width / fullWidth;
					top -= view.offsetY * height / fullHeight;
					width *= view.width / fullWidth;
					height *= view.height / fullHeight;

				}

				var skew = this.filmOffset;
				if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

				this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

			},

			toJSON: function ( meta ) {

				var data = Object3D.prototype.toJSON.call( this, meta );

				data.object.fov = this.fov;
				data.object.zoom = this.zoom;

				data.object.near = this.near;
				data.object.far = this.far;
				data.object.focus = this.focus;

				data.object.aspect = this.aspect;

				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

				data.object.filmGauge = this.filmGauge;
				data.object.filmOffset = this.filmOffset;

				return data;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Face3( a, b, c, normal, color, materialIndex ) {

			this.a = a;
			this.b = b;
			this.c = c;

			this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
			this.vertexNormals = Array.isArray( normal ) ? normal : [];

			this.color = ( color && color.isColor ) ? color : new Color();
			this.vertexColors = Array.isArray( color ) ? color : [];

			this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

		}

		Object.assign( Face3.prototype, {

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.a = source.a;
				this.b = source.b;
				this.c = source.c;

				this.normal.copy( source.normal );
				this.color.copy( source.color );

				this.materialIndex = source.materialIndex;

				for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

					this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

				}

				for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

					this.vertexColors[ i ] = source.vertexColors[ i ].clone();

				}

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author bhouston / http://clara.io
		 */

		var count = 0;
		function GeometryIdCount() { return count++; }

		function Geometry() {

			Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

			this.uuid = _Math.generateUUID();

			this.name = '';
			this.type = 'Geometry';

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];

			this.morphTargets = [];
			this.morphNormals = [];

			this.skinWeights = [];
			this.skinIndices = [];

			this.lineDistances = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			// update flags

			this.elementsNeedUpdate = false;
			this.verticesNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.lineDistancesNeedUpdate = false;
			this.groupsNeedUpdate = false;

		}

		Object.assign( Geometry.prototype, EventDispatcher.prototype, {

			isGeometry: true,

			applyMatrix: function ( matrix ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

					var vertex = this.vertices[ i ];
					vertex.applyMatrix4( matrix );

				}

				for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

					var face = this.faces[ i ];
					face.normal.applyMatrix3( normalMatrix ).normalize();

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

					}

				}

				if ( this.boundingBox !== null ) {

					this.computeBoundingBox();

				}

				if ( this.boundingSphere !== null ) {

					this.computeBoundingSphere();

				}

				this.verticesNeedUpdate = true;
				this.normalsNeedUpdate = true;

				return this;

			},

			rotateX: function () {

				// rotate geometry around world x-axis

				var m1 = new Matrix4();

				return function rotateX( angle ) {

					m1.makeRotationX( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateY: function () {

				// rotate geometry around world y-axis

				var m1 = new Matrix4();

				return function rotateY( angle ) {

					m1.makeRotationY( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateZ: function () {

				// rotate geometry around world z-axis

				var m1 = new Matrix4();

				return function rotateZ( angle ) {

					m1.makeRotationZ( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			translate: function () {

				// translate geometry

				var m1 = new Matrix4();

				return function translate( x, y, z ) {

					m1.makeTranslation( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			scale: function () {

				// scale geometry

				var m1 = new Matrix4();

				return function scale( x, y, z ) {

					m1.makeScale( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			lookAt: function () {

				var obj = new Object3D();

				return function lookAt( vector ) {

					obj.lookAt( vector );

					obj.updateMatrix();

					this.applyMatrix( obj.matrix );

				};

			}(),

			fromBufferGeometry: function ( geometry ) {

				var scope = this;

				var indices = geometry.index !== null ? geometry.index.array : undefined;
				var attributes = geometry.attributes;

				var positions = attributes.position.array;
				var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
				var colors = attributes.color !== undefined ? attributes.color.array : undefined;
				var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
				var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

				if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

				var tempNormals = [];
				var tempUVs = [];
				var tempUVs2 = [];

				for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

					scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

					if ( normals !== undefined ) {

						tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

					}

					if ( colors !== undefined ) {

						scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

					}

					if ( uvs !== undefined ) {

						tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

					}

					if ( uvs2 !== undefined ) {

						tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

					}

				}

				function addFace( a, b, c, materialIndex ) {

					var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
					var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

					var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

					scope.faces.push( face );

					if ( uvs !== undefined ) {

						scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

					}

					if ( uvs2 !== undefined ) {

						scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

					}

				}

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							if ( indices !== undefined ) {

								addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

							} else {

								addFace( j, j + 1, j + 2, group.materialIndex );

							}

						}

					}

				} else {

					if ( indices !== undefined ) {

						for ( var i = 0; i < indices.length; i += 3 ) {

							addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

						}

					} else {

						for ( var i = 0; i < positions.length / 3; i += 3 ) {

							addFace( i, i + 1, i + 2 );

						}

					}

				}

				this.computeFaceNormals();

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				return this;

			},

			center: function () {

				this.computeBoundingBox();

				var offset = this.boundingBox.getCenter().negate();

				this.translate( offset.x, offset.y, offset.z );

				return offset;

			},

			normalize: function () {

				this.computeBoundingSphere();

				var center = this.boundingSphere.center;
				var radius = this.boundingSphere.radius;

				var s = radius === 0 ? 1 : 1.0 / radius;

				var matrix = new Matrix4();
				matrix.set(
					s, 0, 0, - s * center.x,
					0, s, 0, - s * center.y,
					0, 0, s, - s * center.z,
					0, 0, 0, 1
				);

				this.applyMatrix( matrix );

				return this;

			},

			computeFaceNormals: function () {

				var cb = new Vector3(), ab = new Vector3();

				for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

					var face = this.faces[ f ];

					var vA = this.vertices[ face.a ];
					var vB = this.vertices[ face.b ];
					var vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					cb.normalize();

					face.normal.copy( cb );

				}

			},

			computeVertexNormals: function ( areaWeighted ) {

				if ( areaWeighted === undefined ) areaWeighted = true;

				var v, vl, f, fl, face, vertices;

				vertices = new Array( this.vertices.length );

				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

					vertices[ v ] = new Vector3();

				}

				if ( areaWeighted ) {

					// vertex normals weighted by triangle areas
					// http://www.iquilezles.org/www/articles/normals/normals.htm

					var vA, vB, vC;
					var cb = new Vector3(), ab = new Vector3();

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						vA = this.vertices[ face.a ];
						vB = this.vertices[ face.b ];
						vC = this.vertices[ face.c ];

						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );

						vertices[ face.a ].add( cb );
						vertices[ face.b ].add( cb );
						vertices[ face.c ].add( cb );

					}

				} else {

					this.computeFaceNormals();

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						vertices[ face.a ].add( face.normal );
						vertices[ face.b ].add( face.normal );
						vertices[ face.c ].add( face.normal );

					}

				}

				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

					vertices[ v ].normalize();

				}

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					var vertexNormals = face.vertexNormals;

					if ( vertexNormals.length === 3 ) {

						vertexNormals[ 0 ].copy( vertices[ face.a ] );
						vertexNormals[ 1 ].copy( vertices[ face.b ] );
						vertexNormals[ 2 ].copy( vertices[ face.c ] );

					} else {

						vertexNormals[ 0 ] = vertices[ face.a ].clone();
						vertexNormals[ 1 ] = vertices[ face.b ].clone();
						vertexNormals[ 2 ] = vertices[ face.c ].clone();

					}

				}

				if ( this.faces.length > 0 ) {

					this.normalsNeedUpdate = true;

				}

			},

			computeFlatVertexNormals: function () {

				var f, fl, face;

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					var vertexNormals = face.vertexNormals;

					if ( vertexNormals.length === 3 ) {

						vertexNormals[ 0 ].copy( face.normal );
						vertexNormals[ 1 ].copy( face.normal );
						vertexNormals[ 2 ].copy( face.normal );

					} else {

						vertexNormals[ 0 ] = face.normal.clone();
						vertexNormals[ 1 ] = face.normal.clone();
						vertexNormals[ 2 ] = face.normal.clone();

					}

				}

				if ( this.faces.length > 0 ) {

					this.normalsNeedUpdate = true;

				}

			},

			computeMorphNormals: function () {

				var i, il, f, fl, face;

				// save original normals
				// - create temp variables on first access
				//   otherwise just copy (for faster repeated calls)

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					if ( ! face.__originalFaceNormal ) {

						face.__originalFaceNormal = face.normal.clone();

					} else {

						face.__originalFaceNormal.copy( face.normal );

					}

					if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

					for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

						if ( ! face.__originalVertexNormals[ i ] ) {

							face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

						} else {

							face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

						}

					}

				}

				// use temp geometry to compute face and vertex normals for each morph

				var tmpGeo = new Geometry();
				tmpGeo.faces = this.faces;

				for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

					// create on first access

					if ( ! this.morphNormals[ i ] ) {

						this.morphNormals[ i ] = {};
						this.morphNormals[ i ].faceNormals = [];
						this.morphNormals[ i ].vertexNormals = [];

						var dstNormalsFace = this.morphNormals[ i ].faceNormals;
						var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

						var faceNormal, vertexNormals;

						for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

							faceNormal = new Vector3();
							vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

							dstNormalsFace.push( faceNormal );
							dstNormalsVertex.push( vertexNormals );

						}

					}

					var morphNormals = this.morphNormals[ i ];

					// set vertices to morph target

					tmpGeo.vertices = this.morphTargets[ i ].vertices;

					// compute morph normals

					tmpGeo.computeFaceNormals();
					tmpGeo.computeVertexNormals();

					// store morph normals

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						faceNormal = morphNormals.faceNormals[ f ];
						vertexNormals = morphNormals.vertexNormals[ f ];

						faceNormal.copy( face.normal );

						vertexNormals.a.copy( face.vertexNormals[ 0 ] );
						vertexNormals.b.copy( face.vertexNormals[ 1 ] );
						vertexNormals.c.copy( face.vertexNormals[ 2 ] );

					}

				}

				// restore original normals

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					face.normal = face.__originalFaceNormal;
					face.vertexNormals = face.__originalVertexNormals;

				}

			},

			computeLineDistances: function () {

				var d = 0;
				var vertices = this.vertices;

				for ( var i = 0, il = vertices.length; i < il; i ++ ) {

					if ( i > 0 ) {

						d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

					}

					this.lineDistances[ i ] = d;

				}

			},

			computeBoundingBox: function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new Box3();

				}

				this.boundingBox.setFromPoints( this.vertices );

			},

			computeBoundingSphere: function () {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				this.boundingSphere.setFromPoints( this.vertices );

			},

			merge: function ( geometry, matrix, materialIndexOffset ) {

				if ( ! ( geometry && geometry.isGeometry ) ) {

					console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
					return;

				}

				var normalMatrix,
					vertexOffset = this.vertices.length,
					vertices1 = this.vertices,
					vertices2 = geometry.vertices,
					faces1 = this.faces,
					faces2 = geometry.faces,
					uvs1 = this.faceVertexUvs[ 0 ],
					uvs2 = geometry.faceVertexUvs[ 0 ],
					colors1 = this.colors,
					colors2 = geometry.colors;

				if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

				if ( matrix !== undefined ) {

					normalMatrix = new Matrix3().getNormalMatrix( matrix );

				}

				// vertices

				for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

					var vertex = vertices2[ i ];

					var vertexCopy = vertex.clone();

					if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

					vertices1.push( vertexCopy );

				}

				// colors

				for ( var i = 0, il = colors2.length; i < il; i ++ ) {

					colors1.push( colors2[ i ].clone() );

				}

				// faces

				for ( i = 0, il = faces2.length; i < il; i ++ ) {

					var face = faces2[ i ], faceCopy, normal, color,
						faceVertexNormals = face.vertexNormals,
						faceVertexColors = face.vertexColors;

					faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
					faceCopy.normal.copy( face.normal );

					if ( normalMatrix !== undefined ) {

						faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

					}

					for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

						normal = faceVertexNormals[ j ].clone();

						if ( normalMatrix !== undefined ) {

							normal.applyMatrix3( normalMatrix ).normalize();

						}

						faceCopy.vertexNormals.push( normal );

					}

					faceCopy.color.copy( face.color );

					for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

						color = faceVertexColors[ j ];
						faceCopy.vertexColors.push( color.clone() );

					}

					faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

					faces1.push( faceCopy );

				}

				// uvs

				for ( i = 0, il = uvs2.length; i < il; i ++ ) {

					var uv = uvs2[ i ], uvCopy = [];

					if ( uv === undefined ) {

						continue;

					}

					for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

						uvCopy.push( uv[ j ].clone() );

					}

					uvs1.push( uvCopy );

				}

			},

			mergeMesh: function ( mesh ) {

				if ( ! ( mesh && mesh.isMesh ) ) {

					console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
					return;

				}

				mesh.matrixAutoUpdate && mesh.updateMatrix();

				this.merge( mesh.geometry, mesh.matrix );

			},

			/*
			 * Checks for duplicate vertices with hashmap.
			 * Duplicated vertices are removed
			 * and faces' vertices are updated.
			 */

			mergeVertices: function () {

				var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
				var unique = [], changes = [];

				var v, key;
				var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
				var precision = Math.pow( 10, precisionPoints );
				var i, il, face;
				var indices, j, jl;

				for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

					v = this.vertices[ i ];
					key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

					if ( verticesMap[ key ] === undefined ) {

						verticesMap[ key ] = i;
						unique.push( this.vertices[ i ] );
						changes[ i ] = unique.length - 1;

					} else {

						//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
						changes[ i ] = changes[ verticesMap[ key ] ];

					}

				}


				// if faces are completely degenerate after merging vertices, we
				// have to remove them from the geometry.
				var faceIndicesToRemove = [];

				for ( i = 0, il = this.faces.length; i < il; i ++ ) {

					face = this.faces[ i ];

					face.a = changes[ face.a ];
					face.b = changes[ face.b ];
					face.c = changes[ face.c ];

					indices = [ face.a, face.b, face.c ];

					// if any duplicate vertices are found in a Face3
					// we have to remove the face as nothing can be saved
					for ( var n = 0; n < 3; n ++ ) {

						if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

							faceIndicesToRemove.push( i );
							break;

						}

					}

				}

				for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

					var idx = faceIndicesToRemove[ i ];

					this.faces.splice( idx, 1 );

					for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

						this.faceVertexUvs[ j ].splice( idx, 1 );

					}

				}

				// Use unique set of vertices

				var diff = this.vertices.length - unique.length;
				this.vertices = unique;
				return diff;

			},

			sortFacesByMaterialIndex: function () {

				var faces = this.faces;
				var length = faces.length;

				// tag faces

				for ( var i = 0; i < length; i ++ ) {

					faces[ i ]._id = i;

				}

				// sort faces

				function materialIndexSort( a, b ) {

					return a.materialIndex - b.materialIndex;

				}

				faces.sort( materialIndexSort );

				// sort uvs

				var uvs1 = this.faceVertexUvs[ 0 ];
				var uvs2 = this.faceVertexUvs[ 1 ];

				var newUvs1, newUvs2;

				if ( uvs1 && uvs1.length === length ) newUvs1 = [];
				if ( uvs2 && uvs2.length === length ) newUvs2 = [];

				for ( var i = 0; i < length; i ++ ) {

					var id = faces[ i ]._id;

					if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
					if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

				}

				if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
				if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

			},

			toJSON: function () {

				var data = {
					metadata: {
						version: 4.5,
						type: 'Geometry',
						generator: 'Geometry.toJSON'
					}
				};

				// standard Geometry serialization

				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;

				if ( this.parameters !== undefined ) {

					var parameters = this.parameters;

					for ( var key in parameters ) {

						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

					}

					return data;

				}

				var vertices = [];

				for ( var i = 0; i < this.vertices.length; i ++ ) {

					var vertex = this.vertices[ i ];
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

				var faces = [];
				var normals = [];
				var normalsHash = {};
				var colors = [];
				var colorsHash = {};
				var uvs = [];
				var uvsHash = {};

				for ( var i = 0; i < this.faces.length; i ++ ) {

					var face = this.faces[ i ];

					var hasMaterial = true;
					var hasFaceUv = false; // deprecated
					var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
					var hasFaceNormal = face.normal.length() > 0;
					var hasFaceVertexNormal = face.vertexNormals.length > 0;
					var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
					var hasFaceVertexColor = face.vertexColors.length > 0;

					var faceType = 0;

					faceType = setBit( faceType, 0, 0 ); // isQuad
					faceType = setBit( faceType, 1, hasMaterial );
					faceType = setBit( faceType, 2, hasFaceUv );
					faceType = setBit( faceType, 3, hasFaceVertexUv );
					faceType = setBit( faceType, 4, hasFaceNormal );
					faceType = setBit( faceType, 5, hasFaceVertexNormal );
					faceType = setBit( faceType, 6, hasFaceColor );
					faceType = setBit( faceType, 7, hasFaceVertexColor );

					faces.push( faceType );
					faces.push( face.a, face.b, face.c );
					faces.push( face.materialIndex );

					if ( hasFaceVertexUv ) {

						var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

						faces.push(
							getUvIndex( faceVertexUvs[ 0 ] ),
							getUvIndex( faceVertexUvs[ 1 ] ),
							getUvIndex( faceVertexUvs[ 2 ] )
						);

					}

					if ( hasFaceNormal ) {

						faces.push( getNormalIndex( face.normal ) );

					}

					if ( hasFaceVertexNormal ) {

						var vertexNormals = face.vertexNormals;

						faces.push(
							getNormalIndex( vertexNormals[ 0 ] ),
							getNormalIndex( vertexNormals[ 1 ] ),
							getNormalIndex( vertexNormals[ 2 ] )
						);

					}

					if ( hasFaceColor ) {

						faces.push( getColorIndex( face.color ) );

					}

					if ( hasFaceVertexColor ) {

						var vertexColors = face.vertexColors;

						faces.push(
							getColorIndex( vertexColors[ 0 ] ),
							getColorIndex( vertexColors[ 1 ] ),
							getColorIndex( vertexColors[ 2 ] )
						);

					}

				}

				function setBit( value, position, enabled ) {

					return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

				}

				function getNormalIndex( normal ) {

					var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

					if ( normalsHash[ hash ] !== undefined ) {

						return normalsHash[ hash ];

					}

					normalsHash[ hash ] = normals.length / 3;
					normals.push( normal.x, normal.y, normal.z );

					return normalsHash[ hash ];

				}

				function getColorIndex( color ) {

					var hash = color.r.toString() + color.g.toString() + color.b.toString();

					if ( colorsHash[ hash ] !== undefined ) {

						return colorsHash[ hash ];

					}

					colorsHash[ hash ] = colors.length;
					colors.push( color.getHex() );

					return colorsHash[ hash ];

				}

				function getUvIndex( uv ) {

					var hash = uv.x.toString() + uv.y.toString();

					if ( uvsHash[ hash ] !== undefined ) {

						return uvsHash[ hash ];

					}

					uvsHash[ hash ] = uvs.length / 2;
					uvs.push( uv.x, uv.y );

					return uvsHash[ hash ];

				}

				data.data = {};

				data.data.vertices = vertices;
				data.data.normals = normals;
				if ( colors.length > 0 ) data.data.colors = colors;
				if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
				data.data.faces = faces;

				return data;

			},

			clone: function () {

				/*
				 // Handle primitives

				 var parameters = this.parameters;

				 if ( parameters !== undefined ) {

				 var values = [];

				 for ( var key in parameters ) {

				 values.push( parameters[ key ] );

				 }

				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;

				 }

				 return new this.constructor().copy( this );
				 */

				return new Geometry().copy( this );

			},

			copy: function ( source ) {

				var i, il, j, jl, k, kl;

				// reset

				this.vertices = [];
				this.colors = [];
				this.faces = [];
				this.faceVertexUvs = [[]];
				this.morphTargets = [];
				this.morphNormals = [];
				this.skinWeights = [];
				this.skinIndices = [];
				this.lineDistances = [];
				this.boundingBox = null;
				this.boundingSphere = null;

				// name

				this.name = source.name;

				// vertices

				var vertices = source.vertices;

				for ( i = 0, il = vertices.length; i < il; i ++ ) {

					this.vertices.push( vertices[ i ].clone() );

				}

				// colors

				var colors = source.colors;

				for ( i = 0, il = colors.length; i < il; i ++ ) {

					this.colors.push( colors[ i ].clone() );

				}

				// faces

				var faces = source.faces;

				for ( i = 0, il = faces.length; i < il; i ++ ) {

					this.faces.push( faces[ i ].clone() );

				}

				// face vertex uvs

				for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

					var faceVertexUvs = source.faceVertexUvs[ i ];

					if ( this.faceVertexUvs[ i ] === undefined ) {

						this.faceVertexUvs[ i ] = [];

					}

					for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

						var uvs = faceVertexUvs[ j ], uvsCopy = [];

						for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

							var uv = uvs[ k ];

							uvsCopy.push( uv.clone() );

						}

						this.faceVertexUvs[ i ].push( uvsCopy );

					}

				}

				// morph targets

				var morphTargets = source.morphTargets;

				for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

					var morphTarget = {};
					morphTarget.name = morphTargets[ i ].name;

					// vertices

					if ( morphTargets[ i ].vertices !== undefined ) {

						morphTarget.vertices = [];

						for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

							morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

						}

					}

					// normals

					if ( morphTargets[ i ].normals !== undefined ) {

						morphTarget.normals = [];

						for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

							morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

						}

					}

					this.morphTargets.push( morphTarget );

				}

				// morph normals

				var morphNormals = source.morphNormals;

				for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

					var morphNormal = {};

					// vertex normals

					if ( morphNormals[ i ].vertexNormals !== undefined ) {

						morphNormal.vertexNormals = [];

						for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

							var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
							var destVertexNormal = {};

							destVertexNormal.a = srcVertexNormal.a.clone();
							destVertexNormal.b = srcVertexNormal.b.clone();
							destVertexNormal.c = srcVertexNormal.c.clone();

							morphNormal.vertexNormals.push( destVertexNormal );

						}

					}

					// face normals

					if ( morphNormals[ i ].faceNormals !== undefined ) {

						morphNormal.faceNormals = [];

						for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

							morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

						}

					}

					this.morphNormals.push( morphNormal );

				}

				// skin weights

				var skinWeights = source.skinWeights;

				for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

					this.skinWeights.push( skinWeights[ i ].clone() );

				}

				// skin indices

				var skinIndices = source.skinIndices;

				for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

					this.skinIndices.push( skinIndices[ i ].clone() );

				}

				// line distances

				var lineDistances = source.lineDistances;

				for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

					this.lineDistances.push( lineDistances[ i ] );

				}

				// bounding box

				var boundingBox = source.boundingBox;

				if ( boundingBox !== null ) {

					this.boundingBox = boundingBox.clone();

				}

				// bounding sphere

				var boundingSphere = source.boundingSphere;

				if ( boundingSphere !== null ) {

					this.boundingSphere = boundingSphere.clone();

				}

				// update flags

				this.elementsNeedUpdate = source.elementsNeedUpdate;
				this.verticesNeedUpdate = source.verticesNeedUpdate;
				this.uvsNeedUpdate = source.uvsNeedUpdate;
				this.normalsNeedUpdate = source.normalsNeedUpdate;
				this.colorsNeedUpdate = source.colorsNeedUpdate;
				this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
				this.groupsNeedUpdate = source.groupsNeedUpdate;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function BufferAttribute( array, itemSize, normalized ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.uuid = _Math.generateUUID();
			this.name = '';

			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;

			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };

			this.onUploadCallback = function () {};

			this.version = 0;

		}

		Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

			set: function ( value ) {

				if ( value === true ) this.version ++;

			}

		} );

		Object.assign( BufferAttribute.prototype, {

			isBufferAttribute: true,

			setArray: function ( array ) {

				if ( Array.isArray( array ) ) {

					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

				}

				this.count = array !== undefined ? array.length / this.itemSize : 0;
				this.array = array;

			},

			setDynamic: function ( value ) {

				this.dynamic = value;

				return this;

			},

			copy: function ( source ) {

				this.array = new source.array.constructor( source.array );
				this.itemSize = source.itemSize;
				this.count = source.count;
				this.normalized = source.normalized;

				this.dynamic = source.dynamic;

				return this;

			},

			copyAt: function ( index1, attribute, index2 ) {

				index1 *= this.itemSize;
				index2 *= attribute.itemSize;

				for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

					this.array[ index1 + i ] = attribute.array[ index2 + i ];

				}

				return this;

			},

			copyArray: function ( array ) {

				this.array.set( array );

				return this;

			},

			copyColorsArray: function ( colors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = colors.length; i < l; i ++ ) {

					var color = colors[ i ];

					if ( color === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
						color = new Color();

					}

					array[ offset ++ ] = color.r;
					array[ offset ++ ] = color.g;
					array[ offset ++ ] = color.b;

				}

				return this;

			},

			copyIndicesArray: function ( indices ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					var index = indices[ i ];

					array[ offset ++ ] = index.a;
					array[ offset ++ ] = index.b;
					array[ offset ++ ] = index.c;

				}

				return this;

			},

			copyVector2sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
						vector = new Vector2();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;

				}

				return this;

			},

			copyVector3sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
						vector = new Vector3();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;

				}

				return this;

			},

			copyVector4sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
						vector = new Vector4();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
					array[ offset ++ ] = vector.w;

				}

				return this;

			},

			set: function ( value, offset ) {

				if ( offset === undefined ) offset = 0;

				this.array.set( value, offset );

				return this;

			},

			getX: function ( index ) {

				return this.array[ index * this.itemSize ];

			},

			setX: function ( index, x ) {

				this.array[ index * this.itemSize ] = x;

				return this;

			},

			getY: function ( index ) {

				return this.array[ index * this.itemSize + 1 ];

			},

			setY: function ( index, y ) {

				this.array[ index * this.itemSize + 1 ] = y;

				return this;

			},

			getZ: function ( index ) {

				return this.array[ index * this.itemSize + 2 ];

			},

			setZ: function ( index, z ) {

				this.array[ index * this.itemSize + 2 ] = z;

				return this;

			},

			getW: function ( index ) {

				return this.array[ index * this.itemSize + 3 ];

			},

			setW: function ( index, w ) {

				this.array[ index * this.itemSize + 3 ] = w;

				return this;

			},

			setXY: function ( index, x, y ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;

				return this;

			},

			setXYZ: function ( index, x, y, z ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;

				return this;

			},

			setXYZW: function ( index, x, y, z, w ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
				this.array[ index + 3 ] = w;

				return this;

			},

			onUpload: function ( callback ) {

				this.onUploadCallback = callback;

				return this;

			},

			clone: function () {

				return new this.constructor( this.array, this.itemSize ).copy( this );

			}

		} );

		//

		function Int8BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Int8Array( array ), itemSize );

		}

		Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


		function Uint8BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Uint8Array( array ), itemSize );

		}

		Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


		function Uint8ClampedBufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize );

		}

		Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


		function Int16BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Int16Array( array ), itemSize );

		}

		Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


		function Uint16BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Uint16Array( array ), itemSize );

		}

		Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


		function Int32BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Int32Array( array ), itemSize );

		}

		Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


		function Uint32BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Uint32Array( array ), itemSize );

		}

		Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


		function Float32BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Float32Array( array ), itemSize );

		}

		Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


		function Float64BufferAttribute( array, itemSize ) {

			BufferAttribute.call( this, new Float64Array( array ), itemSize );

		}

		Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function DirectGeometry() {

			this.indices = [];
			this.vertices = [];
			this.normals = [];
			this.colors = [];
			this.uvs = [];
			this.uvs2 = [];

			this.groups = [];

			this.morphTargets = {};

			this.skinWeights = [];
			this.skinIndices = [];

			// this.lineDistances = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			// update flags

			this.verticesNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.groupsNeedUpdate = false;

		}

		Object.assign( DirectGeometry.prototype, {

			computeGroups: function ( geometry ) {

				var group;
				var groups = [];
				var materialIndex = undefined;

				var faces = geometry.faces;

				for ( var i = 0; i < faces.length; i ++ ) {

					var face = faces[ i ];

					// materials

					if ( face.materialIndex !== materialIndex ) {

						materialIndex = face.materialIndex;

						if ( group !== undefined ) {

							group.count = ( i * 3 ) - group.start;
							groups.push( group );

						}

						group = {
							start: i * 3,
							materialIndex: materialIndex
						};

					}

				}

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				this.groups = groups;

			},

			fromGeometry: function ( geometry ) {

				var faces = geometry.faces;
				var vertices = geometry.vertices;
				var faceVertexUvs = geometry.faceVertexUvs;

				var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
				var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

				// morphs

				var morphTargets = geometry.morphTargets;
				var morphTargetsLength = morphTargets.length;

				var morphTargetsPosition;

				if ( morphTargetsLength > 0 ) {

					morphTargetsPosition = [];

					for ( var i = 0; i < morphTargetsLength; i ++ ) {

						morphTargetsPosition[ i ] = [];

					}

					this.morphTargets.position = morphTargetsPosition;

				}

				var morphNormals = geometry.morphNormals;
				var morphNormalsLength = morphNormals.length;

				var morphTargetsNormal;

				if ( morphNormalsLength > 0 ) {

					morphTargetsNormal = [];

					for ( var i = 0; i < morphNormalsLength; i ++ ) {

						morphTargetsNormal[ i ] = [];

					}

					this.morphTargets.normal = morphTargetsNormal;

				}

				// skins

				var skinIndices = geometry.skinIndices;
				var skinWeights = geometry.skinWeights;

				var hasSkinIndices = skinIndices.length === vertices.length;
				var hasSkinWeights = skinWeights.length === vertices.length;

				//

				for ( var i = 0; i < faces.length; i ++ ) {

					var face = faces[ i ];

					this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

					var vertexNormals = face.vertexNormals;

					if ( vertexNormals.length === 3 ) {

						this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

					} else {

						var normal = face.normal;

						this.normals.push( normal, normal, normal );

					}

					var vertexColors = face.vertexColors;

					if ( vertexColors.length === 3 ) {

						this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

					} else {

						var color = face.color;

						this.colors.push( color, color, color );

					}

					if ( hasFaceVertexUv === true ) {

						var vertexUvs = faceVertexUvs[ 0 ][ i ];

						if ( vertexUvs !== undefined ) {

							this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

						} else {

							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

							this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

						}

					}

					if ( hasFaceVertexUv2 === true ) {

						var vertexUvs = faceVertexUvs[ 1 ][ i ];

						if ( vertexUvs !== undefined ) {

							this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

						} else {

							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

							this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

						}

					}

					// morphs

					for ( var j = 0; j < morphTargetsLength; j ++ ) {

						var morphTarget = morphTargets[ j ].vertices;

						morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

					}

					for ( var j = 0; j < morphNormalsLength; j ++ ) {

						var morphNormal = morphNormals[ j ].vertexNormals[ i ];

						morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

					}

					// skins

					if ( hasSkinIndices ) {

						this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

					}

					if ( hasSkinWeights ) {

						this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

					}

				}

				this.computeGroups( geometry );

				this.verticesNeedUpdate = geometry.verticesNeedUpdate;
				this.normalsNeedUpdate = geometry.normalsNeedUpdate;
				this.colorsNeedUpdate = geometry.colorsNeedUpdate;
				this.uvsNeedUpdate = geometry.uvsNeedUpdate;
				this.groupsNeedUpdate = geometry.groupsNeedUpdate;

				return this;

			}

		} );

		function arrayMax( array ) {

			if ( array.length === 0 ) return - Infinity;

			var max = array[ 0 ];

			for ( var i = 1, l = array.length; i < l; ++ i ) {

				if ( array[ i ] > max ) max = array[ i ];

			}

			return max;

		}

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		function BufferGeometry() {

			Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

			this.uuid = _Math.generateUUID();

			this.name = '';
			this.type = 'BufferGeometry';

			this.index = null;
			this.attributes = {};

			this.morphAttributes = {};

			this.groups = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			this.drawRange = { start: 0, count: Infinity };

		}

		BufferGeometry.MaxIndex = 65535;

		Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

			isBufferGeometry: true,

			getIndex: function () {

				return this.index;

			},

			setIndex: function ( index ) {

				if ( Array.isArray( index ) ) {

					this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

				} else {

					this.index = index;

				}

			},

			addAttribute: function ( name, attribute ) {

				if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

					console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

					this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

					return;

				}

				if ( name === 'index' ) {

					console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
					this.setIndex( attribute );

					return;

				}

				this.attributes[ name ] = attribute;

				return this;

			},

			getAttribute: function ( name ) {

				return this.attributes[ name ];

			},

			removeAttribute: function ( name ) {

				delete this.attributes[ name ];

				return this;

			},

			addGroup: function ( start, count, materialIndex ) {

				this.groups.push( {

					start: start,
					count: count,
					materialIndex: materialIndex !== undefined ? materialIndex : 0

				} );

			},

			clearGroups: function () {

				this.groups = [];

			},

			setDrawRange: function ( start, count ) {

				this.drawRange.start = start;
				this.drawRange.count = count;

			},

			applyMatrix: function ( matrix ) {

				var position = this.attributes.position;

				if ( position !== undefined ) {

					matrix.applyToBufferAttribute( position );
					position.needsUpdate = true;

				}

				var normal = this.attributes.normal;

				if ( normal !== undefined ) {

					var normalMatrix = new Matrix3().getNormalMatrix( matrix );

					normalMatrix.applyToBufferAttribute( normal );
					normal.needsUpdate = true;

				}

				if ( this.boundingBox !== null ) {

					this.computeBoundingBox();

				}

				if ( this.boundingSphere !== null ) {

					this.computeBoundingSphere();

				}

				return this;

			},

			rotateX: function () {

				// rotate geometry around world x-axis

				var m1 = new Matrix4();

				return function rotateX( angle ) {

					m1.makeRotationX( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateY: function () {

				// rotate geometry around world y-axis

				var m1 = new Matrix4();

				return function rotateY( angle ) {

					m1.makeRotationY( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateZ: function () {

				// rotate geometry around world z-axis

				var m1 = new Matrix4();

				return function rotateZ( angle ) {

					m1.makeRotationZ( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			translate: function () {

				// translate geometry

				var m1 = new Matrix4();

				return function translate( x, y, z ) {

					m1.makeTranslation( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			scale: function () {

				// scale geometry

				var m1 = new Matrix4();

				return function scale( x, y, z ) {

					m1.makeScale( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			lookAt: function () {

				var obj = new Object3D();

				return function lookAt( vector ) {

					obj.lookAt( vector );

					obj.updateMatrix();

					this.applyMatrix( obj.matrix );

				};

			}(),

			center: function () {

				this.computeBoundingBox();

				var offset = this.boundingBox.getCenter().negate();

				this.translate( offset.x, offset.y, offset.z );

				return offset;

			},

			setFromObject: function ( object ) {

				// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

				var geometry = object.geometry;

				if ( object.isPoints || object.isLine ) {

					var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
					var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

					this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
					this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

					if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

						var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

						this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

					}

					if ( geometry.boundingSphere !== null ) {

						this.boundingSphere = geometry.boundingSphere.clone();

					}

					if ( geometry.boundingBox !== null ) {

						this.boundingBox = geometry.boundingBox.clone();

					}

				} else if ( object.isMesh ) {

					if ( geometry && geometry.isGeometry ) {

						this.fromGeometry( geometry );

					}

				}

				return this;

			},

			updateFromObject: function ( object ) {

				var geometry = object.geometry;

				if ( object.isMesh ) {

					var direct = geometry.__directGeometry;

					if ( geometry.elementsNeedUpdate === true ) {

						direct = undefined;
						geometry.elementsNeedUpdate = false;

					}

					if ( direct === undefined ) {

						return this.fromGeometry( geometry );

					}

					direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
					direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
					direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
					direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
					direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

					geometry.verticesNeedUpdate = false;
					geometry.normalsNeedUpdate = false;
					geometry.colorsNeedUpdate = false;
					geometry.uvsNeedUpdate = false;
					geometry.groupsNeedUpdate = false;

					geometry = direct;

				}

				var attribute;

				if ( geometry.verticesNeedUpdate === true ) {

					attribute = this.attributes.position;

					if ( attribute !== undefined ) {

						attribute.copyVector3sArray( geometry.vertices );
						attribute.needsUpdate = true;

					}

					geometry.verticesNeedUpdate = false;

				}

				if ( geometry.normalsNeedUpdate === true ) {

					attribute = this.attributes.normal;

					if ( attribute !== undefined ) {

						attribute.copyVector3sArray( geometry.normals );
						attribute.needsUpdate = true;

					}

					geometry.normalsNeedUpdate = false;

				}

				if ( geometry.colorsNeedUpdate === true ) {

					attribute = this.attributes.color;

					if ( attribute !== undefined ) {

						attribute.copyColorsArray( geometry.colors );
						attribute.needsUpdate = true;

					}

					geometry.colorsNeedUpdate = false;

				}

				if ( geometry.uvsNeedUpdate ) {

					attribute = this.attributes.uv;

					if ( attribute !== undefined ) {

						attribute.copyVector2sArray( geometry.uvs );
						attribute.needsUpdate = true;

					}

					geometry.uvsNeedUpdate = false;

				}

				if ( geometry.lineDistancesNeedUpdate ) {

					attribute = this.attributes.lineDistance;

					if ( attribute !== undefined ) {

						attribute.copyArray( geometry.lineDistances );
						attribute.needsUpdate = true;

					}

					geometry.lineDistancesNeedUpdate = false;

				}

				if ( geometry.groupsNeedUpdate ) {

					geometry.computeGroups( object.geometry );
					this.groups = geometry.groups;

					geometry.groupsNeedUpdate = false;

				}

				return this;

			},

			fromGeometry: function ( geometry ) {

				geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

				return this.fromDirectGeometry( geometry.__directGeometry );

			},

			fromDirectGeometry: function ( geometry ) {

				var positions = new Float32Array( geometry.vertices.length * 3 );
				this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

				if ( geometry.normals.length > 0 ) {

					var normals = new Float32Array( geometry.normals.length * 3 );
					this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

				}

				if ( geometry.colors.length > 0 ) {

					var colors = new Float32Array( geometry.colors.length * 3 );
					this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

				}

				if ( geometry.uvs.length > 0 ) {

					var uvs = new Float32Array( geometry.uvs.length * 2 );
					this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

				}

				if ( geometry.uvs2.length > 0 ) {

					var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
					this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

				}

				if ( geometry.indices.length > 0 ) {

					var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
					var indices = new TypeArray( geometry.indices.length * 3 );
					this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

				}

				// groups

				this.groups = geometry.groups;

				// morphs

				for ( var name in geometry.morphTargets ) {

					var array = [];
					var morphTargets = geometry.morphTargets[ name ];

					for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

						var morphTarget = morphTargets[ i ];

						var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

						array.push( attribute.copyVector3sArray( morphTarget ) );

					}

					this.morphAttributes[ name ] = array;

				}

				// skinning

				if ( geometry.skinIndices.length > 0 ) {

					var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
					this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

				}

				if ( geometry.skinWeights.length > 0 ) {

					var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
					this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

				}

				//

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

				return this;

			},

			computeBoundingBox: function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new Box3();

				}

				var position = this.attributes.position;

				if ( position !== undefined ) {

					this.boundingBox.setFromBufferAttribute( position );

				} else {

					this.boundingBox.makeEmpty();

				}

				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

				}

			},

			computeBoundingSphere: function () {

				var box = new Box3();
				var vector = new Vector3();

				return function computeBoundingSphere() {

					if ( this.boundingSphere === null ) {

						this.boundingSphere = new Sphere();

					}

					var position = this.attributes.position;

					if ( position ) {

						var center = this.boundingSphere.center;

						box.setFromBufferAttribute( position );
						box.getCenter( center );

						// hoping to find a boundingSphere with a radius smaller than the
						// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

						var maxRadiusSq = 0;

						for ( var i = 0, il = position.count; i < il; i ++ ) {

							vector.x = position.getX( i );
							vector.y = position.getY( i );
							vector.z = position.getZ( i );
							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

						}

						this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

						if ( isNaN( this.boundingSphere.radius ) ) {

							console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

						}

					}

				};

			}(),

			computeFaceNormals: function () {

				// backwards compatibility

			},

			computeVertexNormals: function () {

				var index = this.index;
				var attributes = this.attributes;
				var groups = this.groups;

				if ( attributes.position ) {

					var positions = attributes.position.array;

					if ( attributes.normal === undefined ) {

						this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

					} else {

						// reset existing normals to zero

						var array = attributes.normal.array;

						for ( var i = 0, il = array.length; i < il; i ++ ) {

							array[ i ] = 0;

						}

					}

					var normals = attributes.normal.array;

					var vA, vB, vC;
					var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
					var cb = new Vector3(), ab = new Vector3();

					// indexed elements

					if ( index ) {

						var indices = index.array;

						if ( groups.length === 0 ) {

							this.addGroup( 0, indices.length );

						}

						for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

							var group = groups[ j ];

							var start = group.start;
							var count = group.count;

							for ( var i = start, il = start + count; i < il; i += 3 ) {

								vA = indices[ i + 0 ] * 3;
								vB = indices[ i + 1 ] * 3;
								vC = indices[ i + 2 ] * 3;

								pA.fromArray( positions, vA );
								pB.fromArray( positions, vB );
								pC.fromArray( positions, vC );

								cb.subVectors( pC, pB );
								ab.subVectors( pA, pB );
								cb.cross( ab );

								normals[ vA ] += cb.x;
								normals[ vA + 1 ] += cb.y;
								normals[ vA + 2 ] += cb.z;

								normals[ vB ] += cb.x;
								normals[ vB + 1 ] += cb.y;
								normals[ vB + 2 ] += cb.z;

								normals[ vC ] += cb.x;
								normals[ vC + 1 ] += cb.y;
								normals[ vC + 2 ] += cb.z;

							}

						}

					} else {

						// non-indexed elements (unconnected triangle soup)

						for ( var i = 0, il = positions.length; i < il; i += 9 ) {

							pA.fromArray( positions, i );
							pB.fromArray( positions, i + 3 );
							pC.fromArray( positions, i + 6 );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ i ] = cb.x;
							normals[ i + 1 ] = cb.y;
							normals[ i + 2 ] = cb.z;

							normals[ i + 3 ] = cb.x;
							normals[ i + 4 ] = cb.y;
							normals[ i + 5 ] = cb.z;

							normals[ i + 6 ] = cb.x;
							normals[ i + 7 ] = cb.y;
							normals[ i + 8 ] = cb.z;

						}

					}

					this.normalizeNormals();

					attributes.normal.needsUpdate = true;

				}

			},

			merge: function ( geometry, offset ) {

				if ( ! ( geometry && geometry.isBufferGeometry ) ) {

					console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
					return;

				}

				if ( offset === undefined ) offset = 0;

				var attributes = this.attributes;

				for ( var key in attributes ) {

					if ( geometry.attributes[ key ] === undefined ) continue;

					var attribute1 = attributes[ key ];
					var attributeArray1 = attribute1.array;

					var attribute2 = geometry.attributes[ key ];
					var attributeArray2 = attribute2.array;

					var attributeSize = attribute2.itemSize;

					for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

						attributeArray1[ j ] = attributeArray2[ i ];

					}

				}

				return this;

			},

			normalizeNormals: function () {

				var normals = this.attributes.normal;

				var x, y, z, n;

				for ( var i = 0, il = normals.count; i < il; i ++ ) {

					x = normals.getX( i );
					y = normals.getY( i );
					z = normals.getZ( i );

					n = 1.0 / Math.sqrt( x * x + y * y + z * z );

					normals.setXYZ( i, x * n, y * n, z * n );

				}

			},

			toNonIndexed: function () {

				if ( this.index === null ) {

					console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
					return this;

				}

				var geometry2 = new BufferGeometry();

				var indices = this.index.array;
				var attributes = this.attributes;

				for ( var name in attributes ) {

					var attribute = attributes[ name ];

					var array = attribute.array;
					var itemSize = attribute.itemSize;

					var array2 = new array.constructor( indices.length * itemSize );

					var index = 0, index2 = 0;

					for ( var i = 0, l = indices.length; i < l; i ++ ) {

						index = indices[ i ] * itemSize;

						for ( var j = 0; j < itemSize; j ++ ) {

							array2[ index2 ++ ] = array[ index ++ ];

						}

					}

					geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

				}

				return geometry2;

			},

			toJSON: function () {

				var data = {
					metadata: {
						version: 4.5,
						type: 'BufferGeometry',
						generator: 'BufferGeometry.toJSON'
					}
				};

				// standard BufferGeometry serialization

				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;

				if ( this.parameters !== undefined ) {

					var parameters = this.parameters;

					for ( var key in parameters ) {

						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

					}

					return data;

				}

				data.data = { attributes: {} };

				var index = this.index;

				if ( index !== null ) {

					var array = Array.prototype.slice.call( index.array );

					data.data.index = {
						type: index.array.constructor.name,
						array: array
					};

				}

				var attributes = this.attributes;

				for ( var key in attributes ) {

					var attribute = attributes[ key ];

					var array = Array.prototype.slice.call( attribute.array );

					data.data.attributes[ key ] = {
						itemSize: attribute.itemSize,
						type: attribute.array.constructor.name,
						array: array,
						normalized: attribute.normalized
					};

				}

				var groups = this.groups;

				if ( groups.length > 0 ) {

					data.data.groups = JSON.parse( JSON.stringify( groups ) );

				}

				var boundingSphere = this.boundingSphere;

				if ( boundingSphere !== null ) {

					data.data.boundingSphere = {
						center: boundingSphere.center.toArray(),
						radius: boundingSphere.radius
					};

				}

				return data;

			},

			clone: function () {

				/*
				 // Handle primitives

				 var parameters = this.parameters;

				 if ( parameters !== undefined ) {

				 var values = [];

				 for ( var key in parameters ) {

				 values.push( parameters[ key ] );

				 }

				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;

				 }

				 return new this.constructor().copy( this );
				 */

				return new BufferGeometry().copy( this );

			},

			copy: function ( source ) {

				var name, i, l;

				// reset

				this.index = null;
				this.attributes = {};
				this.morphAttributes = {};
				this.groups = [];
				this.boundingBox = null;
				this.boundingSphere = null;

				// name

				this.name = source.name;

				// index

				var index = source.index;

				if ( index !== null ) {

					this.setIndex( index.clone() );

				}

				// attributes

				var attributes = source.attributes;

				for ( name in attributes ) {

					var attribute = attributes[ name ];
					this.addAttribute( name, attribute.clone() );

				}

				// morph attributes

				var morphAttributes = source.morphAttributes;

				for ( name in morphAttributes ) {

					var array = [];
					var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

					for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

						array.push( morphAttribute[ i ].clone() );

					}

					this.morphAttributes[ name ] = array;

				}

				// groups

				var groups = source.groups;

				for ( i = 0, l = groups.length; i < l; i ++ ) {

					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );

				}

				// bounding box

				var boundingBox = source.boundingBox;

				if ( boundingBox !== null ) {

					this.boundingBox = boundingBox.clone();

				}

				// bounding sphere

				var boundingSphere = source.boundingSphere;

				if ( boundingSphere !== null ) {

					this.boundingSphere = boundingSphere.clone();

				}

				// draw range

				this.drawRange.start = source.drawRange.start;
				this.drawRange.count = source.drawRange.count;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// BoxGeometry

		function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			Geometry.call( this );

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();

		}

		BoxGeometry.prototype = Object.create( Geometry.prototype );
		BoxGeometry.prototype.constructor = BoxGeometry;

		// BoxBufferGeometry

		function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			BufferGeometry.call( this );

			this.type = 'BoxBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			var scope = this;

			// segments

			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var numberOfVertices = 0;
			var groupStart = 0;

			// build each side of the box geometry

			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
			buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
			buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				var segmentWidth = width / gridX;
				var segmentHeight = height / gridY;

				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;

				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;

				var vertexCounter = 0;
				var groupCount = 0;

				var ix, iy;

				var vector = new Vector3();

				// generate vertices, normals and uvs

				for ( iy = 0; iy < gridY1; iy ++ ) {

					var y = iy * segmentHeight - heightHalf;

					for ( ix = 0; ix < gridX1; ix ++ ) {

						var x = ix * segmentWidth - widthHalf;

						// set values to correct vector component

						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer

						vertices.push( vector.x, vector.y, vector.z );

						// set values to correct vector component

						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer

						normals.push( vector.x, vector.y, vector.z );

						// uvs

						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );

						// counters

						vertexCounter += 1;

					}

				}

				// indices

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( iy = 0; iy < gridY; iy ++ ) {

					for ( ix = 0; ix < gridX; ix ++ ) {

						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// increase counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups

				groupStart += groupCount;

				// update total number of vertices

				numberOfVertices += vertexCounter;

			}

		}

		BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// PlaneGeometry

		function PlaneGeometry( width, height, widthSegments, heightSegments ) {

			Geometry.call( this );

			this.type = 'PlaneGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
			this.mergeVertices();

		}

		PlaneGeometry.prototype = Object.create( Geometry.prototype );
		PlaneGeometry.prototype.constructor = PlaneGeometry;

		// PlaneBufferGeometry

		function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

			BufferGeometry.call( this );

			this.type = 'PlaneBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			var width_half = width / 2;
			var height_half = height / 2;

			var gridX = Math.floor( widthSegments ) || 1;
			var gridY = Math.floor( heightSegments ) || 1;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var segment_width = width / gridX;
			var segment_height = height / gridY;

			var ix, iy;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// generate vertices, normals and uvs

			for ( iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segment_height - height_half;

				for ( ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segment_width - width_half;

					vertices.push( x, - y, 0 );

					normals.push( 0, 0, 1 );

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

				}

			}

			// indices

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  shading: THREE.SmoothShading,
		 *  depthTest: <bool>,
		 *  depthWrite: <bool>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>
		 * }
		 */

		function MeshBasicMaterial( parameters ) {

			Material.call( this );

			this.type = 'MeshBasicMaterial';

			this.color = new Color( 0xffffff ); // emissive

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;

			this.lights = false;

			this.setValues( parameters );

		}

		MeshBasicMaterial.prototype = Object.create( Material.prototype );
		MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

		MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

		MeshBasicMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;

			return this;

		};

		/**
		 * @author bhouston / http://clara.io
		 */

		function Ray( origin, direction ) {

			this.origin = ( origin !== undefined ) ? origin : new Vector3();
			this.direction = ( direction !== undefined ) ? direction : new Vector3();

		}

		Object.assign( Ray.prototype, {

			set: function ( origin, direction ) {

				this.origin.copy( origin );
				this.direction.copy( direction );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( ray ) {

				this.origin.copy( ray.origin );
				this.direction.copy( ray.direction );

				return this;

			},

			at: function ( t, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

			},

			lookAt: function ( v ) {

				this.direction.copy( v ).sub( this.origin ).normalize();

				return this;

			},

			recast: function () {

				var v1 = new Vector3();

				return function recast( t ) {

					this.origin.copy( this.at( t, v1 ) );

					return this;

				};

			}(),

			closestPointToPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new Vector3();
				result.subVectors( point, this.origin );
				var directionDistance = result.dot( this.direction );

				if ( directionDistance < 0 ) {

					return result.copy( this.origin );

				}

				return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			},

			distanceToPoint: function ( point ) {

				return Math.sqrt( this.distanceSqToPoint( point ) );

			},

			distanceSqToPoint: function () {

				var v1 = new Vector3();

				return function distanceSqToPoint( point ) {

					var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

					// point behind the ray

					if ( directionDistance < 0 ) {

						return this.origin.distanceToSquared( point );

					}

					v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

					return v1.distanceToSquared( point );

				};

			}(),

			distanceSqToSegment: function () {

				var segCenter = new Vector3();
				var segDir = new Vector3();
				var diff = new Vector3();

				return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
					// It returns the min distance between the ray and the segment
					// defined by v0 and v1
					// It can also set two optional targets :
					// - The closest point on the ray
					// - The closest point on the segment

					segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
					segDir.copy( v1 ).sub( v0 ).normalize();
					diff.copy( this.origin ).sub( segCenter );

					var segExtent = v0.distanceTo( v1 ) * 0.5;
					var a01 = - this.direction.dot( segDir );
					var b0 = diff.dot( this.direction );
					var b1 = - diff.dot( segDir );
					var c = diff.lengthSq();
					var det = Math.abs( 1 - a01 * a01 );
					var s0, s1, sqrDist, extDet;

					if ( det > 0 ) {

						// The ray and segment are not parallel.

						s0 = a01 * b1 - b0;
						s1 = a01 * b0 - b1;
						extDet = segExtent * det;

						if ( s0 >= 0 ) {

							if ( s1 >= - extDet ) {

								if ( s1 <= extDet ) {

									// region 0
									// Minimum at interior points of ray and segment.

									var invDet = 1 / det;
									s0 *= invDet;
									s1 *= invDet;
									sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

								} else {

									// region 1

									s1 = segExtent;
									s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
									sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

								}

							} else {

								// region 5

								s1 = - segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							if ( s1 <= - extDet ) {

								// region 4

								s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							} else if ( s1 <= extDet ) {

								// region 3

								s0 = 0;
								s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = s1 * ( s1 + 2 * b1 ) + c;

							} else {

								// region 2

								s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						}

					} else {

						// Ray and segment are parallel.

						s1 = ( a01 > 0 ) ? - segExtent : segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

					if ( optionalPointOnRay ) {

						optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

					}

					if ( optionalPointOnSegment ) {

						optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

					}

					return sqrDist;

				};

			}(),

			intersectSphere: function () {

				var v1 = new Vector3();

				return function intersectSphere( sphere, optionalTarget ) {

					v1.subVectors( sphere.center, this.origin );
					var tca = v1.dot( this.direction );
					var d2 = v1.dot( v1 ) - tca * tca;
					var radius2 = sphere.radius * sphere.radius;

					if ( d2 > radius2 ) return null;

					var thc = Math.sqrt( radius2 - d2 );

					// t0 = first intersect point - entrance on front of sphere
					var t0 = tca - thc;

					// t1 = second intersect point - exit point on back of sphere
					var t1 = tca + thc;

					// test to see if both t0 and t1 are behind the ray - if so, return null
					if ( t0 < 0 && t1 < 0 ) return null;

					// test to see if t0 is behind the ray:
					// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
					// in order to always return an intersect point that is in front of the ray.
					if ( t0 < 0 ) return this.at( t1, optionalTarget );

					// else t0 is in front of the ray, so return the first collision point scaled by t0
					return this.at( t0, optionalTarget );

				};

			}(),

			intersectsSphere: function ( sphere ) {

				return this.distanceToPoint( sphere.center ) <= sphere.radius;

			},

			distanceToPlane: function ( plane ) {

				var denominator = plane.normal.dot( this.direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( plane.distanceToPoint( this.origin ) === 0 ) {

						return 0;

					}

					// Null is preferable to undefined since undefined means.... it is undefined

					return null;

				}

				var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

				// Return if the ray never intersects the plane

				return t >= 0 ? t :  null;

			},

			intersectPlane: function ( plane, optionalTarget ) {

				var t = this.distanceToPlane( plane );

				if ( t === null ) {

					return null;

				}

				return this.at( t, optionalTarget );

			},

			intersectsPlane: function ( plane ) {

				// check if the ray lies on the plane first

				var distToPoint = plane.distanceToPoint( this.origin );

				if ( distToPoint === 0 ) {

					return true;

				}

				var denominator = plane.normal.dot( this.direction );

				if ( denominator * distToPoint < 0 ) {

					return true;

				}

				// ray origin is behind the plane (and is pointing behind it)

				return false;

			},

			intersectBox: function ( box, optionalTarget ) {

				var tmin, tmax, tymin, tymax, tzmin, tzmax;

				var invdirx = 1 / this.direction.x,
					invdiry = 1 / this.direction.y,
					invdirz = 1 / this.direction.z;

				var origin = this.origin;

				if ( invdirx >= 0 ) {

					tmin = ( box.min.x - origin.x ) * invdirx;
					tmax = ( box.max.x - origin.x ) * invdirx;

				} else {

					tmin = ( box.max.x - origin.x ) * invdirx;
					tmax = ( box.min.x - origin.x ) * invdirx;

				}

				if ( invdiry >= 0 ) {

					tymin = ( box.min.y - origin.y ) * invdiry;
					tymax = ( box.max.y - origin.y ) * invdiry;

				} else {

					tymin = ( box.max.y - origin.y ) * invdiry;
					tymax = ( box.min.y - origin.y ) * invdiry;

				}

				if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

				// These lines also handle the case where tmin or tmax is NaN
				// (result of 0 * Infinity). x !== x returns true if x is NaN

				if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

				if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

				if ( invdirz >= 0 ) {

					tzmin = ( box.min.z - origin.z ) * invdirz;
					tzmax = ( box.max.z - origin.z ) * invdirz;

				} else {

					tzmin = ( box.max.z - origin.z ) * invdirz;
					tzmax = ( box.min.z - origin.z ) * invdirz;

				}

				if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

				if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

				if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

				//return point closest to the ray (positive side)

				if ( tmax < 0 ) return null;

				return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

			},

			intersectsBox: ( function () {

				var v = new Vector3();

				return function intersectsBox( box ) {

					return this.intersectBox( box, v ) !== null;

				};

			} )(),

			intersectTriangle: function () {

				// Compute the offset origin, edges, and normal.
				var diff = new Vector3();
				var edge1 = new Vector3();
				var edge2 = new Vector3();
				var normal = new Vector3();

				return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

					edge1.subVectors( b, a );
					edge2.subVectors( c, a );
					normal.crossVectors( edge1, edge2 );

					// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
					// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
					//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
					//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
					//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
					var DdN = this.direction.dot( normal );
					var sign;

					if ( DdN > 0 ) {

						if ( backfaceCulling ) return null;
						sign = 1;

					} else if ( DdN < 0 ) {

						sign = - 1;
						DdN = - DdN;

					} else {

						return null;

					}

					diff.subVectors( this.origin, a );
					var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

					// b1 < 0, no intersection
					if ( DdQxE2 < 0 ) {

						return null;

					}

					var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

					// b2 < 0, no intersection
					if ( DdE1xQ < 0 ) {

						return null;

					}

					// b1+b2 > 1, no intersection
					if ( DdQxE2 + DdE1xQ > DdN ) {

						return null;

					}

					// Line intersects triangle, check if ray does.
					var QdN = - sign * diff.dot( normal );

					// t < 0, no intersection
					if ( QdN < 0 ) {

						return null;

					}

					// Ray intersects triangle.
					return this.at( QdN / DdN, optionalTarget );

				};

			}(),

			applyMatrix4: function ( matrix4 ) {

				this.origin.applyMatrix4( matrix4 );
				this.direction.transformDirection( matrix4 );

				return this;

			},

			equals: function ( ray ) {

				return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

			}

		} );

		/**
		 * @author bhouston / http://clara.io
		 */

		function Line3( start, end ) {

			this.start = ( start !== undefined ) ? start : new Vector3();
			this.end = ( end !== undefined ) ? end : new Vector3();

		}

		Object.assign( Line3.prototype, {

			set: function ( start, end ) {

				this.start.copy( start );
				this.end.copy( end );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( line ) {

				this.start.copy( line.start );
				this.end.copy( line.end );

				return this;

			},

			getCenter: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

			},

			delta: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return result.subVectors( this.end, this.start );

			},

			distanceSq: function () {

				return this.start.distanceToSquared( this.end );

			},

			distance: function () {

				return this.start.distanceTo( this.end );

			},

			at: function ( t, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				return this.delta( result ).multiplyScalar( t ).add( this.start );

			},

			closestPointToPointParameter: function () {

				var startP = new Vector3();
				var startEnd = new Vector3();

				return function closestPointToPointParameter( point, clampToLine ) {

					startP.subVectors( point, this.start );
					startEnd.subVectors( this.end, this.start );

					var startEnd2 = startEnd.dot( startEnd );
					var startEnd_startP = startEnd.dot( startP );

					var t = startEnd_startP / startEnd2;

					if ( clampToLine ) {

						t = _Math.clamp( t, 0, 1 );

					}

					return t;

				};

			}(),

			closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

				var t = this.closestPointToPointParameter( point, clampToLine );

				var result = optionalTarget || new Vector3();

				return this.delta( result ).multiplyScalar( t ).add( this.start );

			},

			applyMatrix4: function ( matrix ) {

				this.start.applyMatrix4( matrix );
				this.end.applyMatrix4( matrix );

				return this;

			},

			equals: function ( line ) {

				return line.start.equals( this.start ) && line.end.equals( this.end );

			}

		} );

		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Triangle( a, b, c ) {

			this.a = ( a !== undefined ) ? a : new Vector3();
			this.b = ( b !== undefined ) ? b : new Vector3();
			this.c = ( c !== undefined ) ? c : new Vector3();

		}

		Object.assign( Triangle, {

			normal: function () {

				var v0 = new Vector3();

				return function normal( a, b, c, optionalTarget ) {

					var result = optionalTarget || new Vector3();

					result.subVectors( c, b );
					v0.subVectors( a, b );
					result.cross( v0 );

					var resultLengthSq = result.lengthSq();
					if ( resultLengthSq > 0 ) {

						return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

					}

					return result.set( 0, 0, 0 );

				};

			}(),

			// static/instance method to calculate barycentric coordinates
			// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
			barycoordFromPoint: function () {

				var v0 = new Vector3();
				var v1 = new Vector3();
				var v2 = new Vector3();

				return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

					v0.subVectors( c, a );
					v1.subVectors( b, a );
					v2.subVectors( point, a );

					var dot00 = v0.dot( v0 );
					var dot01 = v0.dot( v1 );
					var dot02 = v0.dot( v2 );
					var dot11 = v1.dot( v1 );
					var dot12 = v1.dot( v2 );

					var denom = ( dot00 * dot11 - dot01 * dot01 );

					var result = optionalTarget || new Vector3();

					// collinear or singular triangle
					if ( denom === 0 ) {

						// arbitrary location outside of triangle?
						// not sure if this is the best idea, maybe should be returning undefined
						return result.set( - 2, - 1, - 1 );

					}

					var invDenom = 1 / denom;
					var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
					var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

					// barycentric coordinates must always sum to 1
					return result.set( 1 - u - v, v, u );

				};

			}(),

			containsPoint: function () {

				var v1 = new Vector3();

				return function containsPoint( point, a, b, c ) {

					var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

					return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

				};

			}()

		} );

		Object.assign( Triangle.prototype, {

			set: function ( a, b, c ) {

				this.a.copy( a );
				this.b.copy( b );
				this.c.copy( c );

				return this;

			},

			setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

				this.a.copy( points[ i0 ] );
				this.b.copy( points[ i1 ] );
				this.c.copy( points[ i2 ] );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( triangle ) {

				this.a.copy( triangle.a );
				this.b.copy( triangle.b );
				this.c.copy( triangle.c );

				return this;

			},

			area: function () {

				var v0 = new Vector3();
				var v1 = new Vector3();

				return function area() {

					v0.subVectors( this.c, this.b );
					v1.subVectors( this.a, this.b );

					return v0.cross( v1 ).length() * 0.5;

				};

			}(),

			midpoint: function ( optionalTarget ) {

				var result = optionalTarget || new Vector3();
				return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

			},

			normal: function ( optionalTarget ) {

				return Triangle.normal( this.a, this.b, this.c, optionalTarget );

			},

			plane: function ( optionalTarget ) {

				var result = optionalTarget || new Plane();

				return result.setFromCoplanarPoints( this.a, this.b, this.c );

			},

			barycoordFromPoint: function ( point, optionalTarget ) {

				return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

			},

			containsPoint: function ( point ) {

				return Triangle.containsPoint( point, this.a, this.b, this.c );

			},

			closestPointToPoint: function () {

				var plane = new Plane();
				var edgeList = [ new Line3(), new Line3(), new Line3() ];
				var projectedPoint = new Vector3();
				var closestPoint = new Vector3();

				return function closestPointToPoint( point, optionalTarget ) {

					var result = optionalTarget || new Vector3();
					var minDistance = Infinity;

					// project the point onto the plane of the triangle

					plane.setFromCoplanarPoints( this.a, this.b, this.c );
					plane.projectPoint( point, projectedPoint );

					// check if the projection lies within the triangle

					if( this.containsPoint( projectedPoint ) === true ) {

						// if so, this is the closest point

						result.copy( projectedPoint );

					} else {

						// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

						edgeList[ 0 ].set( this.a, this.b );
						edgeList[ 1 ].set( this.b, this.c );
						edgeList[ 2 ].set( this.c, this.a );

						for( var i = 0; i < edgeList.length; i ++ ) {

							edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

							var distance = projectedPoint.distanceToSquared( closestPoint );

							if( distance < minDistance ) {

								minDistance = distance;

								result.copy( closestPoint );

							}

						}

					}

					return result;

				};

			}(),

			equals: function ( triangle ) {

				return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author jonobr1 / http://jonobr1.com/
		 */

		function Mesh( geometry, material ) {

			Object3D.call( this );

			this.type = 'Mesh';

			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

			this.drawMode = TrianglesDrawMode;

			this.updateMorphTargets();

		}

		Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Mesh,

			isMesh: true,

			setDrawMode: function ( value ) {

				this.drawMode = value;

			},

			copy: function ( source ) {

				Object3D.prototype.copy.call( this, source );

				this.drawMode = source.drawMode;

				return this;

			},

			updateMorphTargets: function () {

				var geometry = this.geometry;
				var m, ml, name;

				if ( geometry.isBufferGeometry ) {

					var morphAttributes = geometry.morphAttributes;
					var keys = Object.keys( morphAttributes );

					if ( keys.length > 0 ) {

						var morphAttribute = morphAttributes[ keys[ 0 ] ];

						if ( morphAttribute !== undefined ) {

							this.morphTargetInfluences = [];
							this.morphTargetDictionary = {};

							for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

								name = morphAttribute[ m ].name || String( m );

								this.morphTargetInfluences.push( 0 );
								this.morphTargetDictionary[ name ] = m;

							}

						}

					}

				} else {

					var morphTargets = geometry.morphTargets;

					if ( morphTargets !== undefined && morphTargets.length > 0 ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

							name = morphTargets[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			},

			raycast: ( function () {

				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();

				var vA = new Vector3();
				var vB = new Vector3();
				var vC = new Vector3();

				var tempA = new Vector3();
				var tempB = new Vector3();
				var tempC = new Vector3();

				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();

				var barycoord = new Vector3();

				var intersectionPoint = new Vector3();
				var intersectionPointWorld = new Vector3();

				function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

					Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

					uv1.multiplyScalar( barycoord.x );
					uv2.multiplyScalar( barycoord.y );
					uv3.multiplyScalar( barycoord.z );

					uv1.add( uv2 ).add( uv3 );

					return uv1.clone();

				}

				function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

					var intersect;
					var material = object.material;

					if ( material.side === BackSide ) {

						intersect = ray.intersectTriangle( pC, pB, pA, true, point );

					} else {

						intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

					}

					if ( intersect === null ) return null;

					intersectionPointWorld.copy( point );
					intersectionPointWorld.applyMatrix4( object.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

					if ( distance < raycaster.near || distance > raycaster.far ) return null;

					return {
						distance: distance,
						point: intersectionPointWorld.clone(),
						object: object
					};

				}

				function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

					vA.fromBufferAttribute( position, a );
					vB.fromBufferAttribute( position, b );
					vC.fromBufferAttribute( position, c );

					var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

					if ( intersection ) {

						if ( uv ) {

							uvA.fromBufferAttribute( uv, a );
							uvB.fromBufferAttribute( uv, b );
							uvC.fromBufferAttribute( uv, c );

							intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

						}

						intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
						intersection.faceIndex = a;

					}

					return intersection;

				}

				return function raycast( raycaster, intersects ) {

					var geometry = this.geometry;
					var material = this.material;
					var matrixWorld = this.matrixWorld;

					if ( material === undefined ) return;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					// Check boundingBox before continuing

					if ( geometry.boundingBox !== null ) {

						if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

					}

					var intersection;

					if ( geometry.isBufferGeometry ) {

						var a, b, c;
						var index = geometry.index;
						var position = geometry.attributes.position;
						var uv = geometry.attributes.uv;
						var i, l;

						if ( index !== null ) {

							// indexed buffer geometry

							for ( i = 0, l = index.count; i < l; i += 3 ) {

								a = index.getX( i );
								b = index.getX( i + 1 );
								c = index.getX( i + 2 );

								intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
									intersects.push( intersection );

								}

							}

						} else {

							// non-indexed buffer geometry

							for ( i = 0, l = position.count; i < l; i += 3 ) {

								a = i;
								b = i + 1;
								c = i + 2;

								intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

								if ( intersection ) {

									intersection.index = a; // triangle number in positions buffer semantics
									intersects.push( intersection );

								}

							}

						}

					} else if ( geometry.isGeometry ) {

						var fvA, fvB, fvC;
						var isMultiMaterial = Array.isArray( material );

						var vertices = geometry.vertices;
						var faces = geometry.faces;
						var uvs;

						var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
						if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

						for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

							var face = faces[ f ];
							var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

							if ( faceMaterial === undefined ) continue;

							fvA = vertices[ face.a ];
							fvB = vertices[ face.b ];
							fvC = vertices[ face.c ];

							if ( faceMaterial.morphTargets === true ) {

								var morphTargets = geometry.morphTargets;
								var morphInfluences = this.morphTargetInfluences;

								vA.set( 0, 0, 0 );
								vB.set( 0, 0, 0 );
								vC.set( 0, 0, 0 );

								for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

									var influence = morphInfluences[ t ];

									if ( influence === 0 ) continue;

									var targets = morphTargets[ t ].vertices;

									vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
									vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
									vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

								}

								vA.add( fvA );
								vB.add( fvB );
								vC.add( fvC );

								fvA = vA;
								fvB = vB;
								fvC = vC;

							}

							intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

							if ( intersection ) {

								if ( uvs && uvs[ f ] ) {

									var uvs_f = uvs[ f ];
									uvA.copy( uvs_f[ 0 ] );
									uvB.copy( uvs_f[ 1 ] );
									uvC.copy( uvs_f[ 2 ] );

									intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

								}

								intersection.face = face;
								intersection.faceIndex = f;
								intersects.push( intersection );

							}

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

			var clearColor = new Color( 0x000000 );
			var clearAlpha = 0;

			var planeCamera, planeMesh;
			var boxCamera, boxMesh;

			function render( scene, camera, forceClear ) {

				var background = scene.background;

				if ( background === null ) {

					setClear( clearColor, clearAlpha );

				} else if ( background && background.isColor ) {

					setClear( background, 1 );
					forceClear = true;

				}

				if ( renderer.autoClear || forceClear ) {

					renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

				}

				if ( background && background.isCubeTexture ) {

					if ( boxCamera === undefined ) {

						boxCamera = new PerspectiveCamera();

						boxMesh = new Mesh(
							new BoxBufferGeometry( 5, 5, 5 ),
							new ShaderMaterial( {
								uniforms: ShaderLib.cube.uniforms,
								vertexShader: ShaderLib.cube.vertexShader,
								fragmentShader: ShaderLib.cube.fragmentShader,
								side: BackSide,
								depthTest: false,
								depthWrite: false,
								fog: false
							} )
						);

					}

					boxCamera.projectionMatrix.copy( camera.projectionMatrix );

					boxCamera.matrixWorld.extractRotation( camera.matrixWorld );
					boxCamera.matrixWorldInverse.getInverse( boxCamera.matrixWorld );

					boxMesh.material.uniforms[ "tCube" ].value = background;
					boxMesh.modelViewMatrix.multiplyMatrices( boxCamera.matrixWorldInverse, boxMesh.matrixWorld );

					objects.update( boxMesh );

					renderer.renderBufferDirect( boxCamera, null, boxMesh.geometry, boxMesh.material, boxMesh, null );

				} else if ( background && background.isTexture ) {

					if ( planeCamera === undefined ) {

						planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

						planeMesh = new Mesh(
							new PlaneBufferGeometry( 2, 2 ),
							new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
						);

					}

					planeMesh.material.map = background;

					objects.update( planeMesh );

					renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

				}

			}

			function setClear( color, alpha ) {

				state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

			}

			return {

				getClearColor: function () {

					return clearColor;

				},
				setClearColor: function ( color, alpha ) {

					clearColor.set( color );
					clearAlpha = alpha !== undefined ? alpha : 1;
					setClear( clearColor, clearAlpha );

				},
				getClearAlpha: function () {

					return clearAlpha;

				},
				setClearAlpha: function ( alpha ) {

					clearAlpha = alpha;
					setClear( clearColor, clearAlpha );

				},
				render: render

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function painterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.program && b.program && a.program !== b.program ) {

				return a.program.id - b.program.id;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		function WebGLRenderList() {

			var opaque = [];
			var opaqueLastIndex = - 1;

			var transparent = [];
			var transparentLastIndex = - 1;

			function init() {

				opaqueLastIndex = - 1;
				transparentLastIndex = - 1;

			}

			function push( object, geometry, material, z, group ) {

				var array, index;

				// allocate the next position in the appropriate array

				if ( material.transparent ) {

					array = transparent;
					index = ++ transparentLastIndex;

				} else {

					array = opaque;
					index = ++ opaqueLastIndex;

				}

				// recycle existing render item or grow the array

				var renderItem = array[ index ];

				if ( renderItem ) {

					renderItem.id = object.id;
					renderItem.object = object;
					renderItem.geometry = geometry;
					renderItem.material = material;
					renderItem.program = material.program;
					renderItem.renderOrder = object.renderOrder;
					renderItem.z = z;
					renderItem.group = group;

				} else {

					renderItem = {
						id: object.id,
						object: object,
						geometry: geometry,
						material: material,
						program: material.program,
						renderOrder: object.renderOrder,
						z: z,
						group: group
					};

					// assert( index === array.length );
					array.push( renderItem );

				}

			}

			function finish() {

				opaque.length = opaqueLastIndex + 1;
				transparent.length = transparentLastIndex + 1;

			}

			function sort() {

				opaque.sort( painterSortStable );
				transparent.sort( reversePainterSortStable );

			}

			return {
				opaque: opaque,
				transparent: transparent,

				init: init,
				push: push,
				finish: finish,

				sort: sort
			};

		}

		function WebGLRenderLists() {

			var lists = {};

			function get( scene, camera ) {

				var hash = scene.id + ',' + camera.id;
				var list = lists[ hash ];

				if ( list === undefined ) {

					// console.log( 'THREE.WebGLRenderLists:', hash );

					list = new WebGLRenderList();
					lists[ hash ] = list;

				}

				return list;

			}

			function dispose() {

				lists = {};

			}

			return {
				get: get,
				dispose: dispose
			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

			var mode;

			function setMode( value ) {

				mode = value;

			}

			var type, bytesPerElement;

			function setIndex( value ) {

				type = value.type;
				bytesPerElement = value.bytesPerElement;

			}

			function render( start, count ) {

				gl.drawElements( mode, count, type, start * bytesPerElement );

				infoRender.calls ++;
				infoRender.vertices += count;

				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

			}

			function renderInstances( geometry, start, count ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

				extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;

				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

			}

			//

			this.setMode = setMode;
			this.setIndex = setIndex;
			this.render = render;
			this.renderInstances = renderInstances;

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLBufferRenderer( gl, extensions, infoRender ) {

			var mode;

			function setMode( value ) {

				mode = value;

			}

			function render( start, count ) {

				gl.drawArrays( mode, start, count );

				infoRender.calls ++;
				infoRender.vertices += count;

				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

			}

			function renderInstances( geometry, start, count ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

				var position = geometry.attributes.position;

				if ( position.isInterleavedBufferAttribute ) {

					count = position.data.count;

					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

				} else {

					extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

				}

				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;

				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

			}

			//

			this.setMode = setMode;
			this.render = render;
			this.renderInstances = renderInstances;

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLGeometries( gl, attributes, infoMemory ) {

			var geometries = {};
			var wireframeAttributes = {};

			function onGeometryDispose( event ) {

				var geometry = event.target;
				var buffergeometry = geometries[ geometry.id ];

				if ( buffergeometry.index !== null ) {

					attributes.remove( buffergeometry.index );

				}

				for ( var name in buffergeometry.attributes ) {

					attributes.remove( buffergeometry.attributes[ name ] );

				}

				geometry.removeEventListener( 'dispose', onGeometryDispose );

				delete geometries[ geometry.id ];

				// TODO Remove duplicate code

				var attribute = wireframeAttributes[ geometry.id ];

				if ( attribute ) {

					attributes.remove( attribute );
					delete wireframeAttributes[ geometry.id ];

				}

				attribute = wireframeAttributes[ buffergeometry.id ];

				if ( attribute ) {

					attributes.remove( attribute );
					delete wireframeAttributes[ buffergeometry.id ];

				}

				//

				infoMemory.geometries --;

			}

			function get( object, geometry ) {

				var buffergeometry = geometries[ geometry.id ];

				if ( buffergeometry ) return buffergeometry;

				geometry.addEventListener( 'dispose', onGeometryDispose );

				if ( geometry.isBufferGeometry ) {

					buffergeometry = geometry;

				} else if ( geometry.isGeometry ) {

					if ( geometry._bufferGeometry === undefined ) {

						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

					}

					buffergeometry = geometry._bufferGeometry;

				}

				geometries[ geometry.id ] = buffergeometry;

				infoMemory.geometries ++;

				return buffergeometry;

			}

			function update( geometry ) {

				var index = geometry.index;
				var geometryAttributes = geometry.attributes;

				if ( index !== null ) {

					attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

				}

				for ( var name in geometryAttributes ) {

					attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

				}

				// morph targets

				var morphAttributes = geometry.morphAttributes;

				for ( var name in morphAttributes ) {

					var array = morphAttributes[ name ];

					for ( var i = 0, l = array.length; i < l; i ++ ) {

						attributes.update( array[ i ], gl.ARRAY_BUFFER );

					}

				}

			}

			function getWireframeAttribute( geometry ) {

				var attribute = wireframeAttributes[ geometry.id ];

				if ( attribute ) return attribute;

				var indices = [];

				var geometryIndex = geometry.index;
				var geometryAttributes = geometry.attributes;

				// console.time( 'wireframe' );

				if ( geometryIndex !== null ) {

					var array = geometryIndex.array;

					for ( var i = 0, l = array.length; i < l; i += 3 ) {

						var a = array[ i + 0 ];
						var b = array[ i + 1 ];
						var c = array[ i + 2 ];

						indices.push( a, b, b, c, c, a );

					}

				} else {

					var array = geometryAttributes.position.array;

					for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

						var a = i + 0;
						var b = i + 1;
						var c = i + 2;

						indices.push( a, b, b, c, c, a );

					}

				}

				// console.timeEnd( 'wireframe' );

				attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

				attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

				wireframeAttributes[ geometry.id ] = attribute;

				return attribute;

			}

			return {

				get: get,
				update: update,

				getWireframeAttribute: getWireframeAttribute

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLLights() {

			var lights = {};

			return {

				get: function ( light ) {

					if ( lights[ light.id ] !== undefined ) {

						return lights[ light.id ];

					}

					var uniforms;

					switch ( light.type ) {

						case 'DirectionalLight':
							uniforms = {
								direction: new Vector3(),
								color: new Color(),

								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;

						case 'SpotLight':
							uniforms = {
								position: new Vector3(),
								direction: new Vector3(),
								color: new Color(),
								distance: 0,
								coneCos: 0,
								penumbraCos: 0,
								decay: 0,

								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;

						case 'PointLight':
							uniforms = {
								position: new Vector3(),
								color: new Color(),
								distance: 0,
								decay: 0,

								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;

						case 'HemisphereLight':
							uniforms = {
								direction: new Vector3(),
								skyColor: new Color(),
								groundColor: new Color()
							};
							break;

						case 'RectAreaLight':
							uniforms = {
								color: new Color(),
								position: new Vector3(),
								halfWidth: new Vector3(),
								halfHeight: new Vector3()
								// TODO (abelnation): set RectAreaLight shadow uniforms
							};
							break;

					}

					lights[ light.id ] = uniforms;

					return uniforms;

				}

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLObjects( gl, geometries, infoRender ) {

			var updateList = {};

			function update( object ) {

				var frame = infoRender.frame;

				var geometry = object.geometry;
				var buffergeometry = geometries.get( object, geometry );

				// Update once per frame

				if ( updateList[ buffergeometry.id ] !== frame ) {

					if ( geometry.isGeometry ) {

						buffergeometry.updateFromObject( object );

					}

					geometries.update( buffergeometry );

					updateList[ buffergeometry.id ] = frame;

				}

				return buffergeometry;

			}

			function clear() {

				updateList = {};

			}

			return {

				update: update,
				clear: clear

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function addLineNumbers( string ) {

			var lines = string.split( '\n' );

			for ( var i = 0; i < lines.length; i ++ ) {

				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

			}

			return lines.join( '\n' );

		}

		function WebGLShader( gl, type, string ) {

			var shader = gl.createShader( type );

			gl.shaderSource( shader, string );
			gl.compileShader( shader );

			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

			}

			if ( gl.getShaderInfoLog( shader ) !== '' ) {

				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

			}

			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			return shader;

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		var programIdCount = 0;

		function getEncodingComponents( encoding ) {

			switch ( encoding ) {

				case LinearEncoding:
					return [ 'Linear','( value )' ];
				case sRGBEncoding:
					return [ 'sRGB','( value )' ];
				case RGBEEncoding:
					return [ 'RGBE','( value )' ];
				case RGBM7Encoding:
					return [ 'RGBM','( value, 7.0 )' ];
				case RGBM16Encoding:
					return [ 'RGBM','( value, 16.0 )' ];
				case RGBDEncoding:
					return [ 'RGBD','( value, 256.0 )' ];
				case GammaEncoding:
					return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
				default:
					throw new Error( 'unsupported encoding: ' + encoding );

			}

		}

		function getTexelDecodingFunction( functionName, encoding ) {

			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

		}

		function getTexelEncodingFunction( functionName, encoding ) {

			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

		}

		function getToneMappingFunction( functionName, toneMapping ) {

			var toneMappingName;

			switch ( toneMapping ) {

				case LinearToneMapping:
					toneMappingName = "Linear";
					break;

				case ReinhardToneMapping:
					toneMappingName = "Reinhard";
					break;

				case Uncharted2ToneMapping:
					toneMappingName = "Uncharted2";
					break;

				case CineonToneMapping:
					toneMappingName = "OptimizedCineon";
					break;

				default:
					throw new Error( 'unsupported toneMapping: ' + toneMapping );

			}

			return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

		}

		function generateExtensions( extensions, parameters, rendererExtensions ) {

			extensions = extensions || {};

			var chunks = [
				( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
			];

			return chunks.filter( filterEmptyLine ).join( '\n' );

		}

		function generateDefines( defines ) {

			var chunks = [];

			for ( var name in defines ) {

				var value = defines[ name ];

				if ( value === false ) continue;

				chunks.push( '#define ' + name + ' ' + value );

			}

			return chunks.join( '\n' );

		}

		function fetchAttributeLocations( gl, program, identifiers ) {

			var attributes = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveAttrib( program, i );
				var name = info.name;

				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

				attributes[ name ] = gl.getAttribLocation( program, name );

			}

			return attributes;

		}

		function filterEmptyLine( string ) {

			return string !== '';

		}

		function replaceLightNums( string, parameters ) {

			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

		}

		function parseIncludes( string ) {

			var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

			function replace( match, include ) {

				var replace = ShaderChunk[ include ];

				if ( replace === undefined ) {

					throw new Error( 'Can not resolve #include <' + include + '>' );

				}

				return parseIncludes( replace );

			}

			return string.replace( pattern, replace );

		}

		function unrollLoops( string ) {

			var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

			function replace( match, start, end, snippet ) {

				var unroll = '';

				for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

					unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

				}

				return unroll;

			}

			return string.replace( pattern, replace );

		}

		function WebGLProgram( renderer, code, material, shader, parameters ) {

			var gl = renderer.context;

			var extensions = material.extensions;
			var defines = material.defines;

			var vertexShader = shader.vertexShader;
			var fragmentShader = shader.fragmentShader;

			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

			if ( parameters.shadowMapType === PCFShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

			} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

			}

			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

			if ( parameters.envMap ) {

				switch ( material.envMap.mapping ) {

					case CubeReflectionMapping:
					case CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;

					case CubeUVReflectionMapping:
					case CubeUVRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
						break;

					case EquirectangularReflectionMapping:
					case EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;

					case SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;

				}

				switch ( material.envMap.mapping ) {

					case CubeRefractionMapping:
					case EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;

				}

				switch ( material.combine ) {

					case MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;

					case MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;

					case AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;

				}

			}

			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

			// console.log( 'building new program ' );

			//

			var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

			var customDefines = generateDefines( defines );

			//

			var program = gl.createProgram();

			var prefixVertex, prefixFragment;

			if ( material.isRawShaderMaterial ) {

				prefixVertex = [

					customDefines,

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

				prefixFragment = [

					customExtensions,
					customDefines,

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

			} else {

				prefixVertex = [

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + shader.name,

					customDefines,

					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					'#define MAX_BONES ' + parameters.maxBones,
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',

					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',

					'#ifdef USE_COLOR',

					'	attribute vec3 color;',

					'#endif',

					'#ifdef USE_MORPHTARGETS',

					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',

					'	#ifdef USE_MORPHNORMALS',

					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',

					'	#else',

					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',

					'	#endif',

					'#endif',

					'#ifdef USE_SKINNING',

					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',

					'#endif',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

				prefixFragment = [

					customExtensions,

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + shader.name,

					customDefines,

					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
					'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

					parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

					parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',

					( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
					( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
					( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

					parameters.dithering ? '#define DITHERING' : '',

					( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
					parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
					parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
					parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
					parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

					parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

			}

			vertexShader = parseIncludes( vertexShader );
			vertexShader = replaceLightNums( vertexShader, parameters );

			fragmentShader = parseIncludes( fragmentShader );
			fragmentShader = replaceLightNums( fragmentShader, parameters );

			if ( ! material.isShaderMaterial ) {

				vertexShader = unrollLoops( vertexShader );
				fragmentShader = unrollLoops( fragmentShader );

			}

			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;

			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );

			var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );

			// Force a particular attribute to index 0.

			if ( material.index0AttributeName !== undefined ) {

				gl.bindAttribLocation( program, 0, material.index0AttributeName );

			} else if ( parameters.morphTargets === true ) {

				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );

			}

			gl.linkProgram( program );

			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

			var runnable = true;
			var haveDiagnostics = true;

			// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
			// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

				runnable = false;

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

			// clean up

			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );

			// set up caching for uniform locations

			var cachedUniforms;

			this.getUniforms = function() {

				if ( cachedUniforms === undefined ) {

					cachedUniforms =
						new WebGLUniforms( gl, program, renderer );

				}

				return cachedUniforms;

			};

			// set up caching for attribute locations

			var cachedAttributes;

			this.getAttributes = function() {

				if ( cachedAttributes === undefined ) {

					cachedAttributes = fetchAttributeLocations( gl, program );

				}

				return cachedAttributes;

			};

			// free resource

			this.destroy = function() {

				gl.deleteProgram( program );
				this.program = undefined;

			};

			// DEPRECATED

			Object.defineProperties( this, {

				uniforms: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();

					}
				},

				attributes: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();

					}
				}

			} );


			//

			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;

			return this;

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLPrograms( renderer, capabilities ) {

			var programs = [];

			var shaderIDs = {
				MeshDepthMaterial: 'depth',
				MeshNormalMaterial: 'normal',
				MeshBasicMaterial: 'basic',
				MeshLambertMaterial: 'lambert',
				MeshPhongMaterial: 'phong',
				MeshToonMaterial: 'phong',
				MeshStandardMaterial: 'physical',
				MeshPhysicalMaterial: 'physical',
				LineBasicMaterial: 'basic',
				LineDashedMaterial: 'dashed',
				PointsMaterial: 'points'
			};

			var parameterNames = [
				"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
				"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
				"roughnessMap", "metalnessMap", "gradientMap",
				"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
				"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
				"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
				"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
				"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
				"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
				"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
			];


			function allocateBones( object ) {

				var skeleton = object.skeleton;
				var bones = skeleton.bones;

				if ( capabilities.floatVertexTextures ) {

					return 1024;

				} else {

					// default for when object is not specified
					// ( for example when prebuilding shader to be used with multiple objects )
					//
					//  - leave some extra space for other uniforms
					//  - limit here is ANGLE's 254 max uniform vectors
					//    (up to 54 should be safe)

					var nVertexUniforms = capabilities.maxVertexUniforms;
					var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

					var maxBones = Math.min( nVertexMatrices, bones.length );

					if ( maxBones < bones.length ) {

						console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
						return 0;

					}

					return maxBones;

				}

			}

			function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

				var encoding;

				if ( ! map ) {

					encoding = LinearEncoding;

				} else if ( map.isTexture ) {

					encoding = map.encoding;

				} else if ( map.isWebGLRenderTarget ) {

					console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
					encoding = map.texture.encoding;

				}

				// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
				if ( encoding === LinearEncoding && gammaOverrideLinear ) {

					encoding = GammaEncoding;

				}

				return encoding;

			}

			this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {

				var shaderID = shaderIDs[ material.type ];

				// heuristics to create shader parameters according to lights in the scene
				// (not to blow over maxLights budget)

				var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
				var precision = renderer.getPrecision();

				if ( material.precision !== null ) {

					precision = capabilities.getMaxPrecision( material.precision );

					if ( precision !== material.precision ) {

						console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

					}

				}

				var currentRenderTarget = renderer.getRenderTarget();

				var parameters = {

					shaderID: shaderID,

					precision: precision,
					supportsVertexTextures: capabilities.vertexTextures,
					outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
					map: !! material.map,
					mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
					envMap: !! material.envMap,
					envMapMode: material.envMap && material.envMap.mapping,
					envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
					envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
					lightMap: !! material.lightMap,
					aoMap: !! material.aoMap,
					emissiveMap: !! material.emissiveMap,
					emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
					bumpMap: !! material.bumpMap,
					normalMap: !! material.normalMap,
					displacementMap: !! material.displacementMap,
					roughnessMap: !! material.roughnessMap,
					metalnessMap: !! material.metalnessMap,
					specularMap: !! material.specularMap,
					alphaMap: !! material.alphaMap,

					gradientMap: !! material.gradientMap,

					combine: material.combine,

					vertexColors: material.vertexColors,

					fog: !! fog,
					useFog: material.fog,
					fogExp: ( fog && fog.isFogExp2 ),

					flatShading: material.shading === FlatShading,

					sizeAttenuation: material.sizeAttenuation,
					logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

					skinning: material.skinning && maxBones > 0,
					maxBones: maxBones,
					useVertexTexture: capabilities.floatVertexTextures,

					morphTargets: material.morphTargets,
					morphNormals: material.morphNormals,
					maxMorphTargets: renderer.maxMorphTargets,
					maxMorphNormals: renderer.maxMorphNormals,

					numDirLights: lights.directional.length,
					numPointLights: lights.point.length,
					numSpotLights: lights.spot.length,
					numRectAreaLights: lights.rectArea.length,
					numHemiLights: lights.hemi.length,

					numClippingPlanes: nClipPlanes,
					numClipIntersection: nClipIntersection,

					dithering: material.dithering,

					shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
					shadowMapType: renderer.shadowMap.type,

					toneMapping: renderer.toneMapping,
					physicallyCorrectLights: renderer.physicallyCorrectLights,

					premultipliedAlpha: material.premultipliedAlpha,

					alphaTest: material.alphaTest,
					doubleSided: material.side === DoubleSide,
					flipSided: material.side === BackSide,

					depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

				};

				return parameters;

			};

			this.getProgramCode = function ( material, parameters ) {

				var array = [];

				if ( parameters.shaderID ) {

					array.push( parameters.shaderID );

				} else {

					array.push( material.fragmentShader );
					array.push( material.vertexShader );

				}

				if ( material.defines !== undefined ) {

					for ( var name in material.defines ) {

						array.push( name );
						array.push( material.defines[ name ] );

					}

				}

				for ( var i = 0; i < parameterNames.length; i ++ ) {

					array.push( parameters[ parameterNames[ i ] ] );

				}

				array.push( material.onBeforeCompile.toString() );

				array.push( renderer.gammaOutput );

				return array.join();

			};

			this.acquireProgram = function ( material, shader, parameters, code ) {

				var program;

				// Check if code has been already compiled
				for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

					var programInfo = programs[ p ];

					if ( programInfo.code === code ) {

						program = programInfo;
						++ program.usedTimes;

						break;

					}

				}

				if ( program === undefined ) {

					program = new WebGLProgram( renderer, code, material, shader, parameters );
					programs.push( program );

				}

				return program;

			};

			this.releaseProgram = function ( program ) {

				if ( -- program.usedTimes === 0 ) {

					// Remove from unordered set
					var i = programs.indexOf( program );
					programs[ i ] = programs[ programs.length - 1 ];
					programs.pop();

					// Free WebGL resources
					program.destroy();

				}

			};

			// Exposed for resource monitoring & error feedback via renderer.info:
			this.programs = programs;

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, infoMemory ) {

			var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

			//

			function clampToMaxSize( image, maxSize ) {

				if ( image.width > maxSize || image.height > maxSize ) {

					// Warning: Scaling through the canvas will only work with images that use
					// premultiplied alpha.

					var scale = maxSize / Math.max( image.width, image.height );

					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = Math.floor( image.width * scale );
					canvas.height = Math.floor( image.height * scale );

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

					console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

					return canvas;

				}

				return image;

			}

			function isPowerOfTwo( image ) {

				return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

			}

			function makePowerOfTwo( image ) {

				if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = _Math.nearestPowerOfTwo( image.width );
					canvas.height = _Math.nearestPowerOfTwo( image.height );

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, canvas.width, canvas.height );

					console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

					return canvas;

				}

				return image;

			}

			function textureNeedsPowerOfTwo( texture ) {

				return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
					( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

			}

			function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

				return texture.generateMipmaps && isPowerOfTwo &&
					texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

			}

			// Fallback filters for non-power-of-2 textures

			function filterFallback( f ) {

				if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

					return _gl.NEAREST;

				}

				return _gl.LINEAR;

			}

			//

			function onTextureDispose( event ) {

				var texture = event.target;

				texture.removeEventListener( 'dispose', onTextureDispose );

				deallocateTexture( texture );

				infoMemory.textures --;


			}

			function onRenderTargetDispose( event ) {

				var renderTarget = event.target;

				renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

				deallocateRenderTarget( renderTarget );

				infoMemory.textures --;

			}

			//

			function deallocateTexture( texture ) {

				var textureProperties = properties.get( texture );

				if ( texture.image && textureProperties.__image__webglTextureCube ) {

					// cube texture

					_gl.deleteTexture( textureProperties.__image__webglTextureCube );

				} else {

					// 2D texture

					if ( textureProperties.__webglInit === undefined ) return;

					_gl.deleteTexture( textureProperties.__webglTexture );

				}

				// remove all webgl properties
				properties.remove( texture );

			}

			function deallocateRenderTarget( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );

				if ( ! renderTarget ) return;

				if ( textureProperties.__webglTexture !== undefined ) {

					_gl.deleteTexture( textureProperties.__webglTexture );

				}

				if ( renderTarget.depthTexture ) {

					renderTarget.depthTexture.dispose();

				}

				if ( renderTarget.isWebGLRenderTargetCube ) {

					for ( var i = 0; i < 6; i ++ ) {

						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
						if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

					}

				} else {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

				}

				properties.remove( renderTarget.texture );
				properties.remove( renderTarget );

			}

			//



			function setTexture2D( texture, slot ) {

				var textureProperties = properties.get( texture );

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					var image = texture.image;

					if ( image === undefined ) {

						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

					} else if ( image.complete === false ) {

						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

					} else {

						uploadTexture( textureProperties, texture, slot );
						return;

					}

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			}

			function setTextureCube( texture, slot ) {

				var textureProperties = properties.get( texture );

				if ( texture.image.length === 6 ) {

					if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

						if ( ! textureProperties.__image__webglTextureCube ) {

							texture.addEventListener( 'dispose', onTextureDispose );

							textureProperties.__image__webglTextureCube = _gl.createTexture();

							infoMemory.textures ++;

						}

						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

						_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

						var isCompressed = ( texture && texture.isCompressedTexture );
						var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

						var cubeImage = [];

						for ( var i = 0; i < 6; i ++ ) {

							if ( ! isCompressed && ! isDataTexture ) {

								cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

							} else {

								cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

							}

						}

						var image = cubeImage[ 0 ],
						isPowerOfTwoImage = isPowerOfTwo( image ),
						glFormat = paramThreeToGL( texture.format ),
						glType = paramThreeToGL( texture.type );

						setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

						for ( var i = 0; i < 6; i ++ ) {

							if ( ! isCompressed ) {

								if ( isDataTexture ) {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

								}

							} else {

								var mipmap, mipmaps = cubeImage[ i ].mipmaps;

								for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

									mipmap = mipmaps[ j ];

									if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

										if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

											state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

										} else {

											console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

										}

									} else {

										state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

									}

								}

							}

						}

						if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

							_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

						}

						textureProperties.__version = texture.version;

						if ( texture.onUpdate ) texture.onUpdate( texture );

					} else {

						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					}

				}

			}

			function setTextureCubeDynamic( texture, slot ) {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

			}

			function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

				var extension;

				if ( isPowerOfTwoImage ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

				} else {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

					if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

					}

					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

					if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

					}

				}

				extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension ) {

					if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
					if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

					if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

						_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
						properties.get( texture ).__currentAnisotropy = texture.anisotropy;

					}

				}

			}

			function uploadTexture( textureProperties, texture, slot ) {

				if ( textureProperties.__webglInit === undefined ) {

					textureProperties.__webglInit = true;

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__webglTexture = _gl.createTexture();

					infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

				var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

				if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

					image = makePowerOfTwo( image );

				}

				var isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

				var mipmap, mipmaps = texture.mipmaps;

				if ( texture.isDepthTexture ) {

					// populate depth texture with dummy data

					var internalFormat = _gl.DEPTH_COMPONENT;

					if ( texture.type === FloatType ) {

						if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
						internalFormat = _gl.DEPTH_COMPONENT32F;

					} else if ( _isWebGL2 ) {

						// WebGL 2.0 requires signed internalformat for glTexImage2D
						internalFormat = _gl.DEPTH_COMPONENT16;

					}

					if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						        console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

							texture.type = UnsignedShortType;
							glType = paramThreeToGL( texture.type );

						}

					}

					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.format === DepthStencilFormat ) {

						internalFormat = _gl.DEPTH_STENCIL;

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedInt248Type ) {

							console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

							texture.type = UnsignedInt248Type;
							glType = paramThreeToGL( texture.type );

						}

					}

					state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

				} else if ( texture.isDataTexture ) {

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

						}

						texture.generateMipmaps = false;

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

					}

				} else if ( texture.isCompressedTexture ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

							if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

								state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

							} else {

								console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

							}

						} else {

							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

						}

					}

				} else {

					// regular Texture (image, video, canvas)

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

						}

						texture.generateMipmaps = false;

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			// Render targets

			// Setup storage for target texture and bind it to correct framebuffer
			function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

				var glFormat = paramThreeToGL( renderTarget.texture.format );
				var glType = paramThreeToGL( renderTarget.texture.type );
				state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

			}

			// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
			function setupRenderBufferStorage( renderbuffer, renderTarget ) {

				_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

				if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

				} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

				} else {

					// FIXME: We don't support !depth !stencil
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

				}

				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

			}

			// Setup resources for a Depth Texture for a FBO (needs an extension)
			function setupDepthTexture( framebuffer, renderTarget ) {

				var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
				if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				if ( !( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

					throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

				}

				// upload an empty depth texture with framebuffer size
				if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
						renderTarget.depthTexture.image.width !== renderTarget.width ||
						renderTarget.depthTexture.image.height !== renderTarget.height ) {
					renderTarget.depthTexture.image.width = renderTarget.width;
					renderTarget.depthTexture.image.height = renderTarget.height;
					renderTarget.depthTexture.needsUpdate = true;
				}

				setTexture2D( renderTarget.depthTexture, 0 );

				var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

				if ( renderTarget.depthTexture.format === DepthFormat ) {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				} else {

					throw new Error('Unknown depthTexture format')

				}

			}

			// Setup GL resources for a non-texture depth buffer
			function setupDepthRenderbuffer( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

				if ( renderTarget.depthTexture ) {

					if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

					setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

				} else {

					if ( isCube ) {

						renderTargetProperties.__webglDepthbuffer = [];

						for ( var i = 0; i < 6; i ++ ) {

							_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
							renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

						}

					} else {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

					}

				}

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

			}

			// Set up GL resources for the render target
			function setupRenderTarget( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );

				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				infoMemory.textures ++;

				var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

				// Setup framebuffer

				if ( isCube ) {

					renderTargetProperties.__webglFramebuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

					}

				} else {

					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				}

				// Setup color buffer

				if ( isCube ) {

					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

					for ( var i = 0; i < 6; i ++ ) {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

					}

					if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

				} else {

					state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

					if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
					state.bindTexture( _gl.TEXTURE_2D, null );

				}

				// Setup depth and stencil buffers

				if ( renderTarget.depthBuffer ) {

					setupDepthRenderbuffer( renderTarget );

				}

			}

			function updateRenderTargetMipmap( renderTarget ) {

				var texture = renderTarget.texture;
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

				if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

					var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					var webglTexture = properties.get( texture ).__webglTexture;

					state.bindTexture( target, webglTexture );
					_gl.generateMipmap( target );
					state.bindTexture( target, null );

				}

			}

			this.setTexture2D = setTexture2D;
			this.setTextureCube = setTextureCube;
			this.setTextureCubeDynamic = setTextureCubeDynamic;
			this.setupRenderTarget = setupRenderTarget;
			this.updateRenderTargetMipmap = updateRenderTargetMipmap;

		}

		/**
		 * @author fordacious / fordacious.github.io
		 */

		function WebGLProperties() {

			var properties = {};

			function get( object ) {

				var uuid = object.uuid;
				var map = properties[ uuid ];

				if ( map === undefined ) {

					map = {};
					properties[ uuid ] = map;

				}

				return map;

			}

			function remove( object ) {

				delete properties[ object.uuid ];

			}

			function clear() {

				properties = {};

			}

			return {
				get: get,
				remove: remove,
				clear: clear
			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLState( gl, extensions, paramThreeToGL ) {

			function ColorBuffer() {

				var locked = false;

				var color = new Vector4();
				var currentColorMask = null;
				var currentColorClear = new Vector4();

				return {

					setMask: function ( colorMask ) {

						if ( currentColorMask !== colorMask && ! locked ) {

							gl.colorMask( colorMask, colorMask, colorMask, colorMask );
							currentColorMask = colorMask;

						}

					},

					setLocked: function ( lock ) {

						locked = lock;

					},

					setClear: function ( r, g, b, a, premultipliedAlpha ) {

						if ( premultipliedAlpha === true ) {

							r *= a; g *= a; b *= a;

						}

						color.set( r, g, b, a );

						if ( currentColorClear.equals( color ) === false ) {

							gl.clearColor( r, g, b, a );
							currentColorClear.copy( color );

						}

					},

					reset: function () {

						locked = false;

						currentColorMask = null;
						currentColorClear.set( 0, 0, 0, 1 );

					}

				};

			}

			function DepthBuffer() {

				var locked = false;

				var currentDepthMask = null;
				var currentDepthFunc = null;
				var currentDepthClear = null;

				return {

					setTest: function ( depthTest ) {

						if ( depthTest ) {

							enable( gl.DEPTH_TEST );

						} else {

							disable( gl.DEPTH_TEST );

						}

					},

					setMask: function ( depthMask ) {

						if ( currentDepthMask !== depthMask && ! locked ) {

							gl.depthMask( depthMask );
							currentDepthMask = depthMask;

						}

					},

					setFunc: function ( depthFunc ) {

						if ( currentDepthFunc !== depthFunc ) {

							if ( depthFunc ) {

								switch ( depthFunc ) {

									case NeverDepth:

										gl.depthFunc( gl.NEVER );
										break;

									case AlwaysDepth:

										gl.depthFunc( gl.ALWAYS );
										break;

									case LessDepth:

										gl.depthFunc( gl.LESS );
										break;

									case LessEqualDepth:

										gl.depthFunc( gl.LEQUAL );
										break;

									case EqualDepth:

										gl.depthFunc( gl.EQUAL );
										break;

									case GreaterEqualDepth:

										gl.depthFunc( gl.GEQUAL );
										break;

									case GreaterDepth:

										gl.depthFunc( gl.GREATER );
										break;

									case NotEqualDepth:

										gl.depthFunc( gl.NOTEQUAL );
										break;

									default:

										gl.depthFunc( gl.LEQUAL );

								}

							} else {

								gl.depthFunc( gl.LEQUAL );

							}

							currentDepthFunc = depthFunc;

						}

					},

					setLocked: function ( lock ) {

						locked = lock;

					},

					setClear: function ( depth ) {

						if ( currentDepthClear !== depth ) {

							gl.clearDepth( depth );
							currentDepthClear = depth;

						}

					},

					reset: function () {

						locked = false;

						currentDepthMask = null;
						currentDepthFunc = null;
						currentDepthClear = null;

					}

				};

			}

			function StencilBuffer() {

				var locked = false;

				var currentStencilMask = null;
				var currentStencilFunc = null;
				var currentStencilRef = null;
				var currentStencilFuncMask = null;
				var currentStencilFail = null;
				var currentStencilZFail = null;
				var currentStencilZPass = null;
				var currentStencilClear = null;

				return {

					setTest: function ( stencilTest ) {

						if ( stencilTest ) {

							enable( gl.STENCIL_TEST );

						} else {

							disable( gl.STENCIL_TEST );

						}

					},

					setMask: function ( stencilMask ) {

						if ( currentStencilMask !== stencilMask && ! locked ) {

							gl.stencilMask( stencilMask );
							currentStencilMask = stencilMask;

						}

					},

					setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

						if ( currentStencilFunc !== stencilFunc ||
						     currentStencilRef 	!== stencilRef 	||
						     currentStencilFuncMask !== stencilMask ) {

							gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

							currentStencilFunc = stencilFunc;
							currentStencilRef = stencilRef;
							currentStencilFuncMask = stencilMask;

						}

					},

					setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

						if ( currentStencilFail	 !== stencilFail 	||
						     currentStencilZFail !== stencilZFail ||
						     currentStencilZPass !== stencilZPass ) {

							gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

							currentStencilFail = stencilFail;
							currentStencilZFail = stencilZFail;
							currentStencilZPass = stencilZPass;

						}

					},

					setLocked: function ( lock ) {

						locked = lock;

					},

					setClear: function ( stencil ) {

						if ( currentStencilClear !== stencil ) {

							gl.clearStencil( stencil );
							currentStencilClear = stencil;

						}

					},

					reset: function () {

						locked = false;

						currentStencilMask = null;
						currentStencilFunc = null;
						currentStencilRef = null;
						currentStencilFuncMask = null;
						currentStencilFail = null;
						currentStencilZFail = null;
						currentStencilZPass = null;
						currentStencilClear = null;

					}

				};

			}

			//

			var colorBuffer = new ColorBuffer();
			var depthBuffer = new DepthBuffer();
			var stencilBuffer = new StencilBuffer();

			var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var newAttributes = new Uint8Array( maxVertexAttributes );
			var enabledAttributes = new Uint8Array( maxVertexAttributes );
			var attributeDivisors = new Uint8Array( maxVertexAttributes );

			var capabilities = {};

			var compressedTextureFormats = null;

			var currentBlending = null;
			var currentBlendEquation = null;
			var currentBlendSrc = null;
			var currentBlendDst = null;
			var currentBlendEquationAlpha = null;
			var currentBlendSrcAlpha = null;
			var currentBlendDstAlpha = null;
			var currentPremultipledAlpha = false;

			var currentFlipSided = null;
			var currentCullFace = null;

			var currentLineWidth = null;

			var currentPolygonOffsetFactor = null;
			var currentPolygonOffsetUnits = null;

			var currentScissorTest = null;

			var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

			var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
			var lineWidthAvailable = parseFloat( version ) >= 1.0;

			var currentTextureSlot = null;
			var currentBoundTextures = {};

			var currentScissor = new Vector4();
			var currentViewport = new Vector4();

			function createTexture( type, target, count ) {

				var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
				var texture = gl.createTexture();

				gl.bindTexture( type, texture );
				gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
				gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

				for ( var i = 0; i < count; i ++ ) {

					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				}

				return texture;

			}

			var emptyTextures = {};
			emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
			emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

			//

			function init() {

				colorBuffer.setClear( 0, 0, 0, 1 );
				depthBuffer.setClear( 1 );
				stencilBuffer.setClear( 0 );

				enable( gl.DEPTH_TEST );
				depthBuffer.setFunc( LessEqualDepth );

				setFlipSided( false );
				setCullFace( CullFaceBack );
				enable( gl.CULL_FACE );

				enable( gl.BLEND );
				setBlending( NormalBlending );

			}

			function initAttributes() {

				for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

					newAttributes[ i ] = 0;

				}

			}

			function enableAttribute( attribute ) {

				newAttributes[ attribute ] = 1;

				if ( enabledAttributes[ attribute ] === 0 ) {

					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;

				}

				if ( attributeDivisors[ attribute ] !== 0 ) {

					var extension = extensions.get( 'ANGLE_instanced_arrays' );

					extension.vertexAttribDivisorANGLE( attribute, 0 );
					attributeDivisors[ attribute ] = 0;

				}

			}

			function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

				newAttributes[ attribute ] = 1;

				if ( enabledAttributes[ attribute ] === 0 ) {

					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;

				}

				if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

					var extension = extensions.get( 'ANGLE_instanced_arrays' );

					extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
					attributeDivisors[ attribute ] = meshPerAttribute;

				}

			}

			function disableUnusedAttributes() {

				for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

					if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;

					}

				}

			}

			function enable( id ) {

				if ( capabilities[ id ] !== true ) {

					gl.enable( id );
					capabilities[ id ] = true;

				}

			}

			function disable( id ) {

				if ( capabilities[ id ] !== false ) {

					gl.disable( id );
					capabilities[ id ] = false;

				}

			}

			function getCompressedTextureFormats() {

				if ( compressedTextureFormats === null ) {

					compressedTextureFormats = [];

					if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

						var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

						for ( var i = 0; i < formats.length; i ++ ) {

							compressedTextureFormats.push( formats[ i ] );

						}

					}

				}

				return compressedTextureFormats;

			}

			function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

				if ( blending !== NoBlending ) {

					enable( gl.BLEND );

				} else {

					disable( gl.BLEND );

				}

				if ( ( blending !== CustomBlending ) && ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) ) {

					if ( blending === AdditiveBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

						}

					} else if ( blending === SubtractiveBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

						}

					} else if ( blending === MultiplyBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

						}

					} else {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						}

					}

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				if ( blending === CustomBlending ) {

					blendEquationAlpha = blendEquationAlpha || blendEquation;
					blendSrcAlpha = blendSrcAlpha || blendSrc;
					blendDstAlpha = blendDstAlpha || blendDst;

					if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

						gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

						currentBlendEquation = blendEquation;
						currentBlendEquationAlpha = blendEquationAlpha;

					}

					if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

						gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

						currentBlendSrc = blendSrc;
						currentBlendDst = blendDst;
						currentBlendSrcAlpha = blendSrcAlpha;
						currentBlendDstAlpha = blendDstAlpha;

					}

				} else {

					currentBlendEquation = null;
					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendEquationAlpha = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;

				}

			}

			function setMaterial( material ) {

				material.side === DoubleSide
					? disable( gl.CULL_FACE )
					: enable( gl.CULL_FACE );

				setFlipSided( material.side === BackSide );

				material.transparent === true
					? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
					: setBlending( NoBlending );

				depthBuffer.setFunc( material.depthFunc );
				depthBuffer.setTest( material.depthTest );
				depthBuffer.setMask( material.depthWrite );
				colorBuffer.setMask( material.colorWrite );

				setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			}

			//

			function setFlipSided( flipSided ) {

				if ( currentFlipSided !== flipSided ) {

					if ( flipSided ) {

						gl.frontFace( gl.CW );

					} else {

						gl.frontFace( gl.CCW );

					}

					currentFlipSided = flipSided;

				}

			}

			function setCullFace( cullFace ) {

				if ( cullFace !== CullFaceNone ) {

					enable( gl.CULL_FACE );

					if ( cullFace !== currentCullFace ) {

						if ( cullFace === CullFaceBack ) {

							gl.cullFace( gl.BACK );

						} else if ( cullFace === CullFaceFront ) {

							gl.cullFace( gl.FRONT );

						} else {

							gl.cullFace( gl.FRONT_AND_BACK );

						}

					}

				} else {

					disable( gl.CULL_FACE );

				}

				currentCullFace = cullFace;

			}

			function setLineWidth( width ) {

				if ( width !== currentLineWidth ) {

					if ( lineWidthAvailable ) gl.lineWidth( width );

					currentLineWidth = width;

				}

			}

			function setPolygonOffset( polygonOffset, factor, units ) {

				if ( polygonOffset ) {

					enable( gl.POLYGON_OFFSET_FILL );

					if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

						gl.polygonOffset( factor, units );

						currentPolygonOffsetFactor = factor;
						currentPolygonOffsetUnits = units;

					}

				} else {

					disable( gl.POLYGON_OFFSET_FILL );

				}

			}

			function getScissorTest() {

				return currentScissorTest;

			}

			function setScissorTest( scissorTest ) {

				currentScissorTest = scissorTest;

				if ( scissorTest ) {

					enable( gl.SCISSOR_TEST );

				} else {

					disable( gl.SCISSOR_TEST );

				}

			}

			// texture

			function activeTexture( webglSlot ) {

				if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

				if ( currentTextureSlot !== webglSlot ) {

					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;

				}

			}

			function bindTexture( webglType, webglTexture ) {

				if ( currentTextureSlot === null ) {

					activeTexture();

				}

				var boundTexture = currentBoundTextures[ currentTextureSlot ];

				if ( boundTexture === undefined ) {

					boundTexture = { type: undefined, texture: undefined };
					currentBoundTextures[ currentTextureSlot ] = boundTexture;

				}

				if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

					gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

					boundTexture.type = webglType;
					boundTexture.texture = webglTexture;

				}

			}

			function compressedTexImage2D() {

				try {

					gl.compressedTexImage2D.apply( gl, arguments );

				} catch ( error ) {

					console.error( 'THREE.WebGLState:', error );

				}

			}

			function texImage2D() {

				try {

					gl.texImage2D.apply( gl, arguments );

				} catch ( error ) {

					console.error( 'THREE.WebGLState:', error );

				}

			}

			//

			function scissor( scissor ) {

				if ( currentScissor.equals( scissor ) === false ) {

					gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
					currentScissor.copy( scissor );

				}

			}

			function viewport( viewport ) {

				if ( currentViewport.equals( viewport ) === false ) {

					gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
					currentViewport.copy( viewport );

				}

			}

			//

			function reset() {

				for ( var i = 0; i < enabledAttributes.length; i ++ ) {

					if ( enabledAttributes[ i ] === 1 ) {

						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;

					}

				}

				capabilities = {};

				compressedTextureFormats = null;

				currentTextureSlot = null;
				currentBoundTextures = {};

				currentBlending = null;

				currentFlipSided = null;
				currentCullFace = null;

				colorBuffer.reset();
				depthBuffer.reset();
				stencilBuffer.reset();

			}

			return {

				buffers: {
					color: colorBuffer,
					depth: depthBuffer,
					stencil: stencilBuffer
				},

				init: init,
				initAttributes: initAttributes,
				enableAttribute: enableAttribute,
				enableAttributeAndDivisor: enableAttributeAndDivisor,
				disableUnusedAttributes: disableUnusedAttributes,
				enable: enable,
				disable: disable,
				getCompressedTextureFormats: getCompressedTextureFormats,

				setBlending: setBlending,
				setMaterial: setMaterial,

				setFlipSided: setFlipSided,
				setCullFace: setCullFace,

				setLineWidth: setLineWidth,
				setPolygonOffset: setPolygonOffset,

				getScissorTest: getScissorTest,
				setScissorTest: setScissorTest,

				activeTexture: activeTexture,
				bindTexture: bindTexture,
				compressedTexImage2D: compressedTexImage2D,
				texImage2D: texImage2D,

				scissor: scissor,
				viewport: viewport,

				reset: reset

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLCapabilities( gl, extensions, parameters ) {

			var maxAnisotropy;

			function getMaxAnisotropy() {

				if ( maxAnisotropy !== undefined ) return maxAnisotropy;

				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension !== null ) {

					maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

				} else {

					maxAnisotropy = 0;

				}

				return maxAnisotropy;

			}

			function getMaxPrecision( precision ) {

				if ( precision === 'highp' ) {

					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

						return 'highp';

					}

					precision = 'mediump';

				}

				if ( precision === 'mediump' ) {

					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

						return 'mediump';

					}

				}

				return 'lowp';

			}

			var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
			var maxPrecision = getMaxPrecision( precision );

			if ( maxPrecision !== precision ) {

				console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
				precision = maxPrecision;

			}

			var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

			var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
			var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
			var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
			var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

			var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
			var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
			var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

			var vertexTextures = maxVertexTextures > 0;
			var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
			var floatVertexTextures = vertexTextures && floatFragmentTextures;

			return {

				getMaxAnisotropy: getMaxAnisotropy,
				getMaxPrecision: getMaxPrecision,

				precision: precision,
				logarithmicDepthBuffer: logarithmicDepthBuffer,

				maxTextures: maxTextures,
				maxVertexTextures: maxVertexTextures,
				maxTextureSize: maxTextureSize,
				maxCubemapSize: maxCubemapSize,

				maxAttributes: maxAttributes,
				maxVertexUniforms: maxVertexUniforms,
				maxVaryings: maxVaryings,
				maxFragmentUniforms: maxFragmentUniforms,

				vertexTextures: vertexTextures,
				floatFragmentTextures: floatFragmentTextures,
				floatVertexTextures: floatVertexTextures

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function ArrayCamera( array ) {

			PerspectiveCamera.call( this );

			this.cameras = array || [];

		}

		ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

			constructor: ArrayCamera,

			isArrayCamera: true

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebVRManager( renderer ) {

			var scope = this;

			var device = null;
			var frameData = null;

			if ( 'VRFrameData' in window ) {

				frameData = new window.VRFrameData();

			}

			var matrixWorldInverse = new Matrix4();

			var standingMatrix = new Matrix4();
			var standingMatrixInverse = new Matrix4();

			var cameraL = new PerspectiveCamera();
			cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
			cameraL.layers.enable( 1 );

			var cameraR = new PerspectiveCamera();
			cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
			cameraR.layers.enable( 2 );

			var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
			cameraVR.layers.enable( 1 );
			cameraVR.layers.enable( 2 );

			//

			var currentSize, currentPixelRatio;

			function onVRDisplayPresentChange() {

				if ( device.isPresenting ) {

					var eyeParameters = device.getEyeParameters( 'left' );
					var renderWidth = eyeParameters.renderWidth;
					var renderHeight = eyeParameters.renderHeight;

					currentPixelRatio = renderer.getPixelRatio();
					currentSize = renderer.getSize();

					renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

				} else if ( scope.enabled ) {

					renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

				}

			}

			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

			//

			this.enabled = false;
			this.standing = false;

			this.getDevice = function () {

				return device;

			};

			this.setDevice = function ( value ) {

				if ( value !== undefined ) device = value;

			};

			this.getCamera = function ( camera ) {

				if ( device === null ) return camera;

				device.depthNear = camera.near;
				device.depthFar = camera.far;

				device.getFrameData( frameData );

				//

				var pose = frameData.pose;

				if ( pose.position !== null ) {

					camera.position.fromArray( pose.position );

				} else {

					camera.position.set( 0, 0, 0 );

				}

				if ( pose.orientation !== null ) {

					camera.quaternion.fromArray( pose.orientation );

				}

				camera.updateMatrixWorld();

				var stageParameters = device.stageParameters;

				if ( this.standing && stageParameters ) {

					standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
					standingMatrixInverse.getInverse( standingMatrix );

					camera.matrixWorld.multiply( standingMatrix );
					camera.matrixWorldInverse.multiply( standingMatrixInverse );

				}

				if ( device.isPresenting === false ) return camera;

				//

				cameraVR.matrixWorld.copy( camera.matrixWorld );
				cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

				cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
				cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

				if ( this.standing && stageParameters ) {

					cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
					cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

				}

				var parent = camera.parent;

				if ( parent !== null ) {

					matrixWorldInverse.getInverse( parent.matrixWorld );

					cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
					cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

				}

				// envMap and Mirror needs camera.matrixWorld

				cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
				cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

				cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
				cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

				// HACK @mrdoob
				// https://github.com/w3c/webvr/issues/203

				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

				//

				var layers = device.getLayers();

				if ( layers.length ) {

					var layer = layers[ 0 ];

					if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

						cameraL.bounds.fromArray( layer.leftBounds );

					}

					if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

						cameraR.bounds.fromArray( layer.rightBounds );

					}

				}

				return cameraVR;

			};

			this.getStandingMatrix = function () {

				return standingMatrix;

			};

			this.submitFrame = function () {

				if ( device && device.isPresenting ) device.submitFrame();

			};

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function WebGLExtensions( gl ) {

			var extensions = {};

			return {

				get: function ( name ) {

					if ( extensions[ name ] !== undefined ) {

						return extensions[ name ];

					}

					var extension;

					switch ( name ) {

						case 'WEBGL_depth_texture':
							extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
							break;

						case 'EXT_texture_filter_anisotropic':
							extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
							break;

						case 'WEBGL_compressed_texture_s3tc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
							break;

						case 'WEBGL_compressed_texture_pvrtc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
							break;

						case 'WEBGL_compressed_texture_etc1':
							extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
							break;

						default:
							extension = gl.getExtension( name );

					}

					if ( extension === null ) {

						console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

					}

					extensions[ name ] = extension;

					return extension;

				}

			};

		}

		/**
		 * @author tschw
		 */

		function WebGLClipping() {

			var scope = this,

				globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false,

				plane = new Plane(),
				viewNormalMatrix = new Matrix3(),

				uniform = { value: null, needsUpdate: false };

			this.uniform = uniform;
			this.numPlanes = 0;
			this.numIntersection = 0;

			this.init = function( planes, enableLocalClipping, camera ) {

				var enabled =
					planes.length !== 0 ||
					enableLocalClipping ||
					// enable state of previous frame - the clipping code has to
					// run another frame in order to reset the state:
					numGlobalPlanes !== 0 ||
					localClippingEnabled;

				localClippingEnabled = enableLocalClipping;

				globalState = projectPlanes( planes, camera, 0 );
				numGlobalPlanes = planes.length;

				return enabled;

			};

			this.beginShadows = function() {

				renderingShadows = true;
				projectPlanes( null );

			};

			this.endShadows = function() {

				renderingShadows = false;
				resetGlobalState();

			};

			this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

				if ( ! localClippingEnabled ||
						planes === null || planes.length === 0 ||
						renderingShadows && ! clipShadows ) {
					// there's no local clipping

					if ( renderingShadows ) {
						// there's no global clipping

						projectPlanes( null );

					} else {

						resetGlobalState();
					}

				} else {

					var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
						lGlobal = nGlobal * 4,

						dstArray = cache.clippingState || null;

					uniform.value = dstArray; // ensure unique state

					dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

					for ( var i = 0; i !== lGlobal; ++ i ) {

						dstArray[ i ] = globalState[ i ];

					}

					cache.clippingState = dstArray;
					this.numIntersection = clipIntersection ? this.numPlanes : 0;
					this.numPlanes += nGlobal;

				}


			};

			function resetGlobalState() {

				if ( uniform.value !== globalState ) {

					uniform.value = globalState;
					uniform.needsUpdate = numGlobalPlanes > 0;

				}

				scope.numPlanes = numGlobalPlanes;
				scope.numIntersection = 0;

			}

			function projectPlanes( planes, camera, dstOffset, skipTransform ) {

				var nPlanes = planes !== null ? planes.length : 0,
					dstArray = null;

				if ( nPlanes !== 0 ) {

					dstArray = uniform.value;

					if ( skipTransform !== true || dstArray === null ) {

						var flatSize = dstOffset + nPlanes * 4,
							viewMatrix = camera.matrixWorldInverse;

						viewNormalMatrix.getNormalMatrix( viewMatrix );

						if ( dstArray === null || dstArray.length < flatSize ) {

							dstArray = new Float32Array( flatSize );

						}

						for ( var i = 0, i4 = dstOffset;
											i !== nPlanes; ++ i, i4 += 4 ) {

							plane.copy( planes[ i ] ).
									applyMatrix4( viewMatrix, viewNormalMatrix );

							plane.normal.toArray( dstArray, i4 );
							dstArray[ i4 + 3 ] = plane.constant;

						}

					}

					uniform.value = dstArray;
					uniform.needsUpdate = true;

				}

				scope.numPlanes = nPlanes;
				
				return dstArray;

			}

		}

		// import { Sphere } from '../math/Sphere';
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 * @author tschw
		 */

		function WebGLRenderer( parameters ) {

			console.log( 'THREE.WebGLRenderer', REVISION );

			parameters = parameters || {};

			var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
				_context = parameters.context !== undefined ? parameters.context : null,

				_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
				_depth = parameters.depth !== undefined ? parameters.depth : true,
				_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
				_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
				_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
				_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

			var lights = [];

			var currentRenderList = null;

			var morphInfluences = new Float32Array( 8 );

			var sprites = [];
			var lensFlares = [];

			// public properties

			this.domElement = _canvas;
			this.context = null;

			// clearing

			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;

			// scene graph

			this.sortObjects = true;

			// user-defined clipping

			this.clippingPlanes = [];
			this.localClippingEnabled = false;

			// physically based shading

			this.gammaFactor = 2.0;	// for backwards compatibility
			this.gammaInput = false;
			this.gammaOutput = false;

			// physical lights

			this.physicallyCorrectLights = false;

			// tone mapping

			this.toneMapping = LinearToneMapping;
			this.toneMappingExposure = 1.0;
			this.toneMappingWhitePoint = 1.0;

			// morphs

			this.maxMorphTargets = 8;
			this.maxMorphNormals = 4;

			// internal properties

			var _this = this,

				// internal state cache

				_currentProgram = null,
				_currentRenderTarget = null,
				_currentFramebuffer = null,
				_currentMaterialId = - 1,
				_currentGeometryProgram = '',

				_currentCamera = null,
				_currentArrayCamera = null,

				_currentScissor = new Vector4(),
				_currentScissorTest = null,

				_currentViewport = new Vector4(),

				//

				_usedTextureUnits = 0,

				//

				_width = _canvas.width,
				_height = _canvas.height,

				_pixelRatio = 1,

				_scissor = new Vector4( 0, 0, _width, _height ),
				_scissorTest = false,

				_viewport = new Vector4( 0, 0, _width, _height ),

				// frustum

				_frustum = new Frustum(),

				// clipping

				_clipping = new WebGLClipping(),
				_clippingEnabled = false,
				_localClippingEnabled = false,

				// camera matrices cache

				_projScreenMatrix = new Matrix4(),

				_vector3 = new Vector3(),
				_matrix4 = new Matrix4(),
				_matrix42 = new Matrix4(),

				// light arrays cache

				_lights = {

					hash: '',

					ambient: [ 0, 0, 0 ],
					directional: [],
					directionalShadowMap: [],
					directionalShadowMatrix: [],
					spot: [],
					spotShadowMap: [],
					spotShadowMatrix: [],
					rectArea: [],
					point: [],
					pointShadowMap: [],
					pointShadowMatrix: [],
					hemi: [],

					shadows: []

				},

				// info

				_infoMemory = {
					geometries: 0,
					textures: 0
				},

				_infoRender = {

					frame: 0,
					calls: 0,
					vertices: 0,
					faces: 0,
					points: 0

				};

			this.info = {

				render: _infoRender,
				memory: _infoMemory,
				programs: null

			};


			// initialize

			var _gl;

			try {

				var contextAttributes = {
					alpha: _alpha,
					depth: _depth,
					stencil: _stencil,
					antialias: _antialias,
					premultipliedAlpha: _premultipliedAlpha,
					preserveDrawingBuffer: _preserveDrawingBuffer
				};

				_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

				if ( _gl === null ) {

					if ( _canvas.getContext( 'webgl' ) !== null ) {

						throw 'Error creating WebGL context with your selected attributes.';

					} else {

						throw 'Error creating WebGL context.';

					}

				}

				// Some experimental-webgl implementations do not have getShaderPrecisionFormat

				if ( _gl.getShaderPrecisionFormat === undefined ) {

					_gl.getShaderPrecisionFormat = function () {

						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

					};

				}

				_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

			} catch ( error ) {

				console.error( 'THREE.WebGLRenderer: ' + error );

			}

			var extensions = new WebGLExtensions( _gl );

			extensions.get( 'WEBGL_depth_texture' );
			extensions.get( 'OES_texture_float' );
			extensions.get( 'OES_texture_float_linear' );
			extensions.get( 'OES_texture_half_float' );
			extensions.get( 'OES_texture_half_float_linear' );
			extensions.get( 'OES_standard_derivatives' );
			extensions.get( 'ANGLE_instanced_arrays' );

			if ( extensions.get( 'OES_element_index_uint' ) ) {

				BufferGeometry.MaxIndex = 4294967296;

			}

			var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			var state = new WebGLState( _gl, extensions, paramThreeToGL );

			var properties = new WebGLProperties();
			var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, _infoMemory );
			var attributes = new WebGLAttributes( _gl );
			var geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
			var objects = new WebGLObjects( _gl, geometries, _infoRender );
			var programCache = new WebGLPrograms( this, capabilities );
			var lightCache = new WebGLLights();
			var renderLists = new WebGLRenderLists();

			var background = new WebGLBackground( this, state, objects, _premultipliedAlpha );
			var vr = new WebVRManager( this );

			this.info.programs = programCache.programs;

			var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
			var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

			//

			function getTargetPixelRatio() {

				return _currentRenderTarget === null ? _pixelRatio : 1;

			}

			function setDefaultGLState() {

				state.init();

				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			}

			function resetGLState() {

				_currentProgram = null;
				_currentCamera = null;

				_currentGeometryProgram = '';
				_currentMaterialId = - 1;

				state.reset();

			}

			setDefaultGLState();

			this.context = _gl;
			this.capabilities = capabilities;
			this.extensions = extensions;
			this.properties = properties;
			this.renderLists = renderLists;
			this.state = state;
			this.vr = vr;

			// shadow map

			var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

			this.shadowMap = shadowMap;


			// Plugins

			var spritePlugin = new SpritePlugin( this, sprites );
			var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

			// API

			this.getContext = function () {

				return _gl;

			};

			this.getContextAttributes = function () {

				return _gl.getContextAttributes();

			};

			this.forceContextLoss = function () {

				var extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.loseContext();

			};

			this.getMaxAnisotropy = function () {

				return capabilities.getMaxAnisotropy();

			};

			this.getPrecision = function () {

				return capabilities.precision;

			};

			this.getPixelRatio = function () {

				return _pixelRatio;

			};

			this.setPixelRatio = function ( value ) {

				if ( value === undefined ) return;

				_pixelRatio = value;

				this.setSize( _width, _height, false );

			};

			this.getSize = function () {

				return {
					width: _width,
					height: _height
				};

			};

			this.setSize = function ( width, height, updateStyle ) {

				var device = vr.getDevice();

				if ( device && device.isPresenting ) {

					console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
					return;

				}

				_width = width;
				_height = height;

				_canvas.width = width * _pixelRatio;
				_canvas.height = height * _pixelRatio;

				if ( updateStyle !== false ) {

					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';

				}

				this.setViewport( 0, 0, width, height );

			};

			this.getDrawingBufferSize = function () {

				return {
					width: _width * _pixelRatio,
					height: _height * _pixelRatio
				};

			};

			this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

				_width = width;
				_height = height;

				_pixelRatio = pixelRatio;

				_canvas.width = width * pixelRatio;
				_canvas.height = height * pixelRatio;

				this.setViewport( 0, 0, width, height );

			};

			this.setViewport = function ( x, y, width, height ) {

				_viewport.set( x, _height - y - height, width, height );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			};

			this.setScissor = function ( x, y, width, height ) {

				_scissor.set( x, _height - y - height, width, height );
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

			};

			this.setScissorTest = function ( boolean ) {

				state.setScissorTest( _scissorTest = boolean );

			};

			// Clearing

			this.getClearColor = background.getClearColor;
			this.setClearColor = background.setClearColor;
			this.getClearAlpha = background.getClearAlpha;
			this.setClearAlpha = background.setClearAlpha;

			this.clear = function ( color, depth, stencil ) {

				var bits = 0;

				if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
				if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

				_gl.clear( bits );

			};

			this.clearColor = function () {

				this.clear( true, false, false );

			};

			this.clearDepth = function () {

				this.clear( false, true, false );

			};

			this.clearStencil = function () {

				this.clear( false, false, true );

			};

			this.clearTarget = function ( renderTarget, color, depth, stencil ) {

				this.setRenderTarget( renderTarget );
				this.clear( color, depth, stencil );

			};

			// Reset

			this.resetGLState = resetGLState;

			this.dispose = function () {

				_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

				renderLists.dispose();

			};

			// Events

			function onContextLost( event ) {

				event.preventDefault();

				resetGLState();
				setDefaultGLState();

				properties.clear();
				objects.clear();

			}

			function onMaterialDispose( event ) {

				var material = event.target;

				material.removeEventListener( 'dispose', onMaterialDispose );

				deallocateMaterial( material );

			}

			// Buffer deallocation

			function deallocateMaterial( material ) {

				releaseMaterialProgramReference( material );

				properties.remove( material );

			}


			function releaseMaterialProgramReference( material ) {

				var programInfo = properties.get( material ).program;

				material.program = undefined;

				if ( programInfo !== undefined ) {

					programCache.releaseProgram( programInfo );

				}

			}

			// Buffer rendering

			function renderObjectImmediate( object, program, material ) {

				object.render( function ( object ) {

					_this.renderBufferImmediate( object, program, material );

				} );

			}

			this.renderBufferImmediate = function ( object, program, material ) {

				state.initAttributes();

				var buffers = properties.get( object );

				if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
				if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
				if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
				if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

				var programAttributes = program.getAttributes();

				if ( object.hasPositions ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( programAttributes.position );
					_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

					if ( ! material.isMeshPhongMaterial &&
						! material.isMeshStandardMaterial &&
						! material.isMeshNormalMaterial &&
						material.shading === FlatShading ) {

						for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

							var array = object.normalArray;

							var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
							var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
							var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

							array[ i + 0 ] = nx;
							array[ i + 1 ] = ny;
							array[ i + 2 ] = nz;

							array[ i + 3 ] = nx;
							array[ i + 4 ] = ny;
							array[ i + 5 ] = nz;

							array[ i + 6 ] = nx;
							array[ i + 7 ] = ny;
							array[ i + 8 ] = nz;

						}

					}

					_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( programAttributes.normal );

					_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasUvs && material.map ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( programAttributes.uv );

					_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasColors && material.vertexColors !== NoColors ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( programAttributes.color );

					_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

				}

				state.disableUnusedAttributes();

				_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

				object.count = 0;

			};

			function absNumericalSort( a, b ) {

				return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

			}

			this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

				state.setMaterial( material );

				var program = setProgram( camera, fog, material, object );
				var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

				var updateBuffers = false;

				if ( geometryProgram !== _currentGeometryProgram ) {

					_currentGeometryProgram = geometryProgram;
					updateBuffers = true;

				}

				// morph targets

				var morphTargetInfluences = object.morphTargetInfluences;

				if ( morphTargetInfluences !== undefined ) {

					// TODO Remove allocations

					var activeInfluences = [];

					for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

						var influence = morphTargetInfluences[ i ];
						activeInfluences.push( [ influence, i ] );

					}

					activeInfluences.sort( absNumericalSort );

					if ( activeInfluences.length > 8 ) {

						activeInfluences.length = 8;

					}

					var morphAttributes = geometry.morphAttributes;

					for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

						var influence = activeInfluences[ i ];
						morphInfluences[ i ] = influence[ 0 ];

						if ( influence[ 0 ] !== 0 ) {

							var index = influence[ 1 ];

							if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
							if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

						} else {

							if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
							if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

						}

					}

					for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

						morphInfluences[ i ] = 0.0;

					}

					program.getUniforms().setValue( _gl, 'morphTargetInfluences', morphInfluences );

					updateBuffers = true;

				}

				//

				var index = geometry.index;
				var position = geometry.attributes.position;
				var rangeFactor = 1;

				if ( material.wireframe === true ) {

					index = geometries.getWireframeAttribute( geometry );
					rangeFactor = 2;

				}

				var attribute;
				var renderer = bufferRenderer;

				if ( index !== null ) {

					attribute = attributes.get( index );

					renderer = indexedBufferRenderer;
					renderer.setIndex( attribute );

				}

				if ( updateBuffers ) {

					setupVertexAttributes( material, program, geometry );

					if ( index !== null ) {

						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

					}

				}

				//

				var dataCount = 0;

				if ( index !== null ) {

					dataCount = index.count;

				} else if ( position !== undefined ) {

					dataCount = position.count;

				}

				var rangeStart = geometry.drawRange.start * rangeFactor;
				var rangeCount = geometry.drawRange.count * rangeFactor;

				var groupStart = group !== null ? group.start * rangeFactor : 0;
				var groupCount = group !== null ? group.count * rangeFactor : Infinity;

				var drawStart = Math.max( rangeStart, groupStart );
				var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

				var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

				if ( drawCount === 0 ) return;

				//

				if ( object.isMesh ) {

					if ( material.wireframe === true ) {

						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );

					} else {

						switch ( object.drawMode ) {

							case TrianglesDrawMode:
								renderer.setMode( _gl.TRIANGLES );
								break;

							case TriangleStripDrawMode:
								renderer.setMode( _gl.TRIANGLE_STRIP );
								break;

							case TriangleFanDrawMode:
								renderer.setMode( _gl.TRIANGLE_FAN );
								break;

						}

					}


				} else if ( object.isLine ) {

					var lineWidth = material.linewidth;

					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

					state.setLineWidth( lineWidth * getTargetPixelRatio() );

					if ( object.isLineSegments ) {

						renderer.setMode( _gl.LINES );

					} else if ( object.isLineLoop ) {

						renderer.setMode( _gl.LINE_LOOP );

					} else {

						renderer.setMode( _gl.LINE_STRIP );

					}

				} else if ( object.isPoints ) {

					renderer.setMode( _gl.POINTS );

				}

				if ( geometry && geometry.isInstancedBufferGeometry ) {

					if ( geometry.maxInstancedCount > 0 ) {

						renderer.renderInstances( geometry, drawStart, drawCount );

					}

				} else {

					renderer.render( drawStart, drawCount );

				}

			};

			function setupVertexAttributes( material, program, geometry, startIndex ) {

				if ( geometry && geometry.isInstancedBufferGeometry ) {

					if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

						console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;

					}

				}

				if ( startIndex === undefined ) startIndex = 0;

				state.initAttributes();

				var geometryAttributes = geometry.attributes;

				var programAttributes = program.getAttributes();

				var materialDefaultAttributeValues = material.defaultAttributeValues;

				for ( var name in programAttributes ) {

					var programAttribute = programAttributes[ name ];

					if ( programAttribute >= 0 ) {

						var geometryAttribute = geometryAttributes[ name ];

						if ( geometryAttribute !== undefined ) {

							var normalized = geometryAttribute.normalized;
							var size = geometryAttribute.itemSize;

							var attribute = attributes.get( geometryAttribute );

							var buffer = attribute.buffer;
							var type = attribute.type;
							var bytesPerElement = attribute.bytesPerElement;

							if ( geometryAttribute.isInterleavedBufferAttribute ) {

								var data = geometryAttribute.data;
								var stride = data.stride;
								var offset = geometryAttribute.offset;

								if ( data && data.isInstancedInterleavedBuffer ) {

									state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

									if ( geometry.maxInstancedCount === undefined ) {

										geometry.maxInstancedCount = data.meshPerAttribute * data.count;

									}

								} else {

									state.enableAttribute( programAttribute );

								}

								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

							} else {

								if ( geometryAttribute.isInstancedBufferAttribute ) {

									state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

									if ( geometry.maxInstancedCount === undefined ) {

										geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

									}

								} else {

									state.enableAttribute( programAttribute );

								}

								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

							}

						} else if ( materialDefaultAttributeValues !== undefined ) {

							var value = materialDefaultAttributeValues[ name ];

							if ( value !== undefined ) {

								switch ( value.length ) {

									case 2:
										_gl.vertexAttrib2fv( programAttribute, value );
										break;

									case 3:
										_gl.vertexAttrib3fv( programAttribute, value );
										break;

									case 4:
										_gl.vertexAttrib4fv( programAttribute, value );
										break;

									default:
										_gl.vertexAttrib1fv( programAttribute, value );

								}

							}

						}

					}

				}

				state.disableUnusedAttributes();

			}

			// Compile

			this.compile = function ( scene, camera ) {

				lights = [];

				scene.traverse( function ( object ) {

					if ( object.isLight ) {

						lights.push( object );

					}

				} );

				setupLights( lights, camera );

				scene.traverse( function ( object ) {

					if ( object.material ) {

						if ( Array.isArray( object.material ) ) {

							for ( var i = 0; i < object.material.length; i ++ ) {

								initMaterial( object.material[ i ], scene.fog, object );

							}

						} else {

							initMaterial( object.material, scene.fog, object );

						}

					}

				} );

			};

			// Rendering

			this.animate = function ( callback ) {

				function onFrame() {

					callback();

					( vr.getDevice() || window ).requestAnimationFrame( onFrame );

				}

				( vr.getDevice() || window ).requestAnimationFrame( onFrame );

			};

			this.render = function ( scene, camera, renderTarget, forceClear ) {

				if ( ! ( camera && camera.isCamera ) ) {

					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;

				}

				// reset caching for this frame

				_currentGeometryProgram = '';
				_currentMaterialId = - 1;
				_currentCamera = null;

				// update scene graph

				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

				// update camera matrices and frustum

				if ( camera.parent === null ) camera.updateMatrixWorld();

				if ( vr.enabled ) {

					camera = vr.getCamera( camera );

				}

				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				lights.length = 0;
				sprites.length = 0;
				lensFlares.length = 0;

				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

				currentRenderList = renderLists.get( scene, camera );
				currentRenderList.init();

				projectObject( scene, camera, _this.sortObjects );

				currentRenderList.finish();

				if ( _this.sortObjects === true ) {

					currentRenderList.sort();

				}

				//

				if ( _clippingEnabled ) _clipping.beginShadows();

				setupShadows( lights );

				shadowMap.render( scene, camera );

				setupLights( lights, camera );

				if ( _clippingEnabled ) _clipping.endShadows();

				//

				_infoRender.frame ++;
				_infoRender.calls = 0;
				_infoRender.vertices = 0;
				_infoRender.faces = 0;
				_infoRender.points = 0;

				if ( renderTarget === undefined ) {

					renderTarget = null;

				}

				this.setRenderTarget( renderTarget );

				//

				background.render( scene, camera, forceClear );

				// render scene

				var opaqueObjects = currentRenderList.opaque;
				var transparentObjects = currentRenderList.transparent;

				if ( scene.overrideMaterial ) {

					var overrideMaterial = scene.overrideMaterial;

					if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
					if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

				} else {

					// opaque pass (front-to-back order)

					if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

					// transparent pass (back-to-front order)

					if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

				}

				// custom render plugins (post pass)

				spritePlugin.render( scene, camera );
				lensFlarePlugin.render( scene, camera, _currentViewport );

				// Generate mipmap if we're using any kind of mipmap filtering

				if ( renderTarget ) {

					textures.updateRenderTargetMipmap( renderTarget );

				}

				// Ensure depth buffer writing is enabled so it can be cleared on next render

				state.buffers.depth.setTest( true );
				state.buffers.depth.setMask( true );
				state.buffers.color.setMask( true );

				if ( camera.isArrayCamera ) {

					_this.setScissorTest( false );

				}

				if ( vr.enabled ) {

					vr.submitFrame();

				}

				// _gl.finish();

			};

			/*
			// TODO Duplicated code (Frustum)

			var _sphere = new Sphere();

			function isObjectViewable( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );

				return isSphereViewable( _sphere );

			}

			function isSpriteViewable( sprite ) {

				_sphere.center.set( 0, 0, 0 );
				_sphere.radius = 0.7071067811865476;
				_sphere.applyMatrix4( sprite.matrixWorld );

				return isSphereViewable( _sphere );

			}

			function isSphereViewable( sphere ) {

				if ( ! _frustum.intersectsSphere( sphere ) ) return false;

				var numPlanes = _clipping.numPlanes;

				if ( numPlanes === 0 ) return true;

				var planes = _this.clippingPlanes,

					center = sphere.center,
					negRad = - sphere.radius,
					i = 0;

				do {

					// out when deeper than radius in the negative halfspace
					if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

				} while ( ++ i !== numPlanes );

				return true;

			}
			*/

			function projectObject( object, camera, sortObjects ) {

				if ( ! object.visible ) return;

				var visible = object.layers.test( camera.layers );

				if ( visible ) {

					if ( object.isLight ) {

						lights.push( object );

					} else if ( object.isSprite ) {

						if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

							sprites.push( object );

						}

					} else if ( object.isLensFlare ) {

						lensFlares.push( object );

					} else if ( object.isImmediateRenderObject ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						currentRenderList.push( object, null, object.material, _vector3.z, null );

					} else if ( object.isMesh || object.isLine || object.isPoints ) {

						if ( object.isSkinnedMesh ) {

							object.skeleton.update();

						}

						if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

							if ( sortObjects ) {

								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );

							}

							var geometry = objects.update( object );
							var material = object.material;

							if ( Array.isArray( material ) ) {

								var groups = geometry.groups;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = material[ group.materialIndex ];

									if ( groupMaterial && groupMaterial.visible ) {

										currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else if ( material.visible ) {

								currentRenderList.push( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					projectObject( children[ i ], camera, sortObjects );

				}

			}

			function renderObjects( renderList, scene, camera, overrideMaterial ) {

				for ( var i = 0, l = renderList.length; i < l; i ++ ) {

					var renderItem = renderList[ i ];

					var object = renderItem.object;
					var geometry = renderItem.geometry;
					var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
					var group = renderItem.group;

					if ( camera.isArrayCamera ) {

						_currentArrayCamera = camera;

						var cameras = camera.cameras;

						for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

							var camera2 = cameras[ j ];

							if ( object.layers.test( camera2.layers ) ) {

								var bounds = camera2.bounds;

								var x = bounds.x * _width;
								var y = bounds.y * _height;
								var width = bounds.z * _width;
								var height = bounds.w * _height;

								_this.setViewport( x, y, width, height );
								_this.setScissor( x, y, width, height );
								_this.setScissorTest( true );

								renderObject( object, scene, camera2, geometry, material, group );

							}

						}

					} else {

						_currentArrayCamera = null;

						renderObject( object, scene, camera, geometry, material, group );

					}

				}

			}

			function renderObject( object, scene, camera, geometry, material, group ) {

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				if ( object.isImmediateRenderObject ) {

					state.setMaterial( material );

					var program = setProgram( camera, scene.fog, material, object );

					_currentGeometryProgram = '';

					renderObjectImmediate( object, program, material );

				} else {

					_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );

			}

			function initMaterial( material, fog, object ) {

				var materialProperties = properties.get( material );

				var parameters = programCache.getParameters(
					material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );

				var code = programCache.getProgramCode( material, parameters );

				var program = materialProperties.program;
				var programChange = true;

				if ( program === undefined ) {

					// new material
					material.addEventListener( 'dispose', onMaterialDispose );

				} else if ( program.code !== code ) {

					// changed glsl or parameters
					releaseMaterialProgramReference( material );

				} else if ( parameters.shaderID !== undefined ) {

					// same glsl and uniform list
					return;

				} else {

					// only rebuild uniform list
					programChange = false;

				}

				if ( programChange ) {

					if ( parameters.shaderID ) {

						var shader = ShaderLib[ parameters.shaderID ];

						materialProperties.shader = {
							name: material.type,
							uniforms: UniformsUtils.clone( shader.uniforms ),
							vertexShader: shader.vertexShader,
							fragmentShader: shader.fragmentShader
						};

					} else {

						materialProperties.shader = {
							name: material.type,
							uniforms: material.uniforms,
							vertexShader: material.vertexShader,
							fragmentShader: material.fragmentShader
						};

					}

					material.onBeforeCompile( materialProperties.shader );

					program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

					materialProperties.program = program;
					material.program = program;

				}

				var programAttributes = program.getAttributes();

				if ( material.morphTargets ) {

					material.numSupportedMorphTargets = 0;

					for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

						if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

							material.numSupportedMorphTargets ++;

						}

					}

				}

				if ( material.morphNormals ) {

					material.numSupportedMorphNormals = 0;

					for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

						if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

							material.numSupportedMorphNormals ++;

						}

					}

				}

				var uniforms = materialProperties.shader.uniforms;

				if ( ! material.isShaderMaterial &&
					! material.isRawShaderMaterial ||
					material.clipping === true ) {

					materialProperties.numClippingPlanes = _clipping.numPlanes;
					materialProperties.numIntersection = _clipping.numIntersection;
					uniforms.clippingPlanes = _clipping.uniform;

				}

				materialProperties.fog = fog;

				// store the light setup it was created for

				materialProperties.lightsHash = _lights.hash;

				if ( material.lights ) {

					// wire up the material to this renderer's lighting state

					uniforms.ambientLightColor.value = _lights.ambient;
					uniforms.directionalLights.value = _lights.directional;
					uniforms.spotLights.value = _lights.spot;
					uniforms.rectAreaLights.value = _lights.rectArea;
					uniforms.pointLights.value = _lights.point;
					uniforms.hemisphereLights.value = _lights.hemi;

					uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
					uniforms.spotShadowMap.value = _lights.spotShadowMap;
					uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
					uniforms.pointShadowMap.value = _lights.pointShadowMap;
					uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;
					// TODO (abelnation): add area lights shadow info to uniforms

				}

				var progUniforms = materialProperties.program.getUniforms(),
					uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

				materialProperties.uniformsList = uniformsList;

			}

			function setProgram( camera, fog, material, object ) {

				_usedTextureUnits = 0;

				var materialProperties = properties.get( material );

				if ( _clippingEnabled ) {

					if ( _localClippingEnabled || camera !== _currentCamera ) {

						var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );

					}

				}

				if ( material.needsUpdate === false ) {

					if ( materialProperties.program === undefined ) {

						material.needsUpdate = true;

					} else if ( material.fog && materialProperties.fog !== fog ) {

						material.needsUpdate = true;

					} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

						material.needsUpdate = true;

					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
						materialProperties.numIntersection !== _clipping.numIntersection ) ) {

						material.needsUpdate = true;

					}

				}

				if ( material.needsUpdate ) {

					initMaterial( material, fog, object );
					material.needsUpdate = false;

				}

				var refreshProgram = false;
				var refreshMaterial = false;
				var refreshLights = false;

				var program = materialProperties.program,
					p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.shader.uniforms;

				if ( program.id !== _currentProgram ) {

					_gl.useProgram( program.program );
					_currentProgram = program.id;

					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;

				}

				if ( material.id !== _currentMaterialId ) {

					_currentMaterialId = material.id;

					refreshMaterial = true;

				}

				if ( refreshProgram || camera !== _currentCamera ) {

					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

					if ( capabilities.logarithmicDepthBuffer ) {

						p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

					}

					// Avoid unneeded uniform updates per ArrayCamera's sub-camera

					if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

						_currentCamera = ( _currentArrayCamera || camera );

						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:

						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done

					}

					// load material specific uniforms
					// (shader material also gets them for the sake of genericity)

					if ( material.isShaderMaterial ||
						material.isMeshPhongMaterial ||
						material.isMeshStandardMaterial ||
						material.envMap ) {

						var uCamPos = p_uniforms.map.cameraPosition;

						if ( uCamPos !== undefined ) {

							uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );

						}

					}

					if ( material.isMeshPhongMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ||
						material.skinning ) {

						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					}

				}

				// skinning uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone texture must go before other textures
				// not sure why, but otherwise weird things happen

				if ( material.skinning ) {

					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

					var skeleton = object.skeleton;

					if ( skeleton ) {

						var bones = skeleton.bones;

						if ( capabilities.floatVertexTextures ) {

							if ( skeleton.boneTexture === undefined ) {

								// layout (1 matrix = 4 pixels)
								//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
								//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
								//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
								//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
								//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


								var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
								size = _Math.nextPowerOfTwo( Math.ceil( size ) );
								size = Math.max( size, 4 );

								var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
								boneMatrices.set( skeleton.boneMatrices ); // copy current values

								var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

								skeleton.boneMatrices = boneMatrices;
								skeleton.boneTexture = boneTexture;
								skeleton.boneTextureSize = size;

							}

							p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
							p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

						} else {

							p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

						}

					}

				}

				if ( refreshMaterial ) {

					p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
					p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

					if ( material.lights ) {

						// the current material requires lighting info

						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required

						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

					}

					// refresh uniforms common to several materials

					if ( fog && material.fog ) {

						refreshUniformsFog( m_uniforms, fog );

					}

					if ( material.isMeshBasicMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshPhongMaterial ||
						material.isMeshStandardMaterial ||
						material.isMeshNormalMaterial ||
						material.isMeshDepthMaterial ) {

						refreshUniformsCommon( m_uniforms, material );

					}

					// refresh single material specific uniforms

					if ( material.isLineBasicMaterial ) {

						refreshUniformsLine( m_uniforms, material );

					} else if ( material.isLineDashedMaterial ) {

						refreshUniformsLine( m_uniforms, material );
						refreshUniformsDash( m_uniforms, material );

					} else if ( material.isPointsMaterial ) {

						refreshUniformsPoints( m_uniforms, material );

					} else if ( material.isMeshLambertMaterial ) {

						refreshUniformsLambert( m_uniforms, material );

					} else if ( material.isMeshToonMaterial ) {

						refreshUniformsToon( m_uniforms, material );

					} else if ( material.isMeshPhongMaterial ) {

						refreshUniformsPhong( m_uniforms, material );

					} else if ( material.isMeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else if ( material.isMeshStandardMaterial ) {

						refreshUniformsStandard( m_uniforms, material );

					} else if ( material.isMeshDepthMaterial ) {

						if ( material.displacementMap ) {

							m_uniforms.displacementMap.value = material.displacementMap;
							m_uniforms.displacementScale.value = material.displacementScale;
							m_uniforms.displacementBias.value = material.displacementBias;

						}

					} else if ( material.isMeshNormalMaterial ) {

						refreshUniformsNormal( m_uniforms, material );

					}

					// RectAreaLight Texture
					// TODO (mrdoob): Find a nicer implementation

					if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
					if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;

					WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );

				}


				// common matrices

				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

				return program;

			}

			// Uniforms (refresh uniforms objects)

			function refreshUniformsCommon( uniforms, material ) {

				uniforms.opacity.value = material.opacity;

				uniforms.diffuse.value = material.color;

				if ( material.emissive ) {

					uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

				}

				uniforms.map.value = material.map;
				uniforms.specularMap.value = material.specularMap;
				uniforms.alphaMap.value = material.alphaMap;

				if ( material.lightMap ) {

					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;

				}

				if ( material.aoMap ) {

					uniforms.aoMap.value = material.aoMap;
					uniforms.aoMapIntensity.value = material.aoMapIntensity;

				}

				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map

				var uvScaleMap;

				if ( material.map ) {

					uvScaleMap = material.map;

				} else if ( material.specularMap ) {

					uvScaleMap = material.specularMap;

				} else if ( material.displacementMap ) {

					uvScaleMap = material.displacementMap;

				} else if ( material.normalMap ) {

					uvScaleMap = material.normalMap;

				} else if ( material.bumpMap ) {

					uvScaleMap = material.bumpMap;

				} else if ( material.roughnessMap ) {

					uvScaleMap = material.roughnessMap;

				} else if ( material.metalnessMap ) {

					uvScaleMap = material.metalnessMap;

				} else if ( material.alphaMap ) {

					uvScaleMap = material.alphaMap;

				} else if ( material.emissiveMap ) {

					uvScaleMap = material.emissiveMap;

				}

				if ( uvScaleMap !== undefined ) {

					// backwards compatibility
					if ( uvScaleMap.isWebGLRenderTarget ) {

						uvScaleMap = uvScaleMap.texture;

					}

					var offset = uvScaleMap.offset;
					var repeat = uvScaleMap.repeat;

					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

				}

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

			}

			function refreshUniformsLine( uniforms, material ) {

				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;

			}

			function refreshUniformsDash( uniforms, material ) {

				uniforms.dashSize.value = material.dashSize;
				uniforms.totalSize.value = material.dashSize + material.gapSize;
				uniforms.scale.value = material.scale;

			}

			function refreshUniformsPoints( uniforms, material ) {

				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
				uniforms.size.value = material.size * _pixelRatio;
				uniforms.scale.value = _height * 0.5;

				uniforms.map.value = material.map;

				if ( material.map !== null ) {

					var offset = material.map.offset;
					var repeat = material.map.repeat;

					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

				}

			}

			function refreshUniformsFog( uniforms, fog ) {

				uniforms.fogColor.value = fog.color;

				if ( fog.isFog ) {

					uniforms.fogNear.value = fog.near;
					uniforms.fogFar.value = fog.far;

				} else if ( fog.isFogExp2 ) {

					uniforms.fogDensity.value = fog.density;

				}

			}

			function refreshUniformsLambert( uniforms, material ) {

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

			}

			function refreshUniformsPhong( uniforms, material ) {

				uniforms.specular.value = material.specular;
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

				if ( material.bumpMap ) {

					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;

				}

				if ( material.normalMap ) {

					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );

				}

				if ( material.displacementMap ) {

					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;

				}

			}

			function refreshUniformsToon( uniforms, material ) {

				refreshUniformsPhong( uniforms, material );

				if ( material.gradientMap ) {

					uniforms.gradientMap.value = material.gradientMap;

				}

			}

			function refreshUniformsStandard( uniforms, material ) {

				uniforms.roughness.value = material.roughness;
				uniforms.metalness.value = material.metalness;

				if ( material.roughnessMap ) {

					uniforms.roughnessMap.value = material.roughnessMap;

				}

				if ( material.metalnessMap ) {

					uniforms.metalnessMap.value = material.metalnessMap;

				}

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

				if ( material.bumpMap ) {

					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;

				}

				if ( material.normalMap ) {

					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );

				}

				if ( material.displacementMap ) {

					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;

				}

				if ( material.envMap ) {

					//uniforms.envMap.value = material.envMap; // part of uniforms common
					uniforms.envMapIntensity.value = material.envMapIntensity;

				}

			}

			function refreshUniformsPhysical( uniforms, material ) {

				uniforms.clearCoat.value = material.clearCoat;
				uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

				refreshUniformsStandard( uniforms, material );

			}

			function refreshUniformsNormal( uniforms, material ) {

				if ( material.bumpMap ) {

					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;

				}

				if ( material.normalMap ) {

					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );

				}

				if ( material.displacementMap ) {

					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;

				}

			}

			// If uniforms are marked as clean, they don't need to be loaded to the GPU.

			function markUniformsLightsNeedsUpdate( uniforms, value ) {

				uniforms.ambientLightColor.needsUpdate = value;

				uniforms.directionalLights.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.rectAreaLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;

			}

			// Lighting

			function setupShadows( lights ) {

				var lightShadowsLength = 0;

				for ( var i = 0, l = lights.length; i < l; i ++ ) {

					var light = lights[ i ];

					if ( light.castShadow ) {

						_lights.shadows[ lightShadowsLength ] = light;
						lightShadowsLength ++;

					}

				}

				_lights.shadows.length = lightShadowsLength;

			}

			function setupLights( lights, camera ) {

				var l, ll, light, shadow,
					r = 0, g = 0, b = 0,
					color,
					intensity,
					distance,
					shadowMap,

					viewMatrix = camera.matrixWorldInverse,

					directionalLength = 0,
					pointLength = 0,
					spotLength = 0,
					rectAreaLength = 0,
					hemiLength = 0;

				for ( l = 0, ll = lights.length; l < ll; l ++ ) {

					light = lights[ l ];

					color = light.color;
					intensity = light.intensity;
					distance = light.distance;

					shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

					if ( light.isAmbientLight ) {

						r += color.r * intensity;
						g += color.g * intensity;
						b += color.b * intensity;

					} else if ( light.isDirectionalLight ) {

						var uniforms = lightCache.get( light );

						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							shadow = light.shadow;

							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;

						}

						_lights.directionalShadowMap[ directionalLength ] = shadowMap;
						_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
						_lights.directional[ directionalLength ] = uniforms;

						directionalLength ++;

					} else if ( light.isSpotLight ) {

						var uniforms = lightCache.get( light );

						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );

						uniforms.color.copy( color ).multiplyScalar( intensity );
						uniforms.distance = distance;

						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );

						uniforms.coneCos = Math.cos( light.angle );
						uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							shadow = light.shadow;

							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;

						}

						_lights.spotShadowMap[ spotLength ] = shadowMap;
						_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
						_lights.spot[ spotLength ] = uniforms;

						spotLength ++;

					} else if ( light.isRectAreaLight ) {

						var uniforms = lightCache.get( light );

						// (a) intensity controls irradiance of entire light
						uniforms.color
							.copy( color )
							.multiplyScalar( intensity / ( light.width * light.height ) );

						// (b) intensity controls the radiance per light area
						// uniforms.color.copy( color ).multiplyScalar( intensity );

						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );

						// extract local rotation of light to derive width/height half vectors
						_matrix42.identity();
						_matrix4.copy( light.matrixWorld );
						_matrix4.premultiply( viewMatrix );
						_matrix42.extractRotation( _matrix4 );

						uniforms.halfWidth.set( light.width * 0.5,                0.0, 0.0 );
						uniforms.halfHeight.set(              0.0, light.height * 0.5, 0.0 );

						uniforms.halfWidth.applyMatrix4( _matrix42 );
						uniforms.halfHeight.applyMatrix4( _matrix42 );

						// TODO (abelnation): RectAreaLight distance?
						// uniforms.distance = distance;

						_lights.rectArea[ rectAreaLength ] = uniforms;

						rectAreaLength ++;

					} else if ( light.isPointLight ) {

						var uniforms = lightCache.get( light );

						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );

						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.distance = light.distance;
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							shadow = light.shadow;

							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;

						}

						_lights.pointShadowMap[ pointLength ] = shadowMap;
						_lights.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
						_lights.point[ pointLength ] = uniforms;

						pointLength ++;

					} else if ( light.isHemisphereLight ) {

						var uniforms = lightCache.get( light );

						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						uniforms.direction.transformDirection( viewMatrix );
						uniforms.direction.normalize();

						uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
						uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

						_lights.hemi[ hemiLength ] = uniforms;

						hemiLength ++;

					}

				}

				_lights.ambient[ 0 ] = r;
				_lights.ambient[ 1 ] = g;
				_lights.ambient[ 2 ] = b;

				_lights.directional.length = directionalLength;
				_lights.spot.length = spotLength;
				_lights.rectArea.length = rectAreaLength;
				_lights.point.length = pointLength;
				_lights.hemi.length = hemiLength;

				// TODO (sam-g-steel) why aren't we using join
				_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + _lights.shadows.length;

			}

			// GL state setting

			this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

				state.setCullFace( cullFace );
				state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

			};

			// Textures

			function allocTextureUnit() {

				var textureUnit = _usedTextureUnits;

				if ( textureUnit >= capabilities.maxTextures ) {

					console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

				}

				_usedTextureUnits += 1;

				return textureUnit;

			}

			this.allocTextureUnit = allocTextureUnit;

			// this.setTexture2D = setTexture2D;
			this.setTexture2D = ( function () {

				var warned = false;

				// backwards compatibility: peel texture.texture
				return function setTexture2D( texture, slot ) {

					if ( texture && texture.isWebGLRenderTarget ) {

						if ( ! warned ) {

							console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
							warned = true;

						}

						texture = texture.texture;

					}

					textures.setTexture2D( texture, slot );

				};

			}() );

			this.setTexture = ( function () {

				var warned = false;

				return function setTexture( texture, slot ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
						warned = true;

					}

					textures.setTexture2D( texture, slot );

				};

			}() );

			this.setTextureCube = ( function () {

				var warned = false;

				return function setTextureCube( texture, slot ) {

					// backwards compatibility: peel texture.texture
					if ( texture && texture.isWebGLRenderTargetCube ) {

						if ( ! warned ) {

							console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
							warned = true;

						}

						texture = texture.texture;

					}

					// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
					// TODO: unify these code paths
					if ( ( texture && texture.isCubeTexture ) ||
						( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

						// CompressedTexture can have Array in image :/

						// this function alone should take care of cube textures
						textures.setTextureCube( texture, slot );

					} else {

						// assumed: texture property of THREE.WebGLRenderTargetCube

						textures.setTextureCubeDynamic( texture, slot );

					}

				};

			}() );

			this.getRenderTarget = function () {

				return _currentRenderTarget;

			};

			this.setRenderTarget = function ( renderTarget ) {

				_currentRenderTarget = renderTarget;

				if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

					textures.setupRenderTarget( renderTarget );

				}

				var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
				var framebuffer;

				if ( renderTarget ) {

					var renderTargetProperties = properties.get( renderTarget );

					if ( isCube ) {

						framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

					} else {

						framebuffer = renderTargetProperties.__webglFramebuffer;

					}

					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;

					_currentViewport.copy( renderTarget.viewport );

				} else {

					framebuffer = null;

					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
					_currentScissorTest = _scissorTest;

					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

				}

				if ( _currentFramebuffer !== framebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
					_currentFramebuffer = framebuffer;

				}

				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );

				state.viewport( _currentViewport );

				if ( isCube ) {

					var textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

				}

			};

			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

				if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;

				}

				var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( framebuffer ) {

					var restore = false;

					if ( framebuffer !== _currentFramebuffer ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

						restore = true;

					}

					try {

						var texture = renderTarget.texture;
						var textureFormat = texture.format;
						var textureType = texture.type;

						if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;

						}

						if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
							! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
							! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;

						}

						if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

							// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

							if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

								_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

							}

						} else {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

						}

					} finally {

						if ( restore ) {

							_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

						}

					}

				}

			};

			// Map three.js constants to WebGL constants

			function paramThreeToGL( p ) {

				var extension;

				if ( p === RepeatWrapping ) return _gl.REPEAT;
				if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
				if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

				if ( p === NearestFilter ) return _gl.NEAREST;
				if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
				if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

				if ( p === LinearFilter ) return _gl.LINEAR;
				if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
				if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

				if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
				if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
				if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
				if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

				if ( p === ByteType ) return _gl.BYTE;
				if ( p === ShortType ) return _gl.SHORT;
				if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
				if ( p === IntType ) return _gl.INT;
				if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
				if ( p === FloatType ) return _gl.FLOAT;

				if ( p === HalfFloatType ) {

					extension = extensions.get( 'OES_texture_half_float' );

					if ( extension !== null ) return extension.HALF_FLOAT_OES;

				}

				if ( p === AlphaFormat ) return _gl.ALPHA;
				if ( p === RGBFormat ) return _gl.RGB;
				if ( p === RGBAFormat ) return _gl.RGBA;
				if ( p === LuminanceFormat ) return _gl.LUMINANCE;
				if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
				if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
				if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;

				if ( p === AddEquation ) return _gl.FUNC_ADD;
				if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
				if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

				if ( p === ZeroFactor ) return _gl.ZERO;
				if ( p === OneFactor ) return _gl.ONE;
				if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
				if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
				if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
				if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
				if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
				if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

				if ( p === DstColorFactor ) return _gl.DST_COLOR;
				if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
				if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

				if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
					p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

					if ( extension !== null ) {

						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

					}

				}

				if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
					p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

					extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

					if ( extension !== null ) {

						if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
						if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
						if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
						if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

					}

				}

				if ( p === RGB_ETC1_Format ) {

					extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

					if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

				}

				if ( p === MinEquation || p === MaxEquation ) {

					extension = extensions.get( 'EXT_blend_minmax' );

					if ( extension !== null ) {

						if ( p === MinEquation ) return extension.MIN_EXT;
						if ( p === MaxEquation ) return extension.MAX_EXT;

					}

				}

				if ( p === UnsignedInt248Type ) {

					extension = extensions.get( 'WEBGL_depth_texture' );

					if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

				}

				return 0;

			}

		}

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function FogExp2 ( color, density ) {

			this.name = '';

			this.color = new Color( color );
			this.density = ( density !== undefined ) ? density : 0.00025;

		}

		FogExp2.prototype.isFogExp2 = true;

		FogExp2.prototype.clone = function () {

			return new FogExp2( this.color.getHex(), this.density );

		};

		FogExp2.prototype.toJSON = function ( meta ) {

			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Fog ( color, near, far ) {

			this.name = '';

			this.color = new Color( color );

			this.near = ( near !== undefined ) ? near : 1;
			this.far = ( far !== undefined ) ? far : 1000;

		}

		Fog.prototype.isFog = true;

		Fog.prototype.clone = function () {

			return new Fog( this.color.getHex(), this.near, this.far );

		};

		Fog.prototype.toJSON = function ( meta ) {

			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Scene () {

			Object3D.call( this );

			this.type = 'Scene';

			this.background = null;
			this.fog = null;
			this.overrideMaterial = null;

			this.autoUpdate = true; // checked by the renderer

		}

		Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Scene,

			copy: function ( source, recursive ) {

				Object3D.prototype.copy.call( this, source, recursive );

				if ( source.background !== null ) this.background = source.background.clone();
				if ( source.fog !== null ) this.fog = source.fog.clone();
				if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

				this.autoUpdate = source.autoUpdate;
				this.matrixAutoUpdate = source.matrixAutoUpdate;

				return this;

			},

			toJSON: function ( meta ) {

				var data = Object3D.prototype.toJSON.call( this, meta );

				if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
				if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

				return data;

			}

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function LensFlare( texture, size, distance, blending, color ) {

			Object3D.call( this );

			this.lensFlares = [];

			this.positionScreen = new Vector3();
			this.customUpdateCallback = undefined;

			if ( texture !== undefined ) {

				this.add( texture, size, distance, blending, color );

			}

		}

		LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: LensFlare,

			isLensFlare: true,

			copy: function ( source ) {

				Object3D.prototype.copy.call( this, source );

				this.positionScreen.copy( source.positionScreen );
				this.customUpdateCallback = source.customUpdateCallback;

				for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

					this.lensFlares.push( source.lensFlares[ i ] );

				}

				return this;

			},

			add: function ( texture, size, distance, blending, color, opacity ) {

				if ( size === undefined ) size = - 1;
				if ( distance === undefined ) distance = 0;
				if ( opacity === undefined ) opacity = 1;
				if ( color === undefined ) color = new Color( 0xffffff );
				if ( blending === undefined ) blending = NormalBlending;

				distance = Math.min( distance, Math.max( 0, distance ) );

				this.lensFlares.push( {
					texture: texture,	// THREE.Texture
					size: size, 		// size in pixels (-1 = use texture.width)
					distance: distance, 	// distance (0-1) from light source (0=at light source)
					x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
					scale: 1, 		// scale
					rotation: 0, 		// rotation
					opacity: opacity,	// opacity
					color: color,		// color
					blending: blending	// blending
				} );

			},

			/*
			 * Update lens flares update positions on all flares based on the screen position
			 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
			 */

			updateLensFlares: function () {

				var f, fl = this.lensFlares.length;
				var flare;
				var vecX = - this.positionScreen.x * 2;
				var vecY = - this.positionScreen.y * 2;

				for ( f = 0; f < fl; f ++ ) {

					flare = this.lensFlares[ f ];

					flare.x = this.positionScreen.x + vecX * flare.distance;
					flare.y = this.positionScreen.y + vecY * flare.distance;

					flare.wantedRotation = flare.x * Math.PI * 0.25;
					flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

				}

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *	uvOffset: new THREE.Vector2(),
		 *	uvScale: new THREE.Vector2()
		 * }
		 */

		function SpriteMaterial( parameters ) {

			Material.call( this );

			this.type = 'SpriteMaterial';

			this.color = new Color( 0xffffff );
			this.map = null;

			this.rotation = 0;

			this.fog = false;
			this.lights = false;

			this.setValues( parameters );

		}

		SpriteMaterial.prototype = Object.create( Material.prototype );
		SpriteMaterial.prototype.constructor = SpriteMaterial;
		SpriteMaterial.prototype.isSpriteMaterial = true;

		SpriteMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.map = source.map;

			this.rotation = source.rotation;

			return this;

		};

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Sprite( material ) {

			Object3D.call( this );

			this.type = 'Sprite';

			this.material = ( material !== undefined ) ? material : new SpriteMaterial();

		}

		Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Sprite,

			isSprite: true,

			raycast: ( function () {

				var intersectPoint = new Vector3();
				var worldPosition = new Vector3();
				var worldScale = new Vector3();

				return function raycast( raycaster, intersects ) {

					worldPosition.setFromMatrixPosition( this.matrixWorld );
					raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

					worldScale.setFromMatrixScale( this.matrixWorld );
					var guessSizeSq = worldScale.x * worldScale.y / 4;

					if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						point: intersectPoint.clone(),
						face: null,
						object: this

					} );

				};

			}() ),

			clone: function () {

				return new this.constructor( this.material ).copy( this );

			}

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		function LOD() {

			Object3D.call( this );

			this.type = 'LOD';

			Object.defineProperties( this, {
				levels: {
					enumerable: true,
					value: []
				}
			} );

		}

		LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: LOD,

			copy: function ( source ) {

				Object3D.prototype.copy.call( this, source, false );

				var levels = source.levels;

				for ( var i = 0, l = levels.length; i < l; i ++ ) {

					var level = levels[ i ];

					this.addLevel( level.object.clone(), level.distance );

				}

				return this;

			},

			addLevel: function ( object, distance ) {

				if ( distance === undefined ) distance = 0;

				distance = Math.abs( distance );

				var levels = this.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					if ( distance < levels[ l ].distance ) {

						break;

					}

				}

				levels.splice( l, 0, { distance: distance, object: object } );

				this.add( object );

			},

			getObjectForDistance: function ( distance ) {

				var levels = this.levels;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance < levels[ i ].distance ) {

						break;

					}

				}

				return levels[ i - 1 ].object;

			},

			raycast: ( function () {

				var matrixPosition = new Vector3();

				return function raycast( raycaster, intersects ) {

					matrixPosition.setFromMatrixPosition( this.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( matrixPosition );

					this.getObjectForDistance( distance ).raycast( raycaster, intersects );

				};

			}() ),

			update: function () {

				var v1 = new Vector3();
				var v2 = new Vector3();

				return function update( camera ) {

					var levels = this.levels;

					if ( levels.length > 1 ) {

						v1.setFromMatrixPosition( camera.matrixWorld );
						v2.setFromMatrixPosition( this.matrixWorld );

						var distance = v1.distanceTo( v2 );

						levels[ 0 ].object.visible = true;

						for ( var i = 1, l = levels.length; i < l; i ++ ) {

							if ( distance >= levels[ i ].distance ) {

								levels[ i - 1 ].object.visible = false;
								levels[ i ].object.visible = true;

							} else {

								break;

							}

						}

						for ( ; i < l; i ++ ) {

							levels[ i ].object.visible = false;

						}

					}

				};

			}(),

			toJSON: function ( meta ) {

				var data = Object3D.prototype.toJSON.call( this, meta );

				data.object.levels = [];

				var levels = this.levels;

				for ( var i = 0, l = levels.length; i < l; i ++ ) {

					var level = levels[ i ];

					data.object.levels.push( {
						object: level.object.uuid,
						distance: level.distance
					} );

				}

				return data;

			}

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author michael guerrero / http://realitymeltdown.com
		 * @author ikerr / http://verold.com
		 */

		function Skeleton( bones, boneInverses ) {

			// copy the bone array

			bones = bones || [];

			this.bones = bones.slice( 0 );
			this.boneMatrices = new Float32Array( this.bones.length * 16 );

			// use the supplied bone inverses or calculate the inverses

			if ( boneInverses === undefined ) {

				this.calculateInverses();

			} else {

				if ( this.bones.length === boneInverses.length ) {

					this.boneInverses = boneInverses.slice( 0 );

				} else {

					console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

					this.boneInverses = [];

					for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

						this.boneInverses.push( new Matrix4() );

					}

				}

			}

		}

		Object.assign( Skeleton.prototype, {

			calculateInverses: function () {

				this.boneInverses = [];

				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

					var inverse = new Matrix4();

					if ( this.bones[ i ] ) {

						inverse.getInverse( this.bones[ i ].matrixWorld );

					}

					this.boneInverses.push( inverse );

				}

			},

			pose: function () {

				var bone, i, il;

				// recover the bind-time world matrices

				for ( i = 0, il = this.bones.length; i < il; i ++ ) {

					bone = this.bones[ i ];

					if ( bone ) {

						bone.matrixWorld.getInverse( this.boneInverses[ i ] );

					}

				}

				// compute the local matrices, positions, rotations and scales

				for ( i = 0, il = this.bones.length; i < il; i ++ ) {

					bone = this.bones[ i ];

					if ( bone ) {

						if ( bone.parent && bone.parent.isBone ) {

							bone.matrix.getInverse( bone.parent.matrixWorld );
							bone.matrix.multiply( bone.matrixWorld );

						} else {

							bone.matrix.copy( bone.matrixWorld );

						}

						bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

					}

				}

			},

			update: ( function () {

				var offsetMatrix = new Matrix4();
				var identityMatrix = new Matrix4();

				return function update() {

					var bones = this.bones;
					var boneInverses = this.boneInverses;
					var boneMatrices = this.boneMatrices;
					var boneTexture = this.boneTexture;

					// flatten bone matrices to array

					for ( var i = 0, il = bones.length; i < il; i ++ ) {

						// compute the offset between the current and the original transform

						var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

						offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
						offsetMatrix.toArray( boneMatrices, i * 16 );

					}

					if ( boneTexture !== undefined ) {

						boneTexture.needsUpdate = true;

					}

				};

			} )(),

			clone: function () {

				return new Skeleton( this.bones, this.boneInverses );

			}

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */

		function Bone() {

			Object3D.call( this );

			this.type = 'Bone';

		}

		Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Bone,

			isBone: true

		} );

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */

		function SkinnedMesh( geometry, material ) {

			Mesh.call( this, geometry, material );

			this.type = 'SkinnedMesh';

			this.bindMode = 'attached';
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();

			var bones = this.initBones();
			var skeleton = new Skeleton( bones );

			this.bind( skeleton, this.matrixWorld );

			this.normalizeSkinWeights();

		}

		SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

			constructor: SkinnedMesh,

			isSkinnedMesh: true,

			initBones: function () {

				var bones = [], bone, gbone;
				var i, il;

				if ( this.geometry && this.geometry.bones !== undefined ) {

					// first, create array of 'Bone' objects from geometry data

					for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

						gbone = this.geometry.bones[ i ];

						// create new 'Bone' object

						bone = new Bone();
						bones.push( bone );

						// apply values

						bone.name = gbone.name;
						bone.position.fromArray( gbone.pos );
						bone.quaternion.fromArray( gbone.rotq );
						if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

					}

					// second, create bone hierarchy

					for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

						gbone = this.geometry.bones[ i ];

						if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

							// subsequent bones in the hierarchy

							bones[ gbone.parent ].add( bones[ i ] );

						} else {

							// topmost bone, immediate child of the skinned mesh

							this.add( bones[ i ] );

						}

					}

				}

				// now the bones are part of the scene graph and children of the skinned mesh.
				// let's update the corresponding matrices

				this.updateMatrixWorld( true );

				return bones;

			},

			bind: function ( skeleton, bindMatrix ) {

				this.skeleton = skeleton;

				if ( bindMatrix === undefined ) {

					this.updateMatrixWorld( true );

					this.skeleton.calculateInverses();

					bindMatrix = this.matrixWorld;

				}

				this.bindMatrix.copy( bindMatrix );
				this.bindMatrixInverse.getInverse( bindMatrix );

			},

			pose: function () {

				this.skeleton.pose();

			},

			normalizeSkinWeights: function () {

				var scale, i;

				if ( this.geometry && this.geometry.isGeometry ) {

					for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

						var sw = this.geometry.skinWeights[ i ];

						scale = 1.0 / sw.lengthManhattan();

						if ( scale !== Infinity ) {

							sw.multiplyScalar( scale );

						} else {

							sw.set( 1, 0, 0, 0 ); // do something reasonable

						}

					}

				} else if ( this.geometry && this.geometry.isBufferGeometry ) {

					var vec = new Vector4();

					var skinWeight = this.geometry.attributes.skinWeight;

					for ( i = 0; i < skinWeight.count; i ++ ) {

						vec.x = skinWeight.getX( i );
						vec.y = skinWeight.getY( i );
						vec.z = skinWeight.getZ( i );
						vec.w = skinWeight.getW( i );

						scale = 1.0 / vec.lengthManhattan();

						if ( scale !== Infinity ) {

							vec.multiplyScalar( scale );

						} else {

							vec.set( 1, 0, 0, 0 ); // do something reasonable

						}

						skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

					}

				}

			},

			updateMatrixWorld: function ( force ) {

				Mesh.prototype.updateMatrixWorld.call( this, force );

				if ( this.bindMode === 'attached' ) {

					this.bindMatrixInverse.getInverse( this.matrixWorld );

				} else if ( this.bindMode === 'detached' ) {

					this.bindMatrixInverse.getInverse( this.bindMatrix );

				} else {

					console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

				}

			},

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *  linecap: "round",
		 *  linejoin: "round"
		 * }
		 */

		function LineBasicMaterial( parameters ) {

			Material.call( this );

			this.type = 'LineBasicMaterial';

			this.color = new Color( 0xffffff );

			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';

			this.lights = false;

			this.setValues( parameters );

		}

		LineBasicMaterial.prototype = Object.create( Material.prototype );
		LineBasicMaterial.prototype.constructor = LineBasicMaterial;

		LineBasicMaterial.prototype.isLineBasicMaterial = true;

		LineBasicMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;

			return this;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Line( geometry, material, mode ) {

			if ( mode === 1 ) {

				console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
				return new LineSegments( geometry, material );

			}

			Object3D.call( this );

			this.type = 'Line';

			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

		}

		Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Line,

			isLine: true,

			raycast: ( function () {

				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();

				return function raycast( raycaster, intersects ) {

					var precision = raycaster.linePrecision;
					var precisionSq = precision * precision;

					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					var vStart = new Vector3();
					var vEnd = new Vector3();
					var interSegment = new Vector3();
					var interRay = new Vector3();
					var step = (this && this.isLineSegments) ? 2 : 1;

					if ( geometry.isBufferGeometry ) {

						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;

						if ( index !== null ) {

							var indices = index.array;

							for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

								var a = indices[ i ];
								var b = indices[ i + 1 ];

								vStart.fromArray( positions, a * 3 );
								vEnd.fromArray( positions, b * 3 );

								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

								if ( distSq > precisionSq ) continue;

								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

								var distance = raycaster.ray.origin.distanceTo( interRay );

								if ( distance < raycaster.near || distance > raycaster.far ) continue;

								intersects.push( {

									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this

								} );

							}

						} else {

							for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

								vStart.fromArray( positions, 3 * i );
								vEnd.fromArray( positions, 3 * i + 3 );

								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

								if ( distSq > precisionSq ) continue;

								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

								var distance = raycaster.ray.origin.distanceTo( interRay );

								if ( distance < raycaster.near || distance > raycaster.far ) continue;

								intersects.push( {

									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this

								} );

							}

						}

					} else if ( geometry.isGeometry ) {

						var vertices = geometry.vertices;
						var nbVertices = vertices.length;

						for ( var i = 0; i < nbVertices - 1; i += step ) {

							var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function LineSegments( geometry, material ) {

			Line.call( this, geometry, material );

			this.type = 'LineSegments';

		}

		LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

			constructor: LineSegments,

			isLineSegments: true

		} );

		/**
		 * @author mgreter / http://github.com/mgreter
		 */

		function LineLoop( geometry, material ) {

			Line.call( this, geometry, material );

			this.type = 'LineLoop';

		}

		LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

			constructor: LineLoop,

			isLineLoop: true,

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  size: <float>,
		 *  sizeAttenuation: <bool>
		 * }
		 */

		function PointsMaterial( parameters ) {

			Material.call( this );

			this.type = 'PointsMaterial';

			this.color = new Color( 0xffffff );

			this.map = null;

			this.size = 1;
			this.sizeAttenuation = true;

			this.lights = false;

			this.setValues( parameters );

		}

		PointsMaterial.prototype = Object.create( Material.prototype );
		PointsMaterial.prototype.constructor = PointsMaterial;

		PointsMaterial.prototype.isPointsMaterial = true;

		PointsMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;

			return this;

		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Points( geometry, material ) {

			Object3D.call( this );

			this.type = 'Points';

			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

		}

		Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Points,

			isPoints: true,

			raycast: ( function () {

				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();

				return function raycast( raycaster, intersects ) {

					var object = this;
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
					var threshold = raycaster.params.Points.threshold;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
					sphere.radius += threshold;

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
					var localThresholdSq = localThreshold * localThreshold;
					var position = new Vector3();

					function testPoint( point, index ) {

						var rayPointDistanceSq = ray.distanceSqToPoint( point );

						if ( rayPointDistanceSq < localThresholdSq ) {

							var intersectPoint = ray.closestPointToPoint( point );
							intersectPoint.applyMatrix4( matrixWorld );

							var distance = raycaster.ray.origin.distanceTo( intersectPoint );

							if ( distance < raycaster.near || distance > raycaster.far ) return;

							intersects.push( {

								distance: distance,
								distanceToRay: Math.sqrt( rayPointDistanceSq ),
								point: intersectPoint.clone(),
								index: index,
								face: null,
								object: object

							} );

						}

					}

					if ( geometry.isBufferGeometry ) {

						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;

						if ( index !== null ) {

							var indices = index.array;

							for ( var i = 0, il = indices.length; i < il; i ++ ) {

								var a = indices[ i ];

								position.fromArray( positions, a * 3 );

								testPoint( position, a );

							}

						} else {

							for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

								position.fromArray( positions, i * 3 );

								testPoint( position, i );

							}

						}

					} else {

						var vertices = geometry.vertices;

						for ( var i = 0, l = vertices.length; i < l; i ++ ) {

							testPoint( vertices[ i ], i );

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Group() {

			Object3D.call( this );

			this.type = 'Group';

		}

		Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Group

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

			Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.generateMipmaps = false;

			var scope = this;

			function update() {

				requestAnimationFrame( update );

				if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

					scope.needsUpdate = true;

				}

			}

			update();

		}

		VideoTexture.prototype = Object.create( Texture.prototype );
		VideoTexture.prototype.constructor = VideoTexture;

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.image = { width: width, height: height };
			this.mipmaps = mipmaps;

			// no flipping for cube textures
			// (also flipping doesn't work for compressed textures )

			this.flipY = false;

			// can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files

			this.generateMipmaps = false;

		}

		CompressedTexture.prototype = Object.create( Texture.prototype );
		CompressedTexture.prototype.constructor = CompressedTexture;

		CompressedTexture.prototype.isCompressedTexture = true;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

			Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.needsUpdate = true;

		}

		CanvasTexture.prototype = Object.create( Texture.prototype );
		CanvasTexture.prototype.constructor = CanvasTexture;

		/**
		 * @author Matt DesLauriers / @mattdesl
		 * @author atix / arthursilber.de
		 */

		function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

			format = format !== undefined ? format : DepthFormat;

			if ( format !== DepthFormat && format !== DepthStencilFormat ) {

				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )

			}

			if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
			if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.image = { width: width, height: height };

			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

			this.flipY = false;
			this.generateMipmaps	= false;

		}

		DepthTexture.prototype = Object.create( Texture.prototype );
		DepthTexture.prototype.constructor = DepthTexture;
		DepthTexture.prototype.isDepthTexture = true;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		function WireframeGeometry( geometry ) {

			BufferGeometry.call( this );

			this.type = 'WireframeGeometry';

			// buffer

			var vertices = [];

			// helper variables

			var i, j, l, o, ol;
			var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];
			var vertex;

			// different logic for Geometry and BufferGeometry

			if ( geometry && geometry.isGeometry ) {

				// create a data structure that contains all edges without duplicates

				var faces = geometry.faces;

				for ( i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( j = 0; j < 3; j ++ ) {

						edge1 = face[ keys[ j ] ];
						edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );

						key = edge[ 0 ] + ',' + edge[ 1 ];

						if ( edges[ key ] === undefined ) {

							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

						}

					}

				}

				// generate vertices

				for ( key in edges ) {

					e = edges[ key ];

					vertex = geometry.vertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex = geometry.vertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			} else if ( geometry && geometry.isBufferGeometry ) {

				var position, indices, groups;
				var group, start, count;
				var index1, index2;

				vertex = new Vector3();

				if ( geometry.index !== null ) {

					// indexed BufferGeometry

					position = geometry.attributes.position;
					indices = geometry.index;
					groups = geometry.groups;

					if ( groups.length === 0 ) {

						groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

					}

					// create a data structure that contains all eges without duplicates

					for ( o = 0, ol = groups.length; o < ol; ++ o ) {

						group = groups[ o ];

						start = group.start;
						count = group.count;

						for ( i = start, l = ( start + count ); i < l; i += 3 ) {

							for ( j = 0; j < 3; j ++ ) {

								edge1 = indices.getX( i + j );
								edge2 = indices.getX( i + ( j + 1 ) % 3 );
								edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
								edge[ 1 ] = Math.max( edge1, edge2 );

								key = edge[ 0 ] + ',' + edge[ 1 ];

								if ( edges[ key ] === undefined ) {

									edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

								}

							}

						}

					}

					// generate vertices

					for ( key in edges ) {

						e = edges[ key ];

						vertex.fromBufferAttribute( position, e.index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );

						vertex.fromBufferAttribute( position, e.index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );

					}

				} else {

					// non-indexed BufferGeometry

					position = geometry.attributes.position;

					for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

						for ( j = 0; j < 3; j ++ ) {

							// three edges per triangle, an edge is represented as (index1, index2)
							// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

							index1 = 3 * i + j;
							vertex.fromBufferAttribute( position, index1 );
							vertices.push( vertex.x, vertex.y, vertex.z );

							index2 = 3 * i + ( ( j + 1 ) % 3 );
							vertex.fromBufferAttribute( position, index2 );
							vertices.push( vertex.x, vertex.y, vertex.z );

						}

					}

				}

			}

			// build geometry

			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

		}

		WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
		WireframeGeometry.prototype.constructor = WireframeGeometry;

		/**
		 * @author zz85 / https://github.com/zz85
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
		 */

		// ParametricGeometry

		function ParametricGeometry( func, slices, stacks ) {

			Geometry.call( this );

			this.type = 'ParametricGeometry';

			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};

			this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
			this.mergeVertices();

		}

		ParametricGeometry.prototype = Object.create( Geometry.prototype );
		ParametricGeometry.prototype.constructor = ParametricGeometry;

		// ParametricBufferGeometry

		function ParametricBufferGeometry( func, slices, stacks ) {

			BufferGeometry.call( this );

			this.type = 'ParametricBufferGeometry';

			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			var EPS = 0.00001;

			var normal = new Vector3();

			var p0 = new Vector3(), p1 = new Vector3();
			var pu = new Vector3(), pv = new Vector3();

			var i, j;

			// generate vertices, normals and uvs

			var sliceCount = slices + 1;

			for ( i = 0; i <= stacks; i ++ ) {

				var v = i / stacks;

				for ( j = 0; j <= slices; j ++ ) {

					var u = j / slices;

					// vertex

					p0 = func( u, v, p0 );
					vertices.push( p0.x, p0.y, p0.z );

					// normal

					// approximate tangent vectors via finite differences

					if ( u - EPS >= 0 ) {

						p1 = func( u - EPS, v, p1 );
						pu.subVectors( p0, p1 );

					} else {

						p1 = func( u + EPS, v, p1 );
						pu.subVectors( p1, p0 );

					}

					if ( v - EPS >= 0 ) {

						p1 = func( u, v - EPS, p1 );
						pv.subVectors( p0, p1 );

					} else {

						p1 = func( u, v + EPS, p1 );
						pv.subVectors( p1, p0 );

					}

					// cross product of tangent vectors returns surface normal

					normal.crossVectors( pu, pv ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, v );

				}

			}

			// generate indices

			for ( i = 0; i < stacks; i ++ ) {

				for ( j = 0; j < slices; j ++ ) {

					var a = i * sliceCount + j;
					var b = i * sliceCount + j + 1;
					var c = ( i + 1 ) * sliceCount + j + 1;
					var d = ( i + 1 ) * sliceCount + j;

					// faces one and two

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

		/**
		 * @author clockworkgeek / https://github.com/clockworkgeek
		 * @author timothypratley / https://github.com/timothypratley
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// PolyhedronGeometry

		function PolyhedronGeometry( vertices, indices, radius, detail ) {

			Geometry.call( this );

			this.type = 'PolyhedronGeometry';

			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};

			this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
			this.mergeVertices();

		}

		PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
		PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

		// PolyhedronBufferGeometry

		function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

			BufferGeometry.call( this );

			this.type = 'PolyhedronBufferGeometry';

			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};

			radius = radius || 1;
			detail = detail || 0;

			// default buffer data

			var vertexBuffer = [];
			var uvBuffer = [];

			// the subdivision creates the vertex buffer data

			subdivide( detail );

			// all vertices should lie on a conceptual sphere with a given radius

			appplyRadius( radius );

			// finally, create the uv data

			generateUVs();

			// build non-indexed geometry

			this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

			if ( detail === 0 ) {

				this.computeVertexNormals(); // flat normals

			} else {

				this.normalizeNormals(); // smooth normals

			}

			// helper functions

			function subdivide( detail ) {

				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();

				// iterate over all faces and apply a subdivison with the given detail value

				for ( var i = 0; i < indices.length; i += 3 ) {

					// get the vertices of the face

					getVertexByIndex( indices[ i + 0 ], a );
					getVertexByIndex( indices[ i + 1 ], b );
					getVertexByIndex( indices[ i + 2 ], c );

					// perform subdivision

					subdivideFace( a, b, c, detail );

				}

			}

			function subdivideFace( a, b, c, detail ) {

				var cols = Math.pow( 2, detail );

				// we use this multidimensional array as a data structure for creating the subdivision

				var v = [];

				var i, j;

				// construct all of the vertices for this subdivision

				for ( i = 0; i <= cols; i ++ ) {

					v[ i ] = [];

					var aj = a.clone().lerp( c, i / cols );
					var bj = b.clone().lerp( c, i / cols );

					var rows = cols - i;

					for ( j = 0; j <= rows; j ++ ) {

						if ( j === 0 && i === cols ) {

							v[ i ][ j ] = aj;

						} else {

							v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

						}

					}

				}

				// construct all of the faces

				for ( i = 0; i < cols; i ++ ) {

					for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

						var k = Math.floor( j / 2 );

						if ( j % 2 === 0 ) {

							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
							pushVertex( v[ i ][ k ] );

						} else {

							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );

						}

					}

				}

			}

			function appplyRadius( radius ) {

				var vertex = new Vector3();

				// iterate over the entire buffer and apply the radius to each vertex

				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];

					vertex.normalize().multiplyScalar( radius );

					vertexBuffer[ i + 0 ] = vertex.x;
					vertexBuffer[ i + 1 ] = vertex.y;
					vertexBuffer[ i + 2 ] = vertex.z;

				}

			}

			function generateUVs() {

				var vertex = new Vector3();

				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];

					var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
					var v = inclination( vertex ) / Math.PI + 0.5;
					uvBuffer.push( u, 1 - v );

				}

				correctUVs();

				correctSeam();

			}

			function correctSeam() {

				// handle case when face straddles the seam, see #3269

				for ( var i = 0; i < uvBuffer.length; i += 6 ) {

					// uv data of a single face

					var x0 = uvBuffer[ i + 0 ];
					var x1 = uvBuffer[ i + 2 ];
					var x2 = uvBuffer[ i + 4 ];

					var max = Math.max( x0, x1, x2 );
					var min = Math.min( x0, x1, x2 );

					// 0.9 is somewhat arbitrary

					if ( max > 0.9 && min < 0.1 ) {

						if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
						if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
						if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

					}

				}

			}

			function pushVertex( vertex ) {

				vertexBuffer.push( vertex.x, vertex.y, vertex.z );

			}

			function getVertexByIndex( index, vertex ) {

				var stride = index * 3;

				vertex.x = vertices[ stride + 0 ];
				vertex.y = vertices[ stride + 1 ];
				vertex.z = vertices[ stride + 2 ];

			}

			function correctUVs() {

				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();

				var centroid = new Vector3();

				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();

				for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

					a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
					b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
					c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

					uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
					uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
					uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

					centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

					var azi = azimuth( centroid );

					correctUV( uvA, j + 0, a, azi );
					correctUV( uvB, j + 2, b, azi );
					correctUV( uvC, j + 4, c, azi );

				}

			}

			function correctUV( uv, stride, vector, azimuth ) {

				if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

					uvBuffer[ stride ] = uv.x - 1;

				}

				if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

					uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

				}

			}

			// Angle around the Y axis, counter-clockwise when looking from above.

			function azimuth( vector ) {

				return Math.atan2( vector.z, - vector.x );

			}


			// Angle above the XZ plane.

			function inclination( vector ) {

				return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

			}

		}

		PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// TetrahedronGeometry

		function TetrahedronGeometry( radius, detail ) {

			Geometry.call( this );

			this.type = 'TetrahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

			this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();

		}

		TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
		TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

		// TetrahedronBufferGeometry

		function TetrahedronBufferGeometry( radius, detail ) {

			var vertices = [
				1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
			];

			var indices = [
				2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
			];

			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'TetrahedronBufferGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		}

		TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// OctahedronGeometry

		function OctahedronGeometry( radius, detail ) {

			Geometry.call( this );

			this.type = 'OctahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

			this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();

		}

		OctahedronGeometry.prototype = Object.create( Geometry.prototype );
		OctahedronGeometry.prototype.constructor = OctahedronGeometry;

		// OctahedronBufferGeometry

		function OctahedronBufferGeometry( radius, detail ) {

			var vertices = [
				1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
			];

			var indices = [
				0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
			];

			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'OctahedronBufferGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		}

		OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// IcosahedronGeometry

		function IcosahedronGeometry( radius, detail ) {

		 	Geometry.call( this );

			this.type = 'IcosahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

			this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();

		}

		IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
		IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

		// IcosahedronBufferGeometry

		function IcosahedronBufferGeometry( radius, detail ) {

			var t = ( 1 + Math.sqrt( 5 ) ) / 2;

			var vertices = [
				- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
				 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
				 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
			];

			var indices = [
				 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
				 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
				 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
				 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
			];

			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'IcosahedronBufferGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		}

		IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

		/**
		 * @author Abe Pazos / https://hamoid.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// DodecahedronGeometry

		function DodecahedronGeometry( radius, detail ) {

			Geometry.call( this );

			this.type = 'DodecahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

			this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();

		}

		DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
		DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

		// DodecahedronBufferGeometry

		function DodecahedronBufferGeometry( radius, detail ) {

			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
			var r = 1 / t;

			var vertices = [

				// (±1, ±1, ±1)
				- 1, - 1, - 1,    - 1, - 1,  1,
				- 1,  1, - 1,    - 1,  1,  1,
				  1, - 1, - 1,     1, - 1,  1,
				  1,  1, - 1,     1,  1,  1,

				// (0, ±1/φ, ±φ)
				 0, - r, - t,     0, - r,  t,
				 0,  r, - t,     0,  r,  t,

				// (±1/φ, ±φ, 0)
				- r, - t,  0,    - r,  t,  0,
				 r, - t,  0,     r,  t,  0,

				// (±φ, 0, ±1/φ)
				- t,  0, - r,     t,  0, - r,
				- t,  0,  r,     t,  0,  r
			];

			var indices = [
				 3, 11,  7,      3,  7, 15,      3, 15, 13,
				 7, 19, 17,      7, 17,  6,      7,  6, 15,
				17,  4,  8,     17,  8, 10,     17, 10,  6,
				 8,  0, 16,      8, 16,  2,      8,  2, 10,
				 0, 12,  1,      0,  1, 18,      0, 18, 16,
				 6, 10,  2,      6,  2, 13,      6, 13, 15,
				 2, 16, 18,      2, 18,  3,      2,  3, 13,
				18,  1,  9,     18,  9, 11,     18, 11,  3,
				 4, 14, 12,      4, 12,  0,      4,  0,  8,
				11,  9,  5,     11,  5, 19,     11, 19,  7,
				19,  5, 14,     19, 14,  4,     19,  4, 17,
				 1, 12, 14,      1, 14,  5,      1,  5,  9
			];

			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'DodecahedronBufferGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		}

		DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

		/**
		 * @author oosmoxiecode / https://github.com/oosmoxiecode
		 * @author WestLangley / https://github.com/WestLangley
		 * @author zz85 / https://github.com/zz85
		 * @author miningold / https://github.com/miningold
		 * @author jonobr1 / https://github.com/jonobr1
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 */

		// TubeGeometry

		function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

			Geometry.call( this );

			this.type = 'TubeGeometry';

			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};

			if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

			var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

			// expose internals

			this.tangents = bufferGeometry.tangents;
			this.normals = bufferGeometry.normals;
			this.binormals = bufferGeometry.binormals;

			// create geometry

			this.fromBufferGeometry( bufferGeometry );
			this.mergeVertices();

		}

		TubeGeometry.prototype = Object.create( Geometry.prototype );
		TubeGeometry.prototype.constructor = TubeGeometry;

		// TubeBufferGeometry

		function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

			BufferGeometry.call( this );

			this.type = 'TubeBufferGeometry';

			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};

			tubularSegments = tubularSegments || 64;
			radius = radius || 1;
			radialSegments = radialSegments || 8;
			closed = closed || false;

			var frames = path.computeFrenetFrames( tubularSegments, closed );

			// expose internals

			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals;

			// helper variables

			var vertex = new Vector3();
			var normal = new Vector3();
			var uv = new Vector2();

			var i, j;

			// buffer

			var vertices = [];
			var normals = [];
			var uvs = [];
			var indices = [];

			// create buffer data

			generateBufferData();

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			// functions

			function generateBufferData() {

				for ( i = 0; i < tubularSegments; i ++ ) {

					generateSegment( i );

				}

				// if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

				generateSegment( ( closed === false ) ? tubularSegments : 0 );

				// uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries

				generateUVs();

				// finally create faces

				generateIndices();

			}

			function generateSegment( i ) {

				// we use getPointAt to sample evenly distributed points from the given path

				var P = path.getPointAt( i / tubularSegments );

				// retrieve corresponding normal and binormal

				var N = frames.normals[ i ];
				var B = frames.binormals[ i ];

				// generate normals and vertices for the current segment

				for ( j = 0; j <= radialSegments; j ++ ) {

					var v = j / radialSegments * Math.PI * 2;

					var sin =   Math.sin( v );
					var cos = - Math.cos( v );

					// normal

					normal.x = ( cos * N.x + sin * B.x );
					normal.y = ( cos * N.y + sin * B.y );
					normal.z = ( cos * N.z + sin * B.z );
					normal.normalize();

					normals.push( normal.x, normal.y, normal.z );

					// vertex

					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;

					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

			function generateIndices() {

				for ( j = 1; j <= tubularSegments; j ++ ) {

					for ( i = 1; i <= radialSegments; i ++ ) {

						var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
						var b = ( radialSegments + 1 ) * j + ( i - 1 );
						var c = ( radialSegments + 1 ) * j + i;
						var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

					}

				}

			}

			function generateUVs() {

				for ( i = 0; i <= tubularSegments; i ++ ) {

					for ( j = 0; j <= radialSegments; j ++ ) {

						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;

						uvs.push( uv.x, uv.y );

					}

				}

			}

		}

		TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

		/**
		 * @author oosmoxiecode
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * based on http://www.blackpawn.com/texts/pqtorus/
		 */

		// TorusKnotGeometry

		function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

			Geometry.call( this );

			this.type = 'TorusKnotGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};

			if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

			this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
			this.mergeVertices();

		}

		TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
		TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

		// TorusKnotBufferGeometry

		function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

			BufferGeometry.call( this );

			this.type = 'TorusKnotBufferGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};

			radius = radius || 100;
			tube = tube || 40;
			tubularSegments = Math.floor( tubularSegments ) || 64;
			radialSegments = Math.floor( radialSegments ) || 8;
			p = p || 2;
			q = q || 3;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var i, j;

			var vertex = new Vector3();
			var normal = new Vector3();

			var P1 = new Vector3();
			var P2 = new Vector3();

			var B = new Vector3();
			var T = new Vector3();
			var N = new Vector3();

			// generate vertices, normals and uvs

			for ( i = 0; i <= tubularSegments; ++ i ) {

				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

				var u = i / tubularSegments * p * Math.PI * 2;

				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

				calculatePositionOnCurve( u, p, q, radius, P1 );
				calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

				// calculate orthonormal basis

				T.subVectors( P2, P1 );
				N.addVectors( P2, P1 );
				B.crossVectors( T, N );
				N.crossVectors( B, T );

				// normalize B, N. T can be ignored, we don't use it

				B.normalize();
				N.normalize();

				for ( j = 0; j <= radialSegments; ++ j ) {

					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

					var v = j / radialSegments * Math.PI * 2;
					var cx = - tube * Math.cos( v );
					var cy = tube * Math.sin( v );

					// now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

					vertex.x = P1.x + ( cx * N.x + cy * B.x );
					vertex.y = P1.y + ( cx * N.y + cy * B.y );
					vertex.z = P1.z + ( cx * N.z + cy * B.z );

					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

					normal.subVectors( vertex, P1 ).normalize();

					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );

				}

			}

			// generate indices

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					// indices

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			// this function calculates the current position on the torus curve

			function calculatePositionOnCurve( u, p, q, radius, position ) {

				var cu = Math.cos( u );
				var su = Math.sin( u );
				var quOverP = q / p * u;
				var cs = Math.cos( quOverP );

				position.x = radius * ( 2 + cs ) * 0.5 * cu;
				position.y = radius * ( 2 + cs ) * su * 0.5;
				position.z = radius * Math.sin( quOverP ) * 0.5;

			}

		}

		TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

		/**
		 * @author oosmoxiecode
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// TorusGeometry

		function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

			Geometry.call( this );

			this.type = 'TorusGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};

			this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
			this.mergeVertices();

		}

		TorusGeometry.prototype = Object.create( Geometry.prototype );
		TorusGeometry.prototype.constructor = TorusGeometry;

		// TorusBufferGeometry

		function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

			BufferGeometry.call( this );

			this.type = 'TorusBufferGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};

			radius = radius || 100;
			tube = tube || 40;
			radialSegments = Math.floor( radialSegments ) || 8;
			tubularSegments = Math.floor( tubularSegments ) || 6;
			arc = arc || Math.PI * 2;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var center = new Vector3();
			var vertex = new Vector3();
			var normal = new Vector3();

			var j, i;

			// generate vertices, normals and uvs

			for ( j = 0; j <= radialSegments; j ++ ) {

				for ( i = 0; i <= tubularSegments; i ++ ) {

					var u = i / tubularSegments * arc;
					var v = j / radialSegments * Math.PI * 2;

					// vertex

					vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
					vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
					vertex.z = tube * Math.sin( v );

					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					center.x = radius * Math.cos( u );
					center.y = radius * Math.sin( u );
					normal.subVectors( vertex, center ).normalize();

					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );

				}

			}

			// generate indices

			for ( j = 1; j <= radialSegments; j ++ ) {

				for ( i = 1; i <= tubularSegments; i ++ ) {

					// indices

					var a = ( tubularSegments + 1 ) * j + i - 1;
					var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
					var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
					var d = ( tubularSegments + 1 ) * j + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */

		var ShapeUtils = {

			// calculate area of the contour polygon

			area: function ( contour ) {

				var n = contour.length;
				var a = 0.0;

				for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

					a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

				}

				return a * 0.5;

			},

			triangulate: ( function () {

				/**
				 * This code is a quick port of code written in C++ which was submitted to
				 * flipcode.com by John W. Ratcliff  // July 22, 2000
				 * See original code and more information here:
				 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
				 *
				 * ported to actionscript by Zevan Rosser
				 * www.actionsnippet.com
				 *
				 * ported to javascript by Joshua Koo
				 * http://www.lab4games.net/zz85/blog
				 *
				 */

				function snip( contour, u, v, w, n, verts ) {

					var p;
					var ax, ay, bx, by;
					var cx, cy, px, py;

					ax = contour[ verts[ u ] ].x;
					ay = contour[ verts[ u ] ].y;

					bx = contour[ verts[ v ] ].x;
					by = contour[ verts[ v ] ].y;

					cx = contour[ verts[ w ] ].x;
					cy = contour[ verts[ w ] ].y;

					if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

					var aX, aY, bX, bY, cX, cY;
					var apx, apy, bpx, bpy, cpx, cpy;
					var cCROSSap, bCROSScp, aCROSSbp;

					aX = cx - bx;  aY = cy - by;
					bX = ax - cx;  bY = ay - cy;
					cX = bx - ax;  cY = by - ay;

					for ( p = 0; p < n; p ++ ) {

						px = contour[ verts[ p ] ].x;
						py = contour[ verts[ p ] ].y;

						if ( ( ( px === ax ) && ( py === ay ) ) ||
							 ( ( px === bx ) && ( py === by ) ) ||
							 ( ( px === cx ) && ( py === cy ) ) )	continue;

						apx = px - ax;  apy = py - ay;
						bpx = px - bx;  bpy = py - by;
						cpx = px - cx;  cpy = py - cy;

						// see if p is inside triangle abc

						aCROSSbp = aX * bpy - aY * bpx;
						cCROSSap = cX * apy - cY * apx;
						bCROSScp = bX * cpy - bY * cpx;

						if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

					}

					return true;

				}

				// takes in an contour array and returns

				return function triangulate( contour, indices ) {

					var n = contour.length;

					if ( n < 3 ) return null;

					var result = [],
						verts = [],
						vertIndices = [];

					/* we want a counter-clockwise polygon in verts */

					var u, v, w;

					if ( ShapeUtils.area( contour ) > 0.0 ) {

						for ( v = 0; v < n; v ++ ) verts[ v ] = v;

					} else {

						for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

					}

					var nv = n;

					/*  remove nv - 2 vertices, creating 1 triangle every time */

					var count = 2 * nv;   /* error detection */

					for ( v = nv - 1; nv > 2; ) {

						/* if we loop, it is probably a non-simple polygon */

						if ( ( count -- ) <= 0 ) {

							//** Triangulate: ERROR - probable bad polygon!

							//throw ( "Warning, unable to triangulate polygon!" );
							//return null;
							// Sometimes warning is fine, especially polygons are triangulated in reverse.
							console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

							if ( indices ) return vertIndices;
							return result;

						}

						/* three consecutive vertices in current polygon, <u,v,w> */

						u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
						v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
						w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

						if ( snip( contour, u, v, w, nv, verts ) ) {

							var a, b, c, s, t;

							/* true names of the vertices */

							a = verts[ u ];
							b = verts[ v ];
							c = verts[ w ];

							/* output Triangle */

							result.push( [ contour[ a ],
								contour[ b ],
								contour[ c ] ] );


							vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

							/* remove v from the remaining polygon */

							for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

								verts[ s ] = verts[ t ];

							}

							nv --;

							/* reset error detection counter */

							count = 2 * nv;

						}

					}

					if ( indices ) return vertIndices;
					return result;

				}

			} )(),

			triangulateShape: function ( contour, holes ) {

				function removeDupEndPts(points) {

					var l = points.length;

					if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

						points.pop();

					}

				}

				removeDupEndPts( contour );
				holes.forEach( removeDupEndPts );

				function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

					// inOtherPt needs to be collinear to the inSegment
					if ( inSegPt1.x !== inSegPt2.x ) {

						if ( inSegPt1.x < inSegPt2.x ) {

							return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

						} else {

							return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

						}

					} else {

						if ( inSegPt1.y < inSegPt2.y ) {

							return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

						} else {

							return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

						}

					}

				}

				function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

					var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
					var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

					var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
					var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

					var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
					var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

					if ( Math.abs( limit ) > Number.EPSILON ) {

						// not parallel

						var perpSeg2;
						if ( limit > 0 ) {

							if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

						} else {

							if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

						}

						// i.e. to reduce rounding errors
						// intersection at endpoint of segment#1?
						if ( perpSeg2 === 0 ) {

							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt1 ];

						}
						if ( perpSeg2 === limit ) {

							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt2 ];

						}
						// intersection at endpoint of segment#2?
						if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
						if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

						// return real intersection point
						var factorSeg1 = perpSeg2 / limit;
						return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
									y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

					} else {

						// parallel or collinear
						if ( ( perpSeg1 !== 0 ) ||
							 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

						// they are collinear or degenerate
						var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
						var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
						// both segments are points
						if ( seg1Pt && seg2Pt ) {

							if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
								 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
							return [ inSeg1Pt1 ];                 						// they are the same point

						}
						// segment#1  is a single point
						if ( seg1Pt ) {

							if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
							return [ inSeg1Pt1 ];

						}
						// segment#2  is a single point
						if ( seg2Pt ) {

							if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
							return [ inSeg2Pt1 ];

						}

						// they are collinear segments, which might overlap
						var seg1min, seg1max, seg1minVal, seg1maxVal;
						var seg2min, seg2max, seg2minVal, seg2maxVal;
						if ( seg1dx !== 0 ) {

							// the segments are NOT on a vertical line
							if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

							} else {

								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

							}
							if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

							} else {

								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

							}

						} else {

							// the segments are on a vertical line
							if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

							} else {

								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

							}
							if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

							} else {

								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

							}

						}
						if ( seg1minVal <= seg2minVal ) {

							if ( seg1maxVal <  seg2minVal )	return [];
							if ( seg1maxVal === seg2minVal )	{

								if ( inExcludeAdjacentSegs )		return [];
								return [ seg2min ];

							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
							return	[ seg2min, seg2max ];

						} else {

							if ( seg1minVal >  seg2maxVal )	return [];
							if ( seg1minVal === seg2maxVal )	{

								if ( inExcludeAdjacentSegs )		return [];
								return [ seg1min ];

							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
							return	[ seg1min, seg2max ];

						}

					}

				}

				function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

					// The order of legs is important

					// translation of all points, so that Vertex is at (0,0)
					var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
					var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
					var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

					// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
					var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
					var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

					if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

						// angle != 180 deg.

						var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
						// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

						if ( from2toAngle > 0 ) {

							// main angle < 180 deg.
							return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

						} else {

							// main angle > 180 deg.
							return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

						}

					} else {

						// angle == 180 deg.
						// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
						return	( from2otherAngle > 0 );

					}

				}


				function removeHoles( contour, holes ) {

					var shape = contour.concat(); // work on this shape
					var hole;

					function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

						// Check if hole point lies within angle around shape point
						var lastShapeIdx = shape.length - 1;

						var prevShapeIdx = inShapeIdx - 1;
						if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

						var nextShapeIdx = inShapeIdx + 1;
						if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

						var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
						if ( ! insideAngle ) {

							// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
							return	false;

						}

						// Check if shape point lies within angle around hole point
						var lastHoleIdx = hole.length - 1;

						var prevHoleIdx = inHoleIdx - 1;
						if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

						var nextHoleIdx = inHoleIdx + 1;
						if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

						insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
						if ( ! insideAngle ) {

							// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
							return	false;

						}

						return	true;

					}

					function intersectsShapeEdge( inShapePt, inHolePt ) {

						// checks for intersections with shape edges
						var sIdx, nextIdx, intersection;
						for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

							nextIdx = sIdx + 1; nextIdx %= shape.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

						return	false;

					}

					var indepHoles = [];

					function intersectsHoleEdge( inShapePt, inHolePt ) {

						// checks for intersections with hole edges
						var ihIdx, chkHole,
							hIdx, nextIdx, intersection;
						for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

							chkHole = holes[ indepHoles[ ihIdx ]];
							for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

								nextIdx = hIdx + 1; nextIdx %= chkHole.length;
								intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
								if ( intersection.length > 0 )		return	true;

							}

						}
						return	false;

					}

					var holeIndex, shapeIndex,
						shapePt, holePt,
						holeIdx, cutKey, failedCuts = [],
						tmpShape1, tmpShape2,
						tmpHole1, tmpHole2;

					for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

						indepHoles.push( h );

					}

					var minShapeIndex = 0;
					var counter = indepHoles.length * 2;
					while ( indepHoles.length > 0 ) {

						counter --;
						if ( counter < 0 ) {

							console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
							break;

						}

						// search for shape-vertex and hole-vertex,
						// which can be connected without intersections
						for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

							shapePt = shape[ shapeIndex ];
							holeIndex	= - 1;

							// search for hole which can be reached without intersections
							for ( var h = 0; h < indepHoles.length; h ++ ) {

								holeIdx = indepHoles[ h ];

								// prevent multiple checks
								cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
								if ( failedCuts[ cutKey ] !== undefined )			continue;

								hole = holes[ holeIdx ];
								for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

									holePt = hole[ h2 ];
									if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
									if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
									if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

									holeIndex = h2;
									indepHoles.splice( h, 1 );

									tmpShape1 = shape.slice( 0, shapeIndex + 1 );
									tmpShape2 = shape.slice( shapeIndex );
									tmpHole1 = hole.slice( holeIndex );
									tmpHole2 = hole.slice( 0, holeIndex + 1 );

									shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

									minShapeIndex = shapeIndex;

									// Debug only, to show the selected cuts
									// glob_CutLines.push( [ shapePt, holePt ] );

									break;

								}
								if ( holeIndex >= 0 )	break;		// hole-vertex found

								failedCuts[ cutKey ] = true;			// remember failure

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

						}

					}

					return shape; 			/* shape with no holes */

				}


				var i, il, f, face,
					key, index,
					allPointsMap = {};

				// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

				var allpoints = contour.concat();

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					Array.prototype.push.apply( allpoints, holes[ h ] );

				}

				//console.log( "allpoints",allpoints, allpoints.length );

				// prepare all points map

				for ( i = 0, il = allpoints.length; i < il; i ++ ) {

					key = allpoints[ i ].x + ":" + allpoints[ i ].y;

					if ( allPointsMap[ key ] !== undefined ) {

						console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

					}

					allPointsMap[ key ] = i;

				}

				// remove holes by cutting paths to holes and adding them to the shape
				var shapeWithoutHoles = removeHoles( contour, holes );

				var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
				//console.log( "triangles",triangles, triangles.length );

				// check all face vertices against all points map

				for ( i = 0, il = triangles.length; i < il; i ++ ) {

					face = triangles[ i ];

					for ( f = 0; f < 3; f ++ ) {

						key = face[ f ].x + ":" + face[ f ].y;

						index = allPointsMap[ key ];

						if ( index !== undefined ) {

							face[ f ] = index;

						}

					}

				}

				return triangles.concat();

			},

			isClockWise: function ( pts ) {

				return ShapeUtils.area( pts ) < 0;

			}

		};

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Creates extruded geometry from a path shape.
		 *
		 * parameters = {
		 *
		 *  curveSegments: <int>, // number of points on the curves
		 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
		 *  amount: <int>, // Depth to extrude the shape
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into the original shape bevel goes
		 *  bevelSize: <float>, // how far from shape outline is bevel
		 *  bevelSegments: <int>, // number of bevel layers
		 *
		 *  extrudePath: <THREE.Curve> // curve to extrude shape along
		 *  frames: <Object> // containing arrays of tangents, normals, binormals
		 *
		 *  UVGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 */

		// ExtrudeGeometry

		function ExtrudeGeometry( shapes, options ) {

			Geometry.call( this );

			this.type = 'ExtrudeGeometry';

			this.parameters = {
				shapes: shapes,
				options: options
			};

			this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
			this.mergeVertices();

		}

		ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
		ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

		// ExtrudeBufferGeometry

		function ExtrudeBufferGeometry( shapes, options ) {

			if ( typeof ( shapes ) === "undefined" ) {

				return;

			}

			BufferGeometry.call( this );

			this.type = 'ExtrudeBufferGeometry';

			shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

			this.addShapeList( shapes, options );

			this.computeVertexNormals();

			// can't really use automatic vertex normals
			// as then front and back sides get smoothed too
			// should do separate smoothing just for sides

			//this.computeVertexNormals();

			//console.log( "took", ( Date.now() - startTime ) );

		}

		ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

		ExtrudeBufferGeometry.prototype.getArrays = function () {

			var positionAttribute = this.getAttribute( "position" );
			var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

			var uvAttribute = this.getAttribute( "uv" );
			var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

			var IndexAttribute = this.index;
			var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

			return {
				position: verticesArray,
				uv: uvArray,
				index: indicesArray
			};

		};

		ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {

			var sl = shapes.length;
			options.arrays = this.getArrays();

			for ( var s = 0; s < sl; s ++ ) {

				var shape = shapes[ s ];
				this.addShape( shape, options );

			}

			this.setIndex( options.arrays.index );
			this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

		};

		ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

			var arrays = options.arrays ? options.arrays : this.getArrays();
			var verticesArray = arrays.position;
			var indicesArray = arrays.index;
			var uvArray = arrays.uv;

			var placeholder = [];


			var amount = options.amount !== undefined ? options.amount : 100;

			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

			var steps = options.steps !== undefined ? options.steps : 1;

			var extrudePath = options.extrudePath;
			var extrudePts, extrudeByPath = false;

			// Use default WorldUVGenerator if no UV generators are specified.
			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

			var splineTube, binormal, normal, position2;
			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;

			}

			// Variables initialization

			var ahole, h, hl; // looping of holes
			var scope = this;

			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			var faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			var contour = vertices; // vertices has all points but contour has only points of circumference

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			var contourMovements = [];

			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				oneHoleMovements = [];

				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) j = 0;
					if ( k === il ) k = 0;

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			bs = bevelSize;

			// Back facing vertices

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			var s;

			for ( s = 1; s <= steps; s ++ ) {

				for ( i = 0; i < vlen; i ++ ) {

					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, amount / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, amount + z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, amount + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				var start = verticesArray.length/3;

				if ( bevelEnabled ) {

					var layer = 0; // steps + 1
					var offset = vlen * layer;

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length/3 -start, options.material !== undefined ? options.material : 0);

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				var start = verticesArray.length/3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length/3 -start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);


			}

			function sidewalls( contour, layeroffset ) {

				var j, k;
				i = contour.length;

				while ( -- i >= 0 ) {

					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;

					//console.log('b', i,j, i-1, k,vertices.length);

					var s = 0,
						sl = steps + bevelSegments * 2;

					for ( s = 0; s < sl; s ++ ) {

						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );

						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d, contour, s, sl, j, k );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				indicesArray.push( verticesArray.length / 3 );
				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

			if ( ! options.arrays ) {

				this.setIndex( indicesArray );
				this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
				this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

			}

		};

		ExtrudeGeometry.WorldUVGenerator = {

			generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];

				return [
					new Vector2( a_x, a_y ),
					new Vector2( b_x, b_y ),
					new Vector2( c_x, c_y )
				];

			},

			generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var a_z = vertices[ indexA * 3 + 2 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var b_z = vertices[ indexB * 3 + 2 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];
				var c_z = vertices[ indexC * 3 + 2 ];
				var d_x = vertices[ indexD * 3 ];
				var d_y = vertices[ indexD * 3 + 1 ];
				var d_z = vertices[ indexD * 3 + 2 ];

				if ( Math.abs( a_y - b_y ) < 0.01 ) {

					return [
						new Vector2( a_x, 1 - a_z ),
						new Vector2( b_x, 1 - b_z ),
						new Vector2( c_x, 1 - c_z ),
						new Vector2( d_x, 1 - d_z )
					];

				} else {

					return [
						new Vector2( a_y, 1 - a_z ),
						new Vector2( b_y, 1 - b_z ),
						new Vector2( c_y, 1 - c_z ),
						new Vector2( d_y, 1 - d_z )
					];

				}

			}
		};

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Text = 3D Text
		 *
		 * parameters = {
		 *  font: <THREE.Font>, // font
		 *
		 *  size: <float>, // size of the text
		 *  height: <float>, // thickness to extrude text
		 *  curveSegments: <int>, // number of points on the curves
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into text bevel goes
		 *  bevelSize: <float> // how far from text outline is bevel
		 * }
		 */

		// TextGeometry

		function TextGeometry(  text, parameters ) {

			Geometry.call( this );

			this.type = 'TextGeometry';

			this.parameters = {
				text: text,
				parameters: parameters
			};

			this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
			this.mergeVertices();

		}

		TextGeometry.prototype = Object.create( Geometry.prototype );
		TextGeometry.prototype.constructor = TextGeometry;

		// TextBufferGeometry

		function TextBufferGeometry( text, parameters ) {

			parameters = parameters || {};

			var font = parameters.font;

			if ( ! ( font && font.isFont ) ) {

				console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
				return new Geometry();

			}

			var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

			// translate parameters to ExtrudeGeometry API

			parameters.amount = parameters.height !== undefined ? parameters.height : 50;

			// defaults

			if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
			if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
			if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

			ExtrudeBufferGeometry.call( this, shapes, parameters );

			this.type = 'TextBufferGeometry';

		}

		TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
		TextBufferGeometry.prototype.constructor = TextBufferGeometry;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// SphereGeometry

		function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

			Geometry.call( this );

			this.type = 'SphereGeometry';

			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
			this.mergeVertices();

		}

		SphereGeometry.prototype = Object.create( Geometry.prototype );
		SphereGeometry.prototype.constructor = SphereGeometry;

		// SphereBufferGeometry

		function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

			BufferGeometry.call( this );

			this.type = 'SphereBufferGeometry';

			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			radius = radius || 50;

			widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
			heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

			phiStart = phiStart !== undefined ? phiStart : 0;
			phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

			var thetaEnd = thetaStart + thetaLength;

			var ix, iy;

			var index = 0;
			var grid = [];

			var vertex = new Vector3();
			var normal = new Vector3();

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// generate vertices, normals and uvs

			for ( iy = 0; iy <= heightSegments; iy ++ ) {

				var verticesRow = [];

				var v = iy / heightSegments;

				for ( ix = 0; ix <= widthSegments; ix ++ ) {

					var u = ix / widthSegments;

					// vertex

					vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
					vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
					vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( vertex.x, vertex.y, vertex.z ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					verticesRow.push( index ++ );

				}

				grid.push( verticesRow );

			}

			// indices

			for ( iy = 0; iy < heightSegments; iy ++ ) {

				for ( ix = 0; ix < widthSegments; ix ++ ) {

					var a = grid[ iy ][ ix + 1 ];
					var b = grid[ iy ][ ix ];
					var c = grid[ iy + 1 ][ ix ];
					var d = grid[ iy + 1 ][ ix + 1 ];

					if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
					if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

		/**
		 * @author Kaleb Murphy
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// RingGeometry

		function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

			Geometry.call( this );

			this.type = 'RingGeometry';

			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
			this.mergeVertices();

		}

		RingGeometry.prototype = Object.create( Geometry.prototype );
		RingGeometry.prototype.constructor = RingGeometry;

		// RingBufferGeometry

		function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

			BufferGeometry.call( this );

			this.type = 'RingBufferGeometry';

			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			innerRadius = innerRadius || 20;
			outerRadius = outerRadius || 50;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

			thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
			phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// some helper variables

			var segment;
			var radius = innerRadius;
			var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
			var vertex = new Vector3();
			var uv = new Vector2();
			var j, i;

			// generate vertices, normals and uvs

			for ( j = 0; j <= phiSegments; j ++ ) {

				for ( i = 0; i <= thetaSegments; i ++ ) {

					// values are generate from the inside of the ring to the outside

					segment = thetaStart + i / thetaSegments * thetaLength;

					// vertex

					vertex.x = radius * Math.cos( segment );
					vertex.y = radius * Math.sin( segment );

					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normals.push( 0, 0, 1 );

					// uv

					uv.x = ( vertex.x / outerRadius + 1 ) / 2;
					uv.y = ( vertex.y / outerRadius + 1 ) / 2;

					uvs.push( uv.x, uv.y );

				}

				// increase the radius for next row of vertices

				radius += radiusStep;

			}

			// indices

			for ( j = 0; j < phiSegments; j ++ ) {

				var thetaSegmentLevel = j * ( thetaSegments + 1 );

				for ( i = 0; i < thetaSegments; i ++ ) {

					segment = i + thetaSegmentLevel;

					var a = segment;
					var b = segment + thetaSegments + 1;
					var c = segment + thetaSegments + 2;
					var d = segment + 1;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		RingBufferGeometry.prototype.constructor = RingBufferGeometry;

		/**
		 * @author astrodud / http://astrodud.isgreat.org/
		 * @author zz85 / https://github.com/zz85
		 * @author bhouston / http://clara.io
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// LatheGeometry

		function LatheGeometry( points, segments, phiStart, phiLength ) {

			Geometry.call( this );

			this.type = 'LatheGeometry';

			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};

			this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
			this.mergeVertices();

		}

		LatheGeometry.prototype = Object.create( Geometry.prototype );
		LatheGeometry.prototype.constructor = LatheGeometry;

		// LatheBufferGeometry

		function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

			BufferGeometry.call( this );

			this.type = 'LatheBufferGeometry';

			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};

			segments = Math.floor( segments ) || 12;
			phiStart = phiStart || 0;
			phiLength = phiLength || Math.PI * 2;

			// clamp phiLength so it's in range of [ 0, 2PI ]

			phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


			// buffers

			var indices = [];
			var vertices = [];
			var uvs = [];

			// helper variables

			var base;
			var inverseSegments = 1.0 / segments;
			var vertex = new Vector3();
			var uv = new Vector2();
			var i, j;

			// generate vertices and uvs

			for ( i = 0; i <= segments; i ++ ) {

				var phi = phiStart + i * inverseSegments * phiLength;

				var sin = Math.sin( phi );
				var cos = Math.cos( phi );

				for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

					// vertex

					vertex.x = points[ j ].x * sin;
					vertex.y = points[ j ].y;
					vertex.z = points[ j ].x * cos;

					vertices.push( vertex.x, vertex.y, vertex.z );

					// uv

					uv.x = i / segments;
					uv.y = j / ( points.length - 1 );

					uvs.push( uv.x, uv.y );


				}

			}

			// indices

			for ( i = 0; i < segments; i ++ ) {

				for ( j = 0; j < ( points.length - 1 ); j ++ ) {

					base = j + i * points.length;

					var a = base;
					var b = base + points.length;
					var c = base + points.length + 1;
					var d = base + 1;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			// generate normals

			this.computeVertexNormals();

			// if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).

			if ( phiLength === Math.PI * 2 ) {

				var normals = this.attributes.normal.array;
				var n1 = new Vector3();
				var n2 = new Vector3();
				var n = new Vector3();

				// this is the buffer offset for the last line of vertices

				base = segments * points.length * 3;

				for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

					// select the normal of the vertex in the first line

					n1.x = normals[ j + 0 ];
					n1.y = normals[ j + 1 ];
					n1.z = normals[ j + 2 ];

					// select the normal of the vertex in the last line

					n2.x = normals[ base + j + 0 ];
					n2.y = normals[ base + j + 1 ];
					n2.z = normals[ base + j + 2 ];

					// average normals

					n.addVectors( n1, n2 ).normalize();

					// assign the new values to both normals

					normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
					normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
					normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

				}

			}

		}

		LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

		/**
		 * @author jonobr1 / http://jonobr1.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// ShapeGeometry

		function ShapeGeometry( shapes, curveSegments ) {

			Geometry.call( this );

			this.type = 'ShapeGeometry';

			if ( typeof curveSegments === 'object' ) {

				console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

				curveSegments = curveSegments.curveSegments;

			}

			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};

			this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
			this.mergeVertices();

		}

		ShapeGeometry.prototype = Object.create( Geometry.prototype );
		ShapeGeometry.prototype.constructor = ShapeGeometry;

		// ShapeBufferGeometry

		function ShapeBufferGeometry( shapes, curveSegments ) {

			BufferGeometry.call( this );

			this.type = 'ShapeBufferGeometry';

			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};

			curveSegments = curveSegments || 12;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var groupStart = 0;
			var groupCount = 0;

			// allow single and array values for "shapes" parameter

			if ( Array.isArray( shapes ) === false ) {

				addShape( shapes );

			} else {

				for ( var i = 0; i < shapes.length; i ++ ) {

					addShape( shapes[ i ] );

					this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

					groupStart += groupCount;
					groupCount = 0;

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


			// helper functions

			function addShape( shape ) {

				var i, l, shapeHole;

				var indexOffset = vertices.length / 3;
				var points = shape.extractPoints( curveSegments );

				var shapeVertices = points.shape;
				var shapeHoles = points.holes;

				// check direction of vertices

				if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

					shapeVertices = shapeVertices.reverse();

					// also check if holes are in the opposite direction

					for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

						shapeHole = shapeHoles[ i ];

						if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

							shapeHoles[ i ] = shapeHole.reverse();

						}

					}

				}

				var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

				// join vertices of inner and outer paths to a single array

				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

					shapeHole = shapeHoles[ i ];
					shapeVertices = shapeVertices.concat( shapeHole );

				}

				// vertices, normals, uvs

				for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

					var vertex = shapeVertices[ i ];

					vertices.push( vertex.x, vertex.y, 0 );
					normals.push( 0, 0, 1 );
					uvs.push( vertex.x, vertex.y ); // world uvs

				}

				// incides

				for ( i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					var a = face[ 0 ] + indexOffset;
					var b = face[ 1 ] + indexOffset;
					var c = face[ 2 ] + indexOffset;

					indices.push( a, b, c );
					groupCount += 3;

				}

			}

		}

		ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		function EdgesGeometry( geometry, thresholdAngle ) {

			BufferGeometry.call( this );

			this.type = 'EdgesGeometry';

			this.parameters = {
				thresholdAngle: thresholdAngle
			};

			thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

			// buffer

			var vertices = [];

			// helper variables

			var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
			var edge = [ 0, 0 ], edges = {}, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];

			// prepare source geometry

			var geometry2;

			if ( geometry.isBufferGeometry ) {

				geometry2 = new Geometry();
				geometry2.fromBufferGeometry( geometry );

			} else {

				geometry2 = geometry.clone();

			}

			geometry2.mergeVertices();
			geometry2.computeFaceNormals();

			var sourceVertices = geometry2.vertices;
			var faces = geometry2.faces;

			// now create a data structure where each entry represents an edge with its adjoining faces

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 );
					edge[ 1 ] = Math.max( edge1, edge2 );

					key = edge[ 0 ] + ',' + edge[ 1 ];

					if ( edges[ key ] === undefined ) {

						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

					} else {

						edges[ key ].face2 = i;

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				var e = edges[ key ];

				// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

				if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

					var vertex = sourceVertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex = sourceVertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

			// build geometry

			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

		}

		EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
		EdgesGeometry.prototype.constructor = EdgesGeometry;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		// CylinderGeometry

		function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			Geometry.call( this );

			this.type = 'CylinderGeometry';

			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
			this.mergeVertices();

		}

		CylinderGeometry.prototype = Object.create( Geometry.prototype );
		CylinderGeometry.prototype.constructor = CylinderGeometry;

		// CylinderBufferGeometry

		function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			BufferGeometry.call( this );

			this.type = 'CylinderBufferGeometry';

			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			var scope = this;

			radiusTop = radiusTop !== undefined ? radiusTop : 20;
			radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
			height = height !== undefined ? height : 100;

			radialSegments = Math.floor( radialSegments ) || 8;
			heightSegments = Math.floor( heightSegments ) || 1;

			openEnded = openEnded !== undefined ? openEnded : false;
			thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
			thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var index = 0;
			var indexArray = [];
			var halfHeight = height / 2;
			var groupStart = 0;

			// generate geometry

			generateTorso();

			if ( openEnded === false ) {

				if ( radiusTop > 0 ) generateCap( true );
				if ( radiusBottom > 0 ) generateCap( false );

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function generateTorso() {

				var x, y;
				var normal = new Vector3();
				var vertex = new Vector3();

				var groupCount = 0;

				// this will be used to calculate the normal
				var slope = ( radiusBottom - radiusTop ) / height;

				// generate vertices, normals and uvs

				for ( y = 0; y <= heightSegments; y ++ ) {

					var indexRow = [];

					var v = y / heightSegments;

					// calculate the radius of the current row

					var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

					for ( x = 0; x <= radialSegments; x ++ ) {

						var u = x / radialSegments;

						var theta = u * thetaLength + thetaStart;

						var sinTheta = Math.sin( theta );
						var cosTheta = Math.cos( theta );

						// vertex

						vertex.x = radius * sinTheta;
						vertex.y = - v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.push( vertex.x, vertex.y, vertex.z );

						// normal

						normal.set( sinTheta, slope, cosTheta ).normalize();
						normals.push( normal.x, normal.y, normal.z );

						// uv

						uvs.push( u, 1 - v );

						// save index of vertex in respective row

						indexRow.push( index ++ );

					}

					// now save vertices of the row in our index array

					indexArray.push( indexRow );

				}

				// generate indices

				for ( x = 0; x < radialSegments; x ++ ) {

					for ( y = 0; y < heightSegments; y ++ ) {

						// we use the index array to access the correct indices

						var a = indexArray[ y ][ x ];
						var b = indexArray[ y + 1 ][ x ];
						var c = indexArray[ y + 1 ][ x + 1 ];
						var d = indexArray[ y ][ x + 1 ];

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// update group counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, 0 );

				// calculate new start value for groups

				groupStart += groupCount;

			}

			function generateCap( top ) {

				var x, centerIndexStart, centerIndexEnd;

				var uv = new Vector2();
				var vertex = new Vector3();

				var groupCount = 0;

				var radius = ( top === true ) ? radiusTop : radiusBottom;
				var sign = ( top === true ) ? 1 : - 1;

				// save the index of the first center vertex
				centerIndexStart = index;

				// first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment

				for ( x = 1; x <= radialSegments; x ++ ) {

					// vertex

					vertices.push( 0, halfHeight * sign, 0 );

					// normal

					normals.push( 0, sign, 0 );

					// uv

					uvs.push( 0.5, 0.5 );

					// increase index

					index ++;

				}

				// save the index of the last center vertex

				centerIndexEnd = index;

				// now we generate the surrounding vertices, normals and uvs

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;

					var cosTheta = Math.cos( theta );
					var sinTheta = Math.sin( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normals.push( 0, sign, 0 );

					// uv

					uv.x = ( cosTheta * 0.5 ) + 0.5;
					uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
					uvs.push( uv.x, uv.y );

					// increase index

					index ++;

				}

				// generate indices

				for ( x = 0; x < radialSegments; x ++ ) {

					var c = centerIndexStart + x;
					var i = centerIndexEnd + x;

					if ( top === true ) {

						// face top

						indices.push( i, i + 1, c );

					} else {

						// face bottom

						indices.push( i + 1, i, c );

					}

					groupCount += 3;

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

				// calculate new start value for groups

				groupStart += groupCount;

			}

		}

		CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

		/**
		 * @author abelnation / http://github.com/abelnation
		 */

		// ConeGeometry

		function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

			this.type = 'ConeGeometry';

			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

		}

		ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
		ConeGeometry.prototype.constructor = ConeGeometry;

		// ConeBufferGeometry

		function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

			this.type = 'ConeBufferGeometry';

			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

		}

		ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
		ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 * @author hughes
		 */

		// CircleGeometry

		function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

			Geometry.call( this );

			this.type = 'CircleGeometry';

			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
			this.mergeVertices();

		}

		CircleGeometry.prototype = Object.create( Geometry.prototype );
		CircleGeometry.prototype.constructor = CircleGeometry;

		// CircleBufferGeometry

		function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

			BufferGeometry.call( this );

			this.type = 'CircleBufferGeometry';

			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			radius = radius || 50;
			segments = segments !== undefined ? Math.max( 3, segments ) : 8;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var i, s;
			var vertex = new Vector3();
			var uv = new Vector2();

			// center point

			vertices.push( 0, 0, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( 0.5, 0.5 );

			for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

				var segment = thetaStart + s / segments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uvs

				uv.x = ( vertices[ i ] / radius + 1 ) / 2;
				uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// indices

			for ( i = 1; i <= segments; i ++ ) {

				indices.push( i, i + 1, 0 );

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



		var Geometries = Object.freeze({
			WireframeGeometry: WireframeGeometry,
			ParametricGeometry: ParametricGeometry,
			ParametricBufferGeometry: ParametricBufferGeometry,
			TetrahedronGeometry: TetrahedronGeometry,
			TetrahedronBufferGeometry: TetrahedronBufferGeometry,
			OctahedronGeometry: OctahedronGeometry,
			OctahedronBufferGeometry: OctahedronBufferGeometry,
			IcosahedronGeometry: IcosahedronGeometry,
			IcosahedronBufferGeometry: IcosahedronBufferGeometry,
			DodecahedronGeometry: DodecahedronGeometry,
			DodecahedronBufferGeometry: DodecahedronBufferGeometry,
			PolyhedronGeometry: PolyhedronGeometry,
			PolyhedronBufferGeometry: PolyhedronBufferGeometry,
			TubeGeometry: TubeGeometry,
			TubeBufferGeometry: TubeBufferGeometry,
			TorusKnotGeometry: TorusKnotGeometry,
			TorusKnotBufferGeometry: TorusKnotBufferGeometry,
			TorusGeometry: TorusGeometry,
			TorusBufferGeometry: TorusBufferGeometry,
			TextGeometry: TextGeometry,
			TextBufferGeometry: TextBufferGeometry,
			SphereGeometry: SphereGeometry,
			SphereBufferGeometry: SphereBufferGeometry,
			RingGeometry: RingGeometry,
			RingBufferGeometry: RingBufferGeometry,
			PlaneGeometry: PlaneGeometry,
			PlaneBufferGeometry: PlaneBufferGeometry,
			LatheGeometry: LatheGeometry,
			LatheBufferGeometry: LatheBufferGeometry,
			ShapeGeometry: ShapeGeometry,
			ShapeBufferGeometry: ShapeBufferGeometry,
			ExtrudeGeometry: ExtrudeGeometry,
			ExtrudeBufferGeometry: ExtrudeBufferGeometry,
			EdgesGeometry: EdgesGeometry,
			ConeGeometry: ConeGeometry,
			ConeBufferGeometry: ConeBufferGeometry,
			CylinderGeometry: CylinderGeometry,
			CylinderBufferGeometry: CylinderBufferGeometry,
			CircleGeometry: CircleGeometry,
			CircleBufferGeometry: CircleBufferGeometry,
			BoxGeometry: BoxGeometry,
			BoxBufferGeometry: BoxBufferGeometry
		});

		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * parameters = {
		 *  opacity: <float>
		 * }
		 */

		function ShadowMaterial( parameters ) {

			ShaderMaterial.call( this, {
				uniforms: UniformsUtils.merge( [
					UniformsLib.lights,
					{
						opacity: { value: 1.0 }
					}
				] ),
				vertexShader: ShaderChunk[ 'shadow_vert' ],
				fragmentShader: ShaderChunk[ 'shadow_frag' ]
			} );

			this.lights = true;
			this.transparent = true;

			Object.defineProperties( this, {
				opacity: {
					enumerable: true,
					get: function () {
						return this.uniforms.opacity.value;
					},
					set: function ( value ) {
						this.uniforms.opacity.value = value;
					}
				}
			} );

			this.setValues( parameters );

		}

		ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
		ShadowMaterial.prototype.constructor = ShadowMaterial;

		ShadowMaterial.prototype.isShadowMaterial = true;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function RawShaderMaterial( parameters ) {

			ShaderMaterial.call( this, parameters );

			this.type = 'RawShaderMaterial';

		}

		RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
		RawShaderMaterial.prototype.constructor = RawShaderMaterial;

		RawShaderMaterial.prototype.isRawShaderMaterial = true;

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  roughness: <float>,
		 *  metalness: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  roughnessMap: new THREE.Texture( <Image> ),
		 *
		 *  metalnessMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  envMapIntensity: <float>
		 *
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		function MeshStandardMaterial( parameters ) {

			Material.call( this );

			this.defines = { 'STANDARD': '' };

			this.type = 'MeshStandardMaterial';

			this.color = new Color( 0xffffff ); // diffuse
			this.roughness = 0.5;
			this.metalness = 0.5;

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.bumpMap = null;
			this.bumpScale = 1;

			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.roughnessMap = null;

			this.metalnessMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.envMapIntensity = 1.0;

			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		}

		MeshStandardMaterial.prototype = Object.create( Material.prototype );
		MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

		MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

		MeshStandardMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.defines = { 'STANDARD': '' };

			this.color.copy( source.color );
			this.roughness = source.roughness;
			this.metalness = source.metalness;

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;

			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.roughnessMap = source.roughnessMap;

			this.metalnessMap = source.metalnessMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;

			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  reflectivity: <float>
		 * }
		 */

		function MeshPhysicalMaterial( parameters ) {

			MeshStandardMaterial.call( this );

			this.defines = { 'PHYSICAL': '' };

			this.type = 'MeshPhysicalMaterial';

			this.reflectivity = 0.5; // maps to F0 = 0.04

			this.clearCoat = 0.0;
			this.clearCoatRoughness = 0.0;

			this.setValues( parameters );

		}

		MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
		MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

		MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

		MeshPhysicalMaterial.prototype.copy = function ( source ) {

			MeshStandardMaterial.prototype.copy.call( this, source );

			this.defines = { 'PHYSICAL': '' };

			this.reflectivity = source.reflectivity;

			this.clearCoat = source.clearCoat;
			this.clearCoatRoughness = source.clearCoatRoughness;

			return this;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		function MeshPhongMaterial( parameters ) {

			Material.call( this );

			this.type = 'MeshPhongMaterial';

			this.color = new Color( 0xffffff ); // diffuse
			this.specular = new Color( 0x111111 );
			this.shininess = 30;

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.bumpMap = null;
			this.bumpScale = 1;

			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		}

		MeshPhongMaterial.prototype = Object.create( Material.prototype );
		MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

		MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

		MeshPhongMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;

			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		/**
		 * @author takahirox / http://github.com/takahirox
		 *
		 * parameters = {
		 *  gradientMap: new THREE.Texture( <Image> )
		 * }
		 */

		function MeshToonMaterial( parameters ) {

			MeshPhongMaterial.call( this );

			this.defines = { 'TOON': '' };

			this.type = 'MeshToonMaterial';

			this.gradientMap = null;

			this.setValues( parameters );

		}

		MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
		MeshToonMaterial.prototype.constructor = MeshToonMaterial;

		MeshToonMaterial.prototype.isMeshToonMaterial = true;

		MeshToonMaterial.prototype.copy = function ( source ) {

			MeshPhongMaterial.prototype.copy.call( this, source );

			this.gradientMap = source.gradientMap;

			return this;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  opacity: <float>,
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		function MeshNormalMaterial( parameters ) {

			Material.call( this );

			this.type = 'MeshNormalMaterial';

			this.bumpMap = null;
			this.bumpScale = 1;

			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false;
			this.lights = false;

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		}

		MeshNormalMaterial.prototype = Object.create( Material.prototype );
		MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

		MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

		MeshNormalMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;

			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		function MeshLambertMaterial( parameters ) {

			Material.call( this );

			this.type = 'MeshLambertMaterial';

			this.color = new Color( 0xffffff ); // diffuse

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		}

		MeshLambertMaterial.prototype = Object.create( Material.prototype );
		MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

		MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

		MeshLambertMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *
		 *  scale: <float>,
		 *  dashSize: <float>,
		 *  gapSize: <float>
		 * }
		 */

		function LineDashedMaterial( parameters ) {

			Material.call( this );

			this.type = 'LineDashedMaterial';

			this.color = new Color( 0xffffff );

			this.linewidth = 1;

			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;

			this.lights = false;

			this.setValues( parameters );

		}

		LineDashedMaterial.prototype = Object.create( Material.prototype );
		LineDashedMaterial.prototype.constructor = LineDashedMaterial;

		LineDashedMaterial.prototype.isLineDashedMaterial = true;

		LineDashedMaterial.prototype.copy = function ( source ) {

			Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.linewidth = source.linewidth;

			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;

			return this;

		};



		var Materials = Object.freeze({
			ShadowMaterial: ShadowMaterial,
			SpriteMaterial: SpriteMaterial,
			RawShaderMaterial: RawShaderMaterial,
			ShaderMaterial: ShaderMaterial,
			PointsMaterial: PointsMaterial,
			MeshPhysicalMaterial: MeshPhysicalMaterial,
			MeshStandardMaterial: MeshStandardMaterial,
			MeshPhongMaterial: MeshPhongMaterial,
			MeshToonMaterial: MeshToonMaterial,
			MeshNormalMaterial: MeshNormalMaterial,
			MeshLambertMaterial: MeshLambertMaterial,
			MeshDepthMaterial: MeshDepthMaterial,
			MeshBasicMaterial: MeshBasicMaterial,
			LineDashedMaterial: LineDashedMaterial,
			LineBasicMaterial: LineBasicMaterial,
			Material: Material
		});

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		var Cache = {

			enabled: false,

			files: {},

			add: function ( key, file ) {

				if ( this.enabled === false ) return;

				// console.log( 'THREE.Cache', 'Adding key:', key );

				this.files[ key ] = file;

			},

			get: function ( key ) {

				if ( this.enabled === false ) return;

				// console.log( 'THREE.Cache', 'Checking key:', key );

				return this.files[ key ];

			},

			remove: function ( key ) {

				delete this.files[ key ];

			},

			clear: function () {

				this.files = {};

			}

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function LoadingManager( onLoad, onProgress, onError ) {

			var scope = this;

			var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;

			this.itemStart = function ( url ) {

				itemsTotal ++;

				if ( isLoading === false ) {

					if ( scope.onStart !== undefined ) {

						scope.onStart( url, itemsLoaded, itemsTotal );

					}

				}

				isLoading = true;

			};

			this.itemEnd = function ( url ) {

				itemsLoaded ++;

				if ( scope.onProgress !== undefined ) {

					scope.onProgress( url, itemsLoaded, itemsTotal );

				}

				if ( itemsLoaded === itemsTotal ) {

					isLoading = false;

					if ( scope.onLoad !== undefined ) {

						scope.onLoad();

					}

				}

			};

			this.itemError = function ( url ) {

				if ( scope.onError !== undefined ) {

					scope.onError( url );

				}

			};

		}

		var DefaultLoadingManager = new LoadingManager();

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function FileLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( FileLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				if ( url === undefined ) url = '';

				if ( this.path !== undefined ) url = this.path + url;

				var scope = this;

				var cached = Cache.get( url );

				if ( cached !== undefined ) {

					scope.manager.itemStart( url );

					setTimeout( function () {

						if ( onLoad ) onLoad( cached );

						scope.manager.itemEnd( url );

					}, 0 );

					return cached;

				}

				// Check for data: URI
				var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
				var dataUriRegexResult = url.match( dataUriRegex );

				// Safari can not handle Data URIs through XMLHttpRequest so process manually
				if ( dataUriRegexResult ) {

					var mimeType = dataUriRegexResult[ 1 ];
					var isBase64 = !! dataUriRegexResult[ 2 ];
					var data = dataUriRegexResult[ 3 ];

					data = window.decodeURIComponent( data );

					if ( isBase64 ) data = window.atob( data );

					try {

						var response;
						var responseType = ( this.responseType || '' ).toLowerCase();

						switch ( responseType ) {

							case 'arraybuffer':
							case 'blob':

							 	response = new ArrayBuffer( data.length );

								var view = new Uint8Array( response );

								for ( var i = 0; i < data.length; i ++ ) {

									view[ i ] = data.charCodeAt( i );

								}

								if ( responseType === 'blob' ) {

									response = new Blob( [ response ], { type: mimeType } );

								}

								break;

							case 'document':

								var parser = new DOMParser();
								response = parser.parseFromString( data, mimeType );

								break;

							case 'json':

								response = JSON.parse( data );

								break;

							default: // 'text' or other

								response = data;

								break;

						}

						// Wait for next browser tick
						window.setTimeout( function () {

							if ( onLoad ) onLoad( response );

							scope.manager.itemEnd( url );

						}, 0 );

					} catch ( error ) {

						// Wait for next browser tick
						window.setTimeout( function () {

							if ( onError ) onError( error );

							scope.manager.itemEnd( url );
							scope.manager.itemError( url );

						}, 0 );

					}

				} else {

					var request = new XMLHttpRequest();
					request.open( 'GET', url, true );

					request.addEventListener( 'load', function ( event ) {

						var response = event.target.response;

						Cache.add( url, response );

						if ( this.status === 200 ) {

							if ( onLoad ) onLoad( response );

							scope.manager.itemEnd( url );

						} else if ( this.status === 0 ) {

							// Some browsers return HTTP Status 0 when using non-http protocol
							// e.g. 'file://' or 'data://'. Handle as success.

							console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

							if ( onLoad ) onLoad( response );

							scope.manager.itemEnd( url );

						} else {

							if ( onError ) onError( event );

							scope.manager.itemEnd( url );
							scope.manager.itemError( url );

						}

					}, false );

					if ( onProgress !== undefined ) {

						request.addEventListener( 'progress', function ( event ) {

							onProgress( event );

						}, false );

					}

					request.addEventListener( 'error', function ( event ) {

						if ( onError ) onError( event );

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					}, false );

					if ( this.responseType !== undefined ) request.responseType = this.responseType;
					if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

					if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

					for ( var header in this.requestHeader ) {

						request.setRequestHeader( header, this.requestHeader[ header ] );

					}

					request.send( null );

				}

				scope.manager.itemStart( url );

				return request;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			},

			setResponseType: function ( value ) {

				this.responseType = value;
				return this;

			},

			setWithCredentials: function ( value ) {

				this.withCredentials = value;
				return this;

			},

			setMimeType: function ( value ) {

				this.mimeType = value;
				return this;

			},

			setRequestHeader: function ( value ) {

				this.requestHeader = value;
				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Abstract Base class to block based textures loader (dds, pvr, ...)
		 */

		function CompressedTextureLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

			// override in sub classes
			this._parser = null;

		}

		Object.assign( CompressedTextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var images = [];

				var texture = new CompressedTexture();
				texture.image = images;

				var loader = new FileLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'arraybuffer' );

				function loadTexture( i ) {

					loader.load( url[ i ], function ( buffer ) {

						var texDatas = scope._parser( buffer, true );

						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};

						loaded += 1;

						if ( loaded === 6 ) {

							if ( texDatas.mipmapCount === 1 )
								texture.minFilter = LinearFilter;

							texture.format = texDatas.format;
							texture.needsUpdate = true;

							if ( onLoad ) onLoad( texture );

						}

					}, onProgress, onError );

				}

				if ( Array.isArray( url ) ) {

					var loaded = 0;

					for ( var i = 0, il = url.length; i < il; ++ i ) {

						loadTexture( i );

					}

				} else {

					// compressed cubemap texture stored in a single DDS file

					loader.load( url, function ( buffer ) {

						var texDatas = scope._parser( buffer, true );

						if ( texDatas.isCubemap ) {

							var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

							for ( var f = 0; f < faces; f ++ ) {

								images[ f ] = { mipmaps : [] };

								for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

									images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
									images[ f ].format = texDatas.format;
									images[ f ].width = texDatas.width;
									images[ f ].height = texDatas.height;

								}

							}

						} else {

							texture.image.width = texDatas.width;
							texture.image.height = texDatas.height;
							texture.mipmaps = texDatas.mipmaps;

						}

						if ( texDatas.mipmapCount === 1 ) {

							texture.minFilter = LinearFilter;

						}

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}, onProgress, onError );

				}

				return texture;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		/**
		 * @author Nikos M. / https://github.com/foo123/
		 *
		 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
		 */

		function DataTextureLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

			// override in sub classes
			this._parser = null;

		}

		Object.assign( DataTextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var texture = new DataTexture();

				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );

				loader.load( url, function ( buffer ) {

					var texData = scope._parser( buffer );

					if ( ! texData ) return;

					if ( undefined !== texData.image ) {

						texture.image = texData.image;

					} else if ( undefined !== texData.data ) {

						texture.image.width = texData.width;
						texture.image.height = texData.height;
						texture.image.data = texData.data;

					}

					texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
					texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

					texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
					texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

					texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

					if ( undefined !== texData.format ) {

						texture.format = texData.format;

					}
					if ( undefined !== texData.type ) {

						texture.type = texData.type;

					}

					if ( undefined !== texData.mipmaps ) {

						texture.mipmaps = texData.mipmaps;

					}

					if ( 1 === texData.mipmapCount ) {

						texture.minFilter = LinearFilter;

					}

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture, texData );

				}, onProgress, onError );


				return texture;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function ImageLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( ImageLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				if ( url === undefined ) url = '';

				if ( this.path !== undefined ) url = this.path + url;

				var scope = this;

				var cached = Cache.get( url );

				if ( cached !== undefined ) {

					scope.manager.itemStart( url );

					setTimeout( function () {

						if ( onLoad ) onLoad( cached );

						scope.manager.itemEnd( url );

					}, 0 );

					return cached;

				}

				var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

				image.addEventListener( 'load', function () {

					Cache.add( url, this );

					if ( onLoad ) onLoad( this );

					scope.manager.itemEnd( url );

				}, false );

				/*
				image.addEventListener( 'progress', function ( event ) {

					if ( onProgress ) onProgress( event );

				}, false );
				*/

				image.addEventListener( 'error', function ( event ) {

					if ( onError ) onError( event );

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, false );

				if ( url.substr( 0, 5 ) !== 'data:' ) {

					if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

				}

				scope.manager.itemStart( url );

				image.src = url;

				return image;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function CubeTextureLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( CubeTextureLoader.prototype, {

			load: function ( urls, onLoad, onProgress, onError ) {

				var texture = new CubeTexture();

				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );

				var loaded = 0;

				function loadTexture( i ) {

					loader.load( urls[ i ], function ( image ) {

						texture.images[ i ] = image;

						loaded ++;

						if ( loaded === 6 ) {

							texture.needsUpdate = true;

							if ( onLoad ) onLoad( texture );

						}

					}, undefined, onError );

				}

				for ( var i = 0; i < urls.length; ++ i ) {

					loadTexture( i );

				}

				return texture;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function TextureLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( TextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );

				var texture = new Texture();
				texture.image = loader.load( url, function () {

					// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
					var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

					texture.format = isJPEG ? RGBFormat : RGBAFormat;
					texture.needsUpdate = true;

					if ( onLoad !== undefined ) {

						onLoad( texture );

					}

				}, onProgress, onError );

				return texture;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Light( color, intensity ) {

			Object3D.call( this );

			this.type = 'Light';

			this.color = new Color( color );
			this.intensity = intensity !== undefined ? intensity : 1;

			this.receiveShadow = undefined;

		}

		Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Light,

			isLight: true,

			copy: function ( source ) {

				Object3D.prototype.copy.call( this, source );

				this.color.copy( source.color );
				this.intensity = source.intensity;

				return this;

			},

			toJSON: function ( meta ) {

				var data = Object3D.prototype.toJSON.call( this, meta );

				data.object.color = this.color.getHex();
				data.object.intensity = this.intensity;

				if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

				if ( this.distance !== undefined ) data.object.distance = this.distance;
				if ( this.angle !== undefined ) data.object.angle = this.angle;
				if ( this.decay !== undefined ) data.object.decay = this.decay;
				if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

				if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

				return data;

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function HemisphereLight( skyColor, groundColor, intensity ) {

			Light.call( this, skyColor, intensity );

			this.type = 'HemisphereLight';

			this.castShadow = undefined;

			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();

			this.groundColor = new Color( groundColor );

		}

		HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: HemisphereLight,

			isHemisphereLight: true,

			copy: function ( source ) {

				Light.prototype.copy.call( this, source );

				this.groundColor.copy( source.groundColor );

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function LightShadow( camera ) {

			this.camera = camera;

			this.bias = 0;
			this.radius = 1;

			this.mapSize = new Vector2( 512, 512 );

			this.map = null;
			this.matrix = new Matrix4();

		}

		Object.assign( LightShadow.prototype, {

			copy: function ( source ) {

				this.camera = source.camera.clone();

				this.bias = source.bias;
				this.radius = source.radius;

				this.mapSize.copy( source.mapSize );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			toJSON: function () {

				var object = {};

				if ( this.bias !== 0 ) object.bias = this.bias;
				if ( this.radius !== 1 ) object.radius = this.radius;
				if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

				object.camera = this.camera.toJSON( false ).object;
				delete object.camera.matrix;

				return object;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function SpotLightShadow() {

			LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

		}

		SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

			constructor: SpotLightShadow,

			isSpotLightShadow: true,

			update: function ( light ) {

				var camera = this.camera;

				var fov = _Math.RAD2DEG * 2 * light.angle;
				var aspect = this.mapSize.width / this.mapSize.height;
				var far = light.distance || camera.far;

				if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

					camera.fov = fov;
					camera.aspect = aspect;
					camera.far = far;
					camera.updateProjectionMatrix();

				}

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

			Light.call( this, color, intensity );

			this.type = 'SpotLight';

			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();

			this.target = new Object3D();

			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * Math.PI;
				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / Math.PI;
				}
			} );

			this.distance = ( distance !== undefined ) ? distance : 0;
			this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
			this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

			this.shadow = new SpotLightShadow();

		}

		SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: SpotLight,

			isSpotLight: true,

			copy: function ( source ) {

				Light.prototype.copy.call( this, source );

				this.distance = source.distance;
				this.angle = source.angle;
				this.penumbra = source.penumbra;
				this.decay = source.decay;

				this.target = source.target.clone();

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */


		function PointLight( color, intensity, distance, decay ) {

			Light.call( this, color, intensity );

			this.type = 'PointLight';

			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * 4 * Math.PI;

				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / ( 4 * Math.PI );
				}
			} );

			this.distance = ( distance !== undefined ) ? distance : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

			this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

		}

		PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: PointLight,

			isPointLight: true,

			copy: function ( source ) {

				Light.prototype.copy.call( this, source );

				this.distance = source.distance;
				this.decay = source.decay;

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function DirectionalLightShadow( ) {

			LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

		}

		DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

			constructor: DirectionalLightShadow

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function DirectionalLight( color, intensity ) {

			Light.call( this, color, intensity );

			this.type = 'DirectionalLight';

			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();

			this.target = new Object3D();

			this.shadow = new DirectionalLightShadow();

		}

		DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: DirectionalLight,

			isDirectionalLight: true,

			copy: function ( source ) {

				Light.prototype.copy.call( this, source );

				this.target = source.target.clone();

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function AmbientLight( color, intensity ) {

			Light.call( this, color, intensity );

			this.type = 'AmbientLight';

			this.castShadow = undefined;

		}

		AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: AmbientLight,

			isAmbientLight: true

		} );

		/**
		 * @author abelnation / http://github.com/abelnation
		 */

		function RectAreaLight( color, intensity, width, height ) {

			Light.call( this, color, intensity );

			this.type = 'RectAreaLight';

			this.position.set( 0, 1, 0 );
			this.updateMatrix();

			this.width = ( width !== undefined ) ? width : 10;
			this.height = ( height !== undefined ) ? height : 10;

			// TODO (abelnation): distance/decay

			// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

			// TODO (abelnation): shadows

		}

		// TODO (abelnation): RectAreaLight update when light shape is changed
		RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

			constructor: RectAreaLight,

			isRectAreaLight: true,

			copy: function ( source ) {

				Light.prototype.copy.call( this, source );

				this.width = source.width;
				this.height = source.height;

				return this;

			},

			toJSON: function ( meta ) {

				var data = Light.prototype.toJSON.call( this, meta );

				data.object.width = this.width;
				data.object.height = this.height;

				return data;

			}

		} );

		/**
		 * @author tschw
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */

		var AnimationUtils = {

			// same as Array.prototype.slice, but also works on typed arrays
			arraySlice: function ( array, from, to ) {

				if ( AnimationUtils.isTypedArray( array ) ) {

					// in ios9 array.subarray(from, undefined) will return empty array
					// but array.subarray(from) or array.subarray(from, len) is correct
					return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

				}

				return array.slice( from, to );

			},

			// converts an array to a specific type
			convertArray: function ( array, type, forceClone ) {

				if ( ! array || // let 'undefined' and 'null' pass
						! forceClone && array.constructor === type ) return array;

				if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

					return new type( array ); // create typed array

				}

				return Array.prototype.slice.call( array ); // create Array

			},

			isTypedArray: function ( object ) {

				return ArrayBuffer.isView( object ) &&
						! ( object instanceof DataView );

			},

			// returns an array by which times and values can be sorted
			getKeyframeOrder: function ( times ) {

				function compareTime( i, j ) {

					return times[ i ] - times[ j ];

				}

				var n = times.length;
				var result = new Array( n );
				for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

				result.sort( compareTime );

				return result;

			},

			// uses the array previously returned by 'getKeyframeOrder' to sort data
			sortedArray: function ( values, stride, order ) {

				var nValues = values.length;
				var result = new values.constructor( nValues );

				for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

					var srcOffset = order[ i ] * stride;

					for ( var j = 0; j !== stride; ++ j ) {

						result[ dstOffset ++ ] = values[ srcOffset + j ];

					}

				}

				return result;

			},

			// function for parsing AOS keyframe formats
			flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

				var i = 1, key = jsonKeys[ 0 ];

				while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

					key = jsonKeys[ i ++ ];

				}

				if ( key === undefined ) return; // no data

				var value = key[ valuePropertyName ];
				if ( value === undefined ) return; // no data

				if ( Array.isArray( value ) ) {

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							values.push.apply( values, value ); // push all elements

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				} else if ( value.toArray !== undefined ) {

					// ...assume THREE.Math-ish

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							value.toArray( values, values.length );

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				} else {

					// otherwise push as-is

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							values.push( value );

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				}

			}

		};

		/**
		 * Abstract base class of interpolants over parametric samples.
		 *
		 * The parameter domain is one dimensional, typically the time or a path
		 * along a curve defined by the data.
		 *
		 * The sample values can have any dimensionality and derived classes may
		 * apply special interpretations to the data.
		 *
		 * This class provides the interval seek in a Template Method, deferring
		 * the actual interpolation to derived classes.
		 *
		 * Time complexity is O(1) for linear access crossing at most two points
		 * and O(log N) for random access, where N is the number of positions.
		 *
		 * References:
		 *
		 * 		http://www.oodesign.com/template-method-pattern.html
		 *
		 * @author tschw
		 */

		function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;

			this.resultBuffer = resultBuffer !== undefined ?
					resultBuffer : new sampleValues.constructor( sampleSize );
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;

		}

		Object.assign( Interpolant.prototype, {

			evaluate: function( t ) {

				var pp = this.parameterPositions,
					i1 = this._cachedIndex,

					t1 = pp[   i1   ],
					t0 = pp[ i1 - 1 ];

				validate_interval: {

					seek: {

						var right;

						linear_scan: {
							//- See http://jsperf.com/comparison-to-undefined/3
							//- slower code:
							//-
							//- 				if ( t >= t1 || t1 === undefined ) {
							forward_scan: if ( ! ( t < t1 ) ) {

								for ( var giveUpAt = i1 + 2; ;) {

									if ( t1 === undefined ) {

										if ( t < t0 ) break forward_scan;

										// after end

										i1 = pp.length;
										this._cachedIndex = i1;
										return this.afterEnd_( i1 - 1, t, t0 );

									}

									if ( i1 === giveUpAt ) break; // this loop

									t0 = t1;
									t1 = pp[ ++ i1 ];

									if ( t < t1 ) {

										// we have arrived at the sought interval
										break seek;

									}

								}

								// prepare binary search on the right side of the index
								right = pp.length;
								break linear_scan;

							}

							//- slower code:
							//-					if ( t < t0 || t0 === undefined ) {
							if ( ! ( t >= t0 ) ) {

								// looping?

								var t1global = pp[ 1 ];

								if ( t < t1global ) {

									i1 = 2; // + 1, using the scan for the details
									t0 = t1global;

								}

								// linear reverse scan

								for ( var giveUpAt = i1 - 2; ;) {

									if ( t0 === undefined ) {

										// before start

										this._cachedIndex = 0;
										return this.beforeStart_( 0, t, t1 );

									}

									if ( i1 === giveUpAt ) break; // this loop

									t1 = t0;
									t0 = pp[ -- i1 - 1 ];

									if ( t >= t0 ) {

										// we have arrived at the sought interval
										break seek;

									}

								}

								// prepare binary search on the left side of the index
								right = i1;
								i1 = 0;
								break linear_scan;

							}

							// the interval is valid

							break validate_interval;

						} // linear scan

						// binary search

						while ( i1 < right ) {

							var mid = ( i1 + right ) >>> 1;

							if ( t < pp[ mid ] ) {

								right = mid;

							} else {

								i1 = mid + 1;

							}

						}

						t1 = pp[   i1   ];
						t0 = pp[ i1 - 1 ];

						// check boundary cases, again

						if ( t0 === undefined ) {

							this._cachedIndex = 0;
							return this.beforeStart_( 0, t, t1 );

						}

						if ( t1 === undefined ) {

							i1 = pp.length;
							this._cachedIndex = i1;
							return this.afterEnd_( i1 - 1, t0, t );

						}

					} // seek

					this._cachedIndex = i1;

					this.intervalChanged_( i1, t0, t1 );

				} // validate_interval

				return this.interpolate_( i1, t0, t, t1 );

			},

			settings: null, // optional, subclass-specific settings structure
			// Note: The indirection allows central control of many interpolants.

			// --- Protected interface

			DefaultSettings_: {},

			getSettings_: function() {

				return this.settings || this.DefaultSettings_;

			},

			copySampleValue_: function( index ) {

				// copies a sample value to the result buffer

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
					offset = index * stride;

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] = values[ offset + i ];

				}

				return result;

			},

			// Template methods for derived classes:

			interpolate_: function( i1, t0, t, t1 ) {

				throw new Error( "call to abstract method" );
				// implementations shall return this.resultBuffer

			},

			intervalChanged_: function( i1, t0, t1 ) {

				// empty

			}

		} );

		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( Interpolant.prototype, {

			//( 0, t, t0 ), returns this.resultBuffer
			beforeStart_: Interpolant.prototype.copySampleValue_,

			//( N-1, tN-1, t ), returns this.resultBuffer
			afterEnd_: Interpolant.prototype.copySampleValue_,

		} );

		/**
		 * Fast and simple cubic spline interpolant.
		 *
		 * It was derived from a Hermitian construction setting the first derivative
		 * at each sample position to the linear slope between neighboring positions
		 * over their parameter interval.
		 *
		 * @author tschw
		 */

		function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );

			this._weightPrev = -0;
			this._offsetPrev = -0;
			this._weightNext = -0;
			this._offsetNext = -0;

		}

		CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

			constructor: CubicInterpolant,

			DefaultSettings_: {

				endingStart: 	ZeroCurvatureEnding,
				endingEnd:		ZeroCurvatureEnding

			},

			intervalChanged_: function( i1, t0, t1 ) {

				var pp = this.parameterPositions,
					iPrev = i1 - 2,
					iNext = i1 + 1,

					tPrev = pp[ iPrev ],
					tNext = pp[ iNext ];

				if ( tPrev === undefined ) {

					switch ( this.getSettings_().endingStart ) {

						case ZeroSlopeEnding:

							// f'(t0) = 0
							iPrev = i1;
							tPrev = 2 * t0 - t1;

							break;

						case WrapAroundEnding:

							// use the other end of the curve
							iPrev = pp.length - 2;
							tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

							break;

						default: // ZeroCurvatureEnding

							// f''(t0) = 0 a.k.a. Natural Spline
							iPrev = i1;
							tPrev = t1;

					}

				}

				if ( tNext === undefined ) {

					switch ( this.getSettings_().endingEnd ) {

						case ZeroSlopeEnding:

							// f'(tN) = 0
							iNext = i1;
							tNext = 2 * t1 - t0;

							break;

						case WrapAroundEnding:

							// use the other end of the curve
							iNext = 1;
							tNext = t1 + pp[ 1 ] - pp[ 0 ];

							break;

						default: // ZeroCurvatureEnding

							// f''(tN) = 0, a.k.a. Natural Spline
							iNext = i1 - 1;
							tNext = t0;

					}

				}

				var halfDt = ( t1 - t0 ) * 0.5,
					stride = this.valueSize;

				this._weightPrev = halfDt / ( t0 - tPrev );
				this._weightNext = halfDt / ( tNext - t1 );
				this._offsetPrev = iPrev * stride;
				this._offsetNext = iNext * stride;

			},

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					o1 = i1 * stride,		o0 = o1 - stride,
					oP = this._offsetPrev, 	oN = this._offsetNext,
					wP = this._weightPrev,	wN = this._weightNext,

					p = ( t - t0 ) / ( t1 - t0 ),
					pp = p * p,
					ppp = pp * p;

				// evaluate polynomials

				var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
				var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
				var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
				var sN =       wN   * ppp   -           wN      * pp;

				// combine data linearly

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] =
							sP * values[ oP + i ] +
							s0 * values[ o0 + i ] +
							s1 * values[ o1 + i ] +
							sN * values[ oN + i ];

				}

				return result;

			}

		} );

		/**
		 * @author tschw
		 */

		function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		}

		LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

			constructor: LinearInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					offset1 = i1 * stride,
					offset0 = offset1 - stride,

					weight1 = ( t - t0 ) / ( t1 - t0 ),
					weight0 = 1 - weight1;

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] =
							values[ offset0 + i ] * weight0 +
							values[ offset1 + i ] * weight1;

				}

				return result;

			}

		} );

		/**
		 *
		 * Interpolant that evaluates to the sample value at the position preceeding
		 * the parameter.
		 *
		 * @author tschw
		 */

		function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		}

		DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

			constructor: DiscreteInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				return this.copySampleValue_( i1 - 1 );

			}

		} );

		var KeyframeTrackPrototype;

		KeyframeTrackPrototype = {

			TimeBufferType: Float32Array,
			ValueBufferType: Float32Array,

			DefaultInterpolation: InterpolateLinear,

			InterpolantFactoryMethodDiscrete: function ( result ) {

				return new DiscreteInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodLinear: function ( result ) {

				return new LinearInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodSmooth: function ( result ) {

				return new CubicInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			setInterpolation: function ( interpolation ) {

				var factoryMethod;

				switch ( interpolation ) {

					case InterpolateDiscrete:

						factoryMethod = this.InterpolantFactoryMethodDiscrete;

						break;

					case InterpolateLinear:

						factoryMethod = this.InterpolantFactoryMethodLinear;

						break;

					case InterpolateSmooth:

						factoryMethod = this.InterpolantFactoryMethodSmooth;

						break;

				}

				if ( factoryMethod === undefined ) {

					var message = "unsupported interpolation for " +
							this.ValueTypeName + " keyframe track named " + this.name;

					if ( this.createInterpolant === undefined ) {

						// fall back to default, unless the default itself is messed up
						if ( interpolation !== this.DefaultInterpolation ) {

							this.setInterpolation( this.DefaultInterpolation );

						} else {

							throw new Error( message ); // fatal, in this case

						}

					}

					console.warn( 'THREE.KeyframeTrackPrototype:', message );
					return;

				}

				this.createInterpolant = factoryMethod;

			},

			getInterpolation: function () {

				switch ( this.createInterpolant ) {

					case this.InterpolantFactoryMethodDiscrete:

						return InterpolateDiscrete;

					case this.InterpolantFactoryMethodLinear:

						return InterpolateLinear;

					case this.InterpolantFactoryMethodSmooth:

						return InterpolateSmooth;

				}

			},

			getValueSize: function () {

				return this.values.length / this.times.length;

			},

			// move all keyframes either forwards or backwards in time
			shift: function ( timeOffset ) {

				if ( timeOffset !== 0.0 ) {

					var times = this.times;

					for ( var i = 0, n = times.length; i !== n; ++ i ) {

						times[ i ] += timeOffset;

					}

				}

				return this;

			},

			// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
			scale: function ( timeScale ) {

				if ( timeScale !== 1.0 ) {

					var times = this.times;

					for ( var i = 0, n = times.length; i !== n; ++ i ) {

						times[ i ] *= timeScale;

					}

				}

				return this;

			},

			// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
			// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
			trim: function ( startTime, endTime ) {

				var times = this.times,
					nKeys = times.length,
					from = 0,
					to = nKeys - 1;

				while ( from !== nKeys && times[ from ] < startTime ) ++ from;
				while ( to !== - 1 && times[ to ] > endTime ) -- to;

				++ to; // inclusive -> exclusive bound

				if ( from !== 0 || to !== nKeys ) {

					// empty tracks are forbidden, so keep at least one keyframe
					if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

					var stride = this.getValueSize();
					this.times = AnimationUtils.arraySlice( times, from, to );
					this.values = AnimationUtils.
							arraySlice( this.values, from * stride, to * stride );

				}

				return this;

			},

			// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
			validate: function () {

				var valid = true;

				var valueSize = this.getValueSize();
				if ( valueSize - Math.floor( valueSize ) !== 0 ) {

					console.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );
					valid = false;

				}

				var times = this.times,
					values = this.values,

					nKeys = times.length;

				if ( nKeys === 0 ) {

					console.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );
					valid = false;

				}

				var prevTime = null;

				for ( var i = 0; i !== nKeys; i ++ ) {

					var currTime = times[ i ];

					if ( typeof currTime === 'number' && isNaN( currTime ) ) {

						console.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );
						valid = false;
						break;

					}

					if ( prevTime !== null && prevTime > currTime ) {

						console.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );
						valid = false;
						break;

					}

					prevTime = currTime;

				}

				if ( values !== undefined ) {

					if ( AnimationUtils.isTypedArray( values ) ) {

						for ( var i = 0, n = values.length; i !== n; ++ i ) {

							var value = values[ i ];

							if ( isNaN( value ) ) {

								console.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );
								valid = false;
								break;

							}

						}

					}

				}

				return valid;

			},

			// removes equivalent sequential keys as common in morph target sequences
			// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
			optimize: function () {

				var times = this.times,
					values = this.values,
					stride = this.getValueSize(),

					smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

					writeIndex = 1,
					lastIndex = times.length - 1;

				for ( var i = 1; i < lastIndex; ++ i ) {

					var keep = false;

					var time = times[ i ];
					var timeNext = times[ i + 1 ];

					// remove adjacent keyframes scheduled at the same time

					if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

						if ( ! smoothInterpolation ) {

							// remove unnecessary keyframes same as their neighbors

							var offset = i * stride,
								offsetP = offset - stride,
								offsetN = offset + stride;

							for ( var j = 0; j !== stride; ++ j ) {

								var value = values[ offset + j ];

								if ( value !== values[ offsetP + j ] ||
										value !== values[ offsetN + j ] ) {

									keep = true;
									break;

								}

							}

						} else keep = true;

					}

					// in-place compaction

					if ( keep ) {

						if ( i !== writeIndex ) {

							times[ writeIndex ] = times[ i ];

							var readOffset = i * stride,
								writeOffset = writeIndex * stride;

							for ( var j = 0; j !== stride; ++ j )

								values[ writeOffset + j ] = values[ readOffset + j ];

						}

						++ writeIndex;

					}

				}

				// flush last keyframe (compaction looks ahead)

				if ( lastIndex > 0 ) {

					times[ writeIndex ] = times[ lastIndex ];

					for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

						values[ writeOffset + j ] = values[ readOffset + j ];

					++ writeIndex;

				}

				if ( writeIndex !== times.length ) {

					this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
					this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

				}

				return this;

			}

		};

		function KeyframeTrackConstructor( name, times, values, interpolation ) {

			if ( name === undefined ) throw new Error( "track name is undefined" );

			if ( times === undefined || times.length === 0 ) {

				throw new Error( "no keyframes in track named " + name );

			}

			this.name = name;

			this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
			this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

			this.setInterpolation( interpolation || this.DefaultInterpolation );

			this.validate();
			this.optimize();

		}

		/**
		 *
		 * A Track of vectored keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function VectorKeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.call( this, name, times, values, interpolation );

		}

		VectorKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: VectorKeyframeTrack,

			ValueTypeName: 'vector'

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited

		} );

		/**
		 * Spherical linear unit quaternion interpolant.
		 *
		 * @author tschw
		 */

		function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		}

		QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

			constructor: QuaternionLinearInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					offset = i1 * stride,

					alpha = ( t - t0 ) / ( t1 - t0 );

				for ( var end = offset + stride; offset !== end; offset += 4 ) {

					Quaternion.slerpFlat( result, 0,
							values, offset - stride, values, offset, alpha );

				}

				return result;

			}

		} );

		/**
		 *
		 * A Track of quaternion keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function QuaternionKeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.call( this, name, times, values, interpolation );

		}

		QuaternionKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: QuaternionKeyframeTrack,

			ValueTypeName: 'quaternion',

			// ValueBufferType is inherited

			DefaultInterpolation: InterpolateLinear,

			InterpolantFactoryMethodLinear: function( result ) {

				return new QuaternionLinearInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodSmooth: undefined // not yet implemented

		} );

		/**
		 *
		 * A Track of numeric keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function NumberKeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.call( this, name, times, values, interpolation );

		}

		NumberKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: NumberKeyframeTrack,

			ValueTypeName: 'number'

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited

		} );

		/**
		 *
		 * A Track that interpolates Strings
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function StringKeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.call( this, name, times, values, interpolation );

		}

		StringKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: StringKeyframeTrack,

			ValueTypeName: 'string',
			ValueBufferType: Array,

			DefaultInterpolation: InterpolateDiscrete,

			InterpolantFactoryMethodLinear: undefined,

			InterpolantFactoryMethodSmooth: undefined

		} );

		/**
		 *
		 * A Track of Boolean keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function BooleanKeyframeTrack( name, times, values ) {

			KeyframeTrackConstructor.call( this, name, times, values );

		}

		BooleanKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: BooleanKeyframeTrack,

			ValueTypeName: 'bool',
			ValueBufferType: Array,

			DefaultInterpolation: InterpolateDiscrete,

			InterpolantFactoryMethodLinear: undefined,
			InterpolantFactoryMethodSmooth: undefined

			// Note: Actually this track could have a optimized / compressed
			// representation of a single value and a custom interpolant that
			// computes "firstValue ^ isOdd( index )".

		} );

		/**
		 *
		 * A Track of keyframe values that represent color.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function ColorKeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.call( this, name, times, values, interpolation );

		}

		ColorKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {

			constructor: ColorKeyframeTrack,

			ValueTypeName: 'color'

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited


			// Note: Very basic implementation and nothing special yet.
			// However, this is the place for color space parameterization.

		} );

		/**
		 *
		 * A timed sequence of keyframes for a specific property.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function KeyframeTrack( name, times, values, interpolation ) {

			KeyframeTrackConstructor.apply( this, arguments );

		}

		KeyframeTrack.prototype = KeyframeTrackPrototype;
		KeyframeTrackPrototype.constructor = KeyframeTrack;

		// Static methods:

		Object.assign( KeyframeTrack, {

			// Serialization (in static context, because of constructor invocation
			// and automatic invocation of .toJSON):

			parse: function( json ) {

				if( json.type === undefined ) {

					throw new Error( "track type undefined, can not parse" );

				}

				var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

				if ( json.times === undefined ) {

					var times = [], values = [];

					AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

					json.times = times;
					json.values = values;

				}

				// derived classes can define a static parse method
				if ( trackType.parse !== undefined ) {

					return trackType.parse( json );

				} else {

					// by default, we asssume a constructor compatible with the base
					return new trackType(
							json.name, json.times, json.values, json.interpolation );

				}

			},

			toJSON: function( track ) {

				var trackType = track.constructor;

				var json;

				// derived classes can define a static toJSON method
				if ( trackType.toJSON !== undefined ) {

					json = trackType.toJSON( track );

				} else {

					// by default, we assume the data can be serialized as-is
					json = {

						'name': track.name,
						'times': AnimationUtils.convertArray( track.times, Array ),
						'values': AnimationUtils.convertArray( track.values, Array )

					};

					var interpolation = track.getInterpolation();

					if ( interpolation !== track.DefaultInterpolation ) {

						json.interpolation = interpolation;

					}

				}

				json.type = track.ValueTypeName; // mandatory

				return json;

			},

			_getTrackTypeForValueTypeName: function( typeName ) {

				switch( typeName.toLowerCase() ) {

					case "scalar":
					case "double":
					case "float":
					case "number":
					case "integer":

						return NumberKeyframeTrack;

					case "vector":
					case "vector2":
					case "vector3":
					case "vector4":

						return VectorKeyframeTrack;

					case "color":

						return ColorKeyframeTrack;

					case "quaternion":

						return QuaternionKeyframeTrack;

					case "bool":
					case "boolean":

						return BooleanKeyframeTrack;

					case "string":

						return StringKeyframeTrack;

				}

				throw new Error( "Unsupported typeName: " + typeName );

			}

		} );

		/**
		 *
		 * Reusable set of Tracks that represent an animation.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */

		function AnimationClip( name, duration, tracks ) {

			this.name = name;
			this.tracks = tracks;
			this.duration = ( duration !== undefined ) ? duration : - 1;

			this.uuid = _Math.generateUUID();

			// this means it should figure out its duration by scanning the tracks
			if ( this.duration < 0 ) {

				this.resetDuration();

			}

			this.optimize();

		}

		Object.assign( AnimationClip, {

			parse: function ( json ) {

				var tracks = [],
					jsonTracks = json.tracks,
					frameTime = 1.0 / ( json.fps || 1.0 );

				for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

					tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

				}

				return new AnimationClip( json.name, json.duration, tracks );

			},

			toJSON: function ( clip ) {

				var tracks = [],
					clipTracks = clip.tracks;

				var json = {

					'name': clip.name,
					'duration': clip.duration,
					'tracks': tracks

				};

				for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

					tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

				}

				return json;

			},

			CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

				var numMorphTargets = morphTargetSequence.length;
				var tracks = [];

				for ( var i = 0; i < numMorphTargets; i ++ ) {

					var times = [];
					var values = [];

					times.push(
							( i + numMorphTargets - 1 ) % numMorphTargets,
							i,
							( i + 1 ) % numMorphTargets );

					values.push( 0, 1, 0 );

					var order = AnimationUtils.getKeyframeOrder( times );
					times = AnimationUtils.sortedArray( times, 1, order );
					values = AnimationUtils.sortedArray( values, 1, order );

					// if there is a key at the first frame, duplicate it as the
					// last frame as well for perfect loop.
					if ( ! noLoop && times[ 0 ] === 0 ) {

						times.push( numMorphTargets );
						values.push( values[ 0 ] );

					}

					tracks.push(
							new NumberKeyframeTrack(
								'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
								times, values
							).scale( 1.0 / fps ) );

				}

				return new AnimationClip( name, - 1, tracks );

			},

			findByName: function ( objectOrClipArray, name ) {

				var clipArray = objectOrClipArray;

				if ( ! Array.isArray( objectOrClipArray ) ) {

					var o = objectOrClipArray;
					clipArray = o.geometry && o.geometry.animations || o.animations;

				}

				for ( var i = 0; i < clipArray.length; i ++ ) {

					if ( clipArray[ i ].name === name ) {

						return clipArray[ i ];

					}

				}

				return null;

			},

			CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

				var animationToMorphTargets = {};

				// tested with https://regex101.com/ on trick sequences
				// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
				var pattern = /^([\w-]*?)([\d]+)$/;

				// sort morph target names into animation groups based
				// patterns like Walk_001, Walk_002, Run_001, Run_002
				for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

					var morphTarget = morphTargets[ i ];
					var parts = morphTarget.name.match( pattern );

					if ( parts && parts.length > 1 ) {

						var name = parts[ 1 ];

						var animationMorphTargets = animationToMorphTargets[ name ];
						if ( ! animationMorphTargets ) {

							animationToMorphTargets[ name ] = animationMorphTargets = [];

						}

						animationMorphTargets.push( morphTarget );

					}

				}

				var clips = [];

				for ( var name in animationToMorphTargets ) {

					clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

				}

				return clips;

			},

			// parse the animation.hierarchy format
			parseAnimation: function ( animation, bones ) {

				if ( ! animation ) {

					console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
					return null;

				}

				var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

					// only return track if there are actually keys.
					if ( animationKeys.length !== 0 ) {

						var times = [];
						var values = [];

						AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

						// empty keys are filtered out, so check again
						if ( times.length !== 0 ) {

							destTracks.push( new trackType( trackName, times, values ) );

						}

					}

				};

				var tracks = [];

				var clipName = animation.name || 'default';
				// automatic length determination in AnimationClip.
				var duration = animation.length || - 1;
				var fps = animation.fps || 30;

				var hierarchyTracks = animation.hierarchy || [];

				for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

					var animationKeys = hierarchyTracks[ h ].keys;

					// skip empty tracks
					if ( ! animationKeys || animationKeys.length === 0 ) continue;

					// process morph targets
					if ( animationKeys[ 0 ].morphTargets ) {

						// figure out all morph targets used in this track
						var morphTargetNames = {};

						for ( var k = 0; k < animationKeys.length; k ++ ) {

							if ( animationKeys[ k ].morphTargets ) {

								for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

									morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

								}

							}

						}

						// create a track for each morph target with all zero
						// morphTargetInfluences except for the keys in which
						// the morphTarget is named.
						for ( var morphTargetName in morphTargetNames ) {

							var times = [];
							var values = [];

							for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

								var animationKey = animationKeys[ k ];

								times.push( animationKey.time );
								values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

							}

							tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

						}

						duration = morphTargetNames.length * ( fps || 1.0 );

					} else {

						// ...assume skeletal animation

						var boneName = '.bones[' + bones[ h ].name + ']';

						addNonemptyTrack(
								VectorKeyframeTrack, boneName + '.position',
								animationKeys, 'pos', tracks );

						addNonemptyTrack(
								QuaternionKeyframeTrack, boneName + '.quaternion',
								animationKeys, 'rot', tracks );

						addNonemptyTrack(
								VectorKeyframeTrack, boneName + '.scale',
								animationKeys, 'scl', tracks );

					}

				}

				if ( tracks.length === 0 ) {

					return null;

				}

				var clip = new AnimationClip( clipName, duration, tracks );

				return clip;

			}

		} );

		Object.assign( AnimationClip.prototype, {

			resetDuration: function () {

				var tracks = this.tracks, duration = 0;

				for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

					var track = this.tracks[ i ];

					duration = Math.max( duration, track.times[ track.times.length - 1 ] );

				}

				this.duration = duration;

			},

			trim: function () {

				for ( var i = 0; i < this.tracks.length; i ++ ) {

					this.tracks[ i ].trim( 0, this.duration );

				}

				return this;

			},

			optimize: function () {

				for ( var i = 0; i < this.tracks.length; i ++ ) {

					this.tracks[ i ].optimize();

				}

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function MaterialLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.textures = {};

		}

		Object.assign( MaterialLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( JSON.parse( text ) ) );

				}, onProgress, onError );

			},

			setTextures: function ( value ) {

				this.textures = value;

			},

			parse: function ( json ) {

				var textures = this.textures;

				function getTexture( name ) {

					if ( textures[ name ] === undefined ) {

						console.warn( 'THREE.MaterialLoader: Undefined texture', name );

					}

					return textures[ name ];

				}

				var material = new Materials[ json.type ]();

				if ( json.uuid !== undefined ) material.uuid = json.uuid;
				if ( json.name !== undefined ) material.name = json.name;
				if ( json.color !== undefined ) material.color.setHex( json.color );
				if ( json.roughness !== undefined ) material.roughness = json.roughness;
				if ( json.metalness !== undefined ) material.metalness = json.metalness;
				if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
				if ( json.specular !== undefined ) material.specular.setHex( json.specular );
				if ( json.shininess !== undefined ) material.shininess = json.shininess;
				if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
				if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
				if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
				if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
				if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
				if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
				if ( json.fog !== undefined ) material.fog = json.fog;
				if ( json.shading !== undefined ) material.shading = json.shading;
				if ( json.blending !== undefined ) material.blending = json.blending;
				if ( json.side !== undefined ) material.side = json.side;
				if ( json.opacity !== undefined ) material.opacity = json.opacity;
				if ( json.transparent !== undefined ) material.transparent = json.transparent;
				if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
				if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
				if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
				if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
				if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
				if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
				if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
				if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
				if ( json.skinning !== undefined ) material.skinning = json.skinning;
				if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;

				// for PointsMaterial

				if ( json.size !== undefined ) material.size = json.size;
				if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

				// maps

				if ( json.map !== undefined ) material.map = getTexture( json.map );

				if ( json.alphaMap !== undefined ) {

					material.alphaMap = getTexture( json.alphaMap );
					material.transparent = true;

				}

				if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
				if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

				if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
				if ( json.normalScale !== undefined ) {

					var normalScale = json.normalScale;

					if ( Array.isArray( normalScale ) === false ) {

						// Blender exporter used to export a scalar. See #7459

						normalScale = [ normalScale, normalScale ];

					}

					material.normalScale = new Vector2().fromArray( normalScale );

				}

				if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
				if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
				if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

				if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
				if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

				if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
				if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

				if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

				if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

				if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

				if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
				if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

				if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
				if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

				if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

				return material;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function BufferGeometryLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( BufferGeometryLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( JSON.parse( text ) ) );

				}, onProgress, onError );

			},

			parse: function ( json ) {

				var geometry = new BufferGeometry();

				var index = json.data.index;

				if ( index !== undefined ) {

					var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
					geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

				}

				var attributes = json.data.attributes;

				for ( var key in attributes ) {

					var attribute = attributes[ key ];
					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

					geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

				}

				var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

				if ( groups !== undefined ) {

					for ( var i = 0, n = groups.length; i !== n; ++ i ) {

						var group = groups[ i ];

						geometry.addGroup( group.start, group.count, group.materialIndex );

					}

				}

				var boundingSphere = json.data.boundingSphere;

				if ( boundingSphere !== undefined ) {

					var center = new Vector3();

					if ( boundingSphere.center !== undefined ) {

						center.fromArray( boundingSphere.center );

					}

					geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

				}

				return geometry;

			}

		} );

		var TYPED_ARRAYS = {
			Int8Array: Int8Array,
			Uint8Array: Uint8Array,
			// Workaround for IE11 pre KB2929437. See #11440
			Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
			Int16Array: Int16Array,
			Uint16Array: Uint16Array,
			Int32Array: Int32Array,
			Uint32Array: Uint32Array,
			Float32Array: Float32Array,
			Float64Array: Float64Array
		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Loader() {

			this.onLoadStart = function () {};
			this.onLoadProgress = function () {};
			this.onLoadComplete = function () {};

		}

		Loader.Handlers = {

			handlers: [],

			add: function ( regex, loader ) {

				this.handlers.push( regex, loader );

			},

			get: function ( file ) {

				var handlers = this.handlers;

				for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

					var regex = handlers[ i ];
					var loader = handlers[ i + 1 ];

					if ( regex.test( file ) ) {

						return loader;

					}

				}

				return null;

			}

		};

		Object.assign( Loader.prototype, {

			crossOrigin: undefined,

			extractUrlBase: function ( url ) {

				var parts = url.split( '/' );

				if ( parts.length === 1 ) return './';

				parts.pop();

				return parts.join( '/' ) + '/';

			},

			initMaterials: function ( materials, texturePath, crossOrigin ) {

				var array = [];

				for ( var i = 0; i < materials.length; ++ i ) {

					array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

				}

				return array;

			},

			createMaterial: ( function () {

				var BlendingMode = {
					NoBlending: NoBlending,
					NormalBlending: NormalBlending,
					AdditiveBlending: AdditiveBlending,
					SubtractiveBlending: SubtractiveBlending,
					MultiplyBlending: MultiplyBlending,
					CustomBlending: CustomBlending
				};

				var color = new Color();
				var textureLoader = new TextureLoader();
				var materialLoader = new MaterialLoader();

				return function createMaterial( m, texturePath, crossOrigin ) {

					// convert from old material format

					var textures = {};

					function loadTexture( path, repeat, offset, wrap, anisotropy ) {

						var fullPath = texturePath + path;
						var loader = Loader.Handlers.get( fullPath );

						var texture;

						if ( loader !== null ) {

							texture = loader.load( fullPath );

						} else {

							textureLoader.setCrossOrigin( crossOrigin );
							texture = textureLoader.load( fullPath );

						}

						if ( repeat !== undefined ) {

							texture.repeat.fromArray( repeat );

							if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
							if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

						}

						if ( offset !== undefined ) {

							texture.offset.fromArray( offset );

						}

						if ( wrap !== undefined ) {

							if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
							if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

							if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
							if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

						}

						if ( anisotropy !== undefined ) {

							texture.anisotropy = anisotropy;

						}

						var uuid = _Math.generateUUID();

						textures[ uuid ] = texture;

						return uuid;

					}

					//

					var json = {
						uuid: _Math.generateUUID(),
						type: 'MeshLambertMaterial'
					};

					for ( var name in m ) {

						var value = m[ name ];

						switch ( name ) {

							case 'DbgColor':
							case 'DbgIndex':
							case 'opticalDensity':
							case 'illumination':
								break;
							case 'DbgName':
								json.name = value;
								break;
							case 'blending':
								json.blending = BlendingMode[ value ];
								break;
							case 'colorAmbient':
							case 'mapAmbient':
								console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
								break;
							case 'colorDiffuse':
								json.color = color.fromArray( value ).getHex();
								break;
							case 'colorSpecular':
								json.specular = color.fromArray( value ).getHex();
								break;
							case 'colorEmissive':
								json.emissive = color.fromArray( value ).getHex();
								break;
							case 'specularCoef':
								json.shininess = value;
								break;
							case 'shading':
								if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
								if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
								if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
								break;
							case 'mapDiffuse':
								json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
								break;
							case 'mapDiffuseRepeat':
							case 'mapDiffuseOffset':
							case 'mapDiffuseWrap':
							case 'mapDiffuseAnisotropy':
								break;
							case 'mapEmissive':
								json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
								break;
							case 'mapEmissiveRepeat':
							case 'mapEmissiveOffset':
							case 'mapEmissiveWrap':
							case 'mapEmissiveAnisotropy':
								break;
							case 'mapLight':
								json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
								break;
							case 'mapLightRepeat':
							case 'mapLightOffset':
							case 'mapLightWrap':
							case 'mapLightAnisotropy':
								break;
							case 'mapAO':
								json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
								break;
							case 'mapAORepeat':
							case 'mapAOOffset':
							case 'mapAOWrap':
							case 'mapAOAnisotropy':
								break;
							case 'mapBump':
								json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
								break;
							case 'mapBumpScale':
								json.bumpScale = value;
								break;
							case 'mapBumpRepeat':
							case 'mapBumpOffset':
							case 'mapBumpWrap':
							case 'mapBumpAnisotropy':
								break;
							case 'mapNormal':
								json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
								break;
							case 'mapNormalFactor':
								json.normalScale = [ value, value ];
								break;
							case 'mapNormalRepeat':
							case 'mapNormalOffset':
							case 'mapNormalWrap':
							case 'mapNormalAnisotropy':
								break;
							case 'mapSpecular':
								json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
								break;
							case 'mapSpecularRepeat':
							case 'mapSpecularOffset':
							case 'mapSpecularWrap':
							case 'mapSpecularAnisotropy':
								break;
							case 'mapMetalness':
								json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
								break;
							case 'mapMetalnessRepeat':
							case 'mapMetalnessOffset':
							case 'mapMetalnessWrap':
							case 'mapMetalnessAnisotropy':
								break;
							case 'mapRoughness':
								json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
								break;
							case 'mapRoughnessRepeat':
							case 'mapRoughnessOffset':
							case 'mapRoughnessWrap':
							case 'mapRoughnessAnisotropy':
								break;
							case 'mapAlpha':
								json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
								break;
							case 'mapAlphaRepeat':
							case 'mapAlphaOffset':
							case 'mapAlphaWrap':
							case 'mapAlphaAnisotropy':
								break;
							case 'flipSided':
								json.side = BackSide;
								break;
							case 'doubleSided':
								json.side = DoubleSide;
								break;
							case 'transparency':
								console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
								json.opacity = value;
								break;
							case 'depthTest':
							case 'depthWrite':
							case 'colorWrite':
							case 'opacity':
							case 'reflectivity':
							case 'transparent':
							case 'visible':
							case 'wireframe':
								json[ name ] = value;
								break;
							case 'vertexColors':
								if ( value === true ) json.vertexColors = VertexColors;
								if ( value === 'face' ) json.vertexColors = FaceColors;
								break;
							default:
								console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
								break;

						}

					}

					if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
					if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

					if ( json.opacity < 1 ) json.transparent = true;

					materialLoader.setTextures( textures );

					return materialLoader.parse( json );

				};

			} )()

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		function JSONLoader( manager ) {

			if ( typeof manager === 'boolean' ) {

				console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
				manager = undefined;

			}

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

			this.withCredentials = false;

		}

		Object.assign( JSONLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

				var loader = new FileLoader( this.manager );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( text ) {

					var json = JSON.parse( text );
					var metadata = json.metadata;

					if ( metadata !== undefined ) {

						var type = metadata.type;

						if ( type !== undefined ) {

							if ( type.toLowerCase() === 'object' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
								return;

							}

							if ( type.toLowerCase() === 'scene' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
								return;

							}

						}

					}

					var object = scope.parse( json, texturePath );
					onLoad( object.geometry, object.materials );

				}, onProgress, onError );

			},

			setTexturePath: function ( value ) {

				this.texturePath = value;

			},

			parse: ( function () {

				function parseModel( json, geometry ) {

					function isBitSet( value, position ) {

						return value & ( 1 << position );

					}

					var i, j, fi,

						offset, zLength,

						colorIndex, normalIndex, uvIndex, materialIndex,

						type,
						isQuad,
						hasMaterial,
						hasFaceVertexUv,
						hasFaceNormal, hasFaceVertexNormal,
						hasFaceColor, hasFaceVertexColor,

						vertex, face, faceA, faceB, hex, normal,

						uvLayer, uv, u, v,

						faces = json.faces,
						vertices = json.vertices,
						normals = json.normals,
						colors = json.colors,

						scale = json.scale,

						nUvLayers = 0;


					if ( json.uvs !== undefined ) {

						// disregard empty arrays

						for ( i = 0; i < json.uvs.length; i ++ ) {

							if ( json.uvs[ i ].length ) nUvLayers ++;

						}

						for ( i = 0; i < nUvLayers; i ++ ) {

							geometry.faceVertexUvs[ i ] = [];

						}

					}

					offset = 0;
					zLength = vertices.length;

					while ( offset < zLength ) {

						vertex = new Vector3();

						vertex.x = vertices[ offset ++ ] * scale;
						vertex.y = vertices[ offset ++ ] * scale;
						vertex.z = vertices[ offset ++ ] * scale;

						geometry.vertices.push( vertex );

					}

					offset = 0;
					zLength = faces.length;

					while ( offset < zLength ) {

						type = faces[ offset ++ ];

						isQuad = isBitSet( type, 0 );
						hasMaterial = isBitSet( type, 1 );
						hasFaceVertexUv = isBitSet( type, 3 );
						hasFaceNormal = isBitSet( type, 4 );
						hasFaceVertexNormal = isBitSet( type, 5 );
						hasFaceColor = isBitSet( type, 6 );
						hasFaceVertexColor = isBitSet( type, 7 );

						// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

						if ( isQuad ) {

							faceA = new Face3();
							faceA.a = faces[ offset ];
							faceA.b = faces[ offset + 1 ];
							faceA.c = faces[ offset + 3 ];

							faceB = new Face3();
							faceB.a = faces[ offset + 1 ];
							faceB.b = faces[ offset + 2 ];
							faceB.c = faces[ offset + 3 ];

							offset += 4;

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								faceA.materialIndex = materialIndex;
								faceB.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];
									geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

									for ( j = 0; j < 4; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new Vector2( u, v );

										if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
										if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								faceA.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								faceB.normal.copy( faceA.normal );

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 4; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);


									if ( i !== 2 ) faceA.vertexNormals.push( normal );
									if ( i !== 0 ) faceB.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								faceA.color.setHex( hex );
								faceB.color.setHex( hex );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 4; i ++ ) {

									colorIndex = faces[ offset ++ ];
									hex = colors[ colorIndex ];

									if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
									if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

								}

							}

							geometry.faces.push( faceA );
							geometry.faces.push( faceB );

						} else {

							face = new Face3();
							face.a = faces[ offset ++ ];
							face.b = faces[ offset ++ ];
							face.c = faces[ offset ++ ];

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								face.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];

									for ( j = 0; j < 3; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new Vector2( u, v );

										geometry.faceVertexUvs[ i ][ fi ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								face.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 3; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);

									face.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								face.color.setHex( colors[ colorIndex ] );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 3; i ++ ) {

									colorIndex = faces[ offset ++ ];
									face.vertexColors.push( new Color( colors[ colorIndex ] ) );

								}

							}

							geometry.faces.push( face );

						}

					}

				}

				function parseSkin( json, geometry ) {

					var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

					if ( json.skinWeights ) {

						for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

							var x = json.skinWeights[ i ];
							var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
							var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
							var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

							geometry.skinWeights.push( new Vector4( x, y, z, w ) );

						}

					}

					if ( json.skinIndices ) {

						for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

							var a = json.skinIndices[ i ];
							var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
							var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
							var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

							geometry.skinIndices.push( new Vector4( a, b, c, d ) );

						}

					}

					geometry.bones = json.bones;

					if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

						console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
							geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

					}

				}

				function parseMorphing( json, geometry ) {

					var scale = json.scale;

					if ( json.morphTargets !== undefined ) {

						for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

							geometry.morphTargets[ i ] = {};
							geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
							geometry.morphTargets[ i ].vertices = [];

							var dstVertices = geometry.morphTargets[ i ].vertices;
							var srcVertices = json.morphTargets[ i ].vertices;

							for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

								var vertex = new Vector3();
								vertex.x = srcVertices[ v ] * scale;
								vertex.y = srcVertices[ v + 1 ] * scale;
								vertex.z = srcVertices[ v + 2 ] * scale;

								dstVertices.push( vertex );

							}

						}

					}

					if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

						console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

						var faces = geometry.faces;
						var morphColors = json.morphColors[ 0 ].colors;

						for ( var i = 0, l = faces.length; i < l; i ++ ) {

							faces[ i ].color.fromArray( morphColors, i * 3 );

						}

					}

				}

				function parseAnimations( json, geometry ) {

					var outputAnimations = [];

					// parse old style Bone/Hierarchy animations
					var animations = [];

					if ( json.animation !== undefined ) {

						animations.push( json.animation );

					}

					if ( json.animations !== undefined ) {

						if ( json.animations.length ) {

							animations = animations.concat( json.animations );

						} else {

							animations.push( json.animations );

						}

					}

					for ( var i = 0; i < animations.length; i ++ ) {

						var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
						if ( clip ) outputAnimations.push( clip );

					}

					// parse implicit morph animations
					if ( geometry.morphTargets ) {

						// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
						var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
						outputAnimations = outputAnimations.concat( morphAnimationClips );

					}

					if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

				}

				return function ( json, texturePath ) {

					if ( json.data !== undefined ) {

						// Geometry 4.0 spec
						json = json.data;

					}

					if ( json.scale !== undefined ) {

						json.scale = 1.0 / json.scale;

					} else {

						json.scale = 1.0;

					}

					var geometry = new Geometry();

					parseModel( json, geometry );
					parseSkin( json, geometry );
					parseMorphing( json, geometry );
					parseAnimations( json, geometry );

					geometry.computeFaceNormals();
					geometry.computeBoundingSphere();

					if ( json.materials === undefined || json.materials.length === 0 ) {

						return { geometry: geometry };

					} else {

						var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

						return { geometry: geometry, materials: materials };

					}

				};

			} )()

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function ObjectLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.texturePath = '';

		}

		Object.assign( ObjectLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				if ( this.texturePath === '' ) {

					this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

				}

				var scope = this;

				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {

					var json = null;

					try {

						json = JSON.parse( text );

					} catch ( error ) {

						if ( onError !== undefined ) onError( error );

						console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

						return;

					}

					var metadata = json.metadata;

					if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

						console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
						return;

					}

					scope.parse( json, onLoad );

				}, onProgress, onError );

			},

			setTexturePath: function ( value ) {

				this.texturePath = value;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;

			},

			parse: function ( json, onLoad ) {

				var geometries = this.parseGeometries( json.geometries );

				var images = this.parseImages( json.images, function () {

					if ( onLoad !== undefined ) onLoad( object );

				} );

				var textures = this.parseTextures( json.textures, images );
				var materials = this.parseMaterials( json.materials, textures );

				var object = this.parseObject( json.object, geometries, materials );

				if ( json.animations ) {

					object.animations = this.parseAnimations( json.animations );

				}

				if ( json.images === undefined || json.images.length === 0 ) {

					if ( onLoad !== undefined ) onLoad( object );

				}

				return object;

			},

			parseGeometries: function ( json ) {

				var geometries = {};

				if ( json !== undefined ) {

					var geometryLoader = new JSONLoader();
					var bufferGeometryLoader = new BufferGeometryLoader();

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var geometry;
						var data = json[ i ];

						switch ( data.type ) {

							case 'PlaneGeometry':
							case 'PlaneBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.widthSegments,
									data.heightSegments
								);

								break;

							case 'BoxGeometry':
							case 'BoxBufferGeometry':
							case 'CubeGeometry': // backwards compatible

								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.depth,
									data.widthSegments,
									data.heightSegments,
									data.depthSegments
								);

								break;

							case 'CircleGeometry':
							case 'CircleBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.segments,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'CylinderGeometry':
							case 'CylinderBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radiusTop,
									data.radiusBottom,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'ConeGeometry':
							case 'ConeBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'SphereGeometry':
							case 'SphereBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.widthSegments,
									data.heightSegments,
									data.phiStart,
									data.phiLength,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'DodecahedronGeometry':
							case 'IcosahedronGeometry':
							case 'OctahedronGeometry':
							case 'TetrahedronGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.detail
								);

								break;

							case 'RingGeometry':
							case 'RingBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.innerRadius,
									data.outerRadius,
									data.thetaSegments,
									data.phiSegments,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'TorusGeometry':
							case 'TorusBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.radialSegments,
									data.tubularSegments,
									data.arc
								);

								break;

							case 'TorusKnotGeometry':
							case 'TorusKnotBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.tubularSegments,
									data.radialSegments,
									data.p,
									data.q
								);

								break;

							case 'LatheGeometry':
							case 'LatheBufferGeometry':

								geometry = new Geometries[ data.type ](
									data.points,
									data.segments,
									data.phiStart,
									data.phiLength
								);

								break;

							case 'BufferGeometry':

								geometry = bufferGeometryLoader.parse( data );

								break;

							case 'Geometry':

								geometry = geometryLoader.parse( data, this.texturePath ).geometry;

								break;

							default:

								console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

								continue;

						}

						geometry.uuid = data.uuid;

						if ( data.name !== undefined ) geometry.name = data.name;

						geometries[ data.uuid ] = geometry;

					}

				}

				return geometries;

			},

			parseMaterials: function ( json, textures ) {

				var materials = {};

				if ( json !== undefined ) {

					var loader = new MaterialLoader();
					loader.setTextures( textures );

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var data = json[ i ];

						if ( data.type === 'MultiMaterial' ) {

							// Deprecated

							var array = [];

							for ( var j = 0; j < data.materials.length; j ++ ) {

								array.push( loader.parse( data.materials[ j ] ) );

							}

							materials[ data.uuid ] = array;

						} else {

							materials[ data.uuid ] = loader.parse( data );

						}

					}

				}

				return materials;

			},

			parseAnimations: function ( json ) {

				var animations = [];

				for ( var i = 0; i < json.length; i ++ ) {

					var clip = AnimationClip.parse( json[ i ] );

					animations.push( clip );

				}

				return animations;

			},

			parseImages: function ( json, onLoad ) {

				var scope = this;
				var images = {};

				function loadImage( url ) {

					scope.manager.itemStart( url );

					return loader.load( url, function () {

						scope.manager.itemEnd( url );

					}, undefined, function () {

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					} );

				}

				if ( json !== undefined && json.length > 0 ) {

					var manager = new LoadingManager( onLoad );

					var loader = new ImageLoader( manager );
					loader.setCrossOrigin( this.crossOrigin );

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var image = json[ i ];
						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

						images[ image.uuid ] = loadImage( path );

					}

				}

				return images;

			},

			parseTextures: function ( json, images ) {

				function parseConstant( value, type ) {

					if ( typeof( value ) === 'number' ) return value;

					console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

					return type[ value ];

				}

				var textures = {};

				if ( json !== undefined ) {

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var data = json[ i ];

						if ( data.image === undefined ) {

							console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

						}

						if ( images[ data.image ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

						}

						var texture = new Texture( images[ data.image ] );
						texture.needsUpdate = true;

						texture.uuid = data.uuid;

						if ( data.name !== undefined ) texture.name = data.name;

						if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

						if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
						if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
						if ( data.wrap !== undefined ) {

							texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
							texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

						}

						if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
						if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
						if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

						if ( data.flipY !== undefined ) texture.flipY = data.flipY;

						textures[ data.uuid ] = texture;

					}

				}

				return textures;

			},

			parseObject: function () {

				var matrix = new Matrix4();

				return function parseObject( data, geometries, materials ) {

					var object;

					function getGeometry( name ) {

						if ( geometries[ name ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

						}

						return geometries[ name ];

					}

					function getMaterial( name ) {

						if ( name === undefined ) return undefined;

						if ( Array.isArray( name ) ) {

							var array = [];

							for ( var i = 0, l = name.length; i < l; i ++ ) {

								var uuid = name[ i ];

								if ( materials[ uuid ] === undefined ) {

									console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

								}

								array.push( materials[ uuid ] );

							}

							return array;

						}

						if ( materials[ name ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', name );

						}

						return materials[ name ];

					}

					switch ( data.type ) {

						case 'Scene':

							object = new Scene();

							if ( data.background !== undefined ) {

								if ( Number.isInteger( data.background ) ) {

									object.background = new Color( data.background );

								}

							}

							if ( data.fog !== undefined ) {

								if ( data.fog.type === 'Fog' ) {

									object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

								} else if ( data.fog.type === 'FogExp2' ) {

									object.fog = new FogExp2( data.fog.color, data.fog.density );

								}

							}

							break;

						case 'PerspectiveCamera':

							object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

							if ( data.focus !== undefined ) object.focus = data.focus;
							if ( data.zoom !== undefined ) object.zoom = data.zoom;
							if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
							if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
							if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

							break;

						case 'OrthographicCamera':

							object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

							break;

						case 'AmbientLight':

							object = new AmbientLight( data.color, data.intensity );

							break;

						case 'DirectionalLight':

							object = new DirectionalLight( data.color, data.intensity );

							break;

						case 'PointLight':

							object = new PointLight( data.color, data.intensity, data.distance, data.decay );

							break;

						case 'RectAreaLight':

							object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

							break;

						case 'SpotLight':

							object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

							break;

						case 'HemisphereLight':

							object = new HemisphereLight( data.color, data.groundColor, data.intensity );

							break;

						case 'SkinnedMesh':

							console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

						case 'Mesh':

							var geometry = getGeometry( data.geometry );
							var material = getMaterial( data.material );

							if ( geometry.bones && geometry.bones.length > 0 ) {

								object = new SkinnedMesh( geometry, material );

							} else {

								object = new Mesh( geometry, material );

							}

							break;

						case 'LOD':

							object = new LOD();

							break;

						case 'Line':

							object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

							break;

						case 'LineLoop':

							object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

							break;

						case 'LineSegments':

							object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

							break;

						case 'PointCloud':
						case 'Points':

							object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

							break;

						case 'Sprite':

							object = new Sprite( getMaterial( data.material ) );

							break;

						case 'Group':

							object = new Group();

							break;

						default:

							object = new Object3D();

					}

					object.uuid = data.uuid;

					if ( data.name !== undefined ) object.name = data.name;
					if ( data.matrix !== undefined ) {

						matrix.fromArray( data.matrix );
						matrix.decompose( object.position, object.quaternion, object.scale );

					} else {

						if ( data.position !== undefined ) object.position.fromArray( data.position );
						if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
						if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
						if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

					}

					if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
					if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

					if ( data.shadow ) {

						if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
						if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
						if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
						if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

					}

					if ( data.visible !== undefined ) object.visible = data.visible;
					if ( data.userData !== undefined ) object.userData = data.userData;

					if ( data.children !== undefined ) {

						for ( var child in data.children ) {

							object.add( this.parseObject( data.children[ child ], geometries, materials ) );

						}

					}

					if ( data.type === 'LOD' ) {

						var levels = data.levels;

						for ( var l = 0; l < levels.length; l ++ ) {

							var level = levels[ l ];
							var child = object.getObjectByProperty( 'uuid', level.object );

							if ( child !== undefined ) {

								object.addLevel( child, level.distance );

							}

						}

					}

					return object;

				};

			}()

		} );

		var TEXTURE_MAPPING = {
			UVMapping: UVMapping,
			CubeReflectionMapping: CubeReflectionMapping,
			CubeRefractionMapping: CubeRefractionMapping,
			EquirectangularReflectionMapping: EquirectangularReflectionMapping,
			EquirectangularRefractionMapping: EquirectangularRefractionMapping,
			SphericalReflectionMapping: SphericalReflectionMapping,
			CubeUVReflectionMapping: CubeUVReflectionMapping,
			CubeUVRefractionMapping: CubeUVRefractionMapping
		};

		var TEXTURE_WRAPPING = {
			RepeatWrapping: RepeatWrapping,
			ClampToEdgeWrapping: ClampToEdgeWrapping,
			MirroredRepeatWrapping: MirroredRepeatWrapping
		};

		var TEXTURE_FILTER = {
			NearestFilter: NearestFilter,
			NearestMipMapNearestFilter: NearestMipMapNearestFilter,
			NearestMipMapLinearFilter: NearestMipMapLinearFilter,
			LinearFilter: LinearFilter,
			LinearMipMapNearestFilter: LinearMipMapNearestFilter,
			LinearMipMapLinearFilter: LinearMipMapLinearFilter
		};

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Bezier Curves formulas obtained from
		 * http://en.wikipedia.org/wiki/Bézier_curve
		 */

		function CatmullRom( t, p0, p1, p2, p3 ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

		//

		function QuadraticBezierP0( t, p ) {

			var k = 1 - t;
			return k * k * p;

		}

		function QuadraticBezierP1( t, p ) {

			return 2 * ( 1 - t ) * t * p;

		}

		function QuadraticBezierP2( t, p ) {

			return t * t * p;

		}

		function QuadraticBezier( t, p0, p1, p2 ) {

			return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
				QuadraticBezierP2( t, p2 );

		}

		//

		function CubicBezierP0( t, p ) {

			var k = 1 - t;
			return k * k * k * p;

		}

		function CubicBezierP1( t, p ) {

			var k = 1 - t;
			return 3 * k * k * t * p;

		}

		function CubicBezierP2( t, p ) {

			return 3 * ( 1 - t ) * t * t * p;

		}

		function CubicBezierP3( t, p ) {

			return t * t * t * p;

		}

		function CubicBezier( t, p0, p1, p2, p3 ) {

			return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
				CubicBezierP3( t, p3 );

		}

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Extensible curve object
		 *
		 * Some common of curve methods:
		 * .getPoint(t), getTangent(t)
		 * .getPointAt(u), getTangentAt(u)
		 * .getPoints(), .getSpacedPoints()
		 * .getLength()
		 * .updateArcLengths()
		 *
		 * This following curves inherit from THREE.Curve:
		 *
		 * -- 2D curves --
		 * THREE.ArcCurve
		 * THREE.CubicBezierCurve
		 * THREE.EllipseCurve
		 * THREE.LineCurve
		 * THREE.QuadraticBezierCurve
		 * THREE.SplineCurve
		 *
		 * -- 3D curves --
		 * THREE.CatmullRomCurve3
		 * THREE.CubicBezierCurve3
		 * THREE.LineCurve3
		 * THREE.QuadraticBezierCurve3
		 *
		 * A series of curves can be represented as a THREE.CurvePath.
		 *
		 **/

		/**************************************************************
		 *	Abstract Curve base class
		 **************************************************************/

		function Curve() {

			this.arcLengthDivisions = 200;

		}

		Object.assign( Curve.prototype, {

			// Virtual base class method to overwrite and implement in subclasses
			//	- t [0 .. 1]

			getPoint: function () {

				console.warn( 'THREE.Curve: .getPoint() not implemented.' );
				return null;

			},

			// Get point at relative position in curve according to arc length
			// - u [0 .. 1]

			getPointAt: function ( u ) {

				var t = this.getUtoTmapping( u );
				return this.getPoint( t );

			},

			// Get sequence of points using getPoint( t )

			getPoints: function ( divisions ) {

				if ( divisions === undefined ) divisions = 5;

				var points = [];

				for ( var d = 0; d <= divisions; d ++ ) {

					points.push( this.getPoint( d / divisions ) );

				}

				return points;

			},

			// Get sequence of points using getPointAt( u )

			getSpacedPoints: function ( divisions ) {

				if ( divisions === undefined ) divisions = 5;

				var points = [];

				for ( var d = 0; d <= divisions; d ++ ) {

					points.push( this.getPointAt( d / divisions ) );

				}

				return points;

			},

			// Get total curve arc length

			getLength: function () {

				var lengths = this.getLengths();
				return lengths[ lengths.length - 1 ];

			},

			// Get list of cumulative segment lengths

			getLengths: function ( divisions ) {

				if ( divisions === undefined ) divisions = this.arcLengthDivisions;

				if ( this.cacheArcLengths &&
					( this.cacheArcLengths.length === divisions + 1 ) &&
					! this.needsUpdate ) {

					return this.cacheArcLengths;

				}

				this.needsUpdate = false;

				var cache = [];
				var current, last = this.getPoint( 0 );
				var p, sum = 0;

				cache.push( 0 );

				for ( p = 1; p <= divisions; p ++ ) {

					current = this.getPoint( p / divisions );
					sum += current.distanceTo( last );
					cache.push( sum );
					last = current;

				}

				this.cacheArcLengths = cache;

				return cache; // { sums: cache, sum: sum }; Sum is in the last element.

			},

			updateArcLengths: function () {

				this.needsUpdate = true;
				this.getLengths();

			},

			// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

			getUtoTmapping: function ( u, distance ) {

				var arcLengths = this.getLengths();

				var i = 0, il = arcLengths.length;

				var targetArcLength; // The targeted u distance value to get

				if ( distance ) {

					targetArcLength = distance;

				} else {

					targetArcLength = u * arcLengths[ il - 1 ];

				}

				// binary search for the index with largest value smaller than target u distance

				var low = 0, high = il - 1, comparison;

				while ( low <= high ) {

					i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

					comparison = arcLengths[ i ] - targetArcLength;

					if ( comparison < 0 ) {

						low = i + 1;

					} else if ( comparison > 0 ) {

						high = i - 1;

					} else {

						high = i;
						break;

						// DONE

					}

				}

				i = high;

				if ( arcLengths[ i ] === targetArcLength ) {

					return i / ( il - 1 );

				}

				// we could get finer grain at lengths, or use simple interpolation between two points

				var lengthBefore = arcLengths[ i ];
				var lengthAfter = arcLengths[ i + 1 ];

				var segmentLength = lengthAfter - lengthBefore;

				// determine where we are between the 'before' and 'after' points

				var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

				// add that fractional amount to t

				var t = ( i + segmentFraction ) / ( il - 1 );

				return t;

			},

			// Returns a unit vector tangent at t
			// In case any sub curve does not implement its tangent derivation,
			// 2 points a small delta apart will be used to find its gradient
			// which seems to give a reasonable approximation

			getTangent: function ( t ) {

				var delta = 0.0001;
				var t1 = t - delta;
				var t2 = t + delta;

				// Capping in case of danger

				if ( t1 < 0 ) t1 = 0;
				if ( t2 > 1 ) t2 = 1;

				var pt1 = this.getPoint( t1 );
				var pt2 = this.getPoint( t2 );

				var vec = pt2.clone().sub( pt1 );
				return vec.normalize();

			},

			getTangentAt: function ( u ) {

				var t = this.getUtoTmapping( u );
				return this.getTangent( t );

			},

			computeFrenetFrames: function ( segments, closed ) {

				// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

				var normal = new Vector3();

				var tangents = [];
				var normals = [];
				var binormals = [];

				var vec = new Vector3();
				var mat = new Matrix4();

				var i, u, theta;

				// compute the tangent vectors for each segment on the curve

				for ( i = 0; i <= segments; i ++ ) {

					u = i / segments;

					tangents[ i ] = this.getTangentAt( u );
					tangents[ i ].normalize();

				}

				// select an initial normal vector perpendicular to the first tangent vector,
				// and in the direction of the minimum tangent xyz component

				normals[ 0 ] = new Vector3();
				binormals[ 0 ] = new Vector3();
				var min = Number.MAX_VALUE;
				var tx = Math.abs( tangents[ 0 ].x );
				var ty = Math.abs( tangents[ 0 ].y );
				var tz = Math.abs( tangents[ 0 ].z );

				if ( tx <= min ) {

					min = tx;
					normal.set( 1, 0, 0 );

				}

				if ( ty <= min ) {

					min = ty;
					normal.set( 0, 1, 0 );

				}

				if ( tz <= min ) {

					normal.set( 0, 0, 1 );

				}

				vec.crossVectors( tangents[ 0 ], normal ).normalize();

				normals[ 0 ].crossVectors( tangents[ 0 ], vec );
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


				// compute the slowly-varying normal and binormal vectors for each segment on the curve

				for ( i = 1; i <= segments; i ++ ) {

					normals[ i ] = normals[ i - 1 ].clone();

					binormals[ i ] = binormals[ i - 1 ].clone();

					vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

					if ( vec.length() > Number.EPSILON ) {

						vec.normalize();

						theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

						normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

					}

					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

				// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

				if ( closed === true ) {

					theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
					theta /= segments;

					if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

						theta = - theta;

					}

					for ( i = 1; i <= segments; i ++ ) {

						// twist a little...
						normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
						binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

					}

				}

				return {
					tangents: tangents,
					normals: normals,
					binormals: binormals
				};

			}

		} );

		function LineCurve( v1, v2 ) {

			Curve.call( this );

			this.v1 = v1;
			this.v2 = v2;

		}

		LineCurve.prototype = Object.create( Curve.prototype );
		LineCurve.prototype.constructor = LineCurve;

		LineCurve.prototype.isLineCurve = true;

		LineCurve.prototype.getPoint = function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var point = this.v2.clone().sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

			return point;

		};

		// Line curve is linear, so we can overwrite default getPointAt

		LineCurve.prototype.getPointAt = function ( u ) {

			return this.getPoint( u );

		};

		LineCurve.prototype.getTangent = function ( t ) {

			var tangent = this.v2.clone().sub( this.v1 );

			return tangent.normalize();

		};

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 **/

		/**************************************************************
		 *	Curved Path - a curve path is simply a array of connected
		 *  curves, but retains the api of a curve
		 **************************************************************/

		function CurvePath() {

			Curve.call( this );

			this.curves = [];

			this.autoClose = false; // Automatically closes the path

		}

		CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

			constructor: CurvePath,

			add: function ( curve ) {

				this.curves.push( curve );

			},

			closePath: function () {

				// Add a line curve if start and end of lines are not connected
				var startPoint = this.curves[ 0 ].getPoint( 0 );
				var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

				if ( ! startPoint.equals( endPoint ) ) {

					this.curves.push( new LineCurve( endPoint, startPoint ) );

				}

			},

			// To get accurate point with reference to
			// entire path distance at time t,
			// following has to be done:

			// 1. Length of each sub path have to be known
			// 2. Locate and identify type of curve
			// 3. Get t for the curve
			// 4. Return curve.getPointAt(t')

			getPoint: function ( t ) {

				var d = t * this.getLength();
				var curveLengths = this.getCurveLengths();
				var i = 0;

				// To think about boundaries points.

				while ( i < curveLengths.length ) {

					if ( curveLengths[ i ] >= d ) {

						var diff = curveLengths[ i ] - d;
						var curve = this.curves[ i ];

						var segmentLength = curve.getLength();
						var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

						return curve.getPointAt( u );

					}

					i ++;

				}

				return null;

				// loop where sum != 0, sum > d , sum+1 <d

			},

			// We cannot use the default THREE.Curve getPoint() with getLength() because in
			// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
			// getPoint() depends on getLength

			getLength: function () {

				var lens = this.getCurveLengths();
				return lens[ lens.length - 1 ];

			},

			// cacheLengths must be recalculated.
			updateArcLengths: function () {

				this.needsUpdate = true;
				this.cacheLengths = null;
				this.getCurveLengths();

			},

			// Compute lengths and cache them
			// We cannot overwrite getLengths() because UtoT mapping uses it.

			getCurveLengths: function () {

				// We use cache values if curves and cache array are same length

				if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

					return this.cacheLengths;

				}

				// Get length of sub-curve
				// Push sums into cached array

				var lengths = [], sums = 0;

				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

					sums += this.curves[ i ].getLength();
					lengths.push( sums );

				}

				this.cacheLengths = lengths;

				return lengths;

			},

			getSpacedPoints: function ( divisions ) {

				if ( divisions === undefined ) divisions = 40;

				var points = [];

				for ( var i = 0; i <= divisions; i ++ ) {

					points.push( this.getPoint( i / divisions ) );

				}

				if ( this.autoClose ) {

					points.push( points[ 0 ] );

				}

				return points;

			},

			getPoints: function ( divisions ) {

				divisions = divisions || 12;

				var points = [], last;

				for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

					var curve = curves[ i ];
					var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
						: (curve && curve.isLineCurve) ? 1
						: (curve && curve.isSplineCurve) ? divisions * curve.points.length
						: divisions;

					var pts = curve.getPoints( resolution );

					for ( var j = 0; j < pts.length; j++ ) {

						var point = pts[ j ];

						if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

						points.push( point );
						last = point;

					}

				}

				if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

					points.push( points[ 0 ] );

				}

				return points;

			},

			/**************************************************************
			 *	Create Geometries Helpers
			 **************************************************************/

			/// Generate geometry from path points (for Line or Points objects)

			createPointsGeometry: function ( divisions ) {

				var pts = this.getPoints( divisions );
				return this.createGeometry( pts );

			},

			// Generate geometry from equidistant sampling along the path

			createSpacedPointsGeometry: function ( divisions ) {

				var pts = this.getSpacedPoints( divisions );
				return this.createGeometry( pts );

			},

			createGeometry: function ( points ) {

				var geometry = new Geometry();

				for ( var i = 0, l = points.length; i < l; i ++ ) {

					var point = points[ i ];
					geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

				}

				return geometry;

			}

		} );

		function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			Curve.call( this );

			this.aX = aX;
			this.aY = aY;

			this.xRadius = xRadius;
			this.yRadius = yRadius;

			this.aStartAngle = aStartAngle;
			this.aEndAngle = aEndAngle;

			this.aClockwise = aClockwise;

			this.aRotation = aRotation || 0;

		}

		EllipseCurve.prototype = Object.create( Curve.prototype );
		EllipseCurve.prototype.constructor = EllipseCurve;

		EllipseCurve.prototype.isEllipseCurve = true;

		EllipseCurve.prototype.getPoint = function ( t ) {

			var twoPi = Math.PI * 2;
			var deltaAngle = this.aEndAngle - this.aStartAngle;
			var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

			// ensures that deltaAngle is 0 .. 2 PI
			while ( deltaAngle < 0 ) deltaAngle += twoPi;
			while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

			if ( deltaAngle < Number.EPSILON ) {

				if ( samePoints ) {

					deltaAngle = 0;

				} else {

					deltaAngle = twoPi;

				}

			}

			if ( this.aClockwise === true && ! samePoints ) {

				if ( deltaAngle === twoPi ) {

					deltaAngle = - twoPi;

				} else {

					deltaAngle = deltaAngle - twoPi;

				}

			}

			var angle = this.aStartAngle + t * deltaAngle;
			var x = this.aX + this.xRadius * Math.cos( angle );
			var y = this.aY + this.yRadius * Math.sin( angle );

			if ( this.aRotation !== 0 ) {

				var cos = Math.cos( this.aRotation );
				var sin = Math.sin( this.aRotation );

				var tx = x - this.aX;
				var ty = y - this.aY;

				// Rotate the point about the center of the ellipse.
				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;

			}

			return new Vector2( x, y );

		};

		function SplineCurve( points /* array of Vector2 */ ) {

			Curve.call( this );

			this.points = ( points === undefined ) ? [] : points;

		}

		SplineCurve.prototype = Object.create( Curve.prototype );
		SplineCurve.prototype.constructor = SplineCurve;

		SplineCurve.prototype.isSplineCurve = true;

		SplineCurve.prototype.getPoint = function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			return new Vector2(
				CatmullRom( weight, point0.x, point1.x, point2.x, point3.x ),
				CatmullRom( weight, point0.y, point1.y, point2.y, point3.y )
			);

		};

		function CubicBezierCurve( v0, v1, v2, v3 ) {

			Curve.call( this );

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		}

		CubicBezierCurve.prototype = Object.create( Curve.prototype );
		CubicBezierCurve.prototype.constructor = CubicBezierCurve;

		CubicBezierCurve.prototype.getPoint = function ( t ) {

			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

			return new Vector2(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
			);

		};

		function QuadraticBezierCurve( v0, v1, v2 ) {

			Curve.call( this );

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		}

		QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

		QuadraticBezierCurve.prototype.getPoint = function ( t ) {

			var v0 = this.v0, v1 = this.v1, v2 = this.v2;

			return new Vector2(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y )
			);

		};

		var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

			fromPoints: function ( vectors ) {

				this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

				for ( var i = 1, l = vectors.length; i < l; i ++ ) {

					this.lineTo( vectors[ i ].x, vectors[ i ].y );

				}

			},

			moveTo: function ( x, y ) {

				this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

			},

			lineTo: function ( x, y ) {

				var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
				this.curves.push( curve );

				this.currentPoint.set( x, y );

			},

			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

				var curve = new QuadraticBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCPx, aCPy ),
					new Vector2( aX, aY )
				);

				this.curves.push( curve );

				this.currentPoint.set( aX, aY );

			},

			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

				var curve = new CubicBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCP1x, aCP1y ),
					new Vector2( aCP2x, aCP2y ),
					new Vector2( aX, aY )
				);

				this.curves.push( curve );

				this.currentPoint.set( aX, aY );

			},

			splineThru: function ( pts /*Array of Vector*/ ) {

				var npts = [ this.currentPoint.clone() ].concat( pts );

				var curve = new SplineCurve( npts );
				this.curves.push( curve );

				this.currentPoint.copy( pts[ pts.length - 1 ] );

			},

			arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;

				this.absarc( aX + x0, aY + y0, aRadius,
					aStartAngle, aEndAngle, aClockwise );

			},

			absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

				this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

			},

			ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;

				this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			},

			absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

				var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

				if ( this.curves.length > 0 ) {

					// if a previous curve is present, attempt to join
					var firstPoint = curve.getPoint( 0 );

					if ( ! firstPoint.equals( this.currentPoint ) ) {

						this.lineTo( firstPoint.x, firstPoint.y );

					}

				}

				this.curves.push( curve );

				var lastPoint = curve.getPoint( 1 );
				this.currentPoint.copy( lastPoint );

			}

		} );

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Creates free form 2d path using series of points, lines or curves.
		 **/

		function Path( points ) {

			CurvePath.call( this );
			this.currentPoint = new Vector2();

			if ( points ) {

				this.fromPoints( points );

			}

		}

		Path.prototype = PathPrototype;
		PathPrototype.constructor = Path;

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Defines a 2d shape plane using paths.
		 **/

		// STEP 1 Create a path.
		// STEP 2 Turn path into shape.
		// STEP 3 ExtrudeGeometry takes in Shape/Shapes
		// STEP 3a - Extract points from each shape, turn to vertices
		// STEP 3b - Triangulate each shape, add faces.

		function Shape() {

			Path.apply( this, arguments );

			this.holes = [];

		}

		Shape.prototype = Object.assign( Object.create( PathPrototype ), {

			constructor: Shape,

			getPointsHoles: function ( divisions ) {

				var holesPts = [];

				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

					holesPts[ i ] = this.holes[ i ].getPoints( divisions );

				}

				return holesPts;

			},

			// Get points of shape and holes (keypoints based on segments parameter)

			extractAllPoints: function ( divisions ) {

				return {

					shape: this.getPoints( divisions ),
					holes: this.getPointsHoles( divisions )

				};

			},

			extractPoints: function ( divisions ) {

				return this.extractAllPoints( divisions );

			}

		} );

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
		 **/

		function ShapePath() {

			this.subPaths = [];
			this.currentPath = null;

		}

		Object.assign( ShapePath.prototype, {

			moveTo: function ( x, y ) {

				this.currentPath = new Path();
				this.subPaths.push( this.currentPath );
				this.currentPath.moveTo( x, y );

			},

			lineTo: function ( x, y ) {

				this.currentPath.lineTo( x, y );

			},

			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

				this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

			},

			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

				this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

			},

			splineThru: function ( pts ) {

				this.currentPath.splineThru( pts );

			},

			toShapes: function ( isCCW, noHoles ) {

				function toShapesNoHoles( inSubpaths ) {

					var shapes = [];

					for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

						var tmpPath = inSubpaths[ i ];

						var tmpShape = new Shape();
						tmpShape.curves = tmpPath.curves;

						shapes.push( tmpShape );

					}

					return shapes;

				}

				function isPointInsidePolygon( inPt, inPolygon ) {

					var polyLen = inPolygon.length;

					// inPt on polygon contour => immediate success    or
					// toggling of inside/outside at every single! intersection point of an edge
					//  with the horizontal line through inPt, left of inPt
					//  not counting lowerY endpoints of edges and whole edges on that line
					var inside = false;
					for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

						var edgeLowPt  = inPolygon[ p ];
						var edgeHighPt = inPolygon[ q ];

						var edgeDx = edgeHighPt.x - edgeLowPt.x;
						var edgeDy = edgeHighPt.y - edgeLowPt.y;

						if ( Math.abs( edgeDy ) > Number.EPSILON ) {

							// not parallel
							if ( edgeDy < 0 ) {

								edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
								edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

							}
							if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

							if ( inPt.y === edgeLowPt.y ) {

								if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
								// continue;				// no intersection or edgeLowPt => doesn't count !!!

							} else {

								var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
								if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
								if ( perpEdge < 0 ) 				continue;
								inside = ! inside;		// true intersection left of inPt

							}

						} else {

							// parallel or collinear
							if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
							// edge lies on the same horizontal line as inPt
							if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
								 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
							// continue;

						}

					}

					return	inside;

				}

				var isClockWise = ShapeUtils.isClockWise;

				var subPaths = this.subPaths;
				if ( subPaths.length === 0 ) return [];

				if ( noHoles === true )	return	toShapesNoHoles( subPaths );


				var solid, tmpPath, tmpShape, shapes = [];

				if ( subPaths.length === 1 ) {

					tmpPath = subPaths[ 0 ];
					tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
					return shapes;

				}

				var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
				holesFirst = isCCW ? ! holesFirst : holesFirst;

				// console.log("Holes first", holesFirst);

				var betterShapeHoles = [];
				var newShapes = [];
				var newShapeHoles = [];
				var mainIdx = 0;
				var tmpPoints;

				newShapes[ mainIdx ] = undefined;
				newShapeHoles[ mainIdx ] = [];

				for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

					tmpPath = subPaths[ i ];
					tmpPoints = tmpPath.getPoints();
					solid = isClockWise( tmpPoints );
					solid = isCCW ? ! solid : solid;

					if ( solid ) {

						if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

						newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
						newShapes[ mainIdx ].s.curves = tmpPath.curves;

						if ( holesFirst )	mainIdx ++;
						newShapeHoles[ mainIdx ] = [];

						//console.log('cw', i);

					} else {

						newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

						//console.log('ccw', i);

					}

				}

				// only Holes? -> probably all Shapes with wrong orientation
				if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


				if ( newShapes.length > 1 ) {

					var ambiguous = false;
					var toChange = [];

					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

						betterShapeHoles[ sIdx ] = [];

					}

					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

						var sho = newShapeHoles[ sIdx ];

						for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

							var ho = sho[ hIdx ];
							var hole_unassigned = true;

							for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

								if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

									if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
									if ( hole_unassigned ) {

										hole_unassigned = false;
										betterShapeHoles[ s2Idx ].push( ho );

									} else {

										ambiguous = true;

									}

								}

							}
							if ( hole_unassigned ) {

								betterShapeHoles[ sIdx ].push( ho );

							}

						}

					}
					// console.log("ambiguous: ", ambiguous);
					if ( toChange.length > 0 ) {

						// console.log("to change: ", toChange);
						if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

					}

				}

				var tmpHoles;

				for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

					tmpShape = newShapes[ i ].s;
					shapes.push( tmpShape );
					tmpHoles = newShapeHoles[ i ];

					for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

						tmpShape.holes.push( tmpHoles[ j ].h );

					}

				}

				//console.log("shape", shapes);

				return shapes;

			}

		} );

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Font( data ) {

			this.data = data;

		}

		Object.assign( Font.prototype, {

			isFont: true,

			generateShapes: function ( text, size, divisions ) {

				function createPaths( text ) {

					var chars = String( text ).split( '' );
					var scale = size / data.resolution;
					var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

					var offsetX = 0, offsetY = 0;

					var paths = [];

					for ( var i = 0; i < chars.length; i ++ ) {

						var char = chars[ i ];

						if ( char === '\n' ) {

							offsetX = 0;
							offsetY -= line_height;

						} else {

							var ret = createPath( char, scale, offsetX, offsetY );
							offsetX += ret.offsetX;
							paths.push( ret.path );

						}

					}

					return paths;

				}

				function createPath( c, scale, offsetX, offsetY ) {

					var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

					if ( ! glyph ) return;

					var path = new ShapePath();

					var pts = [];
					var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

					if ( glyph.o ) {

						var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

						for ( var i = 0, l = outline.length; i < l; ) {

							var action = outline[ i ++ ];

							switch ( action ) {

								case 'm': // moveTo

									x = outline[ i ++ ] * scale + offsetX;
									y = outline[ i ++ ] * scale + offsetY;

									path.moveTo( x, y );

									break;

								case 'l': // lineTo

									x = outline[ i ++ ] * scale + offsetX;
									y = outline[ i ++ ] * scale + offsetY;

									path.lineTo( x, y );

									break;

								case 'q': // quadraticCurveTo

									cpx  = outline[ i ++ ] * scale + offsetX;
									cpy  = outline[ i ++ ] * scale + offsetY;
									cpx1 = outline[ i ++ ] * scale + offsetX;
									cpy1 = outline[ i ++ ] * scale + offsetY;

									path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

									laste = pts[ pts.length - 1 ];

									if ( laste ) {

										cpx0 = laste.x;
										cpy0 = laste.y;

										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

											var t = i2 / divisions;
											QuadraticBezier( t, cpx0, cpx1, cpx );
											QuadraticBezier( t, cpy0, cpy1, cpy );

										}

									}

									break;

								case 'b': // bezierCurveTo

									cpx  = outline[ i ++ ] * scale + offsetX;
									cpy  = outline[ i ++ ] * scale + offsetY;
									cpx1 = outline[ i ++ ] * scale + offsetX;
									cpy1 = outline[ i ++ ] * scale + offsetY;
									cpx2 = outline[ i ++ ] * scale + offsetX;
									cpy2 = outline[ i ++ ] * scale + offsetY;

									path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

									laste = pts[ pts.length - 1 ];

									if ( laste ) {

										cpx0 = laste.x;
										cpy0 = laste.y;

										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

											var t = i2 / divisions;
											CubicBezier( t, cpx0, cpx1, cpx2, cpx );
											CubicBezier( t, cpy0, cpy1, cpy2, cpy );

										}

									}

									break;

							}

						}

					}

					return { offsetX: glyph.ha * scale, path: path };

				}

				//

				if ( size === undefined ) size = 100;
				if ( divisions === undefined ) divisions = 4;

				var data = this.data;

				var paths = createPaths( text );
				var shapes = [];

				for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

					Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

				}

				return shapes;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function FontLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( FontLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new FileLoader( this.manager );
				loader.load( url, function ( text ) {

					var json;

					try {

						json = JSON.parse( text );

					} catch ( e ) {

						console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
						json = JSON.parse( text.substring( 65, text.length - 2 ) );

					}

					var font = scope.parse( json );

					if ( onLoad ) onLoad( font );

				}, onProgress, onError );

			},

			parse: function ( json ) {

				return new Font( json );

			}

		} );

		var context;

		var AudioContext = {

			getContext: function () {

				if ( context === undefined ) {

					context = new ( window.AudioContext || window.webkitAudioContext )();

				}

				return context;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

		/**
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */

		function AudioLoader( manager ) {

			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		}

		Object.assign( AudioLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.load( url, function ( buffer ) {

					var context = AudioContext.getContext();

					context.decodeAudioData( buffer, function ( audioBuffer ) {

						onLoad( audioBuffer );

					} );

				}, onProgress, onError );

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function StereoCamera() {

			this.type = 'StereoCamera';

			this.aspect = 1;

			this.eyeSep = 0.064;

			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable( 1 );
			this.cameraL.matrixAutoUpdate = false;

			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable( 2 );
			this.cameraR.matrixAutoUpdate = false;

		}

		Object.assign( StereoCamera.prototype, {

			update: ( function () {

				var instance, focus, fov, aspect, near, far, zoom, eyeSep;

				var eyeRight = new Matrix4();
				var eyeLeft = new Matrix4();

				return function update( camera ) {

					var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
														aspect !== camera.aspect * this.aspect || near !== camera.near ||
														far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

					if ( needsUpdate ) {

						instance = this;
						focus = camera.focus;
						fov = camera.fov;
						aspect = camera.aspect * this.aspect;
						near = camera.near;
						far = camera.far;
						zoom = camera.zoom;

						// Off-axis stereoscopic effect based on
						// http://paulbourke.net/stereographics/stereorender/

						var projectionMatrix = camera.projectionMatrix.clone();
						eyeSep = this.eyeSep / 2;
						var eyeSepOnProjection = eyeSep * near / focus;
						var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
						var xmin, xmax;

						// translate xOffset

						eyeLeft.elements[ 12 ] = - eyeSep;
						eyeRight.elements[ 12 ] = eyeSep;

						// for left eye

						xmin = - ymax * aspect + eyeSepOnProjection;
						xmax = ymax * aspect + eyeSepOnProjection;

						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

						this.cameraL.projectionMatrix.copy( projectionMatrix );

						// for right eye

						xmin = - ymax * aspect - eyeSepOnProjection;
						xmax = ymax * aspect - eyeSepOnProjection;

						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

						this.cameraR.projectionMatrix.copy( projectionMatrix );

					}

					this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
					this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

				};

			} )()

		} );

		/**
		 * Camera for rendering cube maps
		 *	- renders scene into axis-aligned cube
		 *
		 * @author alteredq / http://alteredqualia.com/
		 */

		function CubeCamera( near, far, cubeResolution ) {

			Object3D.call( this );

			this.type = 'CubeCamera';

			var fov = 90, aspect = 1;

			var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
			this.add( cameraPX );

			var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
			this.add( cameraNX );

			var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
			this.add( cameraPY );

			var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
			this.add( cameraNY );

			var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
			this.add( cameraPZ );

			var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
			this.add( cameraNZ );

			var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

			this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
			this.renderTarget.texture.name = "CubeCamera";

			this.updateCubeMap = function ( renderer, scene ) {

				if ( this.parent === null ) this.updateMatrixWorld();

				var renderTarget = this.renderTarget;
				var generateMipmaps = renderTarget.texture.generateMipmaps;

				renderTarget.texture.generateMipmaps = false;

				renderTarget.activeCubeFace = 0;
				renderer.render( scene, cameraPX, renderTarget );

				renderTarget.activeCubeFace = 1;
				renderer.render( scene, cameraNX, renderTarget );

				renderTarget.activeCubeFace = 2;
				renderer.render( scene, cameraPY, renderTarget );

				renderTarget.activeCubeFace = 3;
				renderer.render( scene, cameraNY, renderTarget );

				renderTarget.activeCubeFace = 4;
				renderer.render( scene, cameraPZ, renderTarget );

				renderTarget.texture.generateMipmaps = generateMipmaps;

				renderTarget.activeCubeFace = 5;
				renderer.render( scene, cameraNZ, renderTarget );

				renderer.setRenderTarget( null );

			};

		}

		CubeCamera.prototype = Object.create( Object3D.prototype );
		CubeCamera.prototype.constructor = CubeCamera;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function AudioListener() {

			Object3D.call( this );

			this.type = 'AudioListener';

			this.context = AudioContext.getContext();

			this.gain = this.context.createGain();
			this.gain.connect( this.context.destination );

			this.filter = null;

		}

		AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: AudioListener,

			getInput: function () {

				return this.gain;

			},

			removeFilter: function ( ) {

				if ( this.filter !== null ) {

					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
					this.gain.connect( this.context.destination );
					this.filter = null;

				}

			},

			getFilter: function () {

				return this.filter;

			},

			setFilter: function ( value ) {

				if ( this.filter !== null ) {

					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );

				} else {

					this.gain.disconnect( this.context.destination );

				}

				this.filter = value;
				this.gain.connect( this.filter );
				this.filter.connect( this.context.destination );

			},

			getMasterVolume: function () {

				return this.gain.gain.value;

			},

			setMasterVolume: function ( value ) {

				this.gain.gain.value = value;

			},

			updateMatrixWorld: ( function () {

				var position = new Vector3();
				var quaternion = new Quaternion();
				var scale = new Vector3();

				var orientation = new Vector3();

				return function updateMatrixWorld( force ) {

					Object3D.prototype.updateMatrixWorld.call( this, force );

					var listener = this.context.listener;
					var up = this.up;

					this.matrixWorld.decompose( position, quaternion, scale );

					orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

					if ( listener.positionX ) {

						listener.positionX.setValueAtTime( position.x, this.context.currentTime );
						listener.positionY.setValueAtTime( position.y, this.context.currentTime );
						listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
						listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
						listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
						listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
						listener.upX.setValueAtTime( up.x, this.context.currentTime );
						listener.upY.setValueAtTime( up.y, this.context.currentTime );
						listener.upZ.setValueAtTime( up.z, this.context.currentTime );

					} else {

						listener.setPosition( position.x, position.y, position.z );
						listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

					}

				};

			} )()

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */

		function Audio( listener ) {

			Object3D.call( this );

			this.type = 'Audio';

			this.context = listener.context;

			this.gain = this.context.createGain();
			this.gain.connect( listener.getInput() );

			this.autoplay = false;

			this.buffer = null;
			this.loop = false;
			this.startTime = 0;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.sourceType = 'empty';

			this.filters = [];

		}

		Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

			constructor: Audio,

			getOutput: function () {

				return this.gain;

			},

			setNodeSource: function ( audioNode ) {

				this.hasPlaybackControl = false;
				this.sourceType = 'audioNode';
				this.source = audioNode;
				this.connect();

				return this;

			},

			setBuffer: function ( audioBuffer ) {

				this.buffer = audioBuffer;
				this.sourceType = 'buffer';

				if ( this.autoplay ) this.play();

				return this;

			},

			play: function () {

				if ( this.isPlaying === true ) {

					console.warn( 'THREE.Audio: Audio is already playing.' );
					return;

				}

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				var source = this.context.createBufferSource();

				source.buffer = this.buffer;
				source.loop = this.loop;
				source.onended = this.onEnded.bind( this );
				source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
				source.start( 0, this.startTime );

				this.isPlaying = true;

				this.source = source;

				return this.connect();

			},

			pause: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.source.stop();
				this.startTime = this.context.currentTime;
				this.isPlaying = false;

				return this;

			},

			stop: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.source.stop();
				this.startTime = 0;
				this.isPlaying = false;

				return this;

			},

			connect: function () {

				if ( this.filters.length > 0 ) {

					this.source.connect( this.filters[ 0 ] );

					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

						this.filters[ i - 1 ].connect( this.filters[ i ] );

					}

					this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

				} else {

					this.source.connect( this.getOutput() );

				}

				return this;

			},

			disconnect: function () {

				if ( this.filters.length > 0 ) {

					this.source.disconnect( this.filters[ 0 ] );

					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

						this.filters[ i - 1 ].disconnect( this.filters[ i ] );

					}

					this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

				} else {

					this.source.disconnect( this.getOutput() );

				}

				return this;

			},

			getFilters: function () {

				return this.filters;

			},

			setFilters: function ( value ) {

				if ( ! value ) value = [];

				if ( this.isPlaying === true ) {

					this.disconnect();
					this.filters = value;
					this.connect();

				} else {

					this.filters = value;

				}

				return this;

			},

			getFilter: function () {

				return this.getFilters()[ 0 ];

			},

			setFilter: function ( filter ) {

				return this.setFilters( filter ? [ filter ] : [] );

			},

			setPlaybackRate: function ( value ) {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.playbackRate = value;

				if ( this.isPlaying === true ) {

					this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

				}

				return this;

			},

			getPlaybackRate: function () {

				return this.playbackRate;

			},

			onEnded: function () {

				this.isPlaying = false;

			},

			getLoop: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return false;

				}

				return this.loop;

			},

			setLoop: function ( value ) {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.loop = value;

				if ( this.isPlaying === true ) {

					this.source.loop = this.loop;

				}

				return this;

			},

			getVolume: function () {

				return this.gain.gain.value;

			},
			
			setVolume: function ( value ) {

				this.gain.gain.value = value;

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function PositionalAudio( listener ) {

			Audio.call( this, listener );

			this.panner = this.context.createPanner();
			this.panner.connect( this.gain );

		}

		PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

			constructor: PositionalAudio,

			getOutput: function () {

				return this.panner;

			},

			getRefDistance: function () {

				return this.panner.refDistance;

			},

			setRefDistance: function ( value ) {

				this.panner.refDistance = value;

			},

			getRolloffFactor: function () {

				return this.panner.rolloffFactor;

			},

			setRolloffFactor: function ( value ) {

				this.panner.rolloffFactor = value;

			},

			getDistanceModel: function () {

				return this.panner.distanceModel;

			},

			setDistanceModel: function ( value ) {

				this.panner.distanceModel = value;

			},

			getMaxDistance: function () {

				return this.panner.maxDistance;

			},

			setMaxDistance: function ( value ) {

				this.panner.maxDistance = value;

			},

			updateMatrixWorld: ( function () {

				var position = new Vector3();

				return function updateMatrixWorld( force ) {

					Object3D.prototype.updateMatrixWorld.call( this, force );

					position.setFromMatrixPosition( this.matrixWorld );

					this.panner.setPosition( position.x, position.y, position.z );

				};

			} )()


		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function AudioAnalyser( audio, fftSize ) {

			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

			this.data = new Uint8Array( this.analyser.frequencyBinCount );

			audio.getOutput().connect( this.analyser );

		}

		Object.assign( AudioAnalyser.prototype, {

			getFrequencyData: function () {

				this.analyser.getByteFrequencyData( this.data );

				return this.data;

			},

			getAverageFrequency: function () {

				var value = 0, data = this.getFrequencyData();

				for ( var i = 0; i < data.length; i ++ ) {

					value += data[ i ];

				}

				return value / data.length;

			}

		} );

		/**
		 *
		 * Buffered scene graph property that allows weighted accumulation.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function PropertyMixer( binding, typeName, valueSize ) {

			this.binding = binding;
			this.valueSize = valueSize;

			var bufferType = Float64Array,
				mixFunction;

			switch ( typeName ) {

				case 'quaternion':
					mixFunction = this._slerp;
					break;

				case 'string':
				case 'bool':
					bufferType = Array;
					mixFunction = this._select;
					break;

				default:
					mixFunction = this._lerp;

			}

			this.buffer = new bufferType( valueSize * 4 );
			// layout: [ incoming | accu0 | accu1 | orig ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property

			this._mixBufferRegion = mixFunction;

			this.cumulativeWeight = 0;

			this.useCount = 0;
			this.referenceCount = 0;

		}

		Object.assign( PropertyMixer.prototype, {

			// accumulate data in the 'incoming' region into 'accu<i>'
			accumulate: function ( accuIndex, weight ) {

				// note: happily accumulating nothing when weight = 0, the caller knows
				// the weight and shouldn't have made the call in the first place

				var buffer = this.buffer,
					stride = this.valueSize,
					offset = accuIndex * stride + stride,

					currentWeight = this.cumulativeWeight;

				if ( currentWeight === 0 ) {

					// accuN := incoming * weight

					for ( var i = 0; i !== stride; ++ i ) {

						buffer[ offset + i ] = buffer[ i ];

					}

					currentWeight = weight;

				} else {

					// accuN := accuN + incoming * weight

					currentWeight += weight;
					var mix = weight / currentWeight;
					this._mixBufferRegion( buffer, offset, 0, mix, stride );

				}

				this.cumulativeWeight = currentWeight;

			},

			// apply the state of 'accu<i>' to the binding when accus differ
			apply: function ( accuIndex ) {

				var stride = this.valueSize,
					buffer = this.buffer,
					offset = accuIndex * stride + stride,

					weight = this.cumulativeWeight,

					binding = this.binding;

				this.cumulativeWeight = 0;

				if ( weight < 1 ) {

					// accuN := accuN + original * ( 1 - cumulativeWeight )

					var originalValueOffset = stride * 3;

					this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

				}

				for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

					if ( buffer[ i ] !== buffer[ i + stride ] ) {

						// value has changed -> update scene graph

						binding.setValue( buffer, offset );
						break;

					}

				}

			},

			// remember the state of the bound property and copy it to both accus
			saveOriginalState: function () {

				var binding = this.binding;

				var buffer = this.buffer,
					stride = this.valueSize,

					originalValueOffset = stride * 3;

				binding.getValue( buffer, originalValueOffset );

				// accu[0..1] := orig -- initially detect changes against the original
				for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

					buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

				}

				this.cumulativeWeight = 0;

			},

			// apply the state previously taken via 'saveOriginalState' to the binding
			restoreOriginalState: function () {

				var originalValueOffset = this.valueSize * 3;
				this.binding.setValue( this.buffer, originalValueOffset );

			},


			// mix functions

			_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

				if ( t >= 0.5 ) {

					for ( var i = 0; i !== stride; ++ i ) {

						buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

					}

				}

			},

			_slerp: function ( buffer, dstOffset, srcOffset, t ) {

				Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

			},

			_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

				var s = 1 - t;

				for ( var i = 0; i !== stride; ++ i ) {

					var j = dstOffset + i;

					buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

				}

			}

		} );

		/**
		 *
		 * A reference to a real property in the scene graph.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function Composite( targetGroup, path, optionalParsedPath ) {

			var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_( path, parsedPath );

		}

		Object.assign( Composite.prototype, {

			getValue: function ( array, offset ) {

				this.bind(); // bind all binding

				var firstValidIndex = this._targetGroup.nCachedObjects_,
					binding = this._bindings[ firstValidIndex ];

				// and only call .getValue on the first
				if ( binding !== undefined ) binding.getValue( array, offset );

			},

			setValue: function ( array, offset ) {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].setValue( array, offset );

				}

			},

			bind: function () {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].bind();

				}

			},

			unbind: function () {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].unbind();

				}

			}

		} );


		function PropertyBinding( rootNode, path, parsedPath ) {

			this.path = path;
			this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

			this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

			this.rootNode = rootNode;

		}

		Object.assign( PropertyBinding, {

			Composite: Composite,

			create: function ( root, path, parsedPath ) {

				if ( ! ( root && root.isAnimationObjectGroup ) ) {

					return new PropertyBinding( root, path, parsedPath );

				} else {

					return new PropertyBinding.Composite( root, path, parsedPath );

				}

			},

			/**
			 * Replaces spaces with underscores and removes unsupported characters from
			 * node names, to ensure compatibility with parseTrackName().
			 *
			 * @param  {string} name Node name to be sanitized.
			 * @return {string}
			 */
			sanitizeNodeName: function ( name ) {

				return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

			},

			parseTrackName: function () {

				// Parent directories, delimited by '/' or ':'. Currently unused, but must
				// be matched to parse the rest of the track name.
				var directoryRe = /((?:[\w-]+[\/:])*)/;

				// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
				var nodeRe = /([\w-\.]+)?/;

				// Object on target node, and accessor. Name may contain only word
				// characters. Accessor may contain any character except closing bracket.
				var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

				// Property and accessor. May contain only word characters. Accessor may
				// contain any non-bracket characters.
				var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

				var trackRe = new RegExp(''
					+ '^'
					+ directoryRe.source
					+ nodeRe.source
					+ objectRe.source
					+ propertyRe.source
					+ '$'
				);

				var supportedObjectNames = [ 'material', 'materials', 'bones' ];

				return function ( trackName ) {

						var matches = trackRe.exec( trackName );

						if ( ! matches ) {

							throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

						}

						var results = {
							// directoryName: matches[ 1 ], // (tschw) currently unused
							nodeName: matches[ 2 ],
							objectName: matches[ 3 ],
							objectIndex: matches[ 4 ],
							propertyName: matches[ 5 ],     // required
							propertyIndex: matches[ 6 ]
						};

						var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

						if ( lastDot !== undefined && lastDot !== -1 ) {

							var objectName = results.nodeName.substring( lastDot + 1 );

							// Object names must be checked against a whitelist. Otherwise, there
							// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
							// 'bar' could be the objectName, or part of a nodeName (which can
							// include '.' characters).
							if ( supportedObjectNames.indexOf( objectName ) !== -1 ) {

								results.nodeName = results.nodeName.substring( 0, lastDot );
								results.objectName = objectName;

							}

						}

						if ( results.propertyName === null || results.propertyName.length === 0 ) {

							throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

						}

						return results;

					};

			}(),

			findNode: function ( root, nodeName ) {

				if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

					return root;

				}

				// search into skeleton bones.
				if ( root.skeleton ) {

					var searchSkeleton = function ( skeleton ) {

						for ( var i = 0; i < skeleton.bones.length; i ++ ) {

							var bone = skeleton.bones[ i ];

							if ( bone.name === nodeName ) {

								return bone;

							}

						}

						return null;

					};

					var bone = searchSkeleton( root.skeleton );

					if ( bone ) {

						return bone;

					}

				}

				// search into node subtree.
				if ( root.children ) {

					var searchNodeSubtree = function ( children ) {

						for ( var i = 0; i < children.length; i ++ ) {

							var childNode = children[ i ];

							if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

								return childNode;

							}

							var result = searchNodeSubtree( childNode.children );

							if ( result ) return result;

						}

						return null;

					};

					var subTreeNode = searchNodeSubtree( root.children );

					if ( subTreeNode ) {

						return subTreeNode;

					}

				}

				return null;

			}

		} );

		Object.assign( PropertyBinding.prototype, { // prototype, continued

			// these are used to "bind" a nonexistent property
			_getValue_unavailable: function () {},
			_setValue_unavailable: function () {},

			BindingType: {
				Direct: 0,
				EntireArray: 1,
				ArrayElement: 2,
				HasFromToArray: 3
			},

			Versioning: {
				None: 0,
				NeedsUpdate: 1,
				MatrixWorldNeedsUpdate: 2
			},

			GetterByBindingType: [

				function getValue_direct( buffer, offset ) {

					buffer[ offset ] = this.node[ this.propertyName ];

				},

				function getValue_array( buffer, offset ) {

					var source = this.resolvedProperty;

					for ( var i = 0, n = source.length; i !== n; ++ i ) {

						buffer[ offset ++ ] = source[ i ];

					}

				},

				function getValue_arrayElement( buffer, offset ) {

					buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

				},

				function getValue_toArray( buffer, offset ) {

					this.resolvedProperty.toArray( buffer, offset );

				}

			],

			SetterByBindingTypeAndVersioning: [

				[
					// Direct

					function setValue_direct( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];

					},

					function setValue_direct_setNeedsUpdate( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;

					},

					function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// EntireArray

					function setValue_array( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

					},

					function setValue_array_setNeedsUpdate( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

						this.targetObject.needsUpdate = true;

					},

					function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// ArrayElement

					function setValue_arrayElement( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

					},

					function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;

					},

					function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// HasToFromArray

					function setValue_fromArray( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );

					},

					function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.needsUpdate = true;

					},

					function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				]

			],

			getValue: function getValue_unbound( targetArray, offset ) {

				this.bind();
				this.getValue( targetArray, offset );

				// Note: This class uses a State pattern on a per-method basis:
				// 'bind' sets 'this.getValue' / 'setValue' and shadows the
				// prototype version of these methods with one that represents
				// the bound state. When the property is not found, the methods
				// become no-ops.

			},

			setValue: function getValue_unbound( sourceArray, offset ) {

				this.bind();
				this.setValue( sourceArray, offset );

			},

			// create getter / setter pair for a property in the scene graph
			bind: function () {

				var targetObject = this.node,
					parsedPath = this.parsedPath,

					objectName = parsedPath.objectName,
					propertyName = parsedPath.propertyName,
					propertyIndex = parsedPath.propertyIndex;

				if ( ! targetObject ) {

					targetObject = PropertyBinding.findNode(
							this.rootNode, parsedPath.nodeName ) || this.rootNode;

					this.node = targetObject;

				}

				// set fail state so we can just 'return' on error
				this.getValue = this._getValue_unavailable;
				this.setValue = this._setValue_unavailable;

				// ensure there is a value node
				if ( ! targetObject ) {

					console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
					return;

				}

				if ( objectName ) {

					var objectIndex = parsedPath.objectIndex;

					// special cases were we need to reach deeper into the hierarchy to get the face materials....
					switch ( objectName ) {

						case 'materials':

							if ( ! targetObject.material ) {

								console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
								return;

							}

							if ( ! targetObject.material.materials ) {

								console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
								return;

							}

							targetObject = targetObject.material.materials;

							break;

						case 'bones':

							if ( ! targetObject.skeleton ) {

								console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
								return;

							}

							// potential future optimization: skip this if propertyIndex is already an integer
							// and convert the integer string to a true integer.

							targetObject = targetObject.skeleton.bones;

							// support resolving morphTarget names into indices.
							for ( var i = 0; i < targetObject.length; i ++ ) {

								if ( targetObject[ i ].name === objectIndex ) {

									objectIndex = i;
									break;

								}

							}

							break;

						default:

							if ( targetObject[ objectName ] === undefined ) {

								console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
								return;

							}

							targetObject = targetObject[ objectName ];

					}


					if ( objectIndex !== undefined ) {

						if ( targetObject[ objectIndex ] === undefined ) {

							console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
							return;

						}

						targetObject = targetObject[ objectIndex ];

					}

				}

				// resolve property
				var nodeProperty = targetObject[ propertyName ];

				if ( nodeProperty === undefined ) {

					var nodeName = parsedPath.nodeName;

					console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
						'.' + propertyName + ' but it wasn\'t found.', targetObject );
					return;

				}

				// determine versioning scheme
				var versioning = this.Versioning.None;

				if ( targetObject.needsUpdate !== undefined ) { // material

					versioning = this.Versioning.NeedsUpdate;
					this.targetObject = targetObject;

				} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

					versioning = this.Versioning.MatrixWorldNeedsUpdate;
					this.targetObject = targetObject;

				}

				// determine how the property gets bound
				var bindingType = this.BindingType.Direct;

				if ( propertyIndex !== undefined ) {

					// access a sub element of the property array (only primitives are supported right now)

					if ( propertyName === "morphTargetInfluences" ) {

						// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

						// support resolving morphTarget names into indices.
						if ( ! targetObject.geometry ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
							return;

						}

						if ( targetObject.geometry.isBufferGeometry ) {

							if ( ! targetObject.geometry.morphAttributes ) {

								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
								return;

							}

							for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

								if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

									propertyIndex = i;
									break;

								}

							}


						} else {

							if ( ! targetObject.geometry.morphTargets ) {

								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
								return;

							}

							for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

								if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

									propertyIndex = i;
									break;

								}

							}

						}

					}

					bindingType = this.BindingType.ArrayElement;

					this.resolvedProperty = nodeProperty;
					this.propertyIndex = propertyIndex;

				} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

					// must use copy for Object3D.Euler/Quaternion

					bindingType = this.BindingType.HasFromToArray;

					this.resolvedProperty = nodeProperty;

				} else if ( Array.isArray( nodeProperty ) ) {

					bindingType = this.BindingType.EntireArray;

					this.resolvedProperty = nodeProperty;

				} else {

					this.propertyName = propertyName;

				}

				// select getter / setter
				this.getValue = this.GetterByBindingType[ bindingType ];
				this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

			},

			unbind: function () {

				this.node = null;

				// back to the prototype version of getValue / setValue
				// note: avoiding to mutate the shape of 'this' via 'delete'
				this.getValue = this._getValue_unbound;
				this.setValue = this._setValue_unbound;

			}

		} );

		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( PropertyBinding.prototype, {

			// initial state of these methods that calls 'bind'
			_getValue_unbound: PropertyBinding.prototype.getValue,
			_setValue_unbound: PropertyBinding.prototype.setValue,

		} );

		/**
		 *
		 * A group of objects that receives a shared animation state.
		 *
		 * Usage:
		 *
		 * 	-	Add objects you would otherwise pass as 'root' to the
		 * 		constructor or the .clipAction method of AnimationMixer.
		 *
		 * 	-	Instead pass this object as 'root'.
		 *
		 * 	-	You can also add and remove objects later when the mixer
		 * 		is running.
		 *
		 * Note:
		 *
		 *  	Objects of this class appear as one object to the mixer,
		 *  	so cache control of the individual objects must be done
		 *  	on the group.
		 *
		 * Limitation:
		 *
		 * 	- 	The animated properties must be compatible among the
		 * 		all objects in the group.
		 *
		 *  -	A single property can either be controlled through a
		 *  	target group or directly, but not both.
		 *
		 * @author tschw
		 */

		function AnimationObjectGroup( var_args ) {

			this.uuid = _Math.generateUUID();

			// cached objects followed by the active ones
			this._objects = Array.prototype.slice.call( arguments );

			this.nCachedObjects_ = 0;			// threshold
			// note: read by PropertyBinding.Composite

			var indices = {};
			this._indicesByUUID = indices;		// for bookkeeping

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				indices[ arguments[ i ].uuid ] = i;

			}

			this._paths = [];					// inside: string
			this._parsedPaths = [];				// inside: { we don't care, here }
			this._bindings = []; 				// inside: Array< PropertyBinding >
			this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

			var scope = this;

			this.stats = {

				objects: {
					get total() { return scope._objects.length; },
					get inUse() { return this.total - scope.nCachedObjects_; }
				},

				get bindingsPerObject() { return scope._bindings.length; }

			};

		}

		Object.assign( AnimationObjectGroup.prototype, {

			isAnimationObjectGroup: true,

			add: function( var_args ) {

				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ],
						knownObject = undefined;

					if ( index === undefined ) {

						// unknown object -> add it to the ACTIVE region

						index = nObjects ++;
						indicesByUUID[ uuid ] = index;
						objects.push( object );

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							bindings[ j ].push(
									new PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] ) );

						}

					} else if ( index < nCachedObjects ) {

						knownObject = objects[ index ];

						// move existing object to the ACTIVE region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ];

						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						indicesByUUID[ uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = object;

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								binding = bindingsForPath[ index ];

							bindingsForPath[ index ] = lastCached;

							if ( binding === undefined ) {

								// since we do not bother to create new bindings
								// for objects that are cached, the binding may
								// or may not exist

								binding = new PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] );

							}

							bindingsForPath[ firstActiveIndex ] = binding;

						}

					} else if ( objects[ index ] !== knownObject ) {

						console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
								'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

					} // else the object is already where we want it to be

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			remove: function( var_args ) {

				var objects = this._objects,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];

					if ( index !== undefined && index >= nCachedObjects ) {

						// move existing object into the CACHED region

						var lastCachedIndex = nCachedObjects ++,
							firstActiveObject = objects[ lastCachedIndex ];

						indicesByUUID[ firstActiveObject.uuid ] = index;
						objects[ index ] = firstActiveObject;

						indicesByUUID[ uuid ] = lastCachedIndex;
						objects[ lastCachedIndex ] = object;

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								firstActive = bindingsForPath[ lastCachedIndex ],
								binding = bindingsForPath[ index ];

							bindingsForPath[ index ] = firstActive;
							bindingsForPath[ lastCachedIndex ] = binding;

						}

					}

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			// remove & forget
			uncache: function( var_args ) {

				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];

					if ( index !== undefined ) {

						delete indicesByUUID[ uuid ];

						if ( index < nCachedObjects ) {

							// object is cached, shrink the CACHED region

							var firstActiveIndex = -- nCachedObjects,
								lastCachedObject = objects[ firstActiveIndex ],
								lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];

							// last cached object takes this object's place
							indicesByUUID[ lastCachedObject.uuid ] = index;
							objects[ index ] = lastCachedObject;

							// last object goes to the activated slot and pop
							indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
							objects[ firstActiveIndex ] = lastObject;
							objects.pop();

							// accounting is done, now do the same for all bindings

							for ( var j = 0, m = nBindings; j !== m; ++ j ) {

								var bindingsForPath = bindings[ j ],
									lastCached = bindingsForPath[ firstActiveIndex ],
									last = bindingsForPath[ lastIndex ];

								bindingsForPath[ index ] = lastCached;
								bindingsForPath[ firstActiveIndex ] = last;
								bindingsForPath.pop();

							}

						} else {

							// object is active, just swap with the last and pop

							var lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];

							indicesByUUID[ lastObject.uuid ] = index;
							objects[ index ] = lastObject;
							objects.pop();

							// accounting is done, now do the same for all bindings

							for ( var j = 0, m = nBindings; j !== m; ++ j ) {

								var bindingsForPath = bindings[ j ];

								bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
								bindingsForPath.pop();

							}

						} // cached or active

					} // if object is known

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			// Internal interface used by befriended PropertyBinding.Composite:

			subscribe_: function ( path, parsedPath ) {

				// returns an array of bindings for the given path that is changed
				// according to the contained objects in the group

				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ],
					bindings = this._bindings;

				if ( index !== undefined ) return bindings[ index ];

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					bindingsForPath = new Array( nObjects );

				index = bindings.length;

				indicesByPath[ path ] = index;

				paths.push( path );
				parsedPaths.push( parsedPath );
				bindings.push( bindingsForPath );

				for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

					var object = objects[ i ];
					bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

				}

				return bindingsForPath;

			},

			unsubscribe_: function ( path ) {

				// tells the group to forget about a property path and no longer
				// update the array previously obtained with 'subscribe_'

				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ];

				if ( index !== undefined ) {

					var paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						lastBindingsIndex = bindings.length - 1,
						lastBindings = bindings[ lastBindingsIndex ],
						lastBindingsPath = path[ lastBindingsIndex ];

					indicesByPath[ lastBindingsPath ] = index;

					bindings[ index ] = lastBindings;
					bindings.pop();

					parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
					parsedPaths.pop();

					paths[ index ] = paths[ lastBindingsIndex ];
					paths.pop();

				}

			}

		} );

		/**
		 *
		 * Action provided by AnimationMixer for scheduling clip playback on specific
		 * objects.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 *
		 */

		function AnimationAction( mixer, clip, localRoot ) {

			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot || null;

			var tracks = clip.tracks,
				nTracks = tracks.length,
				interpolants = new Array( nTracks );

			var interpolantSettings = {
					endingStart: 	ZeroCurvatureEnding,
					endingEnd:		ZeroCurvatureEnding
			};

			for ( var i = 0; i !== nTracks; ++ i ) {

				var interpolant = tracks[ i ].createInterpolant( null );
				interpolants[ i ] = interpolant;
				interpolant.settings = interpolantSettings;

			}

			this._interpolantSettings = interpolantSettings;

			this._interpolants = interpolants;	// bound by the mixer

			// inside: PropertyMixer (managed by the mixer)
			this._propertyBindings = new Array( nTracks );

			this._cacheIndex = null;			// for the memory manager
			this._byClipCacheIndex = null;		// for the memory manager

			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;

			this.loop = LoopRepeat;
			this._loopCount = -1;

			// global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action
			this._startTime = null;

			// scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop
			this.time = 0;

			this.timeScale = 1;
			this._effectiveTimeScale = 1;

			this.weight = 1;
			this._effectiveWeight = 1;

			this.repetitions = Infinity; 		// no. of repetitions when looping

			this.paused = false;				// true -> zero effective time scale
			this.enabled = true;				// false -> zero effective weight

			this.clampWhenFinished 	= false;	// keep feeding the last frame?

			this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
			this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

		}

		Object.assign( AnimationAction.prototype, {

			// State & Scheduling

			play: function() {

				this._mixer._activateAction( this );

				return this;

			},

			stop: function() {

				this._mixer._deactivateAction( this );

				return this.reset();

			},

			reset: function() {

				this.paused = false;
				this.enabled = true;

				this.time = 0;			// restart clip
				this._loopCount = -1;	// forget previous loops
				this._startTime = null;	// forget scheduling

				return this.stopFading().stopWarping();

			},

			isRunning: function() {

				return this.enabled && ! this.paused && this.timeScale !== 0 &&
						this._startTime === null && this._mixer._isActiveAction( this );

			},

			// return true when play has been called
			isScheduled: function() {

				return this._mixer._isActiveAction( this );

			},

			startAt: function( time ) {

				this._startTime = time;

				return this;

			},

			setLoop: function( mode, repetitions ) {

				this.loop = mode;
				this.repetitions = repetitions;

				return this;

			},

			// Weight

			// set the weight stopping any scheduled fading
			// although .enabled = false yields an effective weight of zero, this
			// method does *not* change .enabled, because it would be confusing
			setEffectiveWeight: function( weight ) {

				this.weight = weight;

				// note: same logic as when updated at runtime
				this._effectiveWeight = this.enabled ? weight : 0;

				return this.stopFading();

			},

			// return the weight considering fading and .enabled
			getEffectiveWeight: function() {

				return this._effectiveWeight;

			},

			fadeIn: function( duration ) {

				return this._scheduleFading( duration, 0, 1 );

			},

			fadeOut: function( duration ) {

				return this._scheduleFading( duration, 1, 0 );

			},

			crossFadeFrom: function( fadeOutAction, duration, warp ) {

				fadeOutAction.fadeOut( duration );
				this.fadeIn( duration );

				if( warp ) {

					var fadeInDuration = this._clip.duration,
						fadeOutDuration = fadeOutAction._clip.duration,

						startEndRatio = fadeOutDuration / fadeInDuration,
						endStartRatio = fadeInDuration / fadeOutDuration;

					fadeOutAction.warp( 1.0, startEndRatio, duration );
					this.warp( endStartRatio, 1.0, duration );

				}

				return this;

			},

			crossFadeTo: function( fadeInAction, duration, warp ) {

				return fadeInAction.crossFadeFrom( this, duration, warp );

			},

			stopFading: function() {

				var weightInterpolant = this._weightInterpolant;

				if ( weightInterpolant !== null ) {

					this._weightInterpolant = null;
					this._mixer._takeBackControlInterpolant( weightInterpolant );

				}

				return this;

			},

			// Time Scale Control

			// set the time scale stopping any scheduled warping
			// although .paused = true yields an effective time scale of zero, this
			// method does *not* change .paused, because it would be confusing
			setEffectiveTimeScale: function( timeScale ) {

				this.timeScale = timeScale;
				this._effectiveTimeScale = this.paused ? 0 :timeScale;

				return this.stopWarping();

			},

			// return the time scale considering warping and .paused
			getEffectiveTimeScale: function() {

				return this._effectiveTimeScale;

			},

			setDuration: function( duration ) {

				this.timeScale = this._clip.duration / duration;

				return this.stopWarping();

			},

			syncWith: function( action ) {

				this.time = action.time;
				this.timeScale = action.timeScale;

				return this.stopWarping();

			},

			halt: function( duration ) {

				return this.warp( this._effectiveTimeScale, 0, duration );

			},

			warp: function( startTimeScale, endTimeScale, duration ) {

				var mixer = this._mixer, now = mixer.time,
					interpolant = this._timeScaleInterpolant,

					timeScale = this.timeScale;

				if ( interpolant === null ) {

					interpolant = mixer._lendControlInterpolant();
					this._timeScaleInterpolant = interpolant;

				}

				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;

				times[ 0 ] = now;
				times[ 1 ] = now + duration;

				values[ 0 ] = startTimeScale / timeScale;
				values[ 1 ] = endTimeScale / timeScale;

				return this;

			},

			stopWarping: function() {

				var timeScaleInterpolant = this._timeScaleInterpolant;

				if ( timeScaleInterpolant !== null ) {

					this._timeScaleInterpolant = null;
					this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

				}

				return this;

			},

			// Object Accessors

			getMixer: function() {

				return this._mixer;

			},

			getClip: function() {

				return this._clip;

			},

			getRoot: function() {

				return this._localRoot || this._mixer._root;

			},

			// Interna

			_update: function( time, deltaTime, timeDirection, accuIndex ) {

				// called by the mixer

				if ( ! this.enabled ) {

					// call ._updateWeight() to update ._effectiveWeight

					this._updateWeight( time );
					return;

				}

				var startTime = this._startTime;

				if ( startTime !== null ) {

					// check for scheduled start of action

					var timeRunning = ( time - startTime ) * timeDirection;
					if ( timeRunning < 0 || timeDirection === 0 ) {

						return; // yet to come / don't decide when delta = 0

					}

					// start

					this._startTime = null; // unschedule
					deltaTime = timeDirection * timeRunning;

				}

				// apply time scale and advance time

				deltaTime *= this._updateTimeScale( time );
				var clipTime = this._updateTime( deltaTime );

				// note: _updateTime may disable the action resulting in
				// an effective weight of 0

				var weight = this._updateWeight( time );

				if ( weight > 0 ) {

					var interpolants = this._interpolants;
					var propertyMixers = this._propertyBindings;

					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );

					}

				}

			},

			_updateWeight: function( time ) {

				var weight = 0;

				if ( this.enabled ) {

					weight = this.weight;
					var interpolant = this._weightInterpolant;

					if ( interpolant !== null ) {

						var interpolantValue = interpolant.evaluate( time )[ 0 ];

						weight *= interpolantValue;

						if ( time > interpolant.parameterPositions[ 1 ] ) {

							this.stopFading();

							if ( interpolantValue === 0 ) {

								// faded out, disable
								this.enabled = false;

							}

						}

					}

				}

				this._effectiveWeight = weight;
				return weight;

			},

			_updateTimeScale: function( time ) {

				var timeScale = 0;

				if ( ! this.paused ) {

					timeScale = this.timeScale;

					var interpolant = this._timeScaleInterpolant;

					if ( interpolant !== null ) {

						var interpolantValue = interpolant.evaluate( time )[ 0 ];

						timeScale *= interpolantValue;

						if ( time > interpolant.parameterPositions[ 1 ] ) {

							this.stopWarping();

							if ( timeScale === 0 ) {

								// motion has halted, pause
								this.paused = true;

							} else {

								// warp done - apply final time scale
								this.timeScale = timeScale;

							}

						}

					}

				}

				this._effectiveTimeScale = timeScale;
				return timeScale;

			},

			_updateTime: function( deltaTime ) {

				var time = this.time + deltaTime;

				if ( deltaTime === 0 ) return time;

				var duration = this._clip.duration,

					loop = this.loop,
					loopCount = this._loopCount;

				if ( loop === LoopOnce ) {

					if ( loopCount === -1 ) {
						// just started

						this._loopCount = 0;
						this._setEndings( true, true, false );

					}

					handle_stop: {

						if ( time >= duration ) {

							time = duration;

						} else if ( time < 0 ) {

							time = 0;

						} else break handle_stop;

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime < 0 ? -1 : 1
						} );

					}

				} else { // repetitive Repeat or PingPong

					var pingPong = ( loop === LoopPingPong );

					if ( loopCount === -1 ) {
						// just started

						if ( deltaTime >= 0 ) {

							loopCount = 0;

							this._setEndings(
									true, this.repetitions === 0, pingPong );

						} else {

							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1

							this._setEndings(
									this.repetitions === 0, true, pingPong );

						}

					}

					if ( time >= duration || time < 0 ) {
						// wrap around

						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;

						loopCount += Math.abs( loopDelta );

						var pending = this.repetitions - loopCount;

						if ( pending < 0 ) {
							// have to stop (switch state, clamp time, fire event)

							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;

							time = deltaTime > 0 ? duration : 0;

							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : -1
							} );

						} else {
							// keep running

							if ( pending === 0 ) {
								// entering the last round

								var atStart = deltaTime < 0;
								this._setEndings( atStart, ! atStart, pingPong );

							} else {

								this._setEndings( false, false, pingPong );

							}

							this._loopCount = loopCount;

							this._mixer.dispatchEvent( {
								type: 'loop', action: this, loopDelta: loopDelta
							} );

						}

					}

					if ( pingPong && ( loopCount & 1 ) === 1 ) {
						// invert time for the "pong round"

						this.time = time;
						return duration - time;

					}

				}

				this.time = time;
				return time;

			},

			_setEndings: function( atStart, atEnd, pingPong ) {

				var settings = this._interpolantSettings;

				if ( pingPong ) {

					settings.endingStart 	= ZeroSlopeEnding;
					settings.endingEnd		= ZeroSlopeEnding;

				} else {

					// assuming for LoopOnce atStart == atEnd == true

					if ( atStart ) {

						settings.endingStart = this.zeroSlopeAtStart ?
								ZeroSlopeEnding : ZeroCurvatureEnding;

					} else {

						settings.endingStart = WrapAroundEnding;

					}

					if ( atEnd ) {

						settings.endingEnd = this.zeroSlopeAtEnd ?
								ZeroSlopeEnding : ZeroCurvatureEnding;

					} else {

						settings.endingEnd 	 = WrapAroundEnding;

					}

				}

			},

			_scheduleFading: function( duration, weightNow, weightThen ) {

				var mixer = this._mixer, now = mixer.time,
					interpolant = this._weightInterpolant;

				if ( interpolant === null ) {

					interpolant = mixer._lendControlInterpolant();
					this._weightInterpolant = interpolant;

				}

				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;

				times[ 0 ] = now; 				values[ 0 ] = weightNow;
				times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

				return this;

			}

		} );

		/**
		 *
		 * Player for AnimationClips.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		function AnimationMixer( root ) {

			this._root = root;
			this._initMemoryManager();
			this._accuIndex = 0;

			this.time = 0;

			this.timeScale = 1.0;

		}

		Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

			_bindAction: function ( action, prototypeAction ) {

				var root = action._localRoot || this._root,
					tracks = action._clip.tracks,
					nTracks = tracks.length,
					bindings = action._propertyBindings,
					interpolants = action._interpolants,
					rootUuid = root.uuid,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingsByName = bindingsByRoot[ rootUuid ];

				if ( bindingsByName === undefined ) {

					bindingsByName = {};
					bindingsByRoot[ rootUuid ] = bindingsByName;

				}

				for ( var i = 0; i !== nTracks; ++ i ) {

					var track = tracks[ i ],
						trackName = track.name,
						binding = bindingsByName[ trackName ];

					if ( binding !== undefined ) {

						bindings[ i ] = binding;

					} else {

						binding = bindings[ i ];

						if ( binding !== undefined ) {

							// existing binding, make sure the cache knows

							if ( binding._cacheIndex === null ) {

								++ binding.referenceCount;
								this._addInactiveBinding( binding, rootUuid, trackName );

							}

							continue;

						}

						var path = prototypeAction && prototypeAction.
								_propertyBindings[ i ].binding.parsedPath;

						binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

						bindings[ i ] = binding;

					}

					interpolants[ i ].resultBuffer = binding.buffer;

				}

			},

			_activateAction: function ( action ) {

				if ( ! this._isActiveAction( action ) ) {

					if ( action._cacheIndex === null ) {

						// this action has been forgotten by the cache, but the user
						// appears to be still using it -> rebind

						var rootUuid = ( action._localRoot || this._root ).uuid,
							clipUuid = action._clip.uuid,
							actionsForClip = this._actionsByClip[ clipUuid ];

						this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

						this._addInactiveAction( action, clipUuid, rootUuid );

					}

					var bindings = action._propertyBindings;

					// increment reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

						var binding = bindings[ i ];

						if ( binding.useCount ++ === 0 ) {

							this._lendBinding( binding );
							binding.saveOriginalState();

						}

					}

					this._lendAction( action );

				}

			},

			_deactivateAction: function ( action ) {

				if ( this._isActiveAction( action ) ) {

					var bindings = action._propertyBindings;

					// decrement reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

						var binding = bindings[ i ];

						if ( -- binding.useCount === 0 ) {

							binding.restoreOriginalState();
							this._takeBackBinding( binding );

						}

					}

					this._takeBackAction( action );

				}

			},

			// Memory manager

			_initMemoryManager: function () {

				this._actions = []; // 'nActiveActions' followed by inactive ones
				this._nActiveActions = 0;

				this._actionsByClip = {};
				// inside:
				// {
				// 		knownActions: Array< AnimationAction >	- used as prototypes
				// 		actionByRoot: AnimationAction			- lookup
				// }


				this._bindings = []; // 'nActiveBindings' followed by inactive ones
				this._nActiveBindings = 0;

				this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


				this._controlInterpolants = []; // same game as above
				this._nActiveControlInterpolants = 0;

				var scope = this;

				this.stats = {

					actions: {
						get total() { return scope._actions.length; },
						get inUse() { return scope._nActiveActions; }
					},
					bindings: {
						get total() { return scope._bindings.length; },
						get inUse() { return scope._nActiveBindings; }
					},
					controlInterpolants: {
						get total() { return scope._controlInterpolants.length; },
						get inUse() { return scope._nActiveControlInterpolants; }
					}

				};

			},

			// Memory management for AnimationAction objects

			_isActiveAction: function ( action ) {

				var index = action._cacheIndex;
				return index !== null && index < this._nActiveActions;

			},

			_addInactiveAction: function ( action, clipUuid, rootUuid ) {

				var actions = this._actions,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];

				if ( actionsForClip === undefined ) {

					actionsForClip = {

						knownActions: [ action ],
						actionByRoot: {}

					};

					action._byClipCacheIndex = 0;

					actionsByClip[ clipUuid ] = actionsForClip;

				} else {

					var knownActions = actionsForClip.knownActions;

					action._byClipCacheIndex = knownActions.length;
					knownActions.push( action );

				}

				action._cacheIndex = actions.length;
				actions.push( action );

				actionsForClip.actionByRoot[ rootUuid ] = action;

			},

			_removeInactiveAction: function ( action ) {

				var actions = this._actions,
					lastInactiveAction = actions[ actions.length - 1 ],
					cacheIndex = action._cacheIndex;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				action._cacheIndex = null;


				var clipUuid = action._clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ],
					knownActionsForClip = actionsForClip.knownActions,

					lastKnownAction =
						knownActionsForClip[ knownActionsForClip.length - 1 ],

					byClipCacheIndex = action._byClipCacheIndex;

				lastKnownAction._byClipCacheIndex = byClipCacheIndex;
				knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
				knownActionsForClip.pop();

				action._byClipCacheIndex = null;


				var actionByRoot = actionsForClip.actionByRoot,
					rootUuid = ( action._localRoot || this._root ).uuid;

				delete actionByRoot[ rootUuid ];

				if ( knownActionsForClip.length === 0 ) {

					delete actionsByClip[ clipUuid ];

				}

				this._removeInactiveBindingsForAction( action );

			},

			_removeInactiveBindingsForAction: function ( action ) {

				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.referenceCount === 0 ) {

						this._removeInactiveBinding( binding );

					}

				}

			},

			_lendAction: function ( action ) {

				// [ active actions |  inactive actions  ]
				// [  active actions >| inactive actions ]
				//                 s        a
				//                  <-swap->
				//                 a        s

				var actions = this._actions,
					prevIndex = action._cacheIndex,

					lastActiveIndex = this._nActiveActions ++,

					firstInactiveAction = actions[ lastActiveIndex ];

				action._cacheIndex = lastActiveIndex;
				actions[ lastActiveIndex ] = action;

				firstInactiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = firstInactiveAction;

			},

			_takeBackAction: function ( action ) {

				// [  active actions  | inactive actions ]
				// [ active actions |< inactive actions  ]
				//        a        s
				//         <-swap->
				//        s        a

				var actions = this._actions,
					prevIndex = action._cacheIndex,

					firstInactiveIndex = -- this._nActiveActions,

					lastActiveAction = actions[ firstInactiveIndex ];

				action._cacheIndex = firstInactiveIndex;
				actions[ firstInactiveIndex ] = action;

				lastActiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = lastActiveAction;

			},

			// Memory management for PropertyMixer objects

			_addInactiveBinding: function ( binding, rootUuid, trackName ) {

				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],

					bindings = this._bindings;

				if ( bindingByName === undefined ) {

					bindingByName = {};
					bindingsByRoot[ rootUuid ] = bindingByName;

				}

				bindingByName[ trackName ] = binding;

				binding._cacheIndex = bindings.length;
				bindings.push( binding );

			},

			_removeInactiveBinding: function ( binding ) {

				var bindings = this._bindings,
					propBinding = binding.binding,
					rootUuid = propBinding.rootNode.uuid,
					trackName = propBinding.path,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],

					lastInactiveBinding = bindings[ bindings.length - 1 ],
					cacheIndex = binding._cacheIndex;

				lastInactiveBinding._cacheIndex = cacheIndex;
				bindings[ cacheIndex ] = lastInactiveBinding;
				bindings.pop();

				delete bindingByName[ trackName ];

				remove_empty_map: {

					for ( var _ in bindingByName ) break remove_empty_map;

					delete bindingsByRoot[ rootUuid ];

				}

			},

			_lendBinding: function ( binding ) {

				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,

					lastActiveIndex = this._nActiveBindings ++,

					firstInactiveBinding = bindings[ lastActiveIndex ];

				binding._cacheIndex = lastActiveIndex;
				bindings[ lastActiveIndex ] = binding;

				firstInactiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = firstInactiveBinding;

			},

			_takeBackBinding: function ( binding ) {

				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,

					firstInactiveIndex = -- this._nActiveBindings,

					lastActiveBinding = bindings[ firstInactiveIndex ];

				binding._cacheIndex = firstInactiveIndex;
				bindings[ firstInactiveIndex ] = binding;

				lastActiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = lastActiveBinding;

			},


			// Memory management of Interpolants for weight and time scale

			_lendControlInterpolant: function () {

				var interpolants = this._controlInterpolants,
					lastActiveIndex = this._nActiveControlInterpolants ++,
					interpolant = interpolants[ lastActiveIndex ];

				if ( interpolant === undefined ) {

					interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
						1, this._controlInterpolantsResultBuffer );

					interpolant.__cacheIndex = lastActiveIndex;
					interpolants[ lastActiveIndex ] = interpolant;

				}

				return interpolant;

			},

			_takeBackControlInterpolant: function ( interpolant ) {

				var interpolants = this._controlInterpolants,
					prevIndex = interpolant.__cacheIndex,

					firstInactiveIndex = -- this._nActiveControlInterpolants,

					lastActiveInterpolant = interpolants[ firstInactiveIndex ];

				interpolant.__cacheIndex = firstInactiveIndex;
				interpolants[ firstInactiveIndex ] = interpolant;

				lastActiveInterpolant.__cacheIndex = prevIndex;
				interpolants[ prevIndex ] = lastActiveInterpolant;

			},

			_controlInterpolantsResultBuffer: new Float32Array( 1 ),

			// return an action for a clip optionally using a custom root target
			// object (this method allocates a lot of dynamic memory in case a
			// previously unknown clip/root combination is specified)
			clipAction: function ( clip, optionalRoot ) {

				var root = optionalRoot || this._root,
					rootUuid = root.uuid,

					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

					clipUuid = clipObject !== null ? clipObject.uuid : clip,

					actionsForClip = this._actionsByClip[ clipUuid ],
					prototypeAction = null;

				if ( actionsForClip !== undefined ) {

					var existingAction =
							actionsForClip.actionByRoot[ rootUuid ];

					if ( existingAction !== undefined ) {

						return existingAction;

					}

					// we know the clip, so we don't have to parse all
					// the bindings again but can just copy
					prototypeAction = actionsForClip.knownActions[ 0 ];

					// also, take the clip from the prototype action
					if ( clipObject === null )
						clipObject = prototypeAction._clip;

				}

				// clip must be known when specified via string
				if ( clipObject === null ) return null;

				// allocate all resources required to run it
				var newAction = new AnimationAction( this, clipObject, optionalRoot );

				this._bindAction( newAction, prototypeAction );

				// and make the action known to the memory manager
				this._addInactiveAction( newAction, clipUuid, rootUuid );

				return newAction;

			},

			// get an existing action
			existingAction: function ( clip, optionalRoot ) {

				var root = optionalRoot || this._root,
					rootUuid = root.uuid,

					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

					clipUuid = clipObject ? clipObject.uuid : clip,

					actionsForClip = this._actionsByClip[ clipUuid ];

				if ( actionsForClip !== undefined ) {

					return actionsForClip.actionByRoot[ rootUuid ] || null;

				}

				return null;

			},

			// deactivates all previously scheduled actions
			stopAllAction: function () {

				var actions = this._actions,
					nActions = this._nActiveActions,
					bindings = this._bindings,
					nBindings = this._nActiveBindings;

				this._nActiveActions = 0;
				this._nActiveBindings = 0;

				for ( var i = 0; i !== nActions; ++ i ) {

					actions[ i ].reset();

				}

				for ( var i = 0; i !== nBindings; ++ i ) {

					bindings[ i ].useCount = 0;

				}

				return this;

			},

			// advance the time and update apply the animation
			update: function ( deltaTime ) {

				deltaTime *= this.timeScale;

				var actions = this._actions,
					nActions = this._nActiveActions,

					time = this.time += deltaTime,
					timeDirection = Math.sign( deltaTime ),

					accuIndex = this._accuIndex ^= 1;

				// run active actions

				for ( var i = 0; i !== nActions; ++ i ) {

					var action = actions[ i ];

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

				// update scene graph

				var bindings = this._bindings,
					nBindings = this._nActiveBindings;

				for ( var i = 0; i !== nBindings; ++ i ) {

					bindings[ i ].apply( accuIndex );

				}

				return this;

			},

			// return this mixer's root target object
			getRoot: function () {

				return this._root;

			},

			// free all resources specific to a particular clip
			uncacheClip: function ( clip ) {

				var actions = this._actions,
					clipUuid = clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];

				if ( actionsForClip !== undefined ) {

					// note: just calling _removeInactiveAction would mess up the
					// iteration state and also require updating the state we can
					// just throw away

					var actionsToRemove = actionsForClip.knownActions;

					for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

						var action = actionsToRemove[ i ];

						this._deactivateAction( action );

						var cacheIndex = action._cacheIndex,
							lastInactiveAction = actions[ actions.length - 1 ];

						action._cacheIndex = null;
						action._byClipCacheIndex = null;

						lastInactiveAction._cacheIndex = cacheIndex;
						actions[ cacheIndex ] = lastInactiveAction;
						actions.pop();

						this._removeInactiveBindingsForAction( action );

					}

					delete actionsByClip[ clipUuid ];

				}

			},

			// free all resources specific to a particular root target object
			uncacheRoot: function ( root ) {

				var rootUuid = root.uuid,
					actionsByClip = this._actionsByClip;

				for ( var clipUuid in actionsByClip ) {

					var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
						action = actionByRoot[ rootUuid ];

					if ( action !== undefined ) {

						this._deactivateAction( action );
						this._removeInactiveAction( action );

					}

				}

				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ];

				if ( bindingByName !== undefined ) {

					for ( var trackName in bindingByName ) {

						var binding = bindingByName[ trackName ];
						binding.restoreOriginalState();
						this._removeInactiveBinding( binding );

					}

				}

			},

			// remove a targeted clip from the cache
			uncacheAction: function ( clip, optionalRoot ) {

				var action = this.existingAction( clip, optionalRoot );

				if ( action !== null ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Uniform( value ) {

			if ( typeof value === 'string' ) {

				console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
				value = arguments[ 1 ];

			}

			this.value = value;

		}

		Uniform.prototype.clone = function () {

			return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

		};

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		function InstancedBufferGeometry() {

			BufferGeometry.call( this );

			this.type = 'InstancedBufferGeometry';
			this.maxInstancedCount = undefined;

		}

		InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

			constructor: InstancedBufferGeometry,

			isInstancedBufferGeometry: true,

			addGroup: function ( start, count, materialIndex ) {

				this.groups.push( {

					start: start,
					count: count,
					materialIndex: materialIndex

				} );

			},

			copy: function ( source ) {

				var index = source.index;

				if ( index !== null ) {

					this.setIndex( index.clone() );

				}

				var attributes = source.attributes;

				for ( var name in attributes ) {

					var attribute = attributes[ name ];
					this.addAttribute( name, attribute.clone() );

				}

				var groups = source.groups;

				for ( var i = 0, l = groups.length; i < l; i ++ ) {

					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );

				}

				return this;

			}

		} );

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

			this.uuid = _Math.generateUUID();

			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;

			this.normalized = normalized === true;

		}

		Object.defineProperties( InterleavedBufferAttribute.prototype, {

			count: {

				get: function () {

					return this.data.count;

				}

			},

			array: {

				get: function () {

					return this.data.array;

				}

			}

		} );

		Object.assign( InterleavedBufferAttribute.prototype, {

			isInterleavedBufferAttribute: true,

			setX: function ( index, x ) {

				this.data.array[ index * this.data.stride + this.offset ] = x;

				return this;

			},

			setY: function ( index, y ) {

				this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

				return this;

			},

			setZ: function ( index, z ) {

				this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

				return this;

			},

			setW: function ( index, w ) {

				this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

				return this;

			},

			getX: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset ];

			},

			getY: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 1 ];

			},

			getZ: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 2 ];

			},

			getW: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 3 ];

			},

			setXY: function ( index, x, y ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;

				return this;

			},

			setXYZ: function ( index, x, y, z ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;

				return this;

			},

			setXYZW: function ( index, x, y, z, w ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
				this.data.array[ index + 3 ] = w;

				return this;

			}

		} );

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		function InterleavedBuffer( array, stride ) {

			this.uuid = _Math.generateUUID();

			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;

			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };

			this.onUploadCallback = function () {};

			this.version = 0;

		}

		Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

			set: function ( value ) {

				if ( value === true ) this.version ++;

			}

		} );

		Object.assign( InterleavedBuffer.prototype, {

			isInterleavedBuffer: true,

			setArray: function ( array ) {

				if ( Array.isArray( array ) ) {

					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

				}

				this.count = array !== undefined ? array.length / this.stride : 0;
				this.array = array;

			},

			setDynamic: function ( value ) {

				this.dynamic = value;

				return this;

			},

			copy: function ( source ) {

				this.array = new source.array.constructor( source.array );
				this.count = source.count;
				this.stride = source.stride;
				this.dynamic = source.dynamic;

				return this;

			},

			copyAt: function ( index1, attribute, index2 ) {

				index1 *= this.stride;
				index2 *= attribute.stride;

				for ( var i = 0, l = this.stride; i < l; i ++ ) {

					this.array[ index1 + i ] = attribute.array[ index2 + i ];

				}

				return this;

			},

			set: function ( value, offset ) {

				if ( offset === undefined ) offset = 0;

				this.array.set( value, offset );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			onUpload: function ( callback ) {

				this.onUploadCallback = callback;

				return this;

			}

		} );

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

			InterleavedBuffer.call( this, array, stride );

			this.meshPerAttribute = meshPerAttribute || 1;

		}

		InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

			constructor: InstancedInterleavedBuffer,

			isInstancedInterleavedBuffer: true,

			copy: function ( source ) {

				InterleavedBuffer.prototype.copy.call( this, source );

				this.meshPerAttribute = source.meshPerAttribute;

				return this;

			}

		} );

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

			BufferAttribute.call( this, array, itemSize );

			this.meshPerAttribute = meshPerAttribute || 1;

		}

		InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

			constructor: InstancedBufferAttribute,

			isInstancedBufferAttribute: true,

			copy: function ( source ) {

				BufferAttribute.prototype.copy.call( this, source );

				this.meshPerAttribute = source.meshPerAttribute;

				return this;

			}

		} );

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author bhouston / http://clara.io/
		 * @author stephomi / http://stephaneginier.com/
		 */

		function Raycaster( origin, direction, near, far ) {

			this.ray = new Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

			this.near = near || 0;
			this.far = far || Infinity;

			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};

			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );

		}

		function ascSort( a, b ) {

			return a.distance - b.distance;

		}

		function intersectObject( object, raycaster, intersects, recursive ) {

			if ( object.visible === false ) return;

			object.raycast( raycaster, intersects );

			if ( recursive === true ) {

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					intersectObject( children[ i ], raycaster, intersects, true );

				}

			}

		}

		Object.assign( Raycaster.prototype, {

			linePrecision: 1,

			set: function ( origin, direction ) {

				// direction is assumed to be normalized (for accurate distance calculations)

				this.ray.set( origin, direction );

			},

			setFromCamera: function ( coords, camera ) {

				if ( ( camera && camera.isPerspectiveCamera ) ) {

					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

				} else if ( ( camera && camera.isOrthographicCamera ) ) {

					this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

				} else {

					console.error( 'THREE.Raycaster: Unsupported camera type.' );

				}

			},

			intersectObject: function ( object, recursive ) {

				var intersects = [];

				intersectObject( object, this, intersects, recursive );

				intersects.sort( ascSort );

				return intersects;

			},

			intersectObjects: function ( objects, recursive ) {

				var intersects = [];

				if ( Array.isArray( objects ) === false ) {

					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;

				}

				for ( var i = 0, l = objects.length; i < l; i ++ ) {

					intersectObject( objects[ i ], this, intersects, recursive );

				}

				intersects.sort( ascSort );

				return intersects;

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function Clock( autoStart ) {

			this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;

			this.running = false;

		}

		Object.assign( Clock.prototype, {

			start: function () {

				this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

				this.oldTime = this.startTime;
				this.elapsedTime = 0;
				this.running = true;

			},

			stop: function () {

				this.getElapsedTime();
				this.running = false;
				this.autoStart = false;

			},

			getElapsedTime: function () {

				this.getDelta();
				return this.elapsedTime;

			},

			getDelta: function () {

				var diff = 0;

				if ( this.autoStart && ! this.running ) {

					this.start();
					return 0;

				}

				if ( this.running ) {

					var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

					diff = ( newTime - this.oldTime ) / 1000;
					this.oldTime = newTime;

					this.elapsedTime += diff;

				}

				return diff;

			}

		} );

		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
		 *
		 * The poles (phi) are at the positive and negative y axis.
		 * The equator starts at positive z.
		 */

		function Spherical( radius, phi, theta ) {

			this.radius = ( radius !== undefined ) ? radius : 1.0;
			this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
			this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

			return this;

		}

		Object.assign( Spherical.prototype, {

			set: function ( radius, phi, theta ) {

				this.radius = radius;
				this.phi = phi;
				this.theta = theta;

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( other ) {

				this.radius = other.radius;
				this.phi = other.phi;
				this.theta = other.theta;

				return this;

			},

			// restrict phi to be betwee EPS and PI-EPS
			makeSafe: function() {

				var EPS = 0.000001;
				this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

				return this;

			},

			setFromVector3: function( vec3 ) {

				this.radius = vec3.length();

				if ( this.radius === 0 ) {

					this.theta = 0;
					this.phi = 0;

				} else {

					this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
					this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

				}

				return this;

			}

		} );

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
		 *
		 */

		function Cylindrical( radius, theta, y ) {

			this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
			this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
			this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

			return this;

		}

		Object.assign( Cylindrical.prototype, {

			set: function ( radius, theta, y ) {

				this.radius = radius;
				this.theta = theta;
				this.y = y;

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( other ) {

				this.radius = other.radius;
				this.theta = other.theta;
				this.y = other.y;

				return this;

			},

			setFromVector3: function( vec3 ) {

				this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
				this.theta = Math.atan2( vec3.x, vec3.z );
				this.y = vec3.y;

				return this;

			}

		} );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function MorphBlendMesh( geometry, material ) {

			Mesh.call( this, geometry, material );

			this.animationsMap = {};
			this.animationsList = [];

			// prepare default animation
			// (all frames played together in 1 second)

			var numFrames = this.geometry.morphTargets.length;

			var name = "__default";

			var startFrame = 0;
			var endFrame = numFrames - 1;

			var fps = numFrames / 1;

			this.createAnimation( name, startFrame, endFrame, fps );
			this.setAnimationWeight( name, 1 );

		}

		MorphBlendMesh.prototype = Object.create( Mesh.prototype );
		MorphBlendMesh.prototype.constructor = MorphBlendMesh;

		MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

			var animation = {

				start: start,
				end: end,

				length: end - start + 1,

				fps: fps,
				duration: ( end - start ) / fps,

				lastFrame: 0,
				currentFrame: 0,

				active: false,

				time: 0,
				direction: 1,
				weight: 1,

				directionBackwards: false,
				mirroredLoop: false

			};

			this.animationsMap[ name ] = animation;
			this.animationsList.push( animation );

		};

		MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

			var pattern = /([a-z]+)_?(\d+)/i;

			var firstAnimation, frameRanges = {};

			var geometry = this.geometry;

			for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

				var morph = geometry.morphTargets[ i ];
				var chunks = morph.name.match( pattern );

				if ( chunks && chunks.length > 1 ) {

					var name = chunks[ 1 ];

					if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

					var range = frameRanges[ name ];

					if ( i < range.start ) range.start = i;
					if ( i > range.end ) range.end = i;

					if ( ! firstAnimation ) firstAnimation = name;

				}

			}

			for ( var name in frameRanges ) {

				var range = frameRanges[ name ];
				this.createAnimation( name, range.start, range.end, fps );

			}

			this.firstAnimation = firstAnimation;

		};

		MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.direction = 1;
				animation.directionBackwards = false;

			}

		};

		MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.direction = - 1;
				animation.directionBackwards = true;

			}

		};

		MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.fps = fps;
				animation.duration = ( animation.end - animation.start ) / animation.fps;

			}

		};

		MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.duration = duration;
				animation.fps = ( animation.end - animation.start ) / animation.duration;

			}

		};

		MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.weight = weight;

			}

		};

		MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.time = time;

			}

		};

		MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

			var time = 0;

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				time = animation.time;

			}

			return time;

		};

		MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

			var duration = - 1;

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				duration = animation.duration;

			}

			return duration;

		};

		MorphBlendMesh.prototype.playAnimation = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.time = 0;
				animation.active = true;

			} else {

				console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

			}

		};

		MorphBlendMesh.prototype.stopAnimation = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.active = false;

			}

		};

		MorphBlendMesh.prototype.update = function ( delta ) {

			for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

				var animation = this.animationsList[ i ];

				if ( ! animation.active ) continue;

				var frameTime = animation.duration / animation.length;

				animation.time += animation.direction * delta;

				if ( animation.mirroredLoop ) {

					if ( animation.time > animation.duration || animation.time < 0 ) {

						animation.direction *= - 1;

						if ( animation.time > animation.duration ) {

							animation.time = animation.duration;
							animation.directionBackwards = true;

						}

						if ( animation.time < 0 ) {

							animation.time = 0;
							animation.directionBackwards = false;

						}

					}

				} else {

					animation.time = animation.time % animation.duration;

					if ( animation.time < 0 ) animation.time += animation.duration;

				}

				var keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
				var weight = animation.weight;

				if ( keyframe !== animation.currentFrame ) {

					this.morphTargetInfluences[ animation.lastFrame ] = 0;
					this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

					this.morphTargetInfluences[ keyframe ] = 0;

					animation.lastFrame = animation.currentFrame;
					animation.currentFrame = keyframe;

				}

				var mix = ( animation.time % frameTime ) / frameTime;

				if ( animation.directionBackwards ) mix = 1 - mix;

				if ( animation.currentFrame !== animation.lastFrame ) {

					this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
					this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

				} else {

					this.morphTargetInfluences[ animation.currentFrame ] = weight;

				}

			}

		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		function ImmediateRenderObject( material ) {

			Object3D.call( this );

			this.material = material;
			this.render = function ( renderCallback ) {};

		}

		ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
		ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

		ImmediateRenderObject.prototype.isImmediateRenderObject = true;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		function VertexNormalsHelper( object, size, hex, linewidth ) {

			this.object = object;

			this.size = ( size !== undefined ) ? size : 1;

			var color = ( hex !== undefined ) ? hex : 0xff0000;

			var width = ( linewidth !== undefined ) ? linewidth : 1;

			//

			var nNormals = 0;

			var objGeometry = this.object.geometry;

			if ( objGeometry && objGeometry.isGeometry ) {

				nNormals = objGeometry.faces.length * 3;

			} else if ( objGeometry && objGeometry.isBufferGeometry ) {

				nNormals = objGeometry.attributes.normal.count;

			}

			//

			var geometry = new BufferGeometry();

			var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

			geometry.addAttribute( 'position', positions );

			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

			//

			this.matrixAutoUpdate = false;

			this.update();

		}

		VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
		VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

		VertexNormalsHelper.prototype.update = ( function () {

			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();

			return function update() {

				var keys = [ 'a', 'b', 'c' ];

				this.object.updateMatrixWorld( true );

				normalMatrix.getNormalMatrix( this.object.matrixWorld );

				var matrixWorld = this.object.matrixWorld;

				var position = this.geometry.attributes.position;

				//

				var objGeometry = this.object.geometry;

				if ( objGeometry && objGeometry.isGeometry ) {

					var vertices = objGeometry.vertices;

					var faces = objGeometry.faces;

					var idx = 0;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						var face = faces[ i ];

						for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

							var vertex = vertices[ face[ keys[ j ] ] ];

							var normal = face.vertexNormals[ j ];

							v1.copy( vertex ).applyMatrix4( matrixWorld );

							v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

							position.setXYZ( idx, v1.x, v1.y, v1.z );

							idx = idx + 1;

							position.setXYZ( idx, v2.x, v2.y, v2.z );

							idx = idx + 1;

						}

					}

				} else if ( objGeometry && objGeometry.isBufferGeometry ) {

					var objPos = objGeometry.attributes.position;

					var objNorm = objGeometry.attributes.normal;

					var idx = 0;

					// for simplicity, ignore index and drawcalls, and render every normal

					for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

						v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

						v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

						v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

				position.needsUpdate = true;

			};

		}() );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		function SpotLightHelper( light ) {

			Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			var geometry = new BufferGeometry();

			var positions = [
				0, 0, 0,   0,   0,   1,
				0, 0, 0,   1,   0,   1,
				0, 0, 0, - 1,   0,   1,
				0, 0, 0,   0,   1,   1,
				0, 0, 0,   0, - 1,   1
			];

			for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

				var p1 = ( i / l ) * Math.PI * 2;
				var p2 = ( j / l ) * Math.PI * 2;

				positions.push(
					Math.cos( p1 ), Math.sin( p1 ), 1,
					Math.cos( p2 ), Math.sin( p2 ), 1
				);

			}

			geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

			var material = new LineBasicMaterial( { fog: false } );

			this.cone = new LineSegments( geometry, material );
			this.add( this.cone );

			this.update();

		}

		SpotLightHelper.prototype = Object.create( Object3D.prototype );
		SpotLightHelper.prototype.constructor = SpotLightHelper;

		SpotLightHelper.prototype.dispose = function () {

			this.cone.geometry.dispose();
			this.cone.material.dispose();

		};

		SpotLightHelper.prototype.update = function () {

			var vector = new Vector3();
			var vector2 = new Vector3();

			return function update() {

				this.light.updateMatrixWorld();

				var coneLength = this.light.distance ? this.light.distance : 1000;
				var coneWidth = coneLength * Math.tan( this.light.angle );

				this.cone.scale.set( coneWidth, coneWidth, coneLength );

				vector.setFromMatrixPosition( this.light.matrixWorld );
				vector2.setFromMatrixPosition( this.light.target.matrixWorld );

				this.cone.lookAt( vector2.sub( vector ) );

				this.cone.material.color.copy( this.light.color );

			};

		}();

		/**
		 * @author Sean Griffin / http://twitter.com/sgrif
		 * @author Michael Guerrero / http://realitymeltdown.com
		 * @author mrdoob / http://mrdoob.com/
		 * @author ikerr / http://verold.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		function getBoneList( object ) {

			var boneList = [];

			if ( object && object.isBone ) {

				boneList.push( object );

			}

			for ( var i = 0; i < object.children.length; i ++ ) {

				boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

			}

			return boneList;

		}

		function SkeletonHelper( object ) {

			var bones = getBoneList( object );

			var geometry = new BufferGeometry();

			var vertices = [];
			var colors = [];

			var color1 = new Color( 0, 0, 1 );
			var color2 = new Color( 0, 1, 0 );

			for ( var i = 0; i < bones.length; i ++ ) {

				var bone = bones[ i ];

				if ( bone.parent && bone.parent.isBone ) {

					vertices.push( 0, 0, 0 );
					vertices.push( 0, 0, 0 );
					colors.push( color1.r, color1.g, color1.b );
					colors.push( color2.r, color2.g, color2.b );

				}

			}

			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

			var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

			LineSegments.call( this, geometry, material );

			this.root = object;
			this.bones = bones;

			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;

			this.onBeforeRender();

		}

		SkeletonHelper.prototype = Object.create( LineSegments.prototype );
		SkeletonHelper.prototype.constructor = SkeletonHelper;

		SkeletonHelper.prototype.onBeforeRender = function () {

			var vector = new Vector3();

			var boneMatrix = new Matrix4();
			var matrixWorldInv = new Matrix4();

			return function onBeforeRender() {

				var bones = this.bones;

				var geometry = this.geometry;
				var position = geometry.getAttribute( 'position' );

				matrixWorldInv.getInverse( this.root.matrixWorld );

				for ( var i = 0, j = 0; i < bones.length; i ++ ) {

					var bone = bones[ i ];

					if ( bone.parent && bone.parent.isBone ) {

						boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
						vector.setFromMatrixPosition( boneMatrix );
						position.setXYZ( j, vector.x, vector.y, vector.z );

						boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
						vector.setFromMatrixPosition( boneMatrix );
						position.setXYZ( j + 1, vector.x, vector.y, vector.z );

						j += 2;

					}

				}

				geometry.getAttribute( 'position' ).needsUpdate = true;

			};

		}();

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		function PointLightHelper( light, sphereSize ) {

			this.light = light;
			this.light.updateMatrixWorld();

			var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
			var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
			material.color.copy( this.light.color );

			Mesh.call( this, geometry, material );

			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;

			/*
			var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
			var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

			var d = light.distance;

			if ( d === 0.0 ) {

				this.lightDistance.visible = false;

			} else {

				this.lightDistance.scale.set( d, d, d );

			}

			this.add( this.lightDistance );
			*/

		}

		PointLightHelper.prototype = Object.create( Mesh.prototype );
		PointLightHelper.prototype.constructor = PointLightHelper;

		PointLightHelper.prototype.dispose = function () {

			this.geometry.dispose();
			this.material.dispose();

		};

		PointLightHelper.prototype.update = function () {

			this.material.color.copy( this.light.color );

			/*
			var d = this.light.distance;

			if ( d === 0.0 ) {

				this.lightDistance.visible = false;

			} else {

				this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );

			}
			*/

		};

		/**
		 * @author abelnation / http://github.com/abelnation
		 * @author Mugen87 / http://github.com/Mugen87
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function RectAreaLightHelper( light ) {

			Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			var material = new LineBasicMaterial( { color: light.color } );

			var geometry = new BufferGeometry();

			geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );

			this.add( new Line( geometry, material ) );

			this.update();

		}

		RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
		RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

		RectAreaLightHelper.prototype.dispose = function () {

			this.children[ 0 ].geometry.dispose();
			this.children[ 0 ].material.dispose();

		};

		RectAreaLightHelper.prototype.update = function () {

			var line = this.children[ 0 ];

			// update material

			line.material.color.copy( this.light.color );

			// calculate new dimensions of the helper

			var hx = this.light.width * 0.5;
			var hy = this.light.height * 0.5;

			var position = line.geometry.attributes.position;
			var array = position.array;

			// update vertices

			array[  0 ] =   hx; array[  1 ] = - hy; array[  2 ] = 0;
			array[  3 ] =   hx; array[  4 ] =   hy; array[  5 ] = 0;
			array[  6 ] = - hx; array[  7 ] =   hy; array[  8 ] = 0;
			array[  9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
			array[ 12 ] =   hx; array[ 13 ] = - hy; array[ 14 ] = 0;

			position.needsUpdate = true;

		};

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		function HemisphereLightHelper( light, size ) {

			Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			var geometry = new OctahedronBufferGeometry( size );
			geometry.rotateY( Math.PI * 0.5 );

			var material = new MeshBasicMaterial( { vertexColors: VertexColors, wireframe: true } );

			var position = geometry.getAttribute( 'position' );
			var colors = new Float32Array( position.count * 3 );

			geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

			this.add( new Mesh( geometry, material ) );

			this.update();

		}

		HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
		HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

		HemisphereLightHelper.prototype.dispose = function () {

			this.children[ 0 ].geometry.dispose();
			this.children[ 0 ].material.dispose();

		};

		HemisphereLightHelper.prototype.update = function () {

			var vector = new Vector3();

			var color1 = new Color();
			var color2 = new Color();

			return function update() {

				var mesh = this.children[ 0 ];

				var colors = mesh.geometry.getAttribute( 'color' );

				color1.copy( this.light.color );
				color2.copy( this.light.groundColor );

				for ( var i = 0, l = colors.count; i < l; i ++ ) {

					var color = ( i < ( l / 2 ) ) ? color1 : color2;

					colors.setXYZ( i, color.r, color.g, color.b );

				}

				mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

				colors.needsUpdate = true;

			};

		}();

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function GridHelper( size, divisions, color1, color2 ) {

			size = size || 10;
			divisions = divisions || 10;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

			var center = divisions / 2;
			var step = size / divisions;
			var halfSize = size / 2;

			var vertices = [], colors = [];

			for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

				vertices.push( - halfSize, 0, k, halfSize, 0, k );
				vertices.push( k, 0, - halfSize, k, 0, halfSize );

				var color = i === center ? color1 : color2;

				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;

			}

			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

			var material = new LineBasicMaterial( { vertexColors: VertexColors } );

			LineSegments.call( this, geometry, material );

		}

		GridHelper.prototype = Object.create( LineSegments.prototype );
		GridHelper.prototype.constructor = GridHelper;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 * @author Hectate / http://www.github.com/Hectate
		 */

		function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

			radius = radius || 10;
			radials = radials || 16;
			circles = circles || 8;
			divisions = divisions || 64;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

			var vertices = [];
			var colors = [];

			var x, z;
			var v, i, j, r, color;

			// create the radials

			for ( i = 0; i <= radials; i ++ ) {

				v = ( i / radials ) * ( Math.PI * 2 );

				x = Math.sin( v ) * radius;
				z = Math.cos( v ) * radius;

				vertices.push( 0, 0, 0 );
				vertices.push( x, 0, z );

				color = ( i & 1 ) ? color1 : color2;

				colors.push( color.r, color.g, color.b );
				colors.push( color.r, color.g, color.b );

			}

			// create the circles

			for ( i = 0; i <= circles; i ++ ) {

				color = ( i & 1 ) ? color1 : color2;

				r = radius - ( radius / circles * i );

				for ( j = 0; j < divisions; j ++ ) {

					// first vertex

					v = ( j / divisions ) * ( Math.PI * 2 );

					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;

					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );

					// second vertex

					v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;

					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );

				}

			}

			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

			var material = new LineBasicMaterial( { vertexColors: VertexColors } );

			LineSegments.call( this, geometry, material );

		}

		PolarGridHelper.prototype = Object.create( LineSegments.prototype );
		PolarGridHelper.prototype.constructor = PolarGridHelper;

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		function FaceNormalsHelper( object, size, hex, linewidth ) {

			// FaceNormalsHelper only supports THREE.Geometry

			this.object = object;

			this.size = ( size !== undefined ) ? size : 1;

			var color = ( hex !== undefined ) ? hex : 0xffff00;

			var width = ( linewidth !== undefined ) ? linewidth : 1;

			//

			var nNormals = 0;

			var objGeometry = this.object.geometry;

			if ( objGeometry && objGeometry.isGeometry ) {

				nNormals = objGeometry.faces.length;

			} else {

				console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

			}

			//

			var geometry = new BufferGeometry();

			var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

			geometry.addAttribute( 'position', positions );

			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

			//

			this.matrixAutoUpdate = false;
			this.update();

		}

		FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
		FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

		FaceNormalsHelper.prototype.update = ( function () {

			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();

			return function update() {

				this.object.updateMatrixWorld( true );

				normalMatrix.getNormalMatrix( this.object.matrixWorld );

				var matrixWorld = this.object.matrixWorld;

				var position = this.geometry.attributes.position;

				//

				var objGeometry = this.object.geometry;

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					var normal = face.normal;

					v1.copy( vertices[ face.a ] )
						.add( vertices[ face.b ] )
						.add( vertices[ face.c ] )
						.divideScalar( 3 )
						.applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

				position.needsUpdate = true;

			};

		}() );

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		function DirectionalLightHelper( light, size ) {

			Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			if ( size === undefined ) size = 1;

			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( [
				- size,   size, 0,
				  size,   size, 0,
				  size, - size, 0,
				- size, - size, 0,
				- size,   size, 0
			], 3 ) );

			var material = new LineBasicMaterial( { fog: false } );

			this.add( new Line( geometry, material ) );

			geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

			this.add( new Line( geometry, material ));

			this.update();

		}

		DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
		DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

		DirectionalLightHelper.prototype.dispose = function () {

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.geometry.dispose();
			lightPlane.material.dispose();
			targetLine.geometry.dispose();
			targetLine.material.dispose();

		};

		DirectionalLightHelper.prototype.update = function () {

			var v1 = new Vector3();
			var v2 = new Vector3();
			var v3 = new Vector3();

			return function update() {

				v1.setFromMatrixPosition( this.light.matrixWorld );
				v2.setFromMatrixPosition( this.light.target.matrixWorld );
				v3.subVectors( v2, v1 );

				var lightPlane = this.children[ 0 ];
				var targetLine = this.children[ 1 ];

				lightPlane.lookAt( v3 );
				lightPlane.material.color.copy( this.light.color );

				targetLine.lookAt( v3 );
				targetLine.scale.z = v3.length();

			};

		}();

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 *	- shows frustum, line of sight and up of the camera
		 *	- suitable for fast updates
		 * 	- based on frustum visualization in lightgl.js shadowmap example
		 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
		 */

		function CameraHelper( camera ) {

			var geometry = new BufferGeometry();
			var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

			var vertices = [];
			var colors = [];

			var pointMap = {};

			// colors

			var colorFrustum = new Color( 0xffaa00 );
			var colorCone = new Color( 0xff0000 );
			var colorUp = new Color( 0x00aaff );
			var colorTarget = new Color( 0xffffff );
			var colorCross = new Color( 0x333333 );

			// near

			addLine( "n1", "n2", colorFrustum );
			addLine( "n2", "n4", colorFrustum );
			addLine( "n4", "n3", colorFrustum );
			addLine( "n3", "n1", colorFrustum );

			// far

			addLine( "f1", "f2", colorFrustum );
			addLine( "f2", "f4", colorFrustum );
			addLine( "f4", "f3", colorFrustum );
			addLine( "f3", "f1", colorFrustum );

			// sides

			addLine( "n1", "f1", colorFrustum );
			addLine( "n2", "f2", colorFrustum );
			addLine( "n3", "f3", colorFrustum );
			addLine( "n4", "f4", colorFrustum );

			// cone

			addLine( "p", "n1", colorCone );
			addLine( "p", "n2", colorCone );
			addLine( "p", "n3", colorCone );
			addLine( "p", "n4", colorCone );

			// up

			addLine( "u1", "u2", colorUp );
			addLine( "u2", "u3", colorUp );
			addLine( "u3", "u1", colorUp );

			// target

			addLine( "c", "t", colorTarget );
			addLine( "p", "c", colorCross );

			// cross

			addLine( "cn1", "cn2", colorCross );
			addLine( "cn3", "cn4", colorCross );

			addLine( "cf1", "cf2", colorCross );
			addLine( "cf3", "cf4", colorCross );

			function addLine( a, b, color ) {

				addPoint( a, color );
				addPoint( b, color );

			}

			function addPoint( id, color ) {

				vertices.push( 0, 0, 0 );
				colors.push( color.r, color.g, color.b );

				if ( pointMap[ id ] === undefined ) {

					pointMap[ id ] = [];

				}

				pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

			}

			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

			LineSegments.call( this, geometry, material );

			this.camera = camera;
			if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;

			this.pointMap = pointMap;

			this.update();

		}

		CameraHelper.prototype = Object.create( LineSegments.prototype );
		CameraHelper.prototype.constructor = CameraHelper;

		CameraHelper.prototype.update = function () {

			var geometry, pointMap;

			var vector = new Vector3();
			var camera = new Camera();

			function setPoint( point, x, y, z ) {

				vector.set( x, y, z ).unproject( camera );

				var points = pointMap[ point ];

				if ( points !== undefined ) {

					var position = geometry.getAttribute( 'position' );

					for ( var i = 0, l = points.length; i < l; i ++ ) {

						position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

					}

				}

			}

			return function update() {

				geometry = this.geometry;
				pointMap = this.pointMap;

				var w = 1, h = 1;

				// we need just camera projection matrix
				// world matrix must be identity

				camera.projectionMatrix.copy( this.camera.projectionMatrix );

				// center / target

				setPoint( "c", 0, 0, - 1 );
				setPoint( "t", 0, 0,  1 );

				// near

				setPoint( "n1", - w, - h, - 1 );
				setPoint( "n2",   w, - h, - 1 );
				setPoint( "n3", - w,   h, - 1 );
				setPoint( "n4",   w,   h, - 1 );

				// far

				setPoint( "f1", - w, - h, 1 );
				setPoint( "f2",   w, - h, 1 );
				setPoint( "f3", - w,   h, 1 );
				setPoint( "f4",   w,   h, 1 );

				// up

				setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
				setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
				setPoint( "u3",         0, h * 2,   - 1 );

				// cross

				setPoint( "cf1", - w,   0, 1 );
				setPoint( "cf2",   w,   0, 1 );
				setPoint( "cf3",   0, - h, 1 );
				setPoint( "cf4",   0,   h, 1 );

				setPoint( "cn1", - w,   0, - 1 );
				setPoint( "cn2",   w,   0, - 1 );
				setPoint( "cn3",   0, - h, - 1 );
				setPoint( "cn4",   0,   h, - 1 );

				geometry.getAttribute( 'position' ).needsUpdate = true;

			};

		}();

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 */

		function BoxHelper( object, color ) {

			this.object = object;

			if ( color === undefined ) color = 0xffff00;

			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
			var positions = new Float32Array( 8 * 3 );

			var geometry = new BufferGeometry();
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
			geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

			this.matrixAutoUpdate = false;

			this.update();

		}

		BoxHelper.prototype = Object.create( LineSegments.prototype );
		BoxHelper.prototype.constructor = BoxHelper;

		BoxHelper.prototype.update = ( function () {

			var box = new Box3();

			return function update( object ) {

				if ( object !== undefined ) {

					console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

				}

				if ( this.object !== undefined ) {

					box.setFromObject( this.object );

				}

				if ( box.isEmpty() ) return;

				var min = box.min;
				var max = box.max;

				/*
				  5____4
				1/___0/|
				| 6__|_7
				2/___3/

				0: max.x, max.y, max.z
				1: min.x, max.y, max.z
				2: min.x, min.y, max.z
				3: max.x, min.y, max.z
				4: max.x, max.y, min.z
				5: min.x, max.y, min.z
				6: min.x, min.y, min.z
				7: max.x, min.y, min.z
				*/

				var position = this.geometry.attributes.position;
				var array = position.array;

				array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
				array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
				array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
				array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
				array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
				array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
				array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
				array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

				position.needsUpdate = true;

				this.geometry.computeBoundingSphere();

			};

		} )();

		BoxHelper.prototype.setFromObject = function ( object ) {

			this.object = object;
			this.update();

			return this;

		};

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author zz85 / http://github.com/zz85
		 * @author bhouston / http://clara.io
		 *
		 * Creates an arrow for visualizing directions
		 *
		 * Parameters:
		 *  dir - Vector3
		 *  origin - Vector3
		 *  length - Number
		 *  color - color in hex value
		 *  headLength - Number
		 *  headWidth - Number
		 */

		var lineGeometry;
		var coneGeometry;

		function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

			// dir is assumed to be normalized

			Object3D.call( this );

			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			if ( lineGeometry === undefined ) {

				lineGeometry = new BufferGeometry();
				lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

				coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
				coneGeometry.translate( 0, - 0.5, 0 );

			}

			this.position.copy( origin );

			this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );

			this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );

			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );

		}

		ArrowHelper.prototype = Object.create( Object3D.prototype );
		ArrowHelper.prototype.constructor = ArrowHelper;

		ArrowHelper.prototype.setDirection = ( function () {

			var axis = new Vector3();
			var radians;

			return function setDirection( dir ) {

				// dir is assumed to be normalized

				if ( dir.y > 0.99999 ) {

					this.quaternion.set( 0, 0, 0, 1 );

				} else if ( dir.y < - 0.99999 ) {

					this.quaternion.set( 1, 0, 0, 0 );

				} else {

					axis.set( dir.z, 0, - dir.x ).normalize();

					radians = Math.acos( dir.y );

					this.quaternion.setFromAxisAngle( axis, radians );

				}

			};

		}() );

		ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
			this.line.updateMatrix();

			this.cone.scale.set( headWidth, headLength, headWidth );
			this.cone.position.y = length;
			this.cone.updateMatrix();

		};

		ArrowHelper.prototype.setColor = function ( color ) {

			this.line.material.color.copy( color );
			this.cone.material.color.copy( color );

		};

		/**
		 * @author sroucheray / http://sroucheray.org/
		 * @author mrdoob / http://mrdoob.com/
		 */

		function AxisHelper( size ) {

			size = size || 1;

			var vertices = [
				0, 0, 0,  size, 0, 0,
				0, 0, 0,  0, size, 0,
				0, 0, 0,  0, 0, size
			];

			var colors = [
				1, 0, 0,  1, 0.6, 0,
				0, 1, 0,  0.6, 1, 0,
				0, 0, 1,  0, 0.6, 1
			];

			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

			var material = new LineBasicMaterial( { vertexColors: VertexColors } );

			LineSegments.call( this, geometry, material );

		}

		AxisHelper.prototype = Object.create( LineSegments.prototype );
		AxisHelper.prototype.constructor = AxisHelper;

		/**
		 * @author zz85 https://github.com/zz85
		 *
		 * Centripetal CatmullRom Curve - which is useful for avoiding
		 * cusps and self-intersections in non-uniform catmull rom curves.
		 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
		 *
		 * curve.type accepts centripetal(default), chordal and catmullrom
		 * curve.tension is used for catmullrom which defaults to 0.5
		 */


		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {

			var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

			/*
			 * Compute coefficients for a cubic polynomial
			 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
			 * such that
			 *   p(0) = x0, p(1) = x1
			 *  and
			 *   p'(0) = t0, p'(1) = t1.
			 */
			function init( x0, x1, t0, t1 ) {

				c0 = x0;
				c1 = t0;
				c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
				c3 = 2 * x0 - 2 * x1 + t0 + t1;

			}

			return {

				initCatmullRom: function ( x0, x1, x2, x3, tension ) {

					init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

				},

				initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

					// compute tangents when parameterized in [t1,t2]
					var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
					var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

					// rescale tangents for parametrization in [0,1]
					t1 *= dt1;
					t2 *= dt1;

					init( x1, x2, t1, t2 );

				},

				calc: function ( t ) {

					var t2 = t * t;
					var t3 = t2 * t;
					return c0 + c1 * t + c2 * t2 + c3 * t3;

				}

			};

		}

		//

		var tmp = new Vector3();
		var px = new CubicPoly();
		var py = new CubicPoly();
		var pz = new CubicPoly();

		function CatmullRomCurve3( points ) {

			Curve.call( this );

			if ( points.length < 2 ) console.warn( 'THREE.CatmullRomCurve3: Points array needs at least two entries.' );

			this.points = points || [];
			this.closed = false;

		}

		CatmullRomCurve3.prototype = Object.create( Curve.prototype );
		CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

		CatmullRomCurve3.prototype.getPoint = function ( t ) {

			var points = this.points;
			var l = points.length;

			var point = ( l - ( this.closed ? 0 : 1 ) ) * t;
			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			if ( this.closed ) {

				intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

			} else if ( weight === 0 && intPoint === l - 1 ) {

				intPoint = l - 2;
				weight = 1;

			}

			var p0, p1, p2, p3; // 4 points

			if ( this.closed || intPoint > 0 ) {

				p0 = points[ ( intPoint - 1 ) % l ];

			} else {

				// extrapolate first point
				tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
				p0 = tmp;

			}

			p1 = points[ intPoint % l ];
			p2 = points[ ( intPoint + 1 ) % l ];

			if ( this.closed || intPoint + 2 < l ) {

				p3 = points[ ( intPoint + 2 ) % l ];

			} else {

				// extrapolate last point
				tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
				p3 = tmp;

			}

			if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

				// init Centripetal / Chordal Catmull-Rom
				var pow = this.type === 'chordal' ? 0.5 : 0.25;
				var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
				var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
				var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

				// safety check for repeated points
				if ( dt1 < 1e-4 ) dt1 = 1.0;
				if ( dt0 < 1e-4 ) dt0 = dt1;
				if ( dt2 < 1e-4 ) dt2 = dt1;

				px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
				py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
				pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

			} else if ( this.type === 'catmullrom' ) {

				var tension = this.tension !== undefined ? this.tension : 0.5;
				px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
				py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
				pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

			}

			return new Vector3( px.calc( weight ), py.calc( weight ), pz.calc( weight ) );

		};

		function CubicBezierCurve3( v0, v1, v2, v3 ) {

			Curve.call( this );

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		}

		CubicBezierCurve3.prototype = Object.create( Curve.prototype );
		CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

		CubicBezierCurve3.prototype.getPoint = function ( t ) {

			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

			return new Vector3(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
				CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
			);

		};

		function QuadraticBezierCurve3( v0, v1, v2 ) {

			Curve.call( this );

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		}

		QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

		QuadraticBezierCurve3.prototype.getPoint = function ( t ) {

			var v0 = this.v0, v1 = this.v1, v2 = this.v2;

			return new Vector3(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y ),
				QuadraticBezier( t, v0.z, v1.z, v2.z )
			);

		};

		function LineCurve3( v1, v2 ) {

			Curve.call( this );

			this.v1 = v1;
			this.v2 = v2;

		}

		LineCurve3.prototype = Object.create( Curve.prototype );
		LineCurve3.prototype.constructor = LineCurve3;

		LineCurve3.prototype.getPoint = function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var vector = new Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		};

		function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		}

		ArcCurve.prototype = Object.create( EllipseCurve.prototype );
		ArcCurve.prototype.constructor = ArcCurve;

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		var SceneUtils = {

			createMultiMaterialObject: function ( geometry, materials ) {

				var group = new Group();

				for ( var i = 0, l = materials.length; i < l; i ++ ) {

					group.add( new Mesh( geometry, materials[ i ] ) );

				}

				return group;

			},

			detach: function ( child, parent, scene ) {

				child.applyMatrix( parent.matrixWorld );
				parent.remove( child );
				scene.add( child );

			},

			attach: function ( child, scene, parent ) {

				child.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );

				scene.remove( child );
				parent.add( child );

			}

		};

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		function Face4( a, b, c, d, normal, color, materialIndex ) {

			console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
			return new Face3( a, b, c, normal, color, materialIndex );

		}

		var LineStrip = 0;

		var LinePieces = 1;

		function MeshFaceMaterial( materials ) {

			console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
			return materials;

		}

		function MultiMaterial( materials ) {

			if ( materials === undefined ) materials = [];

			console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
			materials.isMultiMaterial = true;
			materials.materials = materials;
			materials.clone = function () {

				return materials.slice();

			};
			return materials;

		}

		function PointCloud( geometry, material ) {

			console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
			return new Points( geometry, material );

		}

		function Particle( material ) {

			console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
			return new Sprite( material );

		}

		function ParticleSystem( geometry, material ) {

			console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
			return new Points( geometry, material );

		}

		function PointCloudMaterial( parameters ) {

			console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );

		}

		function ParticleBasicMaterial( parameters ) {

			console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );

		}

		function ParticleSystemMaterial( parameters ) {

			console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );

		}

		function Vertex( x, y, z ) {

			console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
			return new Vector3( x, y, z );

		}

		//

		function DynamicBufferAttribute( array, itemSize ) {

			console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
			return new BufferAttribute( array, itemSize ).setDynamic( true );

		}

		function Int8Attribute( array, itemSize ) {

			console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
			return new Int8BufferAttribute( array, itemSize );

		}

		function Uint8Attribute( array, itemSize ) {

			console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
			return new Uint8BufferAttribute( array, itemSize );

		}

		function Uint8ClampedAttribute( array, itemSize ) {

			console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
			return new Uint8ClampedBufferAttribute( array, itemSize );

		}

		function Int16Attribute( array, itemSize ) {

			console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
			return new Int16BufferAttribute( array, itemSize );

		}

		function Uint16Attribute( array, itemSize ) {

			console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
			return new Uint16BufferAttribute( array, itemSize );

		}

		function Int32Attribute( array, itemSize ) {

			console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
			return new Int32BufferAttribute( array, itemSize );

		}

		function Uint32Attribute( array, itemSize ) {

			console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
			return new Uint32BufferAttribute( array, itemSize );

		}

		function Float32Attribute( array, itemSize ) {

			console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
			return new Float32BufferAttribute( array, itemSize );

		}

		function Float64Attribute( array, itemSize ) {

			console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
			return new Float64BufferAttribute( array, itemSize );

		}

		//

		Curve.create = function ( construct, getPoint ) {

			console.log( 'THREE.Curve.create() has been deprecated' );

			construct.prototype = Object.create( Curve.prototype );
			construct.prototype.constructor = construct;
			construct.prototype.getPoint = getPoint;

			return construct;

		};

		//

		function ClosedSplineCurve3( points ) {

			console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
			this.closed = true;

		}

		ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

		//

		function SplineCurve3( points ) {

			console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';

		}

		SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

		//

		function Spline( points ) {

			console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';

		}

		Spline.prototype = Object.create( CatmullRomCurve3.prototype );

		Object.assign( Spline.prototype, {

			initFromArray: function ( a ) {

				console.error( 'THREE.Spline: .initFromArray() has been removed.' );

			},
			getControlPointsArray: function ( optionalTarget ) {

				console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

			},
			reparametrizeByArcLength: function ( samplingCoef ) {

				console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

			}

		} );

		//
		function BoundingBoxHelper( object, color ) {

			console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
			return new BoxHelper( object, color );

		}

		function EdgesHelper( object, hex ) {

			console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
			return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

		}

		GridHelper.prototype.setColors = function () {

			console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

		};

		SkeletonHelper.prototype.update = function () {

			console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
			
		};

		function WireframeHelper( object, hex ) {

			console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
			return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

		}

		//

		function XHRLoader( manager ) {

			console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
			return new FileLoader( manager );

		}

		function BinaryTextureLoader( manager ) {

			console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
			return new DataTextureLoader( manager );

		}

		//

		Object.assign( Box2.prototype, {

			center: function ( optionalTarget ) {

				console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );

			},
			empty: function () {

				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();

			},
			isIntersectionBox: function ( box ) {

				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );

			},
			size: function ( optionalTarget ) {

				console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );

			}
		} );

		Object.assign( Box3.prototype, {

			center: function ( optionalTarget ) {

				console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );

			},
			empty: function () {

				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();

			},
			isIntersectionBox: function ( box ) {

				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );

			},
			isIntersectionSphere: function ( sphere ) {

				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );

			},
			size: function ( optionalTarget ) {

				console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );

			}
		} );

		Line3.prototype.center = function ( optionalTarget ) {

			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		};

		_Math.random16 = function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		};

		Object.assign( Matrix3.prototype, {

			flattenToArrayOffset: function ( array, offset ) {

				console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );

			},
			multiplyVector3: function ( vector ) {

				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );

			},
			multiplyVector3Array: function ( a ) {

				console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.'  );

			},
			applyToBuffer: function( buffer, offset, length ) {

				console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
				return this.applyToBufferAttribute( buffer );

			},
			applyToVector3Array: function( array, offset, length ) {

				console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

			}

		} );

		Object.assign( Matrix4.prototype, {

			extractPosition: function ( m ) {

				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );

			},
			flattenToArrayOffset: function ( array, offset ) {

				console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );

			},
			getPosition: function () {

				var v1;

				return function getPosition() {

					if ( v1 === undefined ) v1 = new Vector3();
					console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
					return v1.setFromMatrixColumn( this, 3 );

				};

			}(),
			setRotationFromQuaternion: function ( q ) {

				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );

			},
			multiplyToArray: function () {

				console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

			},
			multiplyVector3: function ( vector ) {

				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );

			},
			multiplyVector4: function ( vector ) {

				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );

			},
			multiplyVector3Array: function ( a ) {

				console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.'  );

			},
			rotateAxis: function ( v ) {

				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );

			},
			crossVector: function ( vector ) {

				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );

			},
			translate: function () {

				console.error( 'THREE.Matrix4: .translate() has been removed.' );

			},
			rotateX: function () {

				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

			},
			rotateY: function () {

				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

			},
			rotateZ: function () {

				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

			},
			rotateByAxis: function () {

				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

			},
			applyToBuffer: function( buffer, offset, length ) {

				console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
				return this.applyToBufferAttribute( buffer );

			},
			applyToVector3Array: function( array, offset, length ) {

				console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

			},
			makeFrustum: function( left, right, bottom, top, near, far ) {

				console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
				return this.makePerspective( left, right, top, bottom, near, far );

			}

		} );

		Plane.prototype.isIntersectionLine = function ( line ) {

			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );

		};

		Quaternion.prototype.multiplyVector3 = function ( vector ) {

			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );

		};

		Object.assign( Ray.prototype, {

			isIntersectionBox: function ( box ) {

				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );

			},
			isIntersectionPlane: function ( plane ) {

				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );

			},
			isIntersectionSphere: function ( sphere ) {

				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );

			}

		} );

		Object.assign( Shape.prototype, {

			extrude: function ( options ) {

				console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
				return new ExtrudeGeometry( this, options );

			},
			makeGeometry: function ( options ) {

				console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
				return new ShapeGeometry( this, options );

			}

		} );

		Object.assign( Vector2.prototype, {

			fromAttribute: function ( attribute, index, offset ) {

				console.error( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );

			}

		} );

		Object.assign( Vector3.prototype, {

			setEulerFromRotationMatrix: function () {

				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

			},
			setEulerFromQuaternion: function () {

				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

			},
			getPositionFromMatrix: function ( m ) {

				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );

			},
			getScaleFromMatrix: function ( m ) {

				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );

			},
			getColumnFromMatrix: function ( index, matrix ) {

				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( matrix, index );

			},
			applyProjection: function ( m ) {

				console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
				return this.applyMatrix4( m );

			},
			fromAttribute: function ( attribute, index, offset ) {

				console.error( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );

			}

		} );

		Object.assign( Vector4.prototype, {

			fromAttribute: function ( attribute, index, offset ) {

				console.error( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );

			}

		} );

		//

		Geometry.prototype.computeTangents = function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		};

		Object.assign( Object3D.prototype, {

			getChildByName: function ( name ) {

				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );

			},
			renderDepth: function () {

				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

			},
			translate: function ( distance, axis ) {

				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );

			}

		} );

		Object.defineProperties( Object3D.prototype, {

			eulerOrder: {
				get: function () {

					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					return this.rotation.order;

				},
				set: function ( value ) {

					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					this.rotation.order = value;

				}
			},
			useQuaternion: {
				get: function () {

					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

				},
				set: function () {

					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

				}
			}

		} );

		Object.defineProperties( LOD.prototype, {

			objects: {
				get: function () {

					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;

				}
			}

		} );

		Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

			get: function () {

				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

			}

		} );

		Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

			get: function () {

				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				return this.arcLengthDivisions;

			},
			set: function ( value ) {

				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				this.arcLengthDivisions = value;

			}

		} );

		//

		PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

			console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
					"Use .setFocalLength and .filmGauge for a photographic setup." );

			if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
			this.setFocalLength( focalLength );

		};

		//

		Object.defineProperties( Light.prototype, {
			onlyShadow: {
				set: function () {

					console.warn( 'THREE.Light: .onlyShadow has been removed.' );

				}
			},
			shadowCameraFov: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
					this.shadow.camera.fov = value;

				}
			},
			shadowCameraLeft: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
					this.shadow.camera.left = value;

				}
			},
			shadowCameraRight: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
					this.shadow.camera.right = value;

				}
			},
			shadowCameraTop: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
					this.shadow.camera.top = value;

				}
			},
			shadowCameraBottom: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
					this.shadow.camera.bottom = value;

				}
			},
			shadowCameraNear: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
					this.shadow.camera.near = value;

				}
			},
			shadowCameraFar: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
					this.shadow.camera.far = value;

				}
			},
			shadowCameraVisible: {
				set: function () {

					console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

				}
			},
			shadowBias: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
					this.shadow.bias = value;

				}
			},
			shadowDarkness: {
				set: function () {

					console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

				}
			},
			shadowMapWidth: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
					this.shadow.mapSize.width = value;

				}
			},
			shadowMapHeight: {
				set: function ( value ) {

					console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
					this.shadow.mapSize.height = value;

				}
			}
		} );

		//

		Object.defineProperties( BufferAttribute.prototype, {

			length: {
				get: function () {

					console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
					return this.array.length;

				}
			}

		} );

		Object.assign( BufferGeometry.prototype, {

			addIndex: function ( index ) {

				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );

			},
			addDrawCall: function ( start, count, indexOffset ) {

				if ( indexOffset !== undefined ) {

					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );

			},
			clearDrawCalls: function () {

				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();

			},
			computeTangents: function () {

				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

			},
			computeOffsets: function () {

				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

			}

		} );

		Object.defineProperties( BufferGeometry.prototype, {

			drawcalls: {
				get: function () {

					console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
					return this.groups;

				}
			},
			offsets: {
				get: function () {

					console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
					return this.groups;

				}
			}

		} );

		//

		Object.defineProperties( Uniform.prototype, {

			dynamic: {
				set: function () {

					console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

				}
			},
			onUpdate: {
				value: function () {

					console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
					return this;

				}
			}

		} );

		//

		Object.defineProperties( Material.prototype, {

			wrapAround: {
				get: function () {

					console.warn( 'THREE.Material: .wrapAround has been removed.' );

				},
				set: function () {

					console.warn( 'THREE.Material: .wrapAround has been removed.' );

				}
			},
			wrapRGB: {
				get: function () {

					console.warn( 'THREE.Material: .wrapRGB has been removed.' );
					return new Color();

				}
			}

		} );

		Object.defineProperties( MeshPhongMaterial.prototype, {

			metal: {
				get: function () {

					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
					return false;

				},
				set: function () {

					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

				}
			}

		} );

		Object.defineProperties( ShaderMaterial.prototype, {

			derivatives: {
				get: function () {

					console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					return this.extensions.derivatives;

				},
				set: function ( value ) {

					console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					this.extensions.derivatives = value;

				}
			}

		} );

		//

		Object.assign( WebGLRenderer.prototype, {

			getCurrentRenderTarget: function () {

				console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
				return this.getRenderTarget();

			},

			supportsFloatTextures: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );

			},
			supportsHalfFloatTextures: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );

			},
			supportsStandardDerivatives: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );

			},
			supportsCompressedTextureS3TC: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

			},
			supportsCompressedTexturePVRTC: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			},
			supportsBlendMinMax: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );

			},
			supportsVertexTextures: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
				return this.capabilities.vertexTextures;

			},
			supportsInstancedArrays: function () {

				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );

			},
			enableScissorTest: function ( boolean ) {

				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );

			},
			initMaterial: function () {

				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

			},
			addPrePlugin: function () {

				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

			},
			addPostPlugin: function () {

				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

			},
			updateShadowMap: function () {

				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

			}

		} );

		Object.defineProperties( WebGLRenderer.prototype, {

			shadowMapEnabled: {
				get: function () {

					return this.shadowMap.enabled;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					this.shadowMap.enabled = value;

				}
			},
			shadowMapType: {
				get: function () {

					return this.shadowMap.type;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					this.shadowMap.type = value;

				}
			},
			shadowMapCullFace: {
				get: function () {

					return this.shadowMap.cullFace;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
					this.shadowMap.cullFace = value;

				}
			}
		} );

		Object.defineProperties( WebGLShadowMap.prototype, {

			cullFace: {
				get: function () {

					return this.renderReverseSided ? CullFaceFront : CullFaceBack;

				},
				set: function ( cullFace ) {

					var value = ( cullFace !== CullFaceBack );
					console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
					this.renderReverseSided = value;

				}
			}

		} );

		//

		Object.defineProperties( WebGLRenderTarget.prototype, {

			wrapS: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					return this.texture.wrapS;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					this.texture.wrapS = value;

				}
			},
			wrapT: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					return this.texture.wrapT;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					this.texture.wrapT = value;

				}
			},
			magFilter: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					return this.texture.magFilter;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					this.texture.magFilter = value;

				}
			},
			minFilter: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					return this.texture.minFilter;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					this.texture.minFilter = value;

				}
			},
			anisotropy: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					return this.texture.anisotropy;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					this.texture.anisotropy = value;

				}
			},
			offset: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					return this.texture.offset;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					this.texture.offset = value;

				}
			},
			repeat: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					return this.texture.repeat;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					this.texture.repeat = value;

				}
			},
			format: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					return this.texture.format;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					this.texture.format = value;

				}
			},
			type: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					return this.texture.type;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					this.texture.type = value;

				}
			},
			generateMipmaps: {
				get: function () {

					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					return this.texture.generateMipmaps;

				},
				set: function ( value ) {

					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					this.texture.generateMipmaps = value;

				}
			}

		} );

		//

		Audio.prototype.load = function ( file ) {

			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
			var scope = this;
			var audioLoader = new AudioLoader();
			audioLoader.load( file, function ( buffer ) {

				scope.setBuffer( buffer );

			} );
			return this;

		};

		AudioAnalyser.prototype.getData = function () {

			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();

		};

		//

		var GeometryUtils = {

			merge: function ( geometry1, geometry2, materialIndexOffset ) {

				console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
				var matrix;

				if ( geometry2.isMesh ) {

					geometry2.matrixAutoUpdate && geometry2.updateMatrix();

					matrix = geometry2.matrix;
					geometry2 = geometry2.geometry;

				}

				geometry1.merge( geometry2, matrix, materialIndexOffset );

			},

			center: function ( geometry ) {

				console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
				return geometry.center();

			}

		};

		var ImageUtils = {

			crossOrigin: undefined,

			loadTexture: function ( url, mapping, onLoad, onError ) {

				console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

				var loader = new TextureLoader();
				loader.setCrossOrigin( this.crossOrigin );

				var texture = loader.load( url, onLoad, undefined, onError );

				if ( mapping ) texture.mapping = mapping;

				return texture;

			},

			loadTextureCube: function ( urls, mapping, onLoad, onError ) {

				console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

				var loader = new CubeTextureLoader();
				loader.setCrossOrigin( this.crossOrigin );

				var texture = loader.load( urls, onLoad, undefined, onError );

				if ( mapping ) texture.mapping = mapping;

				return texture;

			},

			loadCompressedTexture: function () {

				console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

			},

			loadCompressedTextureCube: function () {

				console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

			}

		};

		//

		function Projector() {

			console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

			this.projectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
				vector.project( camera );

			};

			this.unprojectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
				vector.unproject( camera );

			};

			this.pickingRay = function () {

				console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

			};

		}

		//

		function CanvasRenderer() {

			console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

			this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			this.clear = function () {};
			this.render = function () {};
			this.setClearColor = function () {};
			this.setSize = function () {};

		}

		exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
		exports.WebGLRenderTarget = WebGLRenderTarget;
		exports.WebGLRenderer = WebGLRenderer;
		exports.ShaderLib = ShaderLib;
		exports.UniformsLib = UniformsLib;
		exports.UniformsUtils = UniformsUtils;
		exports.ShaderChunk = ShaderChunk;
		exports.FogExp2 = FogExp2;
		exports.Fog = Fog;
		exports.Scene = Scene;
		exports.LensFlare = LensFlare;
		exports.Sprite = Sprite;
		exports.LOD = LOD;
		exports.SkinnedMesh = SkinnedMesh;
		exports.Skeleton = Skeleton;
		exports.Bone = Bone;
		exports.Mesh = Mesh;
		exports.LineSegments = LineSegments;
		exports.LineLoop = LineLoop;
		exports.Line = Line;
		exports.Points = Points;
		exports.Group = Group;
		exports.VideoTexture = VideoTexture;
		exports.DataTexture = DataTexture;
		exports.CompressedTexture = CompressedTexture;
		exports.CubeTexture = CubeTexture;
		exports.CanvasTexture = CanvasTexture;
		exports.DepthTexture = DepthTexture;
		exports.Texture = Texture;
		exports.CompressedTextureLoader = CompressedTextureLoader;
		exports.DataTextureLoader = DataTextureLoader;
		exports.CubeTextureLoader = CubeTextureLoader;
		exports.TextureLoader = TextureLoader;
		exports.ObjectLoader = ObjectLoader;
		exports.MaterialLoader = MaterialLoader;
		exports.BufferGeometryLoader = BufferGeometryLoader;
		exports.DefaultLoadingManager = DefaultLoadingManager;
		exports.LoadingManager = LoadingManager;
		exports.JSONLoader = JSONLoader;
		exports.ImageLoader = ImageLoader;
		exports.FontLoader = FontLoader;
		exports.FileLoader = FileLoader;
		exports.Loader = Loader;
		exports.Cache = Cache;
		exports.AudioLoader = AudioLoader;
		exports.SpotLightShadow = SpotLightShadow;
		exports.SpotLight = SpotLight;
		exports.PointLight = PointLight;
		exports.RectAreaLight = RectAreaLight;
		exports.HemisphereLight = HemisphereLight;
		exports.DirectionalLightShadow = DirectionalLightShadow;
		exports.DirectionalLight = DirectionalLight;
		exports.AmbientLight = AmbientLight;
		exports.LightShadow = LightShadow;
		exports.Light = Light;
		exports.StereoCamera = StereoCamera;
		exports.PerspectiveCamera = PerspectiveCamera;
		exports.OrthographicCamera = OrthographicCamera;
		exports.CubeCamera = CubeCamera;
		exports.ArrayCamera = ArrayCamera;
		exports.Camera = Camera;
		exports.AudioListener = AudioListener;
		exports.PositionalAudio = PositionalAudio;
		exports.AudioContext = AudioContext;
		exports.AudioAnalyser = AudioAnalyser;
		exports.Audio = Audio;
		exports.VectorKeyframeTrack = VectorKeyframeTrack;
		exports.StringKeyframeTrack = StringKeyframeTrack;
		exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
		exports.NumberKeyframeTrack = NumberKeyframeTrack;
		exports.ColorKeyframeTrack = ColorKeyframeTrack;
		exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
		exports.PropertyMixer = PropertyMixer;
		exports.PropertyBinding = PropertyBinding;
		exports.KeyframeTrack = KeyframeTrack;
		exports.AnimationUtils = AnimationUtils;
		exports.AnimationObjectGroup = AnimationObjectGroup;
		exports.AnimationMixer = AnimationMixer;
		exports.AnimationClip = AnimationClip;
		exports.Uniform = Uniform;
		exports.InstancedBufferGeometry = InstancedBufferGeometry;
		exports.BufferGeometry = BufferGeometry;
		exports.GeometryIdCount = GeometryIdCount;
		exports.Geometry = Geometry;
		exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
		exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
		exports.InterleavedBuffer = InterleavedBuffer;
		exports.InstancedBufferAttribute = InstancedBufferAttribute;
		exports.Face3 = Face3;
		exports.Object3D = Object3D;
		exports.Raycaster = Raycaster;
		exports.Layers = Layers;
		exports.EventDispatcher = EventDispatcher;
		exports.Clock = Clock;
		exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
		exports.LinearInterpolant = LinearInterpolant;
		exports.DiscreteInterpolant = DiscreteInterpolant;
		exports.CubicInterpolant = CubicInterpolant;
		exports.Interpolant = Interpolant;
		exports.Triangle = Triangle;
		exports.Math = _Math;
		exports.Spherical = Spherical;
		exports.Cylindrical = Cylindrical;
		exports.Plane = Plane;
		exports.Frustum = Frustum;
		exports.Sphere = Sphere;
		exports.Ray = Ray;
		exports.Matrix4 = Matrix4;
		exports.Matrix3 = Matrix3;
		exports.Box3 = Box3;
		exports.Box2 = Box2;
		exports.Line3 = Line3;
		exports.Euler = Euler;
		exports.Vector4 = Vector4;
		exports.Vector3 = Vector3;
		exports.Vector2 = Vector2;
		exports.Quaternion = Quaternion;
		exports.Color = Color;
		exports.MorphBlendMesh = MorphBlendMesh;
		exports.ImmediateRenderObject = ImmediateRenderObject;
		exports.VertexNormalsHelper = VertexNormalsHelper;
		exports.SpotLightHelper = SpotLightHelper;
		exports.SkeletonHelper = SkeletonHelper;
		exports.PointLightHelper = PointLightHelper;
		exports.RectAreaLightHelper = RectAreaLightHelper;
		exports.HemisphereLightHelper = HemisphereLightHelper;
		exports.GridHelper = GridHelper;
		exports.PolarGridHelper = PolarGridHelper;
		exports.FaceNormalsHelper = FaceNormalsHelper;
		exports.DirectionalLightHelper = DirectionalLightHelper;
		exports.CameraHelper = CameraHelper;
		exports.BoxHelper = BoxHelper;
		exports.ArrowHelper = ArrowHelper;
		exports.AxisHelper = AxisHelper;
		exports.CatmullRomCurve3 = CatmullRomCurve3;
		exports.CubicBezierCurve3 = CubicBezierCurve3;
		exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
		exports.LineCurve3 = LineCurve3;
		exports.ArcCurve = ArcCurve;
		exports.EllipseCurve = EllipseCurve;
		exports.SplineCurve = SplineCurve;
		exports.CubicBezierCurve = CubicBezierCurve;
		exports.QuadraticBezierCurve = QuadraticBezierCurve;
		exports.LineCurve = LineCurve;
		exports.Shape = Shape;
		exports.Path = Path;
		exports.ShapePath = ShapePath;
		exports.Font = Font;
		exports.CurvePath = CurvePath;
		exports.Curve = Curve;
		exports.ShapeUtils = ShapeUtils;
		exports.SceneUtils = SceneUtils;
		exports.WireframeGeometry = WireframeGeometry;
		exports.ParametricGeometry = ParametricGeometry;
		exports.ParametricBufferGeometry = ParametricBufferGeometry;
		exports.TetrahedronGeometry = TetrahedronGeometry;
		exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
		exports.OctahedronGeometry = OctahedronGeometry;
		exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
		exports.IcosahedronGeometry = IcosahedronGeometry;
		exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
		exports.DodecahedronGeometry = DodecahedronGeometry;
		exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
		exports.PolyhedronGeometry = PolyhedronGeometry;
		exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
		exports.TubeGeometry = TubeGeometry;
		exports.TubeBufferGeometry = TubeBufferGeometry;
		exports.TorusKnotGeometry = TorusKnotGeometry;
		exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
		exports.TorusGeometry = TorusGeometry;
		exports.TorusBufferGeometry = TorusBufferGeometry;
		exports.TextGeometry = TextGeometry;
		exports.TextBufferGeometry = TextBufferGeometry;
		exports.SphereGeometry = SphereGeometry;
		exports.SphereBufferGeometry = SphereBufferGeometry;
		exports.RingGeometry = RingGeometry;
		exports.RingBufferGeometry = RingBufferGeometry;
		exports.PlaneGeometry = PlaneGeometry;
		exports.PlaneBufferGeometry = PlaneBufferGeometry;
		exports.LatheGeometry = LatheGeometry;
		exports.LatheBufferGeometry = LatheBufferGeometry;
		exports.ShapeGeometry = ShapeGeometry;
		exports.ShapeBufferGeometry = ShapeBufferGeometry;
		exports.ExtrudeGeometry = ExtrudeGeometry;
		exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
		exports.EdgesGeometry = EdgesGeometry;
		exports.ConeGeometry = ConeGeometry;
		exports.ConeBufferGeometry = ConeBufferGeometry;
		exports.CylinderGeometry = CylinderGeometry;
		exports.CylinderBufferGeometry = CylinderBufferGeometry;
		exports.CircleGeometry = CircleGeometry;
		exports.CircleBufferGeometry = CircleBufferGeometry;
		exports.BoxGeometry = BoxGeometry;
		exports.BoxBufferGeometry = BoxBufferGeometry;
		exports.ShadowMaterial = ShadowMaterial;
		exports.SpriteMaterial = SpriteMaterial;
		exports.RawShaderMaterial = RawShaderMaterial;
		exports.ShaderMaterial = ShaderMaterial;
		exports.PointsMaterial = PointsMaterial;
		exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
		exports.MeshStandardMaterial = MeshStandardMaterial;
		exports.MeshPhongMaterial = MeshPhongMaterial;
		exports.MeshToonMaterial = MeshToonMaterial;
		exports.MeshNormalMaterial = MeshNormalMaterial;
		exports.MeshLambertMaterial = MeshLambertMaterial;
		exports.MeshDepthMaterial = MeshDepthMaterial;
		exports.MeshBasicMaterial = MeshBasicMaterial;
		exports.LineDashedMaterial = LineDashedMaterial;
		exports.LineBasicMaterial = LineBasicMaterial;
		exports.Material = Material;
		exports.Float64BufferAttribute = Float64BufferAttribute;
		exports.Float32BufferAttribute = Float32BufferAttribute;
		exports.Uint32BufferAttribute = Uint32BufferAttribute;
		exports.Int32BufferAttribute = Int32BufferAttribute;
		exports.Uint16BufferAttribute = Uint16BufferAttribute;
		exports.Int16BufferAttribute = Int16BufferAttribute;
		exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
		exports.Uint8BufferAttribute = Uint8BufferAttribute;
		exports.Int8BufferAttribute = Int8BufferAttribute;
		exports.BufferAttribute = BufferAttribute;
		exports.REVISION = REVISION;
		exports.MOUSE = MOUSE;
		exports.CullFaceNone = CullFaceNone;
		exports.CullFaceBack = CullFaceBack;
		exports.CullFaceFront = CullFaceFront;
		exports.CullFaceFrontBack = CullFaceFrontBack;
		exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
		exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
		exports.BasicShadowMap = BasicShadowMap;
		exports.PCFShadowMap = PCFShadowMap;
		exports.PCFSoftShadowMap = PCFSoftShadowMap;
		exports.FrontSide = FrontSide;
		exports.BackSide = BackSide;
		exports.DoubleSide = DoubleSide;
		exports.FlatShading = FlatShading;
		exports.SmoothShading = SmoothShading;
		exports.NoColors = NoColors;
		exports.FaceColors = FaceColors;
		exports.VertexColors = VertexColors;
		exports.NoBlending = NoBlending;
		exports.NormalBlending = NormalBlending;
		exports.AdditiveBlending = AdditiveBlending;
		exports.SubtractiveBlending = SubtractiveBlending;
		exports.MultiplyBlending = MultiplyBlending;
		exports.CustomBlending = CustomBlending;
		exports.AddEquation = AddEquation;
		exports.SubtractEquation = SubtractEquation;
		exports.ReverseSubtractEquation = ReverseSubtractEquation;
		exports.MinEquation = MinEquation;
		exports.MaxEquation = MaxEquation;
		exports.ZeroFactor = ZeroFactor;
		exports.OneFactor = OneFactor;
		exports.SrcColorFactor = SrcColorFactor;
		exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
		exports.SrcAlphaFactor = SrcAlphaFactor;
		exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
		exports.DstAlphaFactor = DstAlphaFactor;
		exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
		exports.DstColorFactor = DstColorFactor;
		exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
		exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
		exports.NeverDepth = NeverDepth;
		exports.AlwaysDepth = AlwaysDepth;
		exports.LessDepth = LessDepth;
		exports.LessEqualDepth = LessEqualDepth;
		exports.EqualDepth = EqualDepth;
		exports.GreaterEqualDepth = GreaterEqualDepth;
		exports.GreaterDepth = GreaterDepth;
		exports.NotEqualDepth = NotEqualDepth;
		exports.MultiplyOperation = MultiplyOperation;
		exports.MixOperation = MixOperation;
		exports.AddOperation = AddOperation;
		exports.NoToneMapping = NoToneMapping;
		exports.LinearToneMapping = LinearToneMapping;
		exports.ReinhardToneMapping = ReinhardToneMapping;
		exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
		exports.CineonToneMapping = CineonToneMapping;
		exports.UVMapping = UVMapping;
		exports.CubeReflectionMapping = CubeReflectionMapping;
		exports.CubeRefractionMapping = CubeRefractionMapping;
		exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
		exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
		exports.SphericalReflectionMapping = SphericalReflectionMapping;
		exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
		exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
		exports.RepeatWrapping = RepeatWrapping;
		exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
		exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
		exports.NearestFilter = NearestFilter;
		exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
		exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
		exports.LinearFilter = LinearFilter;
		exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
		exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
		exports.UnsignedByteType = UnsignedByteType;
		exports.ByteType = ByteType;
		exports.ShortType = ShortType;
		exports.UnsignedShortType = UnsignedShortType;
		exports.IntType = IntType;
		exports.UnsignedIntType = UnsignedIntType;
		exports.FloatType = FloatType;
		exports.HalfFloatType = HalfFloatType;
		exports.UnsignedShort4444Type = UnsignedShort4444Type;
		exports.UnsignedShort5551Type = UnsignedShort5551Type;
		exports.UnsignedShort565Type = UnsignedShort565Type;
		exports.UnsignedInt248Type = UnsignedInt248Type;
		exports.AlphaFormat = AlphaFormat;
		exports.RGBFormat = RGBFormat;
		exports.RGBAFormat = RGBAFormat;
		exports.LuminanceFormat = LuminanceFormat;
		exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
		exports.RGBEFormat = RGBEFormat;
		exports.DepthFormat = DepthFormat;
		exports.DepthStencilFormat = DepthStencilFormat;
		exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
		exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
		exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
		exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
		exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
		exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
		exports.RGB_ETC1_Format = RGB_ETC1_Format;
		exports.LoopOnce = LoopOnce;
		exports.LoopRepeat = LoopRepeat;
		exports.LoopPingPong = LoopPingPong;
		exports.InterpolateDiscrete = InterpolateDiscrete;
		exports.InterpolateLinear = InterpolateLinear;
		exports.InterpolateSmooth = InterpolateSmooth;
		exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
		exports.ZeroSlopeEnding = ZeroSlopeEnding;
		exports.WrapAroundEnding = WrapAroundEnding;
		exports.TrianglesDrawMode = TrianglesDrawMode;
		exports.TriangleStripDrawMode = TriangleStripDrawMode;
		exports.TriangleFanDrawMode = TriangleFanDrawMode;
		exports.LinearEncoding = LinearEncoding;
		exports.sRGBEncoding = sRGBEncoding;
		exports.GammaEncoding = GammaEncoding;
		exports.RGBEEncoding = RGBEEncoding;
		exports.LogLuvEncoding = LogLuvEncoding;
		exports.RGBM7Encoding = RGBM7Encoding;
		exports.RGBM16Encoding = RGBM16Encoding;
		exports.RGBDEncoding = RGBDEncoding;
		exports.BasicDepthPacking = BasicDepthPacking;
		exports.RGBADepthPacking = RGBADepthPacking;
		exports.CubeGeometry = BoxGeometry;
		exports.Face4 = Face4;
		exports.LineStrip = LineStrip;
		exports.LinePieces = LinePieces;
		exports.MeshFaceMaterial = MeshFaceMaterial;
		exports.MultiMaterial = MultiMaterial;
		exports.PointCloud = PointCloud;
		exports.Particle = Particle;
		exports.ParticleSystem = ParticleSystem;
		exports.PointCloudMaterial = PointCloudMaterial;
		exports.ParticleBasicMaterial = ParticleBasicMaterial;
		exports.ParticleSystemMaterial = ParticleSystemMaterial;
		exports.Vertex = Vertex;
		exports.DynamicBufferAttribute = DynamicBufferAttribute;
		exports.Int8Attribute = Int8Attribute;
		exports.Uint8Attribute = Uint8Attribute;
		exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
		exports.Int16Attribute = Int16Attribute;
		exports.Uint16Attribute = Uint16Attribute;
		exports.Int32Attribute = Int32Attribute;
		exports.Uint32Attribute = Uint32Attribute;
		exports.Float32Attribute = Float32Attribute;
		exports.Float64Attribute = Float64Attribute;
		exports.ClosedSplineCurve3 = ClosedSplineCurve3;
		exports.SplineCurve3 = SplineCurve3;
		exports.Spline = Spline;
		exports.BoundingBoxHelper = BoundingBoxHelper;
		exports.EdgesHelper = EdgesHelper;
		exports.WireframeHelper = WireframeHelper;
		exports.XHRLoader = XHRLoader;
		exports.BinaryTextureLoader = BinaryTextureLoader;
		exports.GeometryUtils = GeometryUtils;
		exports.ImageUtils = ImageUtils;
		exports.Projector = Projector;
		exports.CanvasRenderer = CanvasRenderer;

		Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _ReactComponentWithPureRenderMixin = __webpack_require__(275);

	var _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _React3Renderer = __webpack_require__(277);

	var _React3Renderer2 = _interopRequireDefault(_React3Renderer);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React3 = (_temp = _class = function (_React$Component) {
	  _inherits(React3, _React$Component);

	  /* eslint-disable react/no-unused-prop-types */
	  /* eslint-disable react/require-default-props */
	  function React3(props, context) {
	    _classCallCheck(this, React3);

	    var _this = _possibleConstructorReturn(this, (React3.__proto__ || Object.getPrototypeOf(React3)).call(this, props, context));

	    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;

	    _this._onRecreateCanvas = function () {
	      _this.setState({
	        // changing the key will recreate the element
	        canvasKey: _this.state.canvasKey + 1
	      });
	    };

	    _this._canvasRef = function (c) {
	      _this._canvas = c;
	      if (_this.props.canvasRef) {
	        _this.props.canvasRef(c);
	      }
	    };

	    _this.state = {
	      canvasKey: 0
	    };
	    return _this;
	  }
	  /* eslint-enable react/require-default-props */
	  /* eslint-enable react/no-unused-prop-types */

	  _createClass(React3, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.react3Renderer = new _React3Renderer2.default();

	      this._render();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(newProps) {
	      var lastProps = this.props;

	      if (lastProps.canvasRef !== newProps.canvasRef) {
	        if (lastProps.canvasRef) {
	          lastProps.canvasRef(null);
	        }

	        if (newProps.canvasRef) {
	          newProps.canvasRef(this._canvas);
	        }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._render();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.react3Renderer.dispose();
	      delete this.react3Renderer;
	    }
	  }, {
	    key: '_render',
	    value: function _render() {
	      var canvas = this._canvas;

	      var propsToClone = _extends({}, this.props);

	      delete propsToClone.canvasStyle;
	      delete propsToClone.canvasRef;

	      this.react3Renderer.render(_react2.default.createElement(
	        'react3',
	        _extends({}, propsToClone, {
	          onRecreateCanvas: this._onRecreateCanvas
	        }),
	        this.props.children
	      ), canvas);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var canvasKey = this.state.canvasKey;


	      return _react2.default.createElement('canvas', {
	        ref: this._canvasRef,
	        key: canvasKey,
	        width: this.props.width,
	        height: this.props.height,
	        style: _extends({}, this.props.canvasStyle, {
	          width: this.props.width,
	          height: this.props.height
	        })
	      });
	    }
	  }]);

	  return React3;
	}(_react2.default.Component), _class.propTypes = {
	  context: _propTypes2.default.string,
	  width: _propTypes2.default.number.isRequired,
	  height: _propTypes2.default.number.isRequired,
	  children: _propTypes2.default.node,
	  /* eslint-disable react/forbid-prop-types */
	  canvasStyle: _propTypes2.default.any,
	  /* eslint-enable react/forbid-prop-types */
	  customRenderer: _propTypes2.default.func,
	  gammaInput: _propTypes2.default.bool,
	  gammaOutput: _propTypes2.default.bool,
	  sortObjects: _propTypes2.default.bool,
	  mainCamera: _propTypes2.default.string,
	  onAnimate: _propTypes2.default.func,
	  clearColor: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	  shadowMapEnabled: _propTypes2.default.bool,
	  shadowMapType: _propTypes2.default.oneOf([THREE.BasicShadowMap, THREE.PCFShadowMap, THREE.PCFSoftShadowMap]),
	  shadowMapCullFace: _propTypes2.default.oneOf([THREE.CullFaceNone, THREE.CullFaceBack, THREE.CullFaceFront, THREE.CullFaceFrontBack]),
	  shadowMapDebug: _propTypes2.default.bool,
	  pixelRatio: _propTypes2.default.number,
	  antialias: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
	  canvasRef: _propTypes2.default.func
	}, _class.defaultProps = {
	  context: '3d'
	}, _class.findTHREEObject = _React3Renderer2.default.findTHREEObject, _class.eventDispatcher = _React3Renderer2.default.eventDispatcher, _temp);


	module.exports = React3;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var shallowCompare = __webpack_require__(276);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 *
	 * See https://facebook.github.io/react/docs/pure-render-mixin.html
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function (nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var shallowEqual = __webpack_require__(131);

	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 * See also https://facebook.github.io/react/docs/shallow-compare.html
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}

	module.exports = shallowCompare;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp, _class2, _temp2;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ReactElement = __webpack_require__(17);

	var _ReactElement2 = _interopRequireDefault(_ReactElement);

	var _ReactCurrentOwner = __webpack_require__(18);

	var _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);

	var _ReactBaseClasses = __webpack_require__(6);

	var _KeyEscapeUtils = __webpack_require__(22);

	var _KeyEscapeUtils2 = _interopRequireDefault(_KeyEscapeUtils);

	var _emptyObject = __webpack_require__(12);

	var _emptyObject2 = _interopRequireDefault(_emptyObject);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _ReactInstanceMap = __webpack_require__(124);

	var _ReactInstanceMap2 = _interopRequireDefault(_ReactInstanceMap);

	var _ReactReconciler = __webpack_require__(66);

	var _ReactReconciler2 = _interopRequireDefault(_ReactReconciler);

	var _ReactUpdates = __webpack_require__(63);

	var _ReactUpdates2 = _interopRequireDefault(_ReactUpdates);

	var _ReactUpdateQueue = __webpack_require__(143);

	var _ReactUpdateQueue2 = _interopRequireDefault(_ReactUpdateQueue);

	var _ReactInjection = __webpack_require__(152);

	var _ReactInjection2 = _interopRequireDefault(_ReactInjection);

	var _ReactReconcileTransaction = __webpack_require__(153);

	var _ReactReconcileTransaction2 = _interopRequireDefault(_ReactReconcileTransaction);

	var _ReactDefaultBatchingStrategy = __webpack_require__(148);

	var _ReactDefaultBatchingStrategy2 = _interopRequireDefault(_ReactDefaultBatchingStrategy);

	var _traverseAllChildren = __webpack_require__(137);

	var _traverseAllChildren2 = _interopRequireDefault(_traverseAllChildren);

	var _getHostComponentFromComposite = __webpack_require__(181);

	var _getHostComponentFromComposite2 = _interopRequireDefault(_getHostComponentFromComposite);

	var _shouldUpdateReactComponent = __webpack_require__(132);

	var _shouldUpdateReactComponent2 = _interopRequireDefault(_shouldUpdateReactComponent);

	var _ReactInstrumentation = __webpack_require__(69);

	var _ReactInstrumentation2 = _interopRequireDefault(_ReactInstrumentation);

	var _React3ContainerInfo = __webpack_require__(278);

	var _React3ContainerInfo2 = _interopRequireDefault(_React3ContainerInfo);

	var _EventDispatcher = __webpack_require__(279);

	var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

	var _InternalComponent = __webpack_require__(280);

	var _InternalComponent2 = _interopRequireDefault(_InternalComponent);

	var _React3ComponentTree = __webpack_require__(286);

	var _React3ComponentTree2 = _interopRequireDefault(_React3ComponentTree);

	var _ElementDescriptorContainer = __webpack_require__(287);

	var _ElementDescriptorContainer2 = _interopRequireDefault(_ElementDescriptorContainer);

	var _React3CompositeComponentWrapper = __webpack_require__(284);

	var _React3CompositeComponentWrapper2 = _interopRequireDefault(_React3CompositeComponentWrapper);

	var _idPropertyName = __webpack_require__(283);

	var _idPropertyName2 = _interopRequireDefault(_idPropertyName);

	var _removeDevTool = __webpack_require__(285);

	var _removeDevTool2 = _interopRequireDefault(_removeDevTool);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var getDeclarationErrorAddendum = void 0;
	var staticDebugIdHack = void 0;
	var ReactComponentTreeHook = void 0;

	if (process.env.NODE_ENV !== 'production') {
	  /* eslint-disable global-require */

	  if (!ReactComponentTreeHook) {
	    ReactComponentTreeHook = __webpack_require__(25);
	  }

	  /* eslint-enable global-require */
	}

	if (process.env.NODE_ENV !== 'production') {
	  staticDebugIdHack = 0;
	  // prop type helpers
	  // the warnings for propTypes will not say <anonymous>.
	  // Some performance is sacrificed for this.

	  // TODO: could have an env variable to disable this?
	  if (!THREE._renamed) {
	    THREE._renamed = true;

	    THREE.Vector2.displayName = 'THREE.Vector2';
	    THREE.Vector3.displayName = 'THREE.Vector3';
	    THREE.Quaternion.displayName = 'THREE.Quaternion';
	    THREE.Color.displayName = 'THREE.Color';
	    THREE.Shape.displayName = 'THREE.Shape';
	    THREE.Euler.displayName = 'THREE.Euler';
	    THREE.Fog.displayName = 'THREE.Fog';
	  }

	  getDeclarationErrorAddendum = function getDeclarationErrorAddendum(owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {*} container DOM element to unmount from.
	 * @param {bool} safely
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    _ReactInstrumentation2.default.debugTool.onBeginFlush();
	  }

	  _ReactReconciler2.default.unmountComponent(instance, safely);

	  if (process.env.NODE_ENV !== 'production') {
	    _ReactInstrumentation2.default.debugTool.onEndFlush();
	  }
	}

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

	var TopLevelWrapper = (_temp = _class = function (_ReactComponent) {
	  _inherits(TopLevelWrapper, _ReactComponent);

	  function TopLevelWrapper() {
	    _classCallCheck(this, TopLevelWrapper);

	    return _possibleConstructorReturn(this, (TopLevelWrapper.__proto__ || Object.getPrototypeOf(TopLevelWrapper)).apply(this, arguments));
	  }

	  _createClass(TopLevelWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.child;
	    }
	  }]);

	  return TopLevelWrapper;
	}(_ReactBaseClasses.Component), _class.isReactComponent = {}, _class.isReactTopLevelWrapper = true, _temp);


	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}

	function internalGetID(markup) {
	  return markup && markup[_idPropertyName2.default] || '';
	}

	// see ReactMount.js:getReactRootElementInContainer
	/**
	 * @param {THREE.Object3D|HTMLCanvasElement} container That may contain
	 * a React component
	 * @return {?*} The markup that may have the reactRoot ID, or null.
	 */
	function getReactRootMarkupInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  // in ReactMount this is container.firstChild.

	  return container.userData && container.userData.markup && container.userData.markup.childrenMarkup[0] || null;
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	var React3Renderer = (_temp2 = _class2 = function () {
	  _createClass(React3Renderer, [{
	    key: 'updateChildren',


	    /**
	     * @see ReactChildReconciler.updateChildren
	     *
	     * Cloned because it uses
	     * @see React3Renderer.instantiateReactComponent
	     *
	     * Updates the rendered children and returns a new set of children.
	     *
	     * @param {?object} prevChildren Previously initialized set of children.
	     * @param {?object} nextChildren Flat child element maps.
	     * @param mountImages
	     * @param {?object} removedMarkups The map for removed nodes.
	     * @param {ReactReconcileTransaction} transaction
	     * @param hostParent
	     * @param hostContainerInfo
	     * @param {object} context
	     * @param selfDebugID
	     * @return {?object} A new set of child instances.
	     * @internal
	     */
	    value: function updateChildren(prevChildren, nextChildren, mountImages, removedMarkups, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	    ) {
	      // We currently don't have a way to track moves here but if we use iterators
	      // instead of for..in we can zip the iterators and check if an item has
	      // moved.
	      // TODO: If nothing has changed, return the prevChildren object so that we
	      // can quickly bailout.
	      if (!nextChildren && !prevChildren) {
	        return null;
	      }

	      if (nextChildren) {
	        var nextChildrenKeys = Object.keys(nextChildren);

	        for (var i = 0; i < nextChildrenKeys.length; ++i) {
	          var childName = nextChildrenKeys[i];

	          var prevChild = prevChildren && prevChildren[childName];
	          var prevElement = prevChild && prevChild._currentElement;
	          var nextElement = nextChildren[childName];
	          if (prevChild !== null && prevChild !== undefined && (0, _shouldUpdateReactComponent2.default)(prevElement, nextElement)) {
	            _ReactReconciler2.default.receiveComponent(prevChild, nextElement, transaction, context);

	            if (prevChild._forceRemountOfComponent) {
	              removedMarkups[childName] = prevChild.getHostMarkup();

	              _ReactReconciler2.default.unmountComponent(prevChild, false);
	              var nextChildInstance = this.instantiateReactComponent(nextElement, true);
	              nextChildren[childName] = nextChildInstance;

	              // Creating mount image now ensures refs are resolved in right order
	              // (see https://github.com/facebook/react/pull/7101 for explanation).
	              var nextChildMountImage = _ReactReconciler2.default.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);

	              mountImages.push(nextChildMountImage);
	            } else {
	              nextChildren[childName] = prevChild;
	            }
	          } else {
	            if (prevChild) {
	              removedMarkups[childName] = prevChild.getHostMarkup();

	              _ReactReconciler2.default.unmountComponent(prevChild, false);
	            }
	            // The child must be instantiated before it's mounted.
	            var _nextChildInstance = this.instantiateReactComponent(nextElement, true);

	            nextChildren[childName] = _nextChildInstance;

	            // Creating mount image now ensures refs are resolved in right order
	            // (see https://github.com/facebook/react/pull/7101 for explanation).
	            var _nextChildMountImage = _ReactReconciler2.default.mountComponent(_nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID /* parentDebugID */
	            );

	            mountImages.push(_nextChildMountImage);
	          }
	        }
	      }

	      if (prevChildren) {
	        // Unmount children that are no longer present.
	        var prevChildrenKeys = Object.keys(prevChildren);
	        for (var _i = 0; _i < prevChildrenKeys.length; ++_i) {
	          var _childName = prevChildrenKeys[_i];

	          if (!(nextChildren && nextChildren.hasOwnProperty(_childName))) {
	            var _prevChild = prevChildren[_childName];

	            removedMarkups[_childName] = _prevChild.getHostMarkup();

	            _ReactReconciler2.default.unmountComponent(_prevChild, false);
	          }
	        }
	      }

	      return nextChildren;
	    }
	  }, {
	    key: 'getElementDescriptor',
	    value: function getElementDescriptor(name) {
	      return this.threeElementDescriptors[name];
	    }
	  }], [{
	    key: 'findTHREEObject',


	    /**
	     * Returns the THREE.js object rendered by this element.
	     *
	     * @param {React.Component|THREE.Object3D|HTMLCanvasElement} componentOrElement
	     * @return {?THREE.Object3D} The root node of this element.
	     */
	    value: function findTHREEObject(componentOrElement) {
	      if (process.env.NODE_ENV !== 'production') {
	        var owner = _ReactCurrentOwner2.default.current;
	        if (owner !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            (0, _warning2.default)(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
	          }
	          owner._warnedAboutRefsInRender = true;
	        }
	      }

	      if (componentOrElement === null) {
	        return null;
	      }

	      if (componentOrElement instanceof THREE.Object3D || componentOrElement instanceof HTMLCanvasElement) {
	        return componentOrElement;
	      }

	      if (_ReactInstanceMap2.default.has(componentOrElement)) {
	        var instance = _ReactInstanceMap2.default.get(componentOrElement);

	        instance = (0, _getHostComponentFromComposite2.default)(instance);

	        return instance ? _React3ComponentTree2.default.getMarkupFromInstance(instance).threeObject : null;
	      }

	      if (!(componentOrElement.render === null || typeof componentOrElement.render !== 'function')) {
	        if (process.env.NODE_ENV !== 'production') {
	          (0, _invariant2.default)(false, 'Component (with keys: %s) contains `render` method ' + 'but is not mounted', Object.keys(componentOrElement));
	        } else {
	          (0, _invariant2.default)(false);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(false, 'Element appears to be neither ReactComponent, ' + 'a THREE.js object, nor a HTMLCanvasElement (keys: %s)', Object.keys(componentOrElement));
	      } else {
	        (0, _invariant2.default)(false);
	      }

	      return null;
	    }
	    // to be used by modules e.g. mouse input ( see examples )

	  }]);

	  function React3Renderer() {
	    var _this2 = this;

	    _classCallCheck(this, React3Renderer);

	    this.instantiateChild = function (childInstances, child, name, selfDebugID) {
	      // We found a component instance.
	      var keyUnique = childInstances[name] === undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        if (!keyUnique) {
	          (0, _warning2.default)(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', _KeyEscapeUtils2.default.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID));
	        }
	      }

	      if (child !== null && keyUnique) {
	        childInstances[name] = _this2.instantiateReactComponent(child, true);
	      }
	    };

	    this.findNodeHandle = function (instance) {
	      var inst = _React3ComponentTree2.default.getRenderedHostOrTextFromComponent(instance);

	      if (!inst || !inst._threeObject) {
	        return null;
	      }

	      var markup = _React3ComponentTree2.default.getMarkupFromInstance(inst);

	      _this2._highlightCache = markup;
	      return _this2._highlightElement;
	    };

	    this.nativeTagToRootNodeID = function () {
	      return 0;
	    };

	    this.hostTagToRootNodeID = function () {
	      return 0;
	    };

	    this.batchedMountComponentIntoNode = function (componentInstance, container, shouldReuseMarkup, context) {
	      var transaction = _ReactUpdates2.default.ReactReconcileTransaction.getPooled(!shouldReuseMarkup);
	      transaction.perform(_this2.mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	      _ReactUpdates2.default.ReactReconcileTransaction.release(transaction);
	    };

	    this.mountComponentIntoNode = function (wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	      var markup = _ReactReconciler2.default.mountComponent(wrapperInstance, transaction, null, (0, _React3ContainerInfo2.default)(wrapperInstance, container), context, 0 /* parentDebugID */
	      );

	      wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	      _this2._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	    };

	    this._instancesByReactRootID = {};
	    if (process.env.NODE_ENV !== 'production') {
	      this.rootMarkupsByReactRootID = {};
	    }
	    this.nextMountID = 1;
	    this.globalIdCounter = 1;
	    this.nextReactRootIndex = 0;

	    this.threeElementDescriptors = new _ElementDescriptorContainer2.default(this).descriptors;

	    this._highlightElement = document.createElement('div');
	    this._highlightCache = null;

	    if (process.env.NODE_ENV !== 'production') {
	      this._nextDebugID = 1;
	      this._debugIdPrefix = staticDebugIdHack++;
	    }

	    if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	      this._agent = null;

	      this._onHideHighlightFromInspector = function () {
	        if (_this2._highlightCache && _this2._highlightCache.threeObject.userData.react3internalComponent) {
	          var internalComponent = _this2._highlightCache.threeObject.userData.react3internalComponent;

	          internalComponent.hideHighlight();

	          _this2._highlightCache = null;
	        }
	      };

	      this._onHighlightFromInspector = function (highlightInfo) {
	        if (highlightInfo.node === _this2._highlightElement) {
	          if (_this2._highlightCache && _this2._highlightCache.threeObject.userData.react3internalComponent) {
	            var internalComponent = _this2._highlightCache.threeObject.userData.react3internalComponent;

	            internalComponent.highlightComponent();
	          }
	        }
	      };

	      this._hookAgent = function (agent) {
	        _this2._agent = agent;

	        // agent.on('startInspecting', (...args) => {
	        //   console.log('start inspecting?', args);
	        // });
	        // agent.on('setSelection', (...args) => {
	        //   console.log('set selection?', args);
	        // });
	        // agent.on('selected', (...args) => {
	        //   console.log('selected?', args);
	        // });
	        agent.on('highlight', _this2._onHighlightFromInspector);
	        agent.on('hideHighlight', _this2._onHideHighlightFromInspector);
	        // agent.on('highlightMany', (...args) => {
	        //   console.log('highlightMany?', args);
	        // });
	      };

	      // Inject the runtime into a devtools global hook regardless of browser.
	      // Allows for debugging when the hook is injected on the page.
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	        this._devToolsRendererDefinition = {
	          ComponentTree: {
	            getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
	              return _React3ComponentTree2.default.getClosestInstanceFromMarkup(node);
	            },
	            getNodeFromInstance: function getNodeFromInstance(instInput) {
	              var inst = instInput;
	              // inst is an internal instance (but could be a composite)
	              while (inst._renderedComponent) {
	                inst = inst._renderedComponent;
	              }
	              if (inst) {
	                return _React3ComponentTree2.default.getMarkupFromInstance(inst);
	              }

	              return null;
	            }
	          },
	          Mount: this,
	          Reconciler: _ReactReconciler2.default,
	          TextComponent: _InternalComponent2.default
	        };

	        var rendererListener = function rendererListener(info) {
	          _this2._reactDevtoolsRendererId = info.id;
	          _this2._rendererListenerCleanup();

	          delete _this2._rendererListenerCleanup;
	        };

	        this._rendererListenerCleanup = __REACT_DEVTOOLS_GLOBAL_HOOK__.sub('renderer', rendererListener);
	        __REACT_DEVTOOLS_GLOBAL_HOOK__.inject(this._devToolsRendererDefinition);

	        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent !== 'undefined' && __REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent) {
	          var agent = __REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent;
	          this._hookAgent(agent);
	        } else {
	          this._devtoolsCallbackCleanup = __REACT_DEVTOOLS_GLOBAL_HOOK__.sub('react-devtools', function (agent) {
	            _this2._devtoolsCallbackCleanup();

	            _this2._hookAgent(agent);
	          });
	        }
	      }
	    }
	  }

	  /**
	   * @see ReactChildReconciler.instantiateChild
	   * Cloned because it uses
	   * @see React3Renderer.instantiateReactComponent
	   *
	   * @param childInstances
	   * @param child
	   * @param name
	   * @param selfDebugID
	   */


	  _createClass(React3Renderer, [{
	    key: 'instantiateChildren',


	    /**
	     * @see ReactChildReconciler.instantiateChildren
	     * Cloned because it uses
	     * @see React3Renderer.instantiateChild
	     *
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildNodes Nested child maps.
	     * @param transaction
	     * @param context
	     * @param selfDebugID
	     * @return {?object} A set of child instances.
	     * @internal
	     */
	    value: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	    ) {
	      var _this3 = this;

	      if (nestedChildNodes === null) {
	        return null;
	      }

	      var childInstances = {};

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _traverseAllChildren2.default)(nestedChildNodes, function (childInsts, child, name) {
	          return _this3.instantiateChild(childInsts, child, name, selfDebugID);
	        }, childInstances);
	      } else {
	        (0, _traverseAllChildren2.default)(nestedChildNodes, this.instantiateChild, childInstances);
	      }

	      return childInstances;
	    }
	  }, {
	    key: 'containsChild',
	    value: function containsChild(container, markup) {
	      var childrenMarkup = container.userData.markup.childrenMarkup;
	      for (var i = 0; i < childrenMarkup.length; i++) {
	        if (childrenMarkup[i] === markup) {
	          return true;
	        }
	      }

	      return false;
	    }

	    // DO NOT RENAME
	    // used by react devtools!


	    // used by react devtools

	  }, {
	    key: '_mountImageIntoNode',
	    value: function _mountImageIntoNode(markup, container, instance, shouldReuseMarkup, transaction) {
	      // eslint-disable-line no-unused-vars
	      // TODO try to do server-side rendering for THREE

	      if (!container.userData) {
	        // it has to be a HTMLCanvasElement I guess?
	        (0, _invariant2.default)(container instanceof HTMLCanvasElement, 'The root container can only be a THREE.js object ' + '(with an userData property) or HTMLCanvasElement.');
	        container.userData = {
	          _createdByReact3: true
	        };
	      }

	      var rootImage = markup;

	      var rootMarkup = {
	        threeObject: container,
	        parentMarkup: null,
	        childrenMarkup: [rootImage],
	        toJSON: function toJSON() {
	          return '---MARKUP---';
	        }
	      };

	      Object.assign(container.userData, {
	        object3D: container,
	        toJSON: function toJSON() {
	          return '---USERDATA---';
	        },
	        markup: rootMarkup
	      });

	      rootImage.parentMarkup = rootMarkup;

	      var descriptorForChild = this.threeElementDescriptors[rootImage.elementType];
	      descriptorForChild.setParent(rootImage.threeObject, rootMarkup.threeObject);

	      // all objects now added can be marked as added to scene now!

	      rootImage.threeObject.mountedIntoRoot();

	      var firstChild = container.userData.markup.childrenMarkup[0];
	      _React3ComponentTree2.default.precacheMarkup(instance, firstChild);

	      if (process.env.NODE_ENV !== 'production') {
	        var hostInstance = _React3ComponentTree2.default.getInstanceFromMarkup(firstChild);
	        if (hostInstance._debugID !== 0) {
	          _ReactInstrumentation2.default.debugTool.onHostOperation({
	            instanceID: hostInstance._debugID,
	            type: 'mount',
	            payload: markup.toString()
	          });
	        }
	      }
	    }

	    /**
	     *
	     * @param nextElement A react element
	     * @param container A canvas or a THREE.js object
	     * @param callback The callback function
	     * @returns {*}
	     */

	  }, {
	    key: 'render',
	    value: function render(nextElement, container, callback) {
	      return this._renderSubtreeIntoContainer(null, nextElement, container, callback);
	    }
	  }, {
	    key: 'getHostRootInstanceInContainer',
	    value: function getHostRootInstanceInContainer(container) {
	      var rootMarkup = getReactRootMarkupInContainer(container);
	      var prevHostInstance = rootMarkup && _React3ComponentTree2.default.getInstanceFromMarkup(rootMarkup);
	      return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	    }
	  }, {
	    key: 'getTopLevelWrapperInContainer',
	    value: function getTopLevelWrapperInContainer(container) {
	      var root = this.getHostRootInstanceInContainer(container);
	      if (root) {
	        (0, _invariant2.default)(!!root._hostContainerInfo, 'Root should have native container info %s', ' but it does not');
	      }
	      return root ? root._hostContainerInfo._topLevelWrapper : null;
	    }
	  }, {
	    key: '_renderSubtreeIntoContainer',
	    value: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	      if (!_ReactElement2.default.isValidElement(nextElement)) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (typeof nextElement === 'string') {
	            (0, _invariant2.default)(false, 'React3Renderer.render(): Invalid component element.%s', ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.');
	          } else if (typeof nextElement === 'function') {
	            (0, _invariant2.default)(false, 'React3Renderer.render(): Invalid component element.%s', ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.');
	          } else if (nextElement !== null && nextElement.props !== undefined) {
	            (0, _invariant2.default)(false, 'React3Renderer.render(): Invalid component element.%s', ' This may be caused by unintentionally loading two independent ' + 'copies of React.');
	          } else {
	            (0, _invariant2.default)(false, 'React3Renderer.render(): Invalid component element.');
	          }
	        } else {
	          (0, _invariant2.default)(false);
	        }
	      }

	      var nextWrappedElement = _ReactElement2.default.createElement(TopLevelWrapper, { child: nextElement });

	      var nextContext = void 0;
	      if (parentComponent) {
	        var parentInst = _ReactInstanceMap2.default.get(parentComponent);
	        nextContext = parentInst._processChildContext(parentInst._context);
	      } else {
	        nextContext = _emptyObject2.default;
	      }

	      var prevComponent = this.getTopLevelWrapperInContainer(container);

	      if (prevComponent) {
	        var prevWrappedElement = prevComponent._currentElement;
	        var prevElement = prevWrappedElement.props.child;
	        if ((0, _shouldUpdateReactComponent2.default)(prevElement, nextElement)) {
	          var publicInst = prevComponent._renderedComponent.getPublicInstance();
	          var updatedCallback = callback && function () {
	            callback.call(publicInst);
	          };

	          this._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);

	          return publicInst;
	        }

	        this.unmountComponentAtNode(container);
	      }

	      // aka first child
	      var reactRootMarkup = getReactRootMarkupInContainer(container);
	      var containerHasReactMarkup = reactRootMarkup && !!internalGetID(reactRootMarkup);

	      // containerHasNonRootReactChild not implemented

	      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	      var component = this._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();

	      if (callback) {
	        callback.call(component);
	      }

	      return component;
	    }
	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      var rootIds = Object.keys(this._instancesByReactRootID);

	      for (var i = 0; i < rootIds.length; ++i) {
	        this.unmountComponentAtNode(this._instancesByReactRootID[rootIds[i]].getHostMarkup().parentMarkup.threeObject);
	      }

	      delete this._instancesByReactRootID;
	      if (process.env.NODE_ENV !== 'production') {
	        delete this.rootMarkupsByReactRootID;
	      }
	      delete this._highlightElement;
	      this.nextMountID = 1;
	      this.nextReactRootIndex = 0;

	      if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	        if (this._devtoolsCallbackCleanup) {
	          this._devtoolsCallbackCleanup();

	          delete this._devtoolsCallbackCleanup;
	        }

	        if (this._rendererListenerCleanup) {
	          this._rendererListenerCleanup();

	          delete this._rendererListenerCleanup;
	        }

	        if (this._devToolsRendererDefinition) {
	          if (this._agent) {
	            this._agent.onUnmounted(this._devToolsRendererDefinition);
	            this._agent.removeListener('highlight', this._onHighlightFromInspector);
	            this._agent.removeListener('hideHighlight', this._onHideHighlightFromInspector);
	          }

	          if (this._reactDevtoolsRendererId) {
	            delete __REACT_DEVTOOLS_GLOBAL_HOOK__._renderers[this._reactDevtoolsRendererId];
	            delete this._reactDevtoolsRendererId;
	          }

	          delete this._devToolsRendererDefinition;
	          delete this._agent;
	        }

	        delete this._onHighlightFromInspector;
	        delete this._onHideHighlightFromInspector;
	        delete this._hookAgent;
	      }
	    }
	  }, {
	    key: '_updateRootComponent',
	    value: function _updateRootComponent(prevComponent, nextElement, nextContext, container, callback) {
	      _ReactUpdateQueue2.default.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        _ReactUpdateQueue2.default.enqueueCallbackInternal(prevComponent, callback);
	      }

	      return prevComponent;
	    }

	    /**
	     * True if the supplied DOM node has a direct React-rendered child that is
	     * not a React root element. Useful for warning in `render`,
	     * `unmountComponentAtNode`, etc.
	     *
	     * @param {?*} container The container.
	     * @return {boolean} True if the DOM element contains a direct child that was
	     * rendered by React but is not a root element.
	     * @internal
	     */

	  }, {
	    key: 'hasNonRootReactChild',
	    value: function hasNonRootReactChild(container) {
	      var rootMarkup = getReactRootMarkupInContainer(container);
	      if (rootMarkup) {
	        var inst = _React3ComponentTree2.default.getInstanceFromMarkup(rootMarkup);
	        return !!(inst && inst._hostParent);
	      }

	      return false;
	    }
	  }, {
	    key: 'unmountComponentAtNode',
	    value: function unmountComponentAtNode(container) {
	      // Various parts of our code (such as ReactCompositeComponent's
	      // _renderValidatedComponent) assume that calls to render aren't nested;
	      // verify that that's the case. (Strictly speaking, unmounting won't cause a
	      // render but we still don't expect to be in a render call here.)

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _warning2.default)(_ReactCurrentOwner2.default.current === null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', _ReactCurrentOwner2.default.current && _ReactCurrentOwner2.default.current.getName() || 'ReactCompositeComponent');
	      }

	      var prevComponent = this.getTopLevelWrapperInContainer(container);
	      if (!prevComponent) {
	        // Check if the node being unmounted was rendered by React, but isn't a
	        // root node.
	        var containerHasNonRootReactChild = this.hasNonRootReactChild(container);

	        // Check if the container itself is a React root node.
	        var isContainerReactRoot = !!(container && container.userData && container.userData.markup && container.userData.markup[_idPropertyName2.default]);

	        if (process.env.NODE_ENV !== 'production') {
	          (0, _warning2.default)(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	        }

	        return false;
	      }

	      delete this._instancesByReactRootID[prevComponent._instance.rootID];

	      _ReactUpdates2.default.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);

	      if (container && container.userData && container.userData._createdByReact3) {
	        delete container.userData;
	      }

	      return true;
	    }

	    /**
	     * @param {THREE.Object3D|HTMLCanvasElement} container THREE Object
	     *   or HTML Canvas Element that may contain a React component.
	     * @return {?string} A "reactRoot" ID, if a React component is rendered.
	     */

	  }, {
	    key: 'getReactRootID',
	    value: function getReactRootID(container) {
	      var rootMarkup = getReactRootMarkupInContainer(container);
	      return rootMarkup && this.getID(rootMarkup);
	    }

	    // see instantiateReactComponent.js
	    /**
	     * @see #instantiateReactComponent
	     *
	     * Cloned because it uses
	     * @see InternalComponent
	     *
	     * @param _node ( from createElement )
	     * @param {boolean} shouldHaveDebugID
	     * @return {object} A new instance of the element's constructor.
	     */

	  }, {
	    key: 'instantiateReactComponent',
	    value: function instantiateReactComponent(_node, shouldHaveDebugID) {
	      var instance = void 0;

	      var node = _node;

	      var isEmptyNode = node === null || node === false;

	      if (isEmptyNode) {
	        // Create an object3D node so that empty components can be added anywhere
	        instance = new _InternalComponent2.default(_ReactElement2.default.createElement('object3D', {
	          visible: false
	        }), this);
	        // original: instance = new ReactDOMEmptyComponent(this.instantiateReactComponent);
	      } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	        var _element = node;

	        var type = _element.type;
	        if (typeof type !== 'function' && typeof type !== 'string') {
	          var info = '';
	          if (process.env.NODE_ENV !== 'production') {
	            if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	            }
	          }
	          info += getDeclarationErrorAddendum(_element._owner);
	          (0, _invariant2.default)(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', type === null || type === undefined ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info);
	        }

	        // Special case string values
	        if (typeof _element.type === 'string') {
	          // original: instance = ReactHostComponent.createInternalComponent(element);
	          instance = new _InternalComponent2.default(_element, this);
	        } else if (isInternalComponentType(_element.type)) {
	          // This is temporarily available for custom components that are not string
	          // representations. I.e. ART. Once those are updated to use the string
	          // representation, we can drop this code path.
	          var Constructor = _element.type;

	          instance = new Constructor(_element);

	          // We renamed this. Allow the old name for compat. :(
	          if (!instance.getHostNode) {
	            instance.getHostNode = instance.getNativeNode;
	          }
	        } else {
	          instance = new _React3CompositeComponentWrapper2.default(_element, this);
	        }
	      } else if (typeof node === 'string' || typeof node === 'number') {
	        // TODO create instance for text
	        if (process.env.NODE_ENV !== 'production') {
	          (0, _invariant2.default)(false, 'Encountered invalid React node of type %s : %s', typeof node === 'undefined' ? 'undefined' : _typeof(node), node);
	        } else {
	          (0, _invariant2.default)(false);
	        }
	      } else if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(false, 'Encountered invalid React node of type %s', typeof element === 'undefined' ? 'undefined' : _typeof(element));
	      } else {
	        (0, _invariant2.default)(false);
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _warning2.default)(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostMarkup === 'function' && typeof instance.unmountComponent === 'function', 'Only React 3 Components can be mounted.');
	      }

	      // These two fields are used by the DOM and ART diffing algorithms
	      // respectively. Instead of using expandos on components, we should be
	      // storing the state needed by the diffing algorithms elsewhere.
	      instance._mountIndex = 0;
	      instance._mountImage = null;

	      if (process.env.NODE_ENV !== 'production') {
	        if (shouldHaveDebugID) {
	          instance._debugID = 'r3r' + this._debugIdPrefix + '-' + this._nextDebugID++;
	        } else {
	          instance._debugID = 0;
	        }
	      }

	      // Internal instances should fully constructed at this point, so they should
	      // not get any new fields added to them at this point.
	      if (process.env.NODE_ENV !== 'production') {
	        if (Object.preventExtensions) {
	          Object.preventExtensions(instance);
	        }
	      }

	      return instance;
	    }

	    /**
	     * @see ReactMount._renderNewRootComponent
	     *
	     * Cloned because it uses
	     * @see React3Renderer.instantiateReactComponent
	     *
	     * @param nextElement
	     * @param {THREE.Object3D | HTMLCanvasElement} container
	     * @param shouldReuseMarkup
	     * @param context
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: '_renderNewRootComponent',
	    value: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	      // Various parts of our code (such as ReactCompositeComponent's
	      // _renderValidatedComponent) assume that calls to render aren't nested;
	      // verify that that's the case.
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _warning2.default)(_ReactCurrentOwner2.default.current === null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', _ReactCurrentOwner2.default.current && _ReactCurrentOwner2.default.current.getName() || 'ReactCompositeComponent');
	      }

	      var componentInstance = this.instantiateReactComponent(nextElement, false);

	      if (!_ReactUpdates2.default.ReactReconcileTransaction) {
	        // If the ReactReconcileTransaction has not been injected
	        // let's just use the defaults from ReactMount.
	        _ReactInjection2.default.Updates.injectReconcileTransaction(_ReactReconcileTransaction2.default);
	        _ReactInjection2.default.Updates.injectBatchingStrategy(_ReactDefaultBatchingStrategy2.default);
	      }

	      var devToolRemoved = void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        devToolRemoved = (0, _removeDevTool2.default)();
	      }

	      // The initial render is synchronous but any updates that happen during
	      // rendering, in componentWillMount or componentDidMount, will be batched
	      // according to the current batching strategy.

	      _ReactUpdates2.default.batchedUpdates(this.batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	      if (process.env.NODE_ENV !== 'production') {
	        if (devToolRemoved) {
	          _removeDevTool2.default.restore();
	        }
	      }

	      var wrapperID = componentInstance._instance.rootID;
	      this._instancesByReactRootID[wrapperID] = componentInstance;

	      return componentInstance;
	    }

	    /**
	     * Batched mount.
	     *
	     * @param {ReactComponent} componentInstance The instance to mount.
	     * @param {*} container Container.
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @param {*} context que?
	     */


	    /**
	     * @see #mountComponentIntoNode
	     *
	     * Mounts this component and inserts it into the DOM.
	     *
	     * @param {ReactComponent} wrapperInstance The instance to mount.
	     * @param {*} container container to mount into.
	     * @param {ReactReconcileTransaction} transaction
	     * @param {boolean} shouldReuseMarkup If true, do not insert markup
	     * @param {*} context
	     */

	  }, {
	    key: 'createReactRootID',
	    value: function createReactRootID() {
	      return this.nextReactRootIndex++;
	    }
	  }, {
	    key: 'getID',
	    value: function getID(markup) {
	      return internalGetID(markup);
	    }
	  }]);

	  return React3Renderer;
	}(), _class2.eventDispatcher = new _EventDispatcher2.default(), _temp2);


	module.exports = React3Renderer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 278 */
/***/ (function(module, exports) {

	"use strict";

	function React3ContainerInfo(topLevelWrapper, instance) {
	  // eslint-disable-line no-unused-vars
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1
	  };

	  return info;
	}

	module.exports = React3ContainerInfo;

/***/ }),
/* 279 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EventDispatcher = function () {
	  function EventDispatcher() {
	    _classCallCheck(this, EventDispatcher);
	  }

	  _createClass(EventDispatcher, [{
	    key: "dispatchEvent",
	    value: function dispatchEvent(threeObject, eventName) {
	      var eventCallbacks = threeObject.userData._eventCallbacks;
	      var callback = eventCallbacks && eventCallbacks[eventName];

	      if (callback) {
	        for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	          params[_key - 2] = arguments[_key];
	        }

	        callback.apply(undefined, params);
	      }
	    }
	  }]);

	  return EventDispatcher;
	}();

	module.exports = EventDispatcher;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _emptyFunction = __webpack_require__(10);

	var _emptyFunction2 = _interopRequireDefault(_emptyFunction);

	var _flattenChildren = __webpack_require__(281);

	var _flattenChildren2 = _interopRequireDefault(_flattenChildren);

	var _ReactCurrentOwner = __webpack_require__(18);

	var _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);

	var _ReactElement = __webpack_require__(17);

	var _ReactElement2 = _interopRequireDefault(_ReactElement);

	var _ReactInstrumentation = __webpack_require__(69);

	var _ReactInstrumentation2 = _interopRequireDefault(_ReactInstrumentation);

	var _ReactReconciler = __webpack_require__(66);

	var _ReactReconciler2 = _interopRequireDefault(_ReactReconciler);

	var _ReactMultiChild = __webpack_require__(122);

	var _ReactMultiChild2 = _interopRequireDefault(_ReactMultiChild);

	var _ReactRef = __webpack_require__(67);

	var _ReactRef2 = _interopRequireDefault(_ReactRef);

	var _React3ComponentFlags = __webpack_require__(282);

	var _React3ComponentFlags2 = _interopRequireDefault(_React3ComponentFlags);

	var _idPropertyName = __webpack_require__(283);

	var _idPropertyName2 = _interopRequireDefault(_idPropertyName);

	var _React3CompositeComponentWrapper = __webpack_require__(284);

	var _React3CompositeComponentWrapper2 = _interopRequireDefault(_React3CompositeComponentWrapper);

	var _React3ComponentTree = __webpack_require__(286);

	var _React3ComponentTree2 = _interopRequireDefault(_React3ComponentTree);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function processChildContext(context) {
	  return context;
	}

	var RemountTrigger = function RemountTrigger() {
	  var _this = this;

	  _classCallCheck(this, RemountTrigger);

	  this.wantRemount = false;
	  this.onTrigger = function onTrigger() {};

	  this.trigger = function () {
	    _this.wantRemount = true;

	    _this.onTrigger();
	  };
	};

	var registrationNameModules = {};

	function deleteListener(rootNodeID, propKey) {
	  console.log('deleteListener', rootNodeID, propKey); // eslint-disable-line
	  debugger; // eslint-disable-line
	}

	function enqueuePutListener(rootNodeID, propKey, nextProp, transaction) {
	  console.log('enqueuePutListener', rootNodeID, propKey, nextProp, transaction); // eslint-disable-line
	  debugger; // eslint-disable-line
	}

	function _arrayMove(array, oldIndex, newIndex) {
	  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);
	}

	var setChildrenForInstrumentation = _emptyFunction2.default;
	var setContentChildForInstrumentation = _emptyFunction2.default;
	var getDebugID = void 0;

	if (process.env.NODE_ENV !== 'production') {
	  /* eslint-disable global-require */

	  var ReactInstanceMap = __webpack_require__(124);

	  /* eslint-enable global-require */

	  getDebugID = function _(inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal = ReactInstanceMap.get(inst);
	      if (internal) {
	        return internal._debugID;
	      }
	    }
	    return inst._debugID;
	  };

	  setChildrenForInstrumentation = function _(children) {
	    _ReactInstrumentation2.default.debugTool.onSetChildren(this._debugID, children ? Object.keys(children).map(function (key) {
	      return children[key]._debugID;
	    }) : []);
	  };

	  setContentChildForInstrumentation = function _(content) {
	    var hasExistingContent = this._contentDebugID !== null && this._contentDebugID !== undefined;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = 'CDID-' + debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        _ReactInstrumentation2.default.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      _ReactInstrumentation2.default.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      _ReactInstrumentation2.default.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      _ReactInstrumentation2.default.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      _ReactInstrumentation2.default.debugTool.onMountComponent(contentDebugID);
	      _ReactInstrumentation2.default.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	var getThreeObjectFromMountImage = function getThreeObjectFromMountImage(img) {
	  return img.threeObject;
	};

	var ReactMultiChildMixin = _ReactMultiChild2.default.Mixin;

	// TODO sync ReactDOMComponent
	var InternalComponent = (_temp = _class = function () {
	  function InternalComponent(element, react3RendererInstance) {
	    var _this2 = this;

	    _classCallCheck(this, InternalComponent);

	    this.updateChildren = ReactMultiChildMixin.updateChildren.bind(this);
	    this._mountChildAtIndex = ReactMultiChildMixin._mountChildAtIndex.bind(this);
	    this._unmountChild = ReactMultiChildMixin._unmountChild.bind(this);
	    this.unmountChildren = ReactMultiChildMixin.unmountChildren.bind(this);

	    this._currentElement = element;
	    /**
	     * @type React3Renderer
	     */
	    this._react3RendererInstance = react3RendererInstance;

	    this._elementType = element.type; // _tag
	    this._renderedChildren = [];
	    this._hostMarkup = null; // _hostNode
	    this._hostParent = null;
	    this._rootNodeID = 0;
	    this._hostID = 0; // _domID
	    this._hostContainerInfo = null;
	    this._threeObject = null;
	    this._topLevelWrapper = null;
	    this._markup = null;
	    this._nodeWithLegacyProperties = null;
	    this._forceRemountOfComponent = false;
	    this._flags = 0;

	    if (process.env.NODE_ENV !== 'production') {
	      this._ancestorInfo = null;

	      setContentChildForInstrumentation.call(this, null);
	    }

	    this.threeElementDescriptor = react3RendererInstance.threeElementDescriptors[element.type];
	    if (!this.threeElementDescriptor) {
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(false, 'No constructor for ' + element.type);
	      } else {
	        (0, _invariant2.default)(false);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	      this.highlightComponent = function () {
	        _this2.threeElementDescriptor.highlight(_this2._threeObject);
	      };

	      this.hideHighlight = function () {
	        _this2.threeElementDescriptor.hideHighlight(_this2._threeObject);
	      };
	    }

	    this.remountTrigger = new RemountTrigger();

	    this.remountTrigger.onTrigger = function () {
	      _this2._forceRemountOfComponent = true;
	    };
	  }

	  _createClass(InternalComponent, [{
	    key: 'getHostMarkup',
	    value: function getHostMarkup() {
	      return this._markup;
	    }
	  }, {
	    key: 'getHostNode',
	    value: function getHostNode() {
	      // console.warn('host node?'); // eslint-disable-line no-console
	      return this._markup;
	    }

	    /**
	     * Generates root tag markup then recurses. This method has side effects and
	     * is not idempotent.
	     *
	     * @internal
	     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	     * @param {?InternalComponent} hostParent the containing DOM component instance
	     * @param {?React3ContainerInfo} hostContainerInfo info about the host container
	     * @param {object} context
	     * @return {object} The computed markup.
	     */

	  }, {
	    key: 'mountComponent',
	    value: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	      var _markup;

	      this._rootNodeID = this._react3RendererInstance.globalIdCounter++;
	      this._hostID = hostContainerInfo._idCounter++;
	      this._hostParent = hostParent;
	      this._hostContainerInfo = hostContainerInfo;

	      var element = this._currentElement;

	      if (process.env.NODE_ENV !== 'production') {
	        this.threeElementDescriptor.checkPropTypes(element, this._currentElement._owner, this._debugID, element.props);
	      }

	      this._threeObject = this.threeElementDescriptor.construct(element.props);
	      this.threeElementDescriptor.applyInitialProps(this._threeObject, element.props);

	      this.threeElementDescriptor.placeRemountTrigger(this._threeObject, this.remountTrigger.trigger);

	      // create initial children
	      var childrenToUse = element.props.children;

	      var mountImages = void 0;
	      if (childrenToUse) {
	        mountImages = this.mountChildren(childrenToUse, transaction, context);
	      } else {
	        mountImages = [];
	      }

	      var markup = (_markup = {}, _defineProperty(_markup, _idPropertyName2.default, this._hostID), _defineProperty(_markup, '_rootInstance', null), _defineProperty(_markup, 'elementType', element.type), _defineProperty(_markup, 'threeObject', this._threeObject), _defineProperty(_markup, 'parentMarkup', null), _defineProperty(_markup, 'childrenMarkup', mountImages), _defineProperty(_markup, 'toJSON', function toJSON() {
	        return '---MARKUP---';
	      }), _markup);

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(!!this._threeObject.userData, 'No userdata present in threeobject for %s', element.type);
	      } else {
	        (0, _invariant2.default)(!!this._threeObject.userData);
	      }

	      Object.assign(this._threeObject.userData, {
	        object3D: this._threeObject,
	        react3internalComponent: this, // used for highlighting etc
	        toJSON: function toJSON() {
	          return '---USERDATA---';
	        },
	        markup: markup
	      });

	      var threeElementDescriptors = this._react3RendererInstance.threeElementDescriptors;

	      if (mountImages && mountImages.length > 0) {
	        this.threeElementDescriptor.addChildren(this._threeObject, mountImages.map(getThreeObjectFromMountImage));

	        for (var i = 0; i < mountImages.length; ++i) {
	          var mountImage = mountImages[i];

	          var descriptorForChild = threeElementDescriptors[mountImage.elementType];

	          mountImage.parentMarkup = markup;

	          descriptorForChild.setParent(mountImage.threeObject, this._threeObject);
	        }
	      }

	      this._markup = markup;

	      _React3ComponentTree2.default.precacheMarkup(this, this._markup);
	      this._flags |= _React3ComponentFlags2.default.hasCachedChildMarkups;

	      return markup;
	    }

	    /**
	     * @see ReactMultiChild._reconcilerInstantiateChildren
	     * Cloned because it uses
	     * @see React3Renderer.instantiateChildren
	     *
	     * @param nestedChildren
	     * @param transaction
	     * @param context
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: '_reconcilerInstantiateChildren',
	    value: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);

	        if (this._currentElement) {
	          var previousCurrent = _ReactCurrentOwner2.default.current;

	          try {
	            _ReactCurrentOwner2.default.current = this._currentElement._owner;
	            return this._react3RendererInstance.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            _ReactCurrentOwner2.default.current = previousCurrent;
	          }
	        }
	      }
	      return this._react3RendererInstance.instantiateChildren(nestedChildren, transaction, context, 0);
	    }

	    /**
	     * @see ReactMultiChild._reconcilerUpdateChildren
	     * Cloned because it uses
	     * @see React3Renderer.updateChildren
	     *
	     * @param prevChildren
	     * @param nextNestedChildrenElements
	     * @param mountImages
	     * @param removedMarkups
	     * @param transaction
	     * @param context
	     * @returns {?Object}
	     * @private
	     */

	  }, {
	    key: '_reconcilerUpdateChildren',
	    value: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedMarkups, transaction, context) {
	      var nextChildren = void 0;
	      var selfDebugID = 0;

	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);

	        if (this._currentElement) {
	          var previousCurrent = _ReactCurrentOwner2.default.current;

	          try {
	            _ReactCurrentOwner2.default.current = this._currentElement._owner;
	            nextChildren = (0, _flattenChildren2.default)(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            _ReactCurrentOwner2.default.current = previousCurrent;
	          }

	          this._react3RendererInstance.updateChildren(prevChildren, nextChildren, mountImages, removedMarkups, transaction, this, this._hostContainerInfo, context, selfDebugID);

	          return nextChildren;
	        }
	      }

	      nextChildren = (0, _flattenChildren2.default)(nextNestedChildrenElements, selfDebugID);

	      this._react3RendererInstance.updateChildren(prevChildren, nextChildren, mountImages, removedMarkups, transaction, this, this._hostContainerInfo, context, selfDebugID);

	      return nextChildren;
	    }

	    /**
	     * @see ReactMultiChild.mountChildren
	     *
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @param transaction
	     * @param context
	     * @return {array} An array of mounted representations.
	     * @internal
	     */

	  }, {
	    key: 'mountChildren',
	    value: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;

	      if (children) {
	        var childrenNames = Object.keys(children);
	        for (var i = 0; i < childrenNames.length; ++i) {
	          var name = childrenNames[i];
	          var child = children[name];
	          var selfDebugID = 0;

	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }

	          var mountImage = _ReactReconciler2.default.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);

	          // const mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild(child, toIndex, lastIndex) {
	      if (child._mountIndex === toIndex) {
	        return;
	      }

	      this.threeElementDescriptor.moveChild(this._threeObject, child._threeObject, toIndex, child._mountIndex);

	      var markup = this._markup;

	      _arrayMove(markup.childrenMarkup, lastIndex, toIndex);
	    }
	  }, {
	    key: 'receiveComponent',
	    value: function receiveComponent(nextElement, transaction, context) {
	      // console.log('receive component');

	      var prevElement = this._currentElement;
	      this._currentElement = nextElement;

	      this.updateComponent(transaction, prevElement, nextElement, context);

	      if (this._forceRemountOfComponent) {
	        this._currentElement = null;
	      }
	    }

	    /**
	     * @see ReactDOMComponent.updateComponent
	     *
	     * Updates a DOM component after it has already been allocated and
	     * attached to the DOM. Reconciles the root DOM node, then recurses.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @param {ReactElement} prevElement
	     * @param {ReactElement} nextElement
	     * @param context
	     * @internal
	     * @overridable
	     */

	  }, {
	    key: 'updateComponent',
	    value: function updateComponent(transaction, prevElement, nextElement, context) {
	      var lastProps = prevElement.props;
	      var nextProps = this._currentElement.props;

	      if (prevElement.type !== nextElement.type) {
	        if (process.env.NODE_ENV !== 'production') {
	          (0, _invariant2.default)(false, 'The component type changed unexpectedly');
	        } else {
	          (0, _invariant2.default)(false);
	        }
	      }

	      this._updateObjectProperties(lastProps, nextProps, transaction, context);
	      if (!this._forceRemountOfComponent) {
	        this._updateChildrenObjects(nextProps, transaction, processChildContext(context, this));
	      }
	    }

	    // see _updateDOMChildren

	  }, {
	    key: '_updateChildrenObjects',
	    value: function _updateChildrenObjects(nextProps, transaction, context) {
	      var nextChildren = nextProps.children || null;

	      if (process.env.NODE_ENV !== 'production') {
	        setContentChildForInstrumentation.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }

	    // original: _updateDOMProperties

	  }, {
	    key: '_updateObjectProperties',
	    value: function _updateObjectProperties(lastProps, nextProps, transaction) {
	      var remountTrigger = this.remountTrigger;

	      remountTrigger.wantRemount = false;

	      this.threeElementDescriptor.beginPropertyUpdates(this._threeObject, nextProps);

	      if (process.env.NODE_ENV !== 'production') {
	        this.threeElementDescriptor.checkPropTypes(this._currentElement, this._currentElement._owner, this._debugID, nextProps);
	      }

	      var lastPropKeys = Object.keys(lastProps);

	      // https://jsperf.com/object-keys-vs-for-in-with-closure/3
	      for (var i = 0; i < lastPropKeys.length; ++i) {
	        var propKey = lastPropKeys[i];

	        if (nextProps.hasOwnProperty(propKey)) {
	          continue;
	        }

	        if (propKey === 'children') {
	          continue;
	        }

	        if (remountTrigger.wantRemount) {
	          break;
	        }

	        if (registrationNameModules.hasOwnProperty(propKey)) {
	          if (lastProps[propKey]) {
	            // Only call deleteListener if there was a listener previously or
	            // else willDeleteListener gets called when there wasn't actually a
	            // listener (e.g., onClick={null})
	            deleteListener(this._rootNodeID, propKey);
	          }
	        } else {
	          this.threeElementDescriptor.deleteProperty(this._threeObject, propKey);
	        }
	      }

	      var nextPropKeys = Object.keys(nextProps);

	      for (var _i = 0; _i < nextPropKeys.length; ++_i) {
	        var _propKey = nextPropKeys[_i];

	        if (_propKey === 'children') {
	          continue;
	        }

	        if (remountTrigger.wantRemount) {
	          break;
	        }

	        var nextProp = nextProps[_propKey];
	        var lastProp = lastProps[_propKey];

	        if (nextProp === lastProp) {
	          continue;
	        }

	        if (registrationNameModules.hasOwnProperty(_propKey)) {
	          if (nextProp) {
	            enqueuePutListener(this._rootNodeID, _propKey, nextProp, transaction);
	          } else if (lastProp) {
	            deleteListener(this._rootNodeID, _propKey);
	          }
	        } else {
	          this.threeElementDescriptor.updateProperty(this._threeObject, _propKey, nextProp);
	        }
	      }

	      this.threeElementDescriptor.completePropertyUpdates(this._threeObject);
	    }
	  }, {
	    key: '_removeAllChildRefs',
	    value: function _removeAllChildRefs() {
	      var renderedChildren = this._renderedChildren;

	      if (renderedChildren) {
	        var renderedChildrenKeys = Object.keys(renderedChildren);

	        for (var i = 0; i < renderedChildrenKeys.length; ++i) {
	          var name = renderedChildrenKeys[i];

	          var renderedChild = renderedChildren[name];

	          if (renderedChild && renderedChild._currentElement && renderedChild._currentElement.ref) {
	            _ReactRef2.default.detachRefs(renderedChild, renderedChild._currentElement);

	            renderedChild._currentElement = _ReactElement2.default.cloneElement(renderedChild._currentElement, {
	              ref: null
	            });
	          }

	          renderedChild._removeAllChildRefs();
	        }
	      }
	    }

	    /**
	     * @see ReactDOMComponent.Mixin.unmountComponent
	     */

	  }, {
	    key: 'unmountComponent',
	    value: function unmountComponent(safely) {
	      if (this._threeObject !== null) {
	        this.threeElementDescriptor.componentWillUnmount(this._threeObject);
	      }

	      if (this._forceRemountOfComponent) {
	        this._removeAllChildRefs(); // prevent attaching of refs to children
	      }

	      this.unmountChildren(safely);
	      _React3ComponentTree2.default.uncacheMarkup(this);

	      if (this._threeObject !== null) {
	        this.threeElementDescriptor.unmount(this._threeObject);
	        // delete this._threeObject.userData.markup;
	      }

	      this._markup = null;
	      this._rootNodeID = 0;

	      if (this._nodeWithLegacyProperties) {
	        var node = this._nodeWithLegacyProperties;
	        node._reactInternalComponent = null;
	        this._nodeWithLegacyProperties = null;
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setContentChildForInstrumentation.call(this, null);
	      }
	    }
	  }, {
	    key: 'emptyJson',
	    value: function emptyJson() {
	      debugger; // eslint-disable-line
	      return '...';
	    }
	  }, {
	    key: 'getPublicInstance',
	    value: function getPublicInstance() {
	      return this._markup.threeObject;
	    }

	    /**
	     * @see ReactMultiChildMixin._updateChildren
	     *
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @param {any} context
	     * @final
	     * @protected
	     */

	  }, {
	    key: '_updateChildren',
	    value: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedMarkups = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedMarkups, transaction, context);

	      if (!nextChildren && !prevChildren) {
	        return;
	      }

	      var remountTrigger = this.remountTrigger;

	      remountTrigger.wantRemount = false;

	      this.threeElementDescriptor.beginChildUpdates(this._threeObject);

	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;

	      if (nextChildren) {
	        var nextChildrenNames = Object.keys(nextChildren);

	        for (var i = 0; i < nextChildrenNames.length; ++i) {
	          var childName = nextChildrenNames[i];

	          if (remountTrigger.wantRemount) {
	            // This component will be remounted, (see extrude geometry)
	            // No need to update children any more as they will also be remounted!
	            continue;
	          }

	          var prevChild = prevChildren && prevChildren[childName];
	          var nextChild = nextChildren[childName];

	          if (prevChild === nextChild) {
	            this.moveChild(prevChild, nextIndex, lastIndex);
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            prevChild._mountIndex = nextIndex;
	          } else {
	            if (prevChild) {
	              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	              lastIndex = Math.max(prevChild._mountIndex, lastIndex);

	              var removedChildMarkup = removedMarkups[childName];

	              // handle removal here to allow replacing of components that are expected to be present
	              // only once in the parent
	              (0, _invariant2.default)(!!removedChildMarkup, 'Removed markup map should contain this child');

	              delete removedMarkups[childName];

	              this._unmountChild(prevChild, removedChildMarkup);
	            }

	            if (!remountTrigger.wantRemount) {
	              // The remount can be triggered by unmountChild as well (see extrude geometry)

	              // The child must be instantiated before it's mounted.
	              this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], null, nextIndex, transaction, context);

	              nextMountIndex++;
	            }
	          }

	          nextIndex++;
	        }
	      }

	      var removedMarkupNames = Object.keys(removedMarkups);

	      for (var _i2 = 0; _i2 < removedMarkupNames.length; ++_i2) {
	        var removedMarkupName = removedMarkupNames[_i2];

	        this._unmountChild(prevChildren[removedMarkupName], removedMarkups[removedMarkupName]);
	      }

	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }

	      this.threeElementDescriptor.completeChildUpdates(this._threeObject);
	    }

	    // afterNode unused

	  }, {
	    key: 'createChild',
	    value: function createChild(child, afterNode, mountImage) {
	      var mountIndex = child._mountIndex;

	      this._markup.childrenMarkup.splice(mountIndex, 0, mountImage);
	      mountImage.parentMarkup = this._markup;

	      this.threeElementDescriptor.addChild(this._threeObject, mountImage.threeObject, mountIndex);

	      var descriptorForChild = this._react3RendererInstance.threeElementDescriptors[mountImage.elementType];

	      descriptorForChild.setParent(mountImage.threeObject, this._threeObject);
	    }

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @param {*} markup The markup for the child.
	     * @protected
	     */

	  }, {
	    key: 'removeChild',
	    value: function removeChild(child, markup) {
	      // eslint-disable-line no-unused-vars
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(!!markup && !!markup.threeObject, 'The child markup to replace has no threeObject');
	      }

	      this.threeElementDescriptor.removeChild(this._threeObject, markup.threeObject);

	      if (child instanceof InternalComponent) {
	        child.threeElementDescriptor.removedFromParent(markup.threeObject);
	      } else if (child instanceof _React3CompositeComponentWrapper2.default) {
	        markup.threeObject.userData.react3internalComponent.threeElementDescriptor.removedFromParent(markup.threeObject);
	      } else if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(false, 'Cannot remove child because it is not a known component type');
	      } else {
	        (0, _invariant2.default)(false);
	      }

	      var childrenMarkup = this._markup.childrenMarkup;

	      for (var i = 0; i < childrenMarkup.length; i++) {
	        var childMarkup = childrenMarkup[i];

	        if (childMarkup.threeObject === markup.threeObject) {
	          childrenMarkup.splice(i, 1);

	          delete childMarkup.parentMarkup;
	          return;
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(false, 'Trying to remove a child that is not mounted');
	      } else {
	        (0, _invariant2.default)(false);
	      }
	    }
	  }]);

	  return InternalComponent;
	}(), _class.displayName = 'React3Component', _temp);


	module.exports = InternalComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(22);
	var traverseAllChildren = __webpack_require__(20);
	var warning = __webpack_require__(9);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(25);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 282 */
/***/ (function(module, exports) {

	"use strict";

	// see ReactDOMComponentFlags

	var React3ComponentFlags = {
	  hasCachedChildMarkups: 1 << 0
	};

	module.exports = React3ComponentFlags;

/***/ }),
/* 283 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = 'data-reactid';

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _ReactElement = __webpack_require__(17);

	var _ReactElement2 = _interopRequireDefault(_ReactElement);

	var _ReactCurrentOwner = __webpack_require__(18);

	var _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _emptyObject = __webpack_require__(12);

	var _emptyObject2 = _interopRequireDefault(_emptyObject);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _ReactCompositeComponent = __webpack_require__(127);

	var _ReactCompositeComponent2 = _interopRequireDefault(_ReactCompositeComponent);

	var _ReactInstanceMap = __webpack_require__(124);

	var _ReactInstanceMap2 = _interopRequireDefault(_ReactInstanceMap);

	var _ReactInstrumentation = __webpack_require__(69);

	var _ReactInstrumentation2 = _interopRequireDefault(_ReactInstrumentation);

	var _removeDevTool = __webpack_require__(285);

	var _removeDevTool2 = _interopRequireDefault(_removeDevTool);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactCompositeComponentMixinImpl = function ReactCompositeComponentMixinImpl() {
	  _classCallCheck(this, ReactCompositeComponentMixinImpl);
	};

	ReactCompositeComponentMixinImpl.prototype = _extends({}, ReactCompositeComponentMixinImpl.prototype, _ReactCompositeComponent2.default);

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    (0, _warning2.default)(element === null || element === false || _ReactElement2.default.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
	  }
	}

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  _ReactInstrumentation2.default.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    _ReactInstrumentation2.default.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	var invokeComponentDidMountWithTimer = void 0;

	if (process.env.NODE_ENV !== 'production') {
	  invokeComponentDidMountWithTimer = function _invokeComponentDidMountWithTimer() {
	    var publicInstance = this._instance;
	    if (this._debugID !== 0) {
	      _ReactInstrumentation2.default.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidMount');
	    }
	    publicInstance.componentDidMount();
	    if (this._debugID !== 0) {
	      _ReactInstrumentation2.default.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidMount');
	    }
	  };
	}

	var StatelessComponent = function () {
	  function StatelessComponent() {
	    _classCallCheck(this, StatelessComponent);
	  }

	  _createClass(StatelessComponent, [{
	    key: 'render',
	    value: function render() {
	      var componentCreator = _ReactInstanceMap2.default.get(this)._currentElement.type;
	      var element = componentCreator(this.props, this.context, this.updater);
	      warnIfInvalidElement(componentCreator, element);
	      return element;
	    }
	  }]);

	  return StatelessComponent;
	}();

	var React3CompositeComponentWrapper = function (_ReactCompositeCompon) {
	  _inherits(React3CompositeComponentWrapper, _ReactCompositeCompon);

	  function React3CompositeComponentWrapper(element, react3RendererInstance) {
	    _classCallCheck(this, React3CompositeComponentWrapper);

	    var _this = _possibleConstructorReturn(this, (React3CompositeComponentWrapper.__proto__ || Object.getPrototypeOf(React3CompositeComponentWrapper)).call(this));

	    _this._react3RendererInstance = react3RendererInstance;

	    _this.construct(element);
	    return _this;
	  }

	  _createClass(React3CompositeComponentWrapper, [{
	    key: 'getHostMarkup',
	    value: function getHostMarkup() {
	      return _get(React3CompositeComponentWrapper.prototype.__proto__ || Object.getPrototypeOf(React3CompositeComponentWrapper.prototype), 'getHostNode', this).call(this);
	    }
	  }, {
	    key: 'construct',
	    value: function construct(element) {
	      _get(React3CompositeComponentWrapper.prototype.__proto__ || Object.getPrototypeOf(React3CompositeComponentWrapper.prototype), 'construct', this).call(this, element);

	      this._threeObject = null;
	    }

	    /**
	     * @see ReactCompositeComponent.
	     *
	     * Cloned because it needs to set _threeObject and remove dev tool
	     *
	     * Call the component's `render` method and update the DOM accordingly.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @param context
	     * @internal
	     */

	  }, {
	    key: '_updateRenderedComponent',
	    value: function _updateRenderedComponent(transaction, context) {
	      var devToolRemoved = void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        devToolRemoved = (0, _removeDevTool2.default)();
	      }

	      _get(React3CompositeComponentWrapper.prototype.__proto__ || Object.getPrototypeOf(React3CompositeComponentWrapper.prototype), '_updateRenderedComponent', this).call(this, transaction, context);

	      if (process.env.NODE_ENV !== 'production') {
	        if (devToolRemoved) {
	          _removeDevTool2.default.restore();
	        }
	      }

	      this._threeObject = this._renderedComponent._threeObject;
	    }
	  }, {
	    key: '_instantiateReactComponent',
	    value: function _instantiateReactComponent(element, shouldHaveDebugID) {
	      return this._react3RendererInstance.instantiateReactComponent(element, shouldHaveDebugID);
	    }

	    // TODO: prevInstance

	  }, {
	    key: '_replaceNodeWithMarkup',
	    value: function _replaceNodeWithMarkup(oldMarkup, nextMarkup) {
	      var parentMarkup = oldMarkup.parentMarkup;

	      var ownerChildrenMarkups = parentMarkup.childrenMarkup;

	      var indexInParent = ownerChildrenMarkups.indexOf(oldMarkup);

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(indexInParent !== -1, 'The node has no parent');
	      } else {
	        (0, _invariant2.default)(indexInParent !== -1);
	      }

	      var parentInternalComponent = parentMarkup.threeObject.userData.react3internalComponent;
	      var originalInternalComponent = oldMarkup.threeObject.userData.react3internalComponent;

	      parentInternalComponent.removeChild(originalInternalComponent, oldMarkup);
	      var nextChild = nextMarkup.threeObject.userData.react3internalComponent;
	      nextChild._mountIndex = indexInParent;
	      parentInternalComponent.createChild(nextChild, null, nextMarkup);
	    }

	    // See ReactCompositeComponent.mountComponent

	    /**
	     * Initializes the component, renders markup, and registers event listeners.
	     *
	     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	     * @param {?object} hostParent
	     * @param {?object} hostContainerInfo
	     * @param {?object} context
	     * @return {?string} Rendered markup to be inserted into the DOM.
	     * @final
	     * @internal
	     */

	  }, {
	    key: 'mountComponent',
	    value: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	      this._context = context;
	      this._mountOrder = this._react3RendererInstance.nextMountID++;
	      this._hostParent = hostParent;
	      this._hostContainerInfo = hostContainerInfo;

	      var publicProps = this._currentElement.props;
	      var publicContext = this._processContext(context);

	      var Component = this._currentElement.type;

	      var updateQueue = transaction.getUpdateQueue();

	      // Initialize the public class
	      var doConstruct = shouldConstruct(Component);

	      var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);

	      var renderedElement = void 0;

	      // Support functional components
	      if (!doConstruct && (!inst || !inst.render)) {
	        renderedElement = inst;
	        warnIfInvalidElement(Component, renderedElement);
	        (0, _invariant2.default)(inst === null || inst === false || _ReactElement2.default.isValidElement(inst), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
	        inst = new StatelessComponent(Component);
	        this._compositeType = CompositeTypes.StatelessFunctional;
	      } else if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        // This will throw later in _renderValidatedComponent, but add an early
	        // warning now to help debugging
	        if (!inst.render) {
	          (0, _warning2.default)(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component');
	        }

	        var propsMutated = inst.props !== publicProps;
	        var componentName = Component.displayName || Component.name || 'Component';

	        (0, _warning2.default)(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName);
	      }

	      // These should be set up in the constructor, but as a convenience for
	      // simpler class abstractions, we set them up after the fact.
	      inst.props = publicProps;
	      inst.context = publicContext;
	      inst.refs = _emptyObject2.default;
	      inst.updater = updateQueue;

	      this._instance = inst;

	      // Store a reference from the instance back to the internal representation
	      _ReactInstanceMap2.default.set(inst, this);

	      if (process.env.NODE_ENV !== 'production') {
	        // Since plain JS classes are defined without any special initialization
	        // logic, we can not catch common errors early. Therefore, we have to
	        // catch them here, at initialization time, instead.
	        (0, _warning2.default)(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component');
	        (0, _warning2.default)(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component');
	        (0, _warning2.default)(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component');
	        (0, _warning2.default)(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component');
	        (0, _warning2.default)(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component');
	        (0, _warning2.default)(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component');
	        (0, _warning2.default)(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component');
	      }
	      var initialState = inst.state;
	      if (initialState === undefined) {
	        initialState = null;
	        inst.state = initialState;
	      }
	      if (!((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState))) {
	        if (process.env.NODE_ENV !== 'production') {
	          (0, _invariant2.default)(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent');
	        } else {
	          (0, _invariant2.default)(false);
	        }
	      }

	      this._pendingStateQueue = null;
	      this._pendingReplaceState = false;
	      this._pendingForceUpdate = false;

	      var markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);

	      if (inst.componentDidMount) {
	        if (process.env.NODE_ENV !== 'production') {
	          transaction.getReactMountReady().enqueue(invokeComponentDidMountWithTimer, this);
	        } else {
	          transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	        }
	      }

	      return markup;
	    }
	  }, {
	    key: '_constructComponent',
	    value: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
	      if (process.env.NODE_ENV !== 'production') {
	        _ReactCurrentOwner2.default.current = this;
	        try {
	          return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	        } finally {
	          _ReactCurrentOwner2.default.current = null;
	        }
	      } else {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      }
	    }
	  }, {
	    key: '_constructComponentWithoutOwner',
	    value: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
	      var Component = this._currentElement.type;

	      if (doConstruct) {
	        if (process.env.NODE_ENV !== 'production') {
	          return measureLifeCyclePerf(function () {
	            return new Component(publicProps, publicContext, updateQueue);
	          }, this._debugID, 'ctor');
	        }
	        return new Component(publicProps, publicContext, updateQueue);
	      }

	      // This can still be an instance in case of factory components
	      // but we'll count this as time spent rendering as the more common case.
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'render');
	      }

	      return Component(publicProps, publicContext, updateQueue);
	    }

	    /**
	     * Needs to be overwritten because emptyObject points to another...
	     *
	     * Lazily allocates the refs object and stores `component` as `ref`.
	     *
	     * @param {string} ref Reference name.
	     * @param {*} component Component to store as `ref`.
	     * @final
	     * @private
	     */

	  }, {
	    key: 'attachRef',
	    value: function attachRef(ref, component) {
	      var inst = this.getPublicInstance();
	      var refs = inst.refs === _emptyObject2.default ? inst.refs = {} : inst.refs;
	      refs[ref] = component.getPublicInstance();
	    }
	  }]);

	  return React3CompositeComponentWrapper;
	}(ReactCompositeComponentMixinImpl);

	module.exports = React3CompositeComponentWrapper;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _ReactInstrumentation = __webpack_require__(69);

	var _ReactInstrumentation2 = _interopRequireDefault(_ReactInstrumentation);

	var _ReactDOMUnknownPropertyHook = __webpack_require__(183);

	var _ReactDOMUnknownPropertyHook2 = _interopRequireDefault(_ReactDOMUnknownPropertyHook);

	var _ReactDOMNullInputValuePropHook = __webpack_require__(184);

	var _ReactDOMNullInputValuePropHook2 = _interopRequireDefault(_ReactDOMNullInputValuePropHook);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var devToolRemoved = false;

	function removeDevTool() {
	  if (!devToolRemoved) {
	    _ReactInstrumentation2.default.debugTool.removeHook(_ReactDOMUnknownPropertyHook2.default);
	    _ReactInstrumentation2.default.debugTool.removeHook(_ReactDOMNullInputValuePropHook2.default);

	    devToolRemoved = true;

	    return true;
	  }

	  return false;
	}

	removeDevTool.restore = function restore() {
	  devToolRemoved = false;

	  _ReactInstrumentation2.default.debugTool.addHook(_ReactDOMUnknownPropertyHook2.default);
	  _ReactInstrumentation2.default.debugTool.addHook(_ReactDOMNullInputValuePropHook2.default);
	};

	module.exports = removeDevTool;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _React3ComponentFlags = __webpack_require__(282);

	var _React3ComponentFlags2 = _interopRequireDefault(_React3ComponentFlags);

	var _idPropertyName = __webpack_require__(283);

	var _idPropertyName2 = _interopRequireDefault(_idPropertyName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var internalInstanceKey = '__react3InternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	// see ReactDOMComponentTree

	function getRenderedHostOrTextFromComponent(component) {
	  var result = component;

	  var rendered = result._renderedComponent;

	  while (rendered) {
	    result = rendered;

	    rendered = result._renderedComponent;
	  }

	  return result;
	}

	/**
	 * Populate `_hostMarkup` on the rendered host/text component with the given
	 * markup. The passed `instance` can be a composite.
	 */
	function precacheMarkup(instance, markup) {
	  (0, _invariant2.default)(!!markup, 'Markup is null!');
	  var hostInstance = getRenderedHostOrTextFromComponent(instance);
	  hostInstance._hostMarkup = markup;
	  markup[internalInstanceKey] = hostInstance;
	}

	function uncacheMarkup(inst) {
	  var markup = inst._hostMarkup;
	  if (markup) {
	    delete markup[internalInstanceKey];
	    inst._hostMarkup = null;
	  }
	}

	/**
	 * Populate `_hostMarkup` on each child of `inst`, assuming that the children
	 * match up with the children of `markup`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a markup sequentially and have to walk from the start to our target
	 * markup every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the markups we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child markups are always cached (until it unmounts).
	 */
	function precacheChildMarkups(instance, markup) {
	  if ((instance._flags & _React3ComponentFlags2.default.hasCachedChildMarkups) !== 0) {
	    return;
	  }

	  var renderedChildren = instance._renderedChildren;

	  var childrenNames = Object.keys(renderedChildren);

	  var childrenMarkup = markup.childrenMarkup;

	  /* eslint-disable no-labels, no-unused-labels, no-restricted-syntax */
	  outer: for (var i = 0; i < childrenNames.length; ++i) {
	    /* eslint-enable no-labels, no-unused-labels, no-restricted-syntax */
	    var childName = childrenNames[i];

	    var childInst = renderedChildren[childName];
	    // TODO implement _domID
	    var childID = getRenderedHostOrTextFromComponent(childInst)._hostID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }

	    for (var j = 0; j < childrenMarkup.length; ++j) {
	      var childMarkup = childrenMarkup[j];

	      if (childMarkup[_idPropertyName2.default] === childID) {
	        precacheMarkup(childInst, childMarkup);

	        continue outer; // eslint-disable-line no-labels
	      }
	    }

	    // We reached the end of the DOM children without finding an ID match.
	    if (process.env.NODE_ENV !== 'production') {
	      (0, _invariant2.default)(false, 'Unable to find element with ID %s.', childID);
	    } else {
	      (0, _invariant2.default)(false);
	    }

	    /* original implementation:
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childMarkup !== null; childMarkup = childMarkup.nextSibling) {
	      if (childMarkup.nodeType === 1 && // Element.ELEMENT_NODE
	        childMarkup.getAttribute(ATTR_NAME) === String(childID) ||
	        childMarkup.nodeType === 8 &&
	        childMarkup.nodeValue === ` react-text: ${childID} ` ||
	        childMarkup.nodeType === 8 &&
	        childMarkup.nodeValue === ` react-empty: ${childID} `) {
	        precacheNode(childInst, childMarkup);
	        continue outer; // eslint-disable-line no-labels
	      }
	    }
	    */
	  }
	  instance._flags |= _React3ComponentFlags2.default.hasCachedChildMarkups;
	}

	// see ReactDOMComponentTree:getClosestInstanceFromNode
	function getClosestInstanceFromMarkup(markup) {
	  if (markup[internalInstanceKey]) {
	    return markup[internalInstanceKey];
	  }

	  var currentMarkup = markup;

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parentMarkupsWithoutInstanceKey = [];
	  while (!currentMarkup[internalInstanceKey]) {
	    parentMarkupsWithoutInstanceKey.push(currentMarkup);
	    if (currentMarkup.parentMarkup) {
	      currentMarkup = currentMarkup.parentMarkup;
	    } else {
	      // Top of the tree. This markup must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  // if we're here, then currentMarkup does have internalInstanceKey, otherwise
	  // we would have reached the top of the tree and returned null.

	  var closest = void 0;
	  var instance = currentMarkup[internalInstanceKey];

	  // traversing from greatest ancestor (e.g. parent of all parents) downwards
	  // e.g. walk down the tree now
	  while (instance) {
	    closest = instance;

	    if (!parentMarkupsWithoutInstanceKey.length) {
	      break;
	    }

	    // this will ensure that all children of the current greatest ancestor
	    // have internalInstanceKey
	    precacheChildMarkups(instance, currentMarkup);

	    currentMarkup = parentMarkupsWithoutInstanceKey.pop();
	    instance = currentMarkup[internalInstanceKey];
	  }

	  /* original impl of ^
	  for (; currentMarkup && (instance = currentMarkup[internalInstanceKey]);
	         currentMarkup = parentMarkupsWithoutInstanceKey.pop()) {
	    closest = instance;
	    if (parentMarkupsWithoutInstanceKey.length) {
	      this.precacheChildMarkups(instance, currentMarkup);
	    }
	  }
	  */

	  return closest;
	}

	// see ReactDOMComponentTree:getInstanceFromNode
	function getInstanceFromMarkup(markup) {
	  var inst = getClosestInstanceFromMarkup(markup);
	  if (inst !== null && inst._hostMarkup === markup) {
	    return inst;
	  }

	  return null;
	}

	/**
	 * Given an InternalComponent, return the corresponding
	 * host markup.
	 */
	function getMarkupFromInstance(inst) {
	  // Without this first invariant, passing a non-React3-component triggers the next
	  // invariant for a missing parent, which is super confusing.

	  if (process.env.NODE_ENV !== 'production') {
	    (0, _invariant2.default)(inst._hostMarkup !== undefined, 'getMarkupFromInstance: Invalid argument.');
	  } else {
	    (0, _invariant2.default)(inst._hostMarkup !== undefined);
	  }

	  if (inst._hostMarkup) {
	    return inst._hostMarkup;
	  }

	  var currentInstance = inst;

	  // Walk up the tree until we find an ancestor whose host node we have cached.
	  var parents = [];
	  while (!currentInstance._hostMarkup) {
	    parents.push(currentInstance);
	    (0, _invariant2.default)(currentInstance._hostParent, 'React3 tree root should always have a node reference.');
	    currentInstance = currentInstance._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached host
	  // markup, and `currentInstance` is the deepest ancestor that does.
	  for (; parents.length; currentInstance = parents.pop()) {
	    precacheChildMarkups(currentInstance, currentInstance._hostMarkup);
	  }

	  return currentInstance._hostMarkup;
	}

	module.exports = {
	  getMarkupFromInstance: getMarkupFromInstance,
	  getInstanceFromMarkup: getInstanceFromMarkup,
	  precacheMarkup: precacheMarkup,
	  uncacheMarkup: uncacheMarkup,
	  precacheChildMarkups: precacheChildMarkups,
	  getClosestInstanceFromMarkup: getClosestInstanceFromMarkup,
	  getRenderedHostOrTextFromComponent: getRenderedHostOrTextFromComponent
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _React3Descriptor = __webpack_require__(288);

	var _React3Descriptor2 = _interopRequireDefault(_React3Descriptor);

	var _ModuleDescriptor = __webpack_require__(299);

	var _ModuleDescriptor2 = _interopRequireDefault(_ModuleDescriptor);

	var _ViewportDescriptor = __webpack_require__(300);

	var _ViewportDescriptor2 = _interopRequireDefault(_ViewportDescriptor);

	var _SceneDescriptor = __webpack_require__(301);

	var _SceneDescriptor2 = _interopRequireDefault(_SceneDescriptor);

	var _Object3DDescriptor = __webpack_require__(302);

	var _Object3DDescriptor2 = _interopRequireDefault(_Object3DDescriptor);

	var _GroupDescriptor = __webpack_require__(303);

	var _GroupDescriptor2 = _interopRequireDefault(_GroupDescriptor);

	var _OrthographicCameraDescriptor = __webpack_require__(304);

	var _OrthographicCameraDescriptor2 = _interopRequireDefault(_OrthographicCameraDescriptor);

	var _PerspectiveCameraDescriptor = __webpack_require__(306);

	var _PerspectiveCameraDescriptor2 = _interopRequireDefault(_PerspectiveCameraDescriptor);

	var _CubeCameraDescriptor = __webpack_require__(307);

	var _CubeCameraDescriptor2 = _interopRequireDefault(_CubeCameraDescriptor);

	var _MeshDescriptor = __webpack_require__(308);

	var _MeshDescriptor2 = _interopRequireDefault(_MeshDescriptor);

	var _LineDescriptor = __webpack_require__(310);

	var _LineDescriptor2 = _interopRequireDefault(_LineDescriptor);

	var _LineSegmentsDescriptor = __webpack_require__(311);

	var _LineSegmentsDescriptor2 = _interopRequireDefault(_LineSegmentsDescriptor);

	var _PointsDescriptor = __webpack_require__(312);

	var _PointsDescriptor2 = _interopRequireDefault(_PointsDescriptor);

	var _SpriteDescriptor = __webpack_require__(313);

	var _SpriteDescriptor2 = _interopRequireDefault(_SpriteDescriptor);

	var _AmbientLightDescriptor = __webpack_require__(314);

	var _AmbientLightDescriptor2 = _interopRequireDefault(_AmbientLightDescriptor);

	var _DirectionalLightDescriptor = __webpack_require__(316);

	var _DirectionalLightDescriptor2 = _interopRequireDefault(_DirectionalLightDescriptor);

	var _SpotLightDescriptor = __webpack_require__(317);

	var _SpotLightDescriptor2 = _interopRequireDefault(_SpotLightDescriptor);

	var _PointLightDescriptor = __webpack_require__(318);

	var _PointLightDescriptor2 = _interopRequireDefault(_PointLightDescriptor);

	var _HemisphereLightDescriptor = __webpack_require__(319);

	var _HemisphereLightDescriptor2 = _interopRequireDefault(_HemisphereLightDescriptor);

	var _ResourcesDescriptor = __webpack_require__(320);

	var _ResourcesDescriptor2 = _interopRequireDefault(_ResourcesDescriptor);

	var _GeometryResourceDescriptor = __webpack_require__(321);

	var _GeometryResourceDescriptor2 = _interopRequireDefault(_GeometryResourceDescriptor);

	var _ShapeGeometryResourceDescriptor = __webpack_require__(323);

	var _ShapeGeometryResourceDescriptor2 = _interopRequireDefault(_ShapeGeometryResourceDescriptor);

	var _TextureResourceDescriptor = __webpack_require__(324);

	var _TextureResourceDescriptor2 = _interopRequireDefault(_TextureResourceDescriptor);

	var _ShapeResourceDescriptor = __webpack_require__(326);

	var _ShapeResourceDescriptor2 = _interopRequireDefault(_ShapeResourceDescriptor);

	var _GeometryDescriptor = __webpack_require__(328);

	var _GeometryDescriptor2 = _interopRequireDefault(_GeometryDescriptor);

	var _BufferGeometryDescriptor = __webpack_require__(331);

	var _BufferGeometryDescriptor2 = _interopRequireDefault(_BufferGeometryDescriptor);

	var _BoxGeometryDescriptor = __webpack_require__(332);

	var _BoxGeometryDescriptor2 = _interopRequireDefault(_BoxGeometryDescriptor);

	var _SphereGeometryDescriptor = __webpack_require__(333);

	var _SphereGeometryDescriptor2 = _interopRequireDefault(_SphereGeometryDescriptor);

	var _ParametricGeometryDescriptor = __webpack_require__(335);

	var _ParametricGeometryDescriptor2 = _interopRequireDefault(_ParametricGeometryDescriptor);

	var _PlaneBufferGeometryDescriptor = __webpack_require__(336);

	var _PlaneBufferGeometryDescriptor2 = _interopRequireDefault(_PlaneBufferGeometryDescriptor);

	var _PlaneGeometryDescriptor = __webpack_require__(337);

	var _PlaneGeometryDescriptor2 = _interopRequireDefault(_PlaneGeometryDescriptor);

	var _PolyhedronGeometryDescriptor = __webpack_require__(338);

	var _PolyhedronGeometryDescriptor2 = _interopRequireDefault(_PolyhedronGeometryDescriptor);

	var _IcosahedronGeometryDescriptor = __webpack_require__(340);

	var _IcosahedronGeometryDescriptor2 = _interopRequireDefault(_IcosahedronGeometryDescriptor);

	var _OctahedronGeometryDescriptor = __webpack_require__(341);

	var _OctahedronGeometryDescriptor2 = _interopRequireDefault(_OctahedronGeometryDescriptor);

	var _TetrahedronGeometryDescriptor = __webpack_require__(342);

	var _TetrahedronGeometryDescriptor2 = _interopRequireDefault(_TetrahedronGeometryDescriptor);

	var _CircleGeometryDescriptor = __webpack_require__(343);

	var _CircleGeometryDescriptor2 = _interopRequireDefault(_CircleGeometryDescriptor);

	var _CircleBufferGeometryDescriptor = __webpack_require__(344);

	var _CircleBufferGeometryDescriptor2 = _interopRequireDefault(_CircleBufferGeometryDescriptor);

	var _RingGeometryDescriptor = __webpack_require__(345);

	var _RingGeometryDescriptor2 = _interopRequireDefault(_RingGeometryDescriptor);

	var _CylinderGeometryDescriptor = __webpack_require__(346);

	var _CylinderGeometryDescriptor2 = _interopRequireDefault(_CylinderGeometryDescriptor);

	var _LatheGeometryDescriptor = __webpack_require__(347);

	var _LatheGeometryDescriptor2 = _interopRequireDefault(_LatheGeometryDescriptor);

	var _TorusGeometryDescriptor = __webpack_require__(348);

	var _TorusGeometryDescriptor2 = _interopRequireDefault(_TorusGeometryDescriptor);

	var _TorusKnotGeometryDescriptor = __webpack_require__(349);

	var _TorusKnotGeometryDescriptor2 = _interopRequireDefault(_TorusKnotGeometryDescriptor);

	var _ExtrudeGeometryDescriptor = __webpack_require__(350);

	var _ExtrudeGeometryDescriptor2 = _interopRequireDefault(_ExtrudeGeometryDescriptor);

	var _TubeGeometryDescriptor = __webpack_require__(352);

	var _TubeGeometryDescriptor2 = _interopRequireDefault(_TubeGeometryDescriptor);

	var _DodecahedronGeometryDescriptor = __webpack_require__(353);

	var _DodecahedronGeometryDescriptor2 = _interopRequireDefault(_DodecahedronGeometryDescriptor);

	var _TextGeometryDescriptor = __webpack_require__(354);

	var _TextGeometryDescriptor2 = _interopRequireDefault(_TextGeometryDescriptor);

	var _ShapeGeometryDescriptor = __webpack_require__(355);

	var _ShapeGeometryDescriptor2 = _interopRequireDefault(_ShapeGeometryDescriptor);

	var _EdgesGeometryDescriptor = __webpack_require__(356);

	var _EdgesGeometryDescriptor2 = _interopRequireDefault(_EdgesGeometryDescriptor);

	var _ShapeDescriptor = __webpack_require__(357);

	var _ShapeDescriptor2 = _interopRequireDefault(_ShapeDescriptor);

	var _MoveToDescriptor = __webpack_require__(360);

	var _MoveToDescriptor2 = _interopRequireDefault(_MoveToDescriptor);

	var _LineToDescriptor = __webpack_require__(364);

	var _LineToDescriptor2 = _interopRequireDefault(_LineToDescriptor);

	var _BezierCurveToDescriptor = __webpack_require__(366);

	var _BezierCurveToDescriptor2 = _interopRequireDefault(_BezierCurveToDescriptor);

	var _QuadraticCurveToDescriptor = __webpack_require__(368);

	var _QuadraticCurveToDescriptor2 = _interopRequireDefault(_QuadraticCurveToDescriptor);

	var _AbsArcDescriptor = __webpack_require__(370);

	var _AbsArcDescriptor2 = _interopRequireDefault(_AbsArcDescriptor);

	var _AbsEllipseDescriptor = __webpack_require__(372);

	var _AbsEllipseDescriptor2 = _interopRequireDefault(_AbsEllipseDescriptor);

	var _HoleDescriptor = __webpack_require__(374);

	var _HoleDescriptor2 = _interopRequireDefault(_HoleDescriptor);

	var _SplineThruDescriptor = __webpack_require__(375);

	var _SplineThruDescriptor2 = _interopRequireDefault(_SplineThruDescriptor);

	var _PointsMaterialDescriptor = __webpack_require__(377);

	var _PointsMaterialDescriptor2 = _interopRequireDefault(_PointsMaterialDescriptor);

	var _MeshBasicMaterialDescriptor = __webpack_require__(379);

	var _MeshBasicMaterialDescriptor2 = _interopRequireDefault(_MeshBasicMaterialDescriptor);

	var _MeshPhongMaterialDescriptor = __webpack_require__(380);

	var _MeshPhongMaterialDescriptor2 = _interopRequireDefault(_MeshPhongMaterialDescriptor);

	var _MeshLambertMaterialDescriptor = __webpack_require__(381);

	var _MeshLambertMaterialDescriptor2 = _interopRequireDefault(_MeshLambertMaterialDescriptor);

	var _MeshStandardMaterialDescriptor = __webpack_require__(382);

	var _MeshStandardMaterialDescriptor2 = _interopRequireDefault(_MeshStandardMaterialDescriptor);

	var _ShaderMaterialDescriptor = __webpack_require__(383);

	var _ShaderMaterialDescriptor2 = _interopRequireDefault(_ShaderMaterialDescriptor);

	var _RawShaderMaterialDescriptor = __webpack_require__(385);

	var _RawShaderMaterialDescriptor2 = _interopRequireDefault(_RawShaderMaterialDescriptor);

	var _TextureDescriptor = __webpack_require__(386);

	var _TextureDescriptor2 = _interopRequireDefault(_TextureDescriptor);

	var _MaterialResourceDescriptor = __webpack_require__(387);

	var _MaterialResourceDescriptor2 = _interopRequireDefault(_MaterialResourceDescriptor);

	var _UniformsDescriptor = __webpack_require__(388);

	var _UniformsDescriptor2 = _interopRequireDefault(_UniformsDescriptor);

	var _UniformDescriptor = __webpack_require__(389);

	var _UniformDescriptor2 = _interopRequireDefault(_UniformDescriptor);

	var _LineBasicMaterialDescriptor = __webpack_require__(390);

	var _LineBasicMaterialDescriptor2 = _interopRequireDefault(_LineBasicMaterialDescriptor);

	var _LineDashedMaterialDescriptor = __webpack_require__(391);

	var _LineDashedMaterialDescriptor2 = _interopRequireDefault(_LineDashedMaterialDescriptor);

	var _MeshDepthMaterialDescriptor = __webpack_require__(392);

	var _MeshDepthMaterialDescriptor2 = _interopRequireDefault(_MeshDepthMaterialDescriptor);

	var _MeshNormalMaterialDescriptor = __webpack_require__(393);

	var _MeshNormalMaterialDescriptor2 = _interopRequireDefault(_MeshNormalMaterialDescriptor);

	var _SpriteMaterialDescriptor = __webpack_require__(394);

	var _SpriteMaterialDescriptor2 = _interopRequireDefault(_SpriteMaterialDescriptor);

	var _CameraHelperDescriptor = __webpack_require__(395);

	var _CameraHelperDescriptor2 = _interopRequireDefault(_CameraHelperDescriptor);

	var _AxisHelperDescriptor = __webpack_require__(396);

	var _AxisHelperDescriptor2 = _interopRequireDefault(_AxisHelperDescriptor);

	var _ArrowHelperDescriptor = __webpack_require__(397);

	var _ArrowHelperDescriptor2 = _interopRequireDefault(_ArrowHelperDescriptor);

	var _GridHelperDescriptor = __webpack_require__(398);

	var _GridHelperDescriptor2 = _interopRequireDefault(_GridHelperDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ElementDescriptorContainer = function ElementDescriptorContainer(react3RendererInstance) {
	      _classCallCheck(this, ElementDescriptorContainer);

	      this.react3RendererInstance = react3RendererInstance;

	      /**
	       * @type {Object.<string, THREEElementDescriptor>}
	       */
	      this.descriptors = {
	            react3: new _React3Descriptor2.default(react3RendererInstance),

	            module: new _ModuleDescriptor2.default(react3RendererInstance),

	            viewport: new _ViewportDescriptor2.default(react3RendererInstance),
	            scene: new _SceneDescriptor2.default(react3RendererInstance),

	            object3D: new _Object3DDescriptor2.default(react3RendererInstance),
	            group: new _GroupDescriptor2.default(react3RendererInstance),

	            orthographicCamera: new _OrthographicCameraDescriptor2.default(react3RendererInstance),
	            perspectiveCamera: new _PerspectiveCameraDescriptor2.default(react3RendererInstance),
	            cubeCamera: new _CubeCameraDescriptor2.default(react3RendererInstance),

	            mesh: new _MeshDescriptor2.default(react3RendererInstance),
	            line: new _LineDescriptor2.default(react3RendererInstance),
	            lineSegments: new _LineSegmentsDescriptor2.default(react3RendererInstance),
	            points: new _PointsDescriptor2.default(react3RendererInstance),
	            sprite: new _SpriteDescriptor2.default(react3RendererInstance),

	            meshBasicMaterial: new _MeshBasicMaterialDescriptor2.default(react3RendererInstance),
	            meshPhongMaterial: new _MeshPhongMaterialDescriptor2.default(react3RendererInstance),
	            meshLambertMaterial: new _MeshLambertMaterialDescriptor2.default(react3RendererInstance),
	            meshStandardMaterial: new _MeshStandardMaterialDescriptor2.default(react3RendererInstance),
	            pointsMaterial: new _PointsMaterialDescriptor2.default(react3RendererInstance),
	            shaderMaterial: new _ShaderMaterialDescriptor2.default(react3RendererInstance),
	            rawShaderMaterial: new _RawShaderMaterialDescriptor2.default(react3RendererInstance),
	            lineBasicMaterial: new _LineBasicMaterialDescriptor2.default(react3RendererInstance),
	            lineDashedMaterial: new _LineDashedMaterialDescriptor2.default(react3RendererInstance),
	            meshDepthMaterial: new _MeshDepthMaterialDescriptor2.default(react3RendererInstance),
	            meshNormalMaterial: new _MeshNormalMaterialDescriptor2.default(react3RendererInstance),
	            spriteMaterial: new _SpriteMaterialDescriptor2.default(react3RendererInstance),

	            texture: new _TextureDescriptor2.default(react3RendererInstance),

	            geometry: new _GeometryDescriptor2.default(react3RendererInstance),
	            bufferGeometry: new _BufferGeometryDescriptor2.default(react3RendererInstance),
	            boxGeometry: new _BoxGeometryDescriptor2.default(react3RendererInstance),
	            sphereGeometry: new _SphereGeometryDescriptor2.default(react3RendererInstance),
	            parametricGeometry: new _ParametricGeometryDescriptor2.default(react3RendererInstance),
	            planeBufferGeometry: new _PlaneBufferGeometryDescriptor2.default(react3RendererInstance),
	            planeGeometry: new _PlaneGeometryDescriptor2.default(react3RendererInstance),
	            polyhedronGeometry: new _PolyhedronGeometryDescriptor2.default(react3RendererInstance),
	            icosahedronGeometry: new _IcosahedronGeometryDescriptor2.default(react3RendererInstance),
	            octahedronGeometry: new _OctahedronGeometryDescriptor2.default(react3RendererInstance),
	            tetrahedronGeometry: new _TetrahedronGeometryDescriptor2.default(react3RendererInstance),
	            circleGeometry: new _CircleGeometryDescriptor2.default(react3RendererInstance),
	            circleBufferGeometry: new _CircleBufferGeometryDescriptor2.default(react3RendererInstance),
	            ringGeometry: new _RingGeometryDescriptor2.default(react3RendererInstance),
	            cylinderGeometry: new _CylinderGeometryDescriptor2.default(react3RendererInstance),
	            latheGeometry: new _LatheGeometryDescriptor2.default(react3RendererInstance),
	            torusGeometry: new _TorusGeometryDescriptor2.default(react3RendererInstance),
	            torusKnotGeometry: new _TorusKnotGeometryDescriptor2.default(react3RendererInstance),
	            extrudeGeometry: new _ExtrudeGeometryDescriptor2.default(react3RendererInstance),
	            tubeGeometry: new _TubeGeometryDescriptor2.default(react3RendererInstance),
	            dodecahedronGeometry: new _DodecahedronGeometryDescriptor2.default(react3RendererInstance),
	            textGeometry: new _TextGeometryDescriptor2.default(react3RendererInstance),
	            shapeGeometry: new _ShapeGeometryDescriptor2.default(react3RendererInstance),
	            edgesGeometry: new _EdgesGeometryDescriptor2.default(react3RendererInstance),

	            shape: new _ShapeDescriptor2.default(react3RendererInstance),
	            moveTo: new _MoveToDescriptor2.default(react3RendererInstance),
	            lineTo: new _LineToDescriptor2.default(react3RendererInstance),
	            bezierCurveTo: new _BezierCurveToDescriptor2.default(react3RendererInstance),
	            quadraticCurveTo: new _QuadraticCurveToDescriptor2.default(react3RendererInstance),
	            absArc: new _AbsArcDescriptor2.default(react3RendererInstance),
	            absEllipse: new _AbsEllipseDescriptor2.default(react3RendererInstance),
	            hole: new _HoleDescriptor2.default(react3RendererInstance),
	            splineThru: new _SplineThruDescriptor2.default(react3RendererInstance),

	            ambientLight: new _AmbientLightDescriptor2.default(react3RendererInstance),
	            directionalLight: new _DirectionalLightDescriptor2.default(react3RendererInstance),
	            spotLight: new _SpotLightDescriptor2.default(react3RendererInstance),
	            pointLight: new _PointLightDescriptor2.default(react3RendererInstance),
	            hemisphereLight: new _HemisphereLightDescriptor2.default(react3RendererInstance),

	            resources: new _ResourcesDescriptor2.default(react3RendererInstance),
	            materialResource: new _MaterialResourceDescriptor2.default(react3RendererInstance),
	            geometryResource: new _GeometryResourceDescriptor2.default(react3RendererInstance),
	            shapeGeometryResource: new _ShapeGeometryResourceDescriptor2.default(react3RendererInstance),
	            textureResource: new _TextureResourceDescriptor2.default(react3RendererInstance),
	            shapeResource: new _ShapeResourceDescriptor2.default(react3RendererInstance),

	            uniforms: new _UniformsDescriptor2.default(react3RendererInstance),
	            uniform: new _UniformDescriptor2.default(react3RendererInstance),

	            cameraHelper: new _CameraHelperDescriptor2.default(react3RendererInstance),
	            axisHelper: new _AxisHelperDescriptor2.default(react3RendererInstance),
	            arrowHelper: new _ArrowHelperDescriptor2.default(react3RendererInstance),
	            gridHelper: new _GridHelperDescriptor2.default(react3RendererInstance)
	      };
	};

	module.exports = ElementDescriptorContainer;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _React3Instance = __webpack_require__(291);

	var _React3Instance2 = _interopRequireDefault(_React3Instance);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propProxy = {
	  gammaInput: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  gammaOutput: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  sortObjects: {
	    type: _propTypes2.default.bool,
	    default: true
	  },
	  context: {
	    type: _propTypes2.default.oneOf(['2d', '3d']).isRequired,
	    default: '3d'
	  },
	  mainCamera: {
	    type: _propTypes2.default.string,
	    default: undefined
	  },
	  onAnimate: {
	    type: _propTypes2.default.func,
	    default: undefined
	  },
	  clearColor: {
	    type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	    default: 0x000000
	  },
	  clearAlpha: {
	    type: _propTypes2.default.number,
	    default: undefined
	  },
	  alpha: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  shadowMapEnabled: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  shadowMapType: {
	    type: _propTypes2.default.oneOf([THREE.BasicShadowMap, THREE.PCFShadowMap, THREE.PCFSoftShadowMap]),
	    default: THREE.PCFShadowMap
	  },
	  shadowMapCullFace: {
	    type: _propTypes2.default.oneOf([THREE.CullFaceNone, THREE.CullFaceBack, THREE.CullFaceFront, THREE.CullFaceFrontBack]),
	    default: THREE.CullFaceFront
	  },
	  shadowMapDebug: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  onRecreateCanvas: {
	    type: _propTypes2.default.func.isRequired,
	    default: undefined
	  },
	  pixelRatio: {
	    type: _propTypes2.default.number,
	    default: 1
	  },
	  width: {
	    type: _propTypes2.default.number.isRequired,
	    default: 1
	  },
	  height: {
	    type: _propTypes2.default.number.isRequired,
	    default: 1
	  },
	  precision: {
	    type: _propTypes2.default.oneOf(['highp', 'mediump', 'lowp']),
	    default: 'highp'
	  },
	  premultipliedAlpha: {
	    type: _propTypes2.default.bool,
	    default: true
	  },
	  antialias: {
	    type: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
	    default: false
	  },
	  stencil: {
	    type: _propTypes2.default.bool,
	    default: true
	  },
	  preserveDrawingBuffer: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  depth: {
	    type: _propTypes2.default.bool,
	    default: true
	  },
	  logarithmicDepthBuffer: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  onRendererUpdated: {
	    type: _propTypes2.default.func,
	    default: undefined
	  },
	  forceManualRender: {
	    type: _propTypes2.default.bool,
	    default: false
	  },
	  onManualRenderTriggerCreated: {
	    type: _propTypes2.default.func,
	    default: undefined
	  },
	  customRenderer: {
	    type: _propTypes2.default.func,
	    default: undefined
	  }
	};

	var React3Descriptor = function (_THREEElementDescript) {
	  _inherits(React3Descriptor, _THREEElementDescript);

	  function React3Descriptor(react3RendererInstance) {
	    _classCallCheck(this, React3Descriptor);

	    var _this = _possibleConstructorReturn(this, (React3Descriptor.__proto__ || Object.getPrototypeOf(React3Descriptor)).call(this, react3RendererInstance));

	    Object.keys(propProxy).forEach(function (propName) {
	      var info = propProxy[propName];
	      var propNameFirstLetterCapital = propName[0].toUpperCase() + propName.substr(1);

	      var updateFunctionName = 'update' + propNameFirstLetterCapital;

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _warning2.default)(_React3Instance2.default.prototype.hasOwnProperty(updateFunctionName), 'Missing function %s in React3DInstance class.', updateFunctionName);
	      }

	      var propInfo = {
	        type: info.type,
	        update: function update(threeObject, newValue) {
	          threeObject[updateFunctionName](newValue);
	        }
	      };

	      if (info.hasOwnProperty('default')) {
	        propInfo.default = info.default;
	      }

	      _this.hasProp(propName, propInfo);
	    });
	    return _this;
	  }

	  _createClass(React3Descriptor, [{
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!threeObject._warnedAboutManualRendering) {
	          if (threeObject._forceManualRender && !threeObject._manualRenderTriggerCallback) {
	            threeObject._warnedAboutManualRendering = true;
	            (0, _warning2.default)(false, 'The `React3` component has `forceManualRender` property set, but not' + ' `onManualRenderTriggerCreated`. You will not be able to update the view.');
	          }
	        }
	      }
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof HTMLCanvasElement, 'The `react3` element can only be rendered into a canvas.');

	      _get(React3Descriptor.prototype.__proto__ || Object.getPrototypeOf(React3Descriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);

	      threeObject.updateCanvas(parentObject3D);
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      return new _React3Instance2.default(props, this.react3RendererInstance);
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(React3Descriptor.prototype.__proto__ || Object.getPrototypeOf(React3Descriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.initialize();
	    }

	    // gets called every time there are children to be added
	    // this can be called multiple times as more children are added.

	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      threeObject.addChildren(children);
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      threeObject.addChildren([child]);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      // do nothing
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject, child) {
	      threeObject.removeChild(child);
	    }
	  }, {
	    key: '_updateOnRecreateCanvas',
	    value: function _updateOnRecreateCanvas(threeObject, callback) {
	      threeObject.updateOnRecreateCanvas(callback);
	    }
	  }, {
	    key: '_updateHeight',
	    value: function _updateHeight(threeObject, newHeight) {
	      threeObject.updateHeight(newHeight);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      // call super unmount first so react3instance can clean itself up
	      _get(React3Descriptor.prototype.__proto__ || Object.getPrototypeOf(React3Descriptor.prototype), 'unmount', this).call(this, threeObject);

	      threeObject.unmount();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount(threeObject) {
	      threeObject.willUnmount();

	      return _get(React3Descriptor.prototype.__proto__ || Object.getPrototypeOf(React3Descriptor.prototype), 'componentWillUnmount', this).call(this, threeObject);
	    }
	  }]);

	  return React3Descriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = React3Descriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _events = __webpack_require__(290);

	var _events2 = _interopRequireDefault(_events);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _checkReactTypeSpec = __webpack_require__(26);

	var _checkReactTypeSpec2 = _interopRequireDefault(_checkReactTypeSpec);

	var _React3Instance = __webpack_require__(291);

	var _React3Instance2 = _interopRequireDefault(_React3Instance);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EventEmitter = _events2.default.EventEmitter;

	/**
	 * @abstract
	 */

	var THREEElementDescriptor = function () {
	  function THREEElementDescriptor(react3RendererInstance) {
	    _classCallCheck(this, THREEElementDescriptor);

	    this.react3RendererInstance = react3RendererInstance;
	    this.propUpdates = {};
	    this.propDeletes = {};
	    this.propDefaults = {};
	    this._initialOnly = {};
	    this._updateInitial = [];
	    this._simpleProperties = [];

	    this.propTypes = {};

	    this._hasName = false;
	  }

	  _createClass(THREEElementDescriptor, [{
	    key: 'hasEvent',
	    value: function hasEvent(name) {
	      this._hasEvents = true;

	      this.hasProp(name, {
	        type: _propTypes2.default.func,
	        updateInitial: true,
	        update: function update(threeObject, callback) {
	          threeObject.userData._eventCallbacks[name] = callback;
	        },

	        default: null
	      });
	    }
	  }, {
	    key: 'removeProp',
	    value: function removeProp(name) {
	      (0, _invariant2.default)(this.propTypes.hasOwnProperty(name), 'The property %s has not been defined', name);

	      var simpleIndex = this._simpleProperties.indexOf(name);
	      if (simpleIndex !== -1) {
	        this._simpleProperties.splice(simpleIndex, 1);
	      }

	      delete this.propTypes[name];
	      delete this.propDeletes[name];
	      delete this.propUpdates[name];
	      delete this.propDefaults[name];

	      var updateInitialIndex = this._updateInitial.indexOf(name);
	      if (updateInitialIndex !== -1) {
	        this._updateInitial.splice(updateInitialIndex, 1);
	      }

	      delete this._initialOnly[name];
	    }
	  }, {
	    key: 'hasProp',
	    value: function hasProp(name, info) {
	      var _this = this;

	      (0, _invariant2.default)(info.hasOwnProperty('type'), 'The information should include a `type` property');
	      (0, _invariant2.default)(!this.propTypes.hasOwnProperty(name) || info.override, 'The property %s has already been defined', name);

	      if (info.override) {
	        // clean up simple prop
	        var simpleIndex = this._simpleProperties.indexOf(name);
	        if (simpleIndex !== -1) {
	          this._simpleProperties.splice(simpleIndex, 1);
	        }
	      }

	      this.propTypes[name] = info.type;

	      if (info.hasOwnProperty('simple')) {
	        this.registerSimpleProperties([name]);

	        if (info.hasOwnProperty('default')) {
	          this.propDeletes[name] = function (threeObject) {
	            _this.propUpdates[name](threeObject, info.default, true);
	          };

	          this.propDefaults[name] = info.default;
	        }
	      } else {
	        if (info.hasOwnProperty('update')) {
	          this.propUpdates[name] = info.update;
	        }

	        if (info.hasOwnProperty('default')) {
	          (0, _invariant2.default)(info.hasOwnProperty('update'), 'The information should include a `update` property ' + 'if it has a `default` property');

	          this.propDeletes[name] = function (threeObject) {
	            info.update(threeObject, info.default, true);
	          };

	          this.propDefaults[name] = info.default;
	        } else {
	          (0, _invariant2.default)(info.update === this.triggerRemount, 'The type information for ' + this.constructor.name + '.' + name + ' ' + 'should include a `default` property if it\'s not going to trigger remount');
	        }

	        if (info.hasOwnProperty('remove')) {
	          (0, _invariant2.default)(false, 'Bad \'remove\' info for ' + this.constructor.name + '.' + name);
	        }

	        if (info.hasOwnProperty('updateInitial')) {
	          (0, _invariant2.default)(info.hasOwnProperty('update'), 'The information should include a ' + '`update` property if it has a`updateInitial` property');

	          if (process.env.NODE_ENV !== 'production') {
	            (0, _invariant2.default)(info.hasOwnProperty('default') || this.propUpdates[name].length === 3 || this.propUpdates[name] === this.triggerRemount, 'Prop info for ' + this.constructor.name + '.' + name + ' has \'updateInitial\', ' + 'but no \'default\', and ' + ('the update function accepts ' + this.propUpdates[name].length) + ' parameters instead of 3.');
	          }

	          if (this._updateInitial.indexOf(name) === -1) {
	            this._updateInitial.push(name);
	          }
	        }

	        if (info.initialOnly) {
	          (0, _invariant2.default)(info.hasOwnProperty('updateInitial'), 'The information should include a ' + '`updateInitial` property if it has an `initialOnly` property');
	        }

	        this._initialOnly[name] = info.initialOnly;
	      }
	    }
	  }, {
	    key: 'hasName',
	    value: function hasName() {
	      var _this2 = this;

	      this._hasName = true;

	      this.hasProp('name', {
	        type: _propTypes2.default.string,
	        update: function update(threeObject, name) {
	          _this2._updateName(threeObject, name);
	        },
	        default: ''
	      });
	    }
	  }, {
	    key: '_updateName',
	    value: function _updateName(threeObject, nextName) {
	      var oldName = threeObject.name;

	      threeObject.name = nextName;

	      threeObject.userData.events.emit('rename', {
	        oldName: oldName,
	        nextName: nextName
	      });

	      var markup = threeObject.userData.markup;

	      if (markup._rootInstance) {
	        markup._rootInstance.objectRenamed(threeObject, oldName, nextName);
	      }
	    }
	  }, {
	    key: 'placeRemountTrigger',
	    value: function placeRemountTrigger(threeObject, triggerRemount) {
	      threeObject.userData._triggerRemount = triggerRemount;
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      var _this3 = this;

	      // do nothing for now

	      var eventsForObject = new EventEmitter();

	      if (this._hasName && props.name) {
	        threeObject.name = props.name;
	      }

	      if (this._hasEvents) {
	        threeObject.userData._eventCallbacks = {};
	      }

	      // pass down resources

	      eventsForObject.on('resource.added', function (data) {
	        var childrenMarkup = threeObject.userData.markup.childrenMarkup;

	        var increasedDistance = _extends({}, data, {
	          distance: data.distance + 1
	        });

	        childrenMarkup.forEach(function (childMarkup) {
	          return childMarkup.threeObject.userData.events.emit('resource.added', increasedDistance);
	        });
	      });

	      eventsForObject.on('resource.removed', function (data) {
	        var childrenMarkup = threeObject.userData.markup.childrenMarkup;

	        var increasedDistance = _extends({}, data, {
	          distance: data.distance + 1
	        });

	        childrenMarkup.forEach(function (childMarkup) {
	          return childMarkup.threeObject.userData.events.emit('resource.removed', increasedDistance);
	        });
	      });

	      threeObject.userData.events = eventsForObject;
	      threeObject.userData._descriptor = this;

	      this._updateInitial.forEach(function (propertyName) {
	        if (props.hasOwnProperty(propertyName)) {
	          _this3.propUpdates[propertyName](threeObject, props[propertyName], true);
	        } else {
	          var originalValue = void 0;

	          if (_this3.propDefaults.hasOwnProperty(propertyName)) {
	            originalValue = _this3.propDefaults[propertyName];
	          }

	          _this3.propUpdates[propertyName](threeObject, originalValue, false);
	        }
	      });

	      this._simpleProperties.forEach(function (propertyName) {
	        if (props.hasOwnProperty(propertyName)) {
	          threeObject[propertyName] = props[propertyName];
	        }
	      });
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      // eslint-disable-line no-unused-vars
	      (0, _invariant2.default)(false, 'Missing constructor!');
	    }

	    // noinspection JSUnusedLocalSymbols

	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      // eslint-disable-line no-unused-vars
	      (0, _invariant2.default)(false, 'Cannot add children to ' + this.constructor.name + '!');
	    }

	    // noinspection JSUnusedLocalSymbols

	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child, mountIndex) {
	      // eslint-disable-line no-unused-vars
	      (0, _invariant2.default)(false, 'Cannot add child to ' + this.constructor.name + '!');
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      (0, _invariant2.default)(false, 'Cannot move children in ' + this.constructor.name + '!');
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject, child) {
	      // eslint-disable-line no-unused-vars
	      (0, _invariant2.default)(false, 'Cannot remove children in ' + this.constructor.name + '!');
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      var parentMarkup = parentObject3D.userData.markup;

	      if (parentMarkup && parentMarkup._rootInstance) {
	        parentMarkup._rootInstance.objectMounted(threeObject);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount(threeObject) {// eslint-disable-line no-unused-vars

	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      var markup = threeObject.userData.markup;

	      if (markup._rootInstance) {
	        markup._rootInstance.objectRemoved(threeObject);
	      }

	      if (this._hasEvents) {
	        delete threeObject.userData._eventCallbacks;
	      }

	      threeObject.userData.events.emit('dispose', {
	        object: threeObject
	      });

	      threeObject.userData.events.removeAllListeners();
	    }
	  }, {
	    key: 'removedFromParent',
	    value: function removedFromParent(threeObject) {
	      delete threeObject.userData.events;
	    }

	    // noinspection JSUnusedLocalSymbols

	  }, {
	    key: 'deleteProperty',
	    value: function deleteProperty(threeObject, propKey) {
	      // eslint-disable-line no-unused-vars
	      if (this.propDeletes[propKey]) {
	        this.propDeletes[propKey](threeObject);
	      } else if (process.env.NODE_ENV !== 'production') {
	        (0, _warning2.default)(false, 'Cannot delete property %s from ' + this.constructor.name, propKey);
	      }
	    }
	  }, {
	    key: 'updateProperty',
	    value: function updateProperty(threeObject, propKey, nextProp) {
	      if (!this._initialOnly[propKey]) {
	        if (this.propUpdates[propKey]) {
	          this.propUpdates[propKey](threeObject, nextProp, true);
	        } else {
	          (0, _warning2.default)(false, 'updating prop ' + propKey + ' ( ' + nextProp + ' ) for ' + this.constructor.name);
	          this.triggerRemount(threeObject);
	        }
	      } else {
	        this.triggerRemount(threeObject);
	      }
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {// eslint-disable-line no-unused-vars
	      // no highlighting by default!
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {} // eslint-disable-line no-unused-vars
	    // no highlighting by default!


	    /**
	     * @protected
	     * @param names
	     */

	  }, {
	    key: 'useSimpleUpdates',
	    value: function useSimpleUpdates(names) {
	      for (var index = 0; index < names.length; ++index) {
	        var propName = names[index];
	        this.propUpdates[propName] = this._updateSimple.bind(this, propName);
	      }
	    }
	  }, {
	    key: '_updateSimple',
	    value: function _updateSimple(propName, threeObject, propValue) {
	      threeObject[propName] = propValue;
	    }
	  }, {
	    key: 'registerSimpleProperties',
	    value: function registerSimpleProperties(propertyNames) {
	      var _this4 = this;

	      propertyNames.forEach(function (propName) {
	        if (_this4._simpleProperties.indexOf(propName) === -1) {
	          _this4._simpleProperties.push(propName);
	        }
	      });

	      this.useSimpleUpdates(propertyNames);
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      // eslint-disable-line no-unused-vars
	      return [];
	    }
	  }, {
	    key: 'triggerRemount',
	    value: function triggerRemount(threeObject) {
	      if (threeObject.userData._triggerRemount) {
	        threeObject.userData._triggerRemount();

	        delete threeObject.userData._triggerRemount;
	      }
	    }
	  }, {
	    key: 'beginPropertyUpdates',
	    value: function beginPropertyUpdates(threeObject) {// eslint-disable-line no-unused-vars
	    }
	  }, {
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {// eslint-disable-line no-unused-vars
	    }
	  }, {
	    key: 'beginChildUpdates',
	    value: function beginChildUpdates(threeObject) {// eslint-disable-line no-unused-vars
	    }
	  }, {
	    key: 'completeChildUpdates',
	    value: function completeChildUpdates(threeObject) {// eslint-disable-line no-unused-vars
	    }
	  }]);

	  return THREEElementDescriptor;
	}();

	if (process.env.NODE_ENV !== 'production') {
	  // @see ReactElementValidator

	  var loggedTypeFailures = {};

	  var getDeclarationErrorAddendum = function getDeclarationErrorAddendum(owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * Assert that the props are valid
	   * @private
	   */
	  var _checkPropTypes = function _checkPropTypes(componentName, propTypes, props, location, owner, element, debugID) {
	    var propNames = Object.keys(props);
	    for (var i = 0; i < propNames.length; ++i) {
	      var propName = propNames[i];

	      if (propName === 'children') {
	        continue;
	      }

	      if (!propTypes.hasOwnProperty(propName)) {
	        var errorMessage = 'Foreign prop ' + propName + ' found in ' + componentName + '.';

	        if (!(errorMessage in loggedTypeFailures)) {
	          var addendum = getDeclarationErrorAddendum(owner);

	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[errorMessage] = true;

	          (0, _warning2.default)(false, '' + errorMessage + addendum);
	        }
	      }
	    }

	    (0, _checkReactTypeSpec2.default)(propTypes, props, location, componentName, element, debugID);
	  };

	  THREEElementDescriptor.prototype.checkPropTypes = function checkPropTypes(element, owner, debugID, props) {
	    _checkPropTypes(element.type, this.propTypes, props, 'prop', owner, element, debugID);
	  };
	}

	module.exports = THREEElementDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 290 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp, _initialiseProps;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _ReactUpdates = __webpack_require__(63);

	var _ReactUpdates2 = _interopRequireDefault(_ReactUpdates);

	var _raf = __webpack_require__(259);

	var _raf2 = _interopRequireDefault(_raf);

	var _Viewport = __webpack_require__(292);

	var _Viewport2 = _interopRequireDefault(_Viewport);

	var _Module = __webpack_require__(293);

	var _Module2 = _interopRequireDefault(_Module);

	var _React3Renderer = __webpack_require__(277);

	var _React3Renderer2 = _interopRequireDefault(_React3Renderer);

	var _ResourceContainer = __webpack_require__(294);

	var _ResourceContainer2 = _interopRequireDefault(_ResourceContainer);

	var _CameraUtils = __webpack_require__(295);

	var _CameraUtils2 = _interopRequireDefault(_CameraUtils);

	var _isWebglSupported = __webpack_require__(296);

	var _isWebglSupported2 = _interopRequireDefault(_isWebglSupported);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var rendererProperties = ['gammaInput', 'gammaOutput'];

	var React3DInstance = (_temp = _class = function () {
	  function React3DInstance(props, rendererInstance) {
	    var _this = this;

	    _classCallCheck(this, React3DInstance);

	    _initialiseProps.call(this);

	    var mainCamera = props.mainCamera,
	        onAnimate = props.onAnimate,
	        onRecreateCanvas = props.onRecreateCanvas,
	        onRendererUpdated = props.onRendererUpdated,
	        onManualRenderTriggerCreated = props.onManualRenderTriggerCreated,
	        forceManualRender = props.forceManualRender;


	    this._parameters = _extends({}, props);

	    this._rendererInstance = rendererInstance;

	    this._mounted = false;
	    this._willUnmount = false;
	    this._scene = null;

	    this._mainCameraName = mainCamera;
	    this._viewports = [];
	    /**
	     * @type {Array.<React3Module>}
	     */
	    this._modules = [];

	    this._resourceContainers = [];
	    this._recreateCanvasCallback = onRecreateCanvas;
	    this._rendererUpdatedCallback = onRendererUpdated;
	    this._manualRenderTriggerCallback = onManualRenderTriggerCreated;
	    this._forceManualRender = forceManualRender;

	    this._warnedAboutManualRendering = false;

	    this._canvas = null;

	    this._onAnimate = onAnimate;
	    this._objectsByUUID = {};
	    this._materials = [];
	    this._geometries = [];
	    this._textures = [];
	    this._objectsByName = {};

	    this._lastRenderMode = null;

	    this._renderTrigger = function (renderThisFrame) {
	      if (renderThisFrame) {
	        _this._render();
	      } else if (_this._renderRequest === null) {
	        _this._renderRequest = (0, _raf2.default)(_this._render);
	      }
	    };

	    this.uuid = THREE.Math.generateUUID();
	    this.userData = {};

	    if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	      this._highlightScene = new THREE.Scene();

	      this._highlightGeometry = new THREE.BoxGeometry(1, 1, 1);
	      this._highlightMaterial = new THREE.MeshBasicMaterial({
	        color: 0x0000ff,
	        transparent: true,
	        opacity: 0.4
	      });

	      this._highlightObjectId = null;
	      this._getHighlightBoundingBox = null;

	      this._hideHighlight = function () {
	        _this._highlightObjectId = null;
	        _this._getHighlightBoundingBox = null;
	      };

	      this._objectHighlighted = function (info) {
	        var uuid = info.uuid,
	            boundingBoxFunc = info.boundingBoxFunc;


	        var obj = void 0;

	        if (_this._highlightObjectId) {
	          obj = _this._objectsByUUID[_this._highlightObjectId];

	          obj.userData.events.removeListener('hideHighlight', _this._hideHighlight);
	        }

	        _this._highlightObjectId = uuid;
	        _this._getHighlightBoundingBox = boundingBoxFunc;

	        obj = _this._objectsByUUID[uuid];

	        obj.userData.events.once('hideHighlight', _this._hideHighlight);
	      };
	    }
	  }

	  _createClass(React3DInstance, [{
	    key: '_createRenderer',
	    value: function _createRenderer() {
	      if (!this._canvas) {
	        return;
	      }

	      var parameters = this._parameters;
	      var rendererArgs = {
	        canvas: this._canvas,
	        precision: parameters.precision,
	        alpha: parameters.alpha,
	        premultipliedAlpha: parameters.premultipliedAlpha,
	        antialias: parameters.antialias,
	        stencil: parameters.stencil,
	        preserveDrawingBuffer: parameters.preserveDrawingBuffer,
	        depth: parameters.depth,
	        logarithmicDepthBuffer: parameters.logarithmicDepthBuffer
	      };

	      if (this._parameters.customRenderer) {
	        this._renderer = this._parameters.customRenderer(rendererArgs);
	      } else {
	        this._renderer = (0, _isWebglSupported2.default)() ? new THREE.WebGLRenderer(rendererArgs) : new THREE.CanvasRenderer(rendererArgs);
	      }

	      if (this._rendererUpdatedCallback) {
	        this._rendererUpdatedCallback(this._renderer);
	      }

	      var renderer = this._renderer;

	      if (parameters.hasOwnProperty('pixelRatio')) {
	        renderer.setPixelRatio(parameters.pixelRatio);
	      }

	      if (parameters.hasOwnProperty('sortObjects')) {
	        renderer.sortObjects = parameters.sortObjects;
	      }

	      var hasClearColor = parameters.hasOwnProperty('clearColor');
	      var hasClearAlpha = parameters.hasOwnProperty('clearAlpha');

	      if (hasClearColor || hasClearAlpha) {
	        var clearColor = void 0;

	        if (hasClearColor) {
	          clearColor = parameters.clearColor;
	        } else {
	          clearColor = new THREE.Color(0x000000); // default clear color
	        }

	        if (hasClearAlpha) {
	          if (process.env.NODE_ENV !== 'production') {
	            (0, _warning2.default)(parameters.alpha === true, 'The `clearAlpha` property' + ' requires the `alpha` property to be `true`.');
	          }

	          renderer.setClearColor(clearColor, parameters.clearAlpha);
	        } else {
	          renderer.setClearColor(clearColor);
	        }
	      }

	      if (parameters.hasOwnProperty('shadowMapEnabled')) {
	        renderer.shadowMap.enabled = parameters.shadowMapEnabled;
	      }

	      if (parameters.hasOwnProperty('shadowMapType')) {
	        renderer.shadowMap.type = parameters.shadowMapType;
	      }

	      if (parameters.hasOwnProperty('shadowMapCullFace')) {
	        renderer.shadowMap.cullFace = parameters.shadowMapCullFace;
	      }

	      if (parameters.hasOwnProperty('shadowMapDebug')) {
	        renderer.shadowMap.debug = parameters.shadowMapDebug;
	      }

	      rendererProperties.forEach(function (propertyName) {
	        if (parameters.hasOwnProperty(propertyName)) {
	          renderer[propertyName] = parameters[propertyName];
	        }
	      });

	      renderer.setSize(parameters.width, parameters.height);
	    }
	  }, {
	    key: 'initialize',
	    value: function initialize() {
	      this.userData.events.on('animate', this._callOnAnimate);

	      if (this._forceManualRender) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (!this._manualRenderTriggerCallback && !this._warnedAboutManualRendering) {
	            this._warnedAboutManualRendering = true;

	            (0, _warning2.default)(false, 'The `forceManualRender` property requires the ' + '`onManualRenderTriggerCreated` property to be set.');
	          }
	        }

	        this._renderRequest = null;
	      } else {
	        this._renderRequest = (0, _raf2.default)(this._render);
	      }

	      if (this._manualRenderTriggerCallback) {
	        this._manualRenderTriggerCallback(this._renderTrigger);
	      }
	    }
	  }, {
	    key: 'getObjectsByName',
	    value: function getObjectsByName(objectName) {
	      var objectsByName = this._objectsByName[objectName];

	      var result = void 0;

	      if (objectsByName) {
	        var idToObjectMap = objectsByName.values;
	        result = Object.keys(idToObjectMap).map(function (name) {
	          return idToObjectMap[name];
	        });
	      } else {
	        result = [];
	      }

	      return result;
	    }
	  }, {
	    key: 'addAnimateListener',
	    value: function addAnimateListener(callback) {
	      this.userData.events.on('animate', callback);
	    }
	  }, {
	    key: 'removeAnimateListener',
	    value: function removeAnimateListener(callback) {
	      this.userData.events.removeListener('animate', callback);
	    }
	  }, {
	    key: 'addBeforeRenderListener',
	    value: function addBeforeRenderListener(callback) {
	      this.userData.events.on('preRender', callback);
	    }
	  }, {
	    key: 'removeBeforeRenderListener',
	    value: function removeBeforeRenderListener(callback) {
	      this.userData.events.removeListener('preRender', callback);
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(children) {
	      for (var i = 0; i < children.length; ++i) {
	        var child = children[i];

	        if (child instanceof THREE.Scene) {
	          this.setScene(child);
	        } else if (child instanceof _Viewport2.default) {
	          this.addViewport(child);
	        } else if (child instanceof _Module2.default) {
	          this.addModule(child);
	        } else if (child instanceof _ResourceContainer2.default) {
	          this.addResourceContainer(child);
	        } else {
	          (0, _invariant2.default)(false, 'The react3 component should only contain ' + '<viewport/>s or <scene/>s or <resources/>.');
	        }
	      }
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(child) {
	      if (child instanceof THREE.Scene) {
	        if (this._scene === child) {
	          this.setScene(null);
	        }
	      } else if (child instanceof _Viewport2.default) {
	        this.removeViewport(child);
	      } else if (child instanceof _Module2.default) {
	        this.removeModule(child);
	      } else if (child instanceof _ResourceContainer2.default) {
	        this.removeResourceContainer(child);
	      } else {
	        (0, _invariant2.default)(false, 'The react3 component should only contain ' + '<viewport/>s or <scene/>s, <module/>s or <resources/>.');
	      }
	    }
	  }, {
	    key: '_renderScene',
	    value: function _renderScene(camera) {
	      this._renderer.render(this._scene, camera);

	      if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	        if (this._highlightObjectId !== null) {
	          var boundingBoxes = this._getHighlightBoundingBox();

	          var highlightScene = this._highlightScene;

	          var diff = highlightScene.children.length - boundingBoxes.length;

	          if (diff > 0) {
	            for (var i = 0; i < diff; i++) {
	              highlightScene.remove(highlightScene.children[0]);
	            }
	          } else if (diff < 0) {
	            for (var _i = 0; _i < -diff; _i++) {
	              highlightScene.add(new THREE.Mesh(this._highlightGeometry, this._highlightMaterial));
	            }
	          }

	          for (var _i2 = 0; _i2 < boundingBoxes.length; ++_i2) {
	            var boundingBox = boundingBoxes[_i2];

	            var center = boundingBox.min.clone().add(boundingBox.max).multiplyScalar(0.5);

	            var size = boundingBox.max.clone().sub(boundingBox.min);

	            var highlightCube = highlightScene.children[_i2];

	            highlightCube.position.copy(center);
	            highlightCube.scale.copy(size);
	          }

	          var autoClear = this._renderer.autoClear;
	          this._renderer.autoClear = false;
	          this._renderer.render(highlightScene, camera);
	          this._renderer.autoClear = autoClear;
	        }
	      }
	    }
	  }, {
	    key: 'setScene',
	    value: function setScene(scene) {
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(!(this._scene && scene), 'There can only be one scene in <react3/>');
	      }

	      this._scene = scene;
	    }
	  }, {
	    key: 'addViewport',
	    value: function addViewport(viewport) {
	      this._viewports.push(viewport);
	    }
	  }, {
	    key: 'removeViewport',
	    value: function removeViewport(viewport) {
	      var index = this._viewports.indexOf(viewport);
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(index !== -1, 'A viewport has been removed from ' + '<react3/> but it was not present in it...');
	      }

	      this._viewports.splice(index, 1);
	    }
	  }, {
	    key: 'addResourceContainer',
	    value: function addResourceContainer(resourceContainer) {
	      this._resourceContainers.push(resourceContainer);
	    }
	  }, {
	    key: 'removeResourceContainer',
	    value: function removeResourceContainer(resourceContainer) {
	      var index = this._resourceContainers.indexOf(resourceContainer);
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(index !== -1, 'A resource container has been removed ' + 'from <react3/> but it was not present in it...');
	      }

	      this._resourceContainers.splice(index, 1);
	    }
	  }, {
	    key: 'addModule',
	    value: function addModule(module) {
	      this._modules.push(module);
	    }
	  }, {
	    key: 'removeModule',
	    value: function removeModule(module) {
	      var index = this._modules.indexOf(module);

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(index !== -1, 'A module has been removed from ' + '<react3/> but it was not present in it...');
	      }

	      this._modules.splice(index, 1);
	    }
	  }, {
	    key: 'updateWidth',
	    value: function updateWidth(newWidth) {
	      this._parameters.width = newWidth;
	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.setSize(this._parameters.width, this._parameters.height);
	    }
	  }, {
	    key: 'updateOnRecreateCanvas',
	    value: function updateOnRecreateCanvas(threeObject, callback) {
	      this._recreateCanvasCallback = callback;
	    }
	  }, {
	    key: 'updateOnRendererUpdated',
	    value: function updateOnRendererUpdated(callback) {
	      this._rendererUpdatedCallback = callback;
	    }
	  }, {
	    key: 'updateOnManualRenderTriggerCreated',
	    value: function updateOnManualRenderTriggerCreated(callback) {
	      this._manualRenderTriggerCallback = callback;

	      if (callback) {
	        this._manualRenderTriggerCallback(this._renderTrigger);
	      }
	    }
	  }, {
	    key: 'updateForceManualRender',
	    value: function updateForceManualRender(forceManualRender) {
	      if (this._forceManualRender === forceManualRender) {
	        return;
	      }

	      this._forceManualRender = forceManualRender;

	      if (forceManualRender) {
	        // was just set to be forced
	        _raf2.default.cancel(this._renderRequest);
	        this._renderRequest = null;
	      } else {
	        // was just restored

	        this._renderRequest = (0, _raf2.default)(this._render);
	      }
	    }
	  }, {
	    key: 'updateHeight',
	    value: function updateHeight(newHeight) {
	      this._parameters.height = newHeight;
	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.setSize(this._parameters.width, this._parameters.height);
	    }
	  }, {
	    key: 'updatePixelRatio',
	    value: function updatePixelRatio(newPixelRatio) {
	      this._parameters.pixelRatio = newPixelRatio;
	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.setPixelRatio(newPixelRatio);
	      this._renderer.setSize(this._parameters.width, this._parameters.height);
	    }
	  }, {
	    key: 'updateSortObjects',
	    value: function updateSortObjects(sortObjects) {
	      this._parameters.sortObjects = sortObjects;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.sortObjects = sortObjects;
	    }
	  }, {
	    key: 'updateAntialias',
	    value: function updateAntialias(antialias) {
	      this._parameters.antialias = antialias;
	      // no renderer, this only happens initially or we're about to recreate it anyway.
	      // unless something broke, then we have bigger problems...
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updatePrecision',
	    value: function updatePrecision(precision) {
	      this._parameters.precision = precision;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateAlpha',
	    value: function updateAlpha(alpha) {
	      this._parameters.alpha = alpha;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updatePremultipliedAlpha',
	    value: function updatePremultipliedAlpha(premultipliedAlpha) {
	      this._parameters.premultipliedAlpha = premultipliedAlpha;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateStencil',
	    value: function updateStencil(stencil) {
	      this._parameters.stencil = stencil;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updatePreserveDrawingBuffer',
	    value: function updatePreserveDrawingBuffer(preserveDrawingBuffer) {
	      this._parameters.preserveDrawingBuffer = preserveDrawingBuffer;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateDepth',
	    value: function updateDepth(depth) {
	      this._parameters.depth = depth;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateLogarithmicDepthBuffer',
	    value: function updateLogarithmicDepthBuffer(logarithmicDepthBuffer) {
	      this._parameters.logarithmicDepthBuffer = logarithmicDepthBuffer;
	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateShadowMapEnabled',
	    value: function updateShadowMapEnabled(shadowMapEnabled) {
	      this._parameters.shadowMapEnabled = shadowMapEnabled;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.shadowMap.enabled = shadowMapEnabled;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateShadowMapType',
	    value: function updateShadowMapType(shadowMapType) {
	      this._parameters.shadowMapType = shadowMapType;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.shadowMap.type = shadowMapType;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateShadowMapCullFace',
	    value: function updateShadowMapCullFace(shadowMapCullFace) {
	      this._parameters.shadowMapCullFace = shadowMapCullFace;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.shadowMap.cullFace = shadowMapCullFace;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateShadowMapDebug',
	    value: function updateShadowMapDebug(shadowMapDebug) {
	      this._parameters.shadowMapDebug = shadowMapDebug;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.shadowMap.debug = shadowMapDebug;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateCanvas',
	    value: function updateCanvas(canvas) {
	      this._canvas = canvas;

	      if (this._renderer) {
	        this.disposeResourcesAndRenderer();

	        var contextLossExtension = this._renderer.extensions.get('WEBGL_lose_context');
	        if (contextLossExtension) {
	          // noinspection JSUnresolvedFunction
	          contextLossExtension.loseContext();
	        }
	      }

	      this._createRenderer();
	    }
	  }, {
	    key: 'updateGammaInput',
	    value: function updateGammaInput(gammaInput) {
	      this._parameters.gammaInput = gammaInput;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.gammaInput = gammaInput;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateGammaOutput',
	    value: function updateGammaOutput(gammaOutput) {
	      this._parameters.gammaOutput = gammaOutput;

	      if (!this._renderer) {
	        return;
	      }

	      this._renderer.gammaOutput = gammaOutput;
	      this.allMaterialsNeedUpdate(true);
	    }
	  }, {
	    key: 'updateContext',
	    value: function updateContext(context) {
	      this._parameters.context = context;
	    }
	  }, {
	    key: 'updateMainCamera',
	    value: function updateMainCamera(mainCamera) {
	      this._parameters.mainCamera = mainCamera;

	      this._mainCameraName = mainCamera;
	    }
	  }, {
	    key: 'updateCustomRenderer',
	    value: function updateCustomRenderer(customRenderer) {
	      this._parameters.customRenderer = customRenderer;

	      if (!this._renderer) {
	        return;
	      }

	      this.refreshRenderer();
	    }
	  }, {
	    key: 'updateOnAnimate',
	    value: function updateOnAnimate(onAnimate) {
	      this._parameters.onAnimate = onAnimate;

	      this._onAnimate = onAnimate;
	    }
	  }, {
	    key: 'updateClearColor',
	    value: function updateClearColor(clearColor) {
	      this._parameters.clearColor = clearColor;

	      if (!this._renderer) {
	        return;
	      }

	      if (this._parameters.hasOwnProperty('clearAlpha')) {
	        this._renderer.setClearColor(clearColor, this._parameters.clearAlpha);
	      } else {
	        this._renderer.setClearColor(clearColor);
	      }
	    }
	  }, {
	    key: 'updateClearAlpha',
	    value: function updateClearAlpha(clearAlpha) {
	      var parameters = this._parameters;

	      if (clearAlpha === undefined) {
	        delete parameters.clearAlpha;
	      } else {
	        parameters.clearAlpha = clearAlpha;
	      }

	      if (!this._renderer) {
	        return;
	      }

	      var clearColor = void 0;

	      if (parameters.hasOwnProperty('clearColor')) {
	        clearColor = parameters.clearColor;
	      } else {
	        clearColor = new THREE.Color(0x000000); // default clear color
	      }

	      if (clearAlpha !== undefined) {
	        this._renderer.setClearColor(clearColor, clearAlpha);
	      } else {
	        this._renderer.setClearColor(clearColor);
	      }
	    }
	  }, {
	    key: 'refreshRenderer',
	    value: function refreshRenderer() {
	      this.disposeResourcesAndRenderer();

	      var contextLossExtension = this._renderer.extensions.get('WEBGL_lose_context');

	      delete this._renderer;
	      if (this._rendererUpdatedCallback) {
	        this._rendererUpdatedCallback(null);
	      }

	      this.userData.events.removeListener('animate', this._callOnAnimate);
	      this.userData.events.removeAllListeners();

	      if (this._renderRequest !== null) {
	        _raf2.default.cancel(this._renderRequest);
	        this._renderRequest = null;
	      }

	      if (contextLossExtension && this._canvas) {
	        // noinspection JSUnresolvedFunction
	        contextLossExtension.loseContext();

	        this._recreateCanvasCallback();
	      } else {
	        this._recreateCanvasCallback();
	      }
	    }
	  }, {
	    key: 'disposeResourcesAndRenderer',
	    value: function disposeResourcesAndRenderer() {
	      for (var i = 0; i < this._materials.length; ++i) {
	        var material = this._materials[i];
	        material.dispose();
	      }

	      for (var _i3 = 0; _i3 < this._geometries.length; ++_i3) {
	        var geometry = this._geometries[_i3];
	        geometry.dispose();
	      }

	      for (var _i4 = 0; _i4 < this._textures.length; ++_i4) {
	        var texture = this._textures[_i4];
	        texture.dispose();
	      }

	      this._renderer.dispose();
	    }
	  }, {
	    key: 'willUnmount',
	    value: function willUnmount() {
	      this._willUnmount = true;
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount() {
	      this._mounted = false;

	      if (this._renderRequest !== null) {
	        _raf2.default.cancel(this._renderRequest);
	        this._renderRequest = null;
	      }

	      this.userData.events.removeListener('animate', this._callOnAnimate);
	      this.userData.events.removeAllListeners();
	      delete this._rendererInstance;

	      if (this._renderer) {
	        var contextLossExtension = this._renderer.extensions.get('WEBGL_lose_context');

	        if (contextLossExtension) {
	          // noinspection JSUnresolvedFunction
	          contextLossExtension.loseContext();
	        }

	        this.disposeResourcesAndRenderer();

	        delete this._renderer;

	        if (this._rendererUpdatedCallback) {
	          this._rendererUpdatedCallback(null);
	        }
	      }

	      delete this._parameters;

	      (0, _invariant2.default)(Object.keys(this._objectsByUUID).length === 0, 'Failed to cleanup some child objects for React3DInstance');

	      delete this._objectsByUUID;
	      delete this._viewports;
	      delete this._scene;

	      if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	        delete this._highlightScene;
	        delete this._highlightObjectId;
	        delete this._getHighlightBoundingBox;
	      }
	    }
	  }, {
	    key: 'objectMounted',
	    value: function objectMounted(object) {
	      (0, _invariant2.default)(!this._objectsByUUID[object.uuid], 'There already is an object with this uuid in the react 3d instance.');

	      this._objectsByUUID[object.uuid] = object;

	      object.userData.markup._rootInstance = this;

	      this._addObjectWithName(object.name, object);

	      if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	        object.userData.events.on('highlight', this._objectHighlighted);
	      }

	      object.userData.events.emit('addedIntoRoot', object);

	      var current = object;

	      var childrenMarkup = current.userData.markup.childrenMarkup;

	      if (object instanceof THREE.Material) {
	        this._materials.push(object);
	      }

	      if (object instanceof THREE.Geometry || object instanceof THREE.BufferGeometry) {
	        this._geometries.push(object);
	      }

	      if (object instanceof THREE.Texture) {
	        this._textures.push(object);
	      }

	      for (var i = 0; i < childrenMarkup.length; ++i) {
	        var childMarkup = childrenMarkup[i];

	        this.objectMounted(childMarkup.threeObject);
	      }
	    }
	  }, {
	    key: 'allMaterialsNeedUpdate',
	    value: function allMaterialsNeedUpdate(dispose) {
	      this._materials.forEach(function (material) {
	        if (dispose) {
	          material.dispose();
	        } else {
	          material.needsUpdate = true;
	        }
	      });
	    }
	  }, {
	    key: 'objectRenamed',
	    value: function objectRenamed(object, oldName, nextName) {
	      this._removeObjectWithName(oldName, object);
	      this._addObjectWithName(nextName, object);
	    }
	  }, {
	    key: '_addObjectWithName',
	    value: function _addObjectWithName(objectName, object) {
	      if (!this._objectsByName[objectName]) {
	        this._objectsByName[objectName] = {
	          count: 0,
	          values: {}
	        };
	      }

	      this._objectsByName[objectName].values[object.uuid] = object;
	      this._objectsByName[objectName].count++;
	    }
	  }, {
	    key: '_removeObjectWithName',
	    value: function _removeObjectWithName(objectName, object) {
	      (0, _invariant2.default)(this._objectsByName[objectName] && this._objectsByName[objectName].values[object.uuid] === object, 'The object\'s name changed somehow?\'');

	      delete this._objectsByName[objectName].values[object.uuid];
	      this._objectsByName[objectName].count--;

	      if (this._objectsByName[objectName].count === 0) {
	        delete this._objectsByName[objectName];
	      }
	    }
	  }, {
	    key: 'objectRemoved',
	    value: function objectRemoved(object) {
	      (0, _invariant2.default)(this._objectsByUUID[object.uuid] === object, 'The removed object does not belong here!?');

	      if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {
	        if (this._highlightObjectId === object.uuid) {
	          this._highlightObjectId = null;
	        }

	        object.userData.events.removeListener('highlight', this._objectHighlighted);
	        object.userData.events.removeListener('hideHighlight', this._hideHighlight);
	      }

	      delete this._objectsByUUID[object.uuid];

	      if (object instanceof THREE.Material) {
	        this._materials.splice(this._materials.indexOf(object), 1);
	      }
	      if (object instanceof THREE.Geometry || object instanceof THREE.BufferGeometry) {
	        this._geometries.splice(this._geometries.indexOf(object), 1);
	      }
	      if (object instanceof THREE.Texture) {
	        this._textures.splice(this._textures.indexOf(object), 1);
	      }

	      this._removeObjectWithName(object.name, object);

	      delete object.userData.markup._rootInstance;
	    }
	  }, {
	    key: 'mountedIntoRoot',
	    value: function mountedIntoRoot() {
	      this._mounted = true;
	      this.objectMounted(this);
	    }
	  }]);

	  return React3DInstance;
	}(), _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._callOnAnimate = function () {
	    if (_this2._onAnimate) {
	      _ReactUpdates2.default.batchedUpdates(_this2._onAnimate);
	    }
	  };

	  this._render = function () {
	    for (var i = 0; i < _this2._modules.length; ++i) {
	      _this2._modules[i].update();
	    }

	    if (_this2._forceManualRender) {
	      _this2._renderRequest = null;
	    } else {
	      _this2._renderRequest = (0, _raf2.default)(_this2._render);
	    }

	    _this2.userData.events.emit('animate');

	    // the scene can be destroyed within the 'animate' event
	    if (!_this2._scene || !_this2._mounted || !_this2._renderer) {
	      return;
	    }

	    var mainCamera = null;

	    if (_this2._mainCameraName) {
	      var objectsWithMainCameraName = _this2._objectsByName[_this2._mainCameraName];

	      if (objectsWithMainCameraName) {
	        if (process.env.NODE_ENV !== 'production') {
	          (0, _warning2.default)(objectsWithMainCameraName.count < 2, 'There are multiple objects with name ' + _this2._mainCameraName);
	        }

	        if (objectsWithMainCameraName.count > 0) {
	          var values = objectsWithMainCameraName.values;
	          mainCamera = values[Object.keys(values)[0]];
	        }
	      }
	    }

	    if (mainCamera) {
	      if (_this2._lastRenderMode !== 'camera') {
	        _this2._renderer.autoClear = true;
	        _this2._renderer.setViewport(0, 0, _this2._parameters.width, _this2._parameters.height);
	        _this2._lastRenderMode = 'camera';
	      }
	      _CameraUtils2.default.current = mainCamera;
	      _this2.userData.events.emit('preRender');
	      _this2._renderScene(mainCamera);
	      _CameraUtils2.default.current = null;
	    } else if (_this2._viewports.length > 0) {
	      if (_this2._lastRenderMode !== 'viewport') {
	        _this2._renderer.autoClear = false;
	        _this2._lastRenderMode = 'viewport';
	      }

	      _this2._renderer.clear();
	      _this2._viewports.forEach(function (viewport) {
	        var viewportCamera = null;

	        if (viewport.cameraName) {
	          var objectsWithViewportCameraName = _this2._objectsByName[viewport.cameraName];

	          if (objectsWithViewportCameraName) {
	            if (process.env.NODE_ENV !== 'production') {
	              (0, _warning2.default)(objectsWithViewportCameraName.count < 2, 'There are multiple objects with name ' + viewport.cameraName);
	            }

	            if (objectsWithViewportCameraName.count > 0) {
	              var _values = objectsWithViewportCameraName.values;
	              viewportCamera = _values[Object.keys(_values)[0]];
	            }
	          }
	        }

	        if (!viewportCamera) {
	          return;
	        }

	        if (viewport.onBeforeRender) {
	          _ReactUpdates2.default.batchedUpdates(viewport.onBeforeRender);
	        }

	        _this2._renderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);
	        _CameraUtils2.default.current = viewportCamera;
	        _this2.userData.events.emit('preRender');
	        _this2._renderScene(viewportCamera);
	        _CameraUtils2.default.current = null;
	      });
	    }
	  };
	}, _temp);


	module.exports = React3DInstance;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Viewport = function Viewport(props) {
	  _classCallCheck(this, Viewport);

	  this.userData = {};

	  this.uuid = THREE.Math.generateUUID();

	  this.x = props.x;
	  this.y = props.y;
	  this.width = props.width;
	  this.height = props.height;
	  this.cameraName = props.cameraName;
	  this.onBeforeRender = props.onBeforeRender;
	};

	module.exports = Viewport;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var React3Module = function () {
	  function React3Module() {
	    _classCallCheck(this, React3Module);

	    this.userData = {};
	    this.uuid = THREE.Math.generateUUID();
	  }

	  _createClass(React3Module, [{
	    key: 'setup',
	    value: function setup(react3RendererInstance) {// eslint-disable-line no-unused-vars

	    }
	  }, {
	    key: 'update',
	    value: function update() {}
	  }, {
	    key: 'dispose',
	    value: function dispose() {}
	  }]);

	  return React3Module;
	}();

	module.exports = React3Module;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ResourceContainer = function (_THREE$Object3D) {
	  _inherits(ResourceContainer, _THREE$Object3D);

	  function ResourceContainer() {
	    _classCallCheck(this, ResourceContainer);

	    var _this = _possibleConstructorReturn(this, (ResourceContainer.__proto__ || Object.getPrototypeOf(ResourceContainer)).call(this));

	    _this.visible = false;

	    _this.resourceMap = {};
	    _this.resourceIds = [];
	    return _this;
	  }

	  return ResourceContainer;
	}(THREE.Object3D);

	module.exports = ResourceContainer;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _class, _temp;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CameraUtils = (_temp = _class = function CameraUtils() {
	  _classCallCheck(this, CameraUtils);
	}, _class.current = null, _temp);


	module.exports = CameraUtils;

/***/ }),
/* 296 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function () {
	  try {
	    var canvas = document.createElement('canvas');
	    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	  } catch (e) {
	    return false;
	  }
	};

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ReactPropTypeLocationNames = __webpack_require__(27);

	var _ReactPropTypeLocationNames2 = _interopRequireDefault(_ReactPropTypeLocationNames);

	var _PropTypeError = __webpack_require__(298);

	var _PropTypeError2 = _interopRequireDefault(_PropTypeError);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ANONYMOUS = '<<anonymous>>';

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!(propValue.constructor && (propValue.constructor.name || propValue.constructor.displayName))) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name || propValue.constructor.displayName;
	}

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, _componentName, location, _propFullName) {
	    var componentName = _componentName || ANONYMOUS;
	    var propFullName = _propFullName || propName;
	    if (props[propName] === undefined) {
	      var locationName = _ReactPropTypeLocationNames2.default[location];
	      if (isRequired) {
	        return new _PropTypeError2.default('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    }

	    for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
	      rest[_key - 6] = arguments[_key];
	    }

	    return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createInstanceTypeChecker(expectedClass) {
	  var originalInstanceOf = _propTypes2.default.instanceOf(expectedClass);

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      rest[_key2 - 5] = arguments[_key2];
	    }

	    var originalResult = originalInstanceOf.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));

	    if (originalResult !== null) {
	      var locationName = _ReactPropTypeLocationNames2.default[location];
	      var expectedClassName = expectedClass.name || expectedClass.displayName || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new _PropTypeError2.default('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }

	    return originalResult;
	  }

	  var typeChecker = createChainableTypeChecker(validate);

	  var _type = '' + (expectedClass.displayName || expectedClass.name || expectedClass._type || expectedClass);

	  typeChecker.toString = function () {
	    return '```' + ' ' + _type + ' ' + '```';
	  };

	  typeChecker.isRequired.toString = function () {
	    return typeChecker.toString() + ' *' + '```' + ' required ' + '```' + '*';
	  };

	  typeChecker.displayName = _type;
	  typeChecker.isRequired.displayName = _type;

	  return typeChecker;
	}

	module.exports = createInstanceTypeChecker;

/***/ }),
/* 298 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	module.exports = PropTypeError;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _ReactPropTypeLocationNames = __webpack_require__(27);

	var _ReactPropTypeLocationNames2 = _interopRequireDefault(_ReactPropTypeLocationNames);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _Module = __webpack_require__(293);

	var _Module2 = _interopRequireDefault(_Module);

	var _PropTypeError = __webpack_require__(298);

	var _PropTypeError2 = _interopRequireDefault(_PropTypeError);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// Returns class name of the object, if any.
	// Used for the subclass proptype checker
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	var ModuleDescriptor = function (_THREEElementDescript) {
	  _inherits(ModuleDescriptor, _THREEElementDescript);

	  function ModuleDescriptor(react3RendererInstance) {
	    _classCallCheck(this, ModuleDescriptor);

	    var _this = _possibleConstructorReturn(this, (ModuleDescriptor.__proto__ || Object.getPrototypeOf(ModuleDescriptor)).call(this, react3RendererInstance));

	    var moduleSubclassValidator = function moduleSubclassValidator(props, propName, componentName, location, propFullName) {
	      var locationName = _ReactPropTypeLocationNames2.default[location];

	      if (!props[propName]) {
	        return new _PropTypeError2.default('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }

	      if (!(props[propName].prototype instanceof _Module2.default)) {
	        var actualClassName = getClassName(props[propName]);

	        return new _PropTypeError2.default('Invalid ' + locationName + ' `' + propFullName + '` ' + ('of type `' + actualClassName + '` supplied to `' + componentName + '`, ') + 'expected subclass of `Module`.');
	      }

	      // success returns undefined
	      return undefined;
	    };

	    moduleSubclassValidator.toString = function () {
	      return '```' + ' subclass of ReactThreeRenderer.Module ' + '```' + ' *' + '```' + ' required ' + '```' + '*';
	    };

	    _this.hasProp('descriptor', {
	      type: moduleSubclassValidator,
	      update: _this.triggerRemount,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(ModuleDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      // going insane here but... let's... just do this.
	      var ModuleClass = props.descriptor;
	      return new ModuleClass();
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ModuleDescriptor.prototype.__proto__ || Object.getPrototypeOf(ModuleDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.setup(this.react3RendererInstance);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      threeObject.dispose();

	      _get(ModuleDescriptor.prototype.__proto__ || Object.getPrototypeOf(ModuleDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }]);

	  return ModuleDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = ModuleDescriptor;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Viewport = __webpack_require__(292);

	var _Viewport2 = _interopRequireDefault(_Viewport);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ViewportDescriptor = function (_THREEElementDescript) {
	  _inherits(ViewportDescriptor, _THREEElementDescript);

	  function ViewportDescriptor(react3Instance) {
	    _classCallCheck(this, ViewportDescriptor);

	    var _this = _possibleConstructorReturn(this, (ViewportDescriptor.__proto__ || Object.getPrototypeOf(ViewportDescriptor)).call(this, react3Instance));

	    ['x', 'y', 'width', 'height'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        simple: true
	      });
	    });

	    _this.hasProp('cameraName', {
	      type: _propTypes2.default.string.isRequired,
	      simple: true
	    });
	    return _this;
	  }

	  _createClass(ViewportDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new _Viewport2.default(props);
	    }
	  }]);

	  return ViewportDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = ViewportDescriptor;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SceneDescriptor = function (_Object3DDescriptor) {
	  _inherits(SceneDescriptor, _Object3DDescriptor);

	  function SceneDescriptor(react3Instance) {
	    _classCallCheck(this, SceneDescriptor);

	    var _this = _possibleConstructorReturn(this, (SceneDescriptor.__proto__ || Object.getPrototypeOf(SceneDescriptor)).call(this, react3Instance));

	    _this.hasProp('fog', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Fog), (0, _propTypeInstanceOf2.default)(THREE.FogExp2)]),
	      simple: true,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(SceneDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(SceneDescriptor.prototype.__proto__ || Object.getPrototypeOf(SceneDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'construct',
	    value: function construct() {
	      return new THREE.Scene();
	    }
	  }]);

	  return SceneDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = SceneDescriptor;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _arrayMove(array, oldIndex, newIndex) {
	  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);
	}

	function validateMatrixProp(nextProps, threeObject) {
	  if (nextProps && nextProps.hasOwnProperty('matrix')) {
	    ['position', 'rotation', 'quaternion', 'scale', 'lookAt'].find(function (unwantedProp) {
	      if (nextProps.hasOwnProperty(unwantedProp)) {
	        (0, _warning2.default)(false, 'The ' + threeObject.type + ' should not have a' + (' \'' + unwantedProp + '\' property if it has a \'matrix\' property.'));

	        return true;
	      }

	      return false;
	    });
	  }
	}

	var Object3DDescriptor = function (_THREEElementDescript) {
	  _inherits(Object3DDescriptor, _THREEElementDescript);

	  function Object3DDescriptor(react3Instance) {
	    _classCallCheck(this, Object3DDescriptor);

	    var _this = _possibleConstructorReturn(this, (Object3DDescriptor.__proto__ || Object.getPrototypeOf(Object3DDescriptor)).call(this, react3Instance));

	    _this.hasName();

	    function copyUpdate(propName) {
	      return function (threeObject, value) {
	        threeObject[propName].copy(value);
	      };
	    }

	    _this.hasProp('position', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),
	      update: function update(threeObject, position) {
	        threeObject.position.copy(position);

	        if (threeObject.userData._lookAt) {
	          threeObject.lookAt(threeObject.userData._lookAt);
	        }
	      },

	      default: new THREE.Vector3()
	    });

	    _this.hasProp('rotation', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Euler),
	      update: function update(threeObject, rotation) {
	        threeObject.rotation.copy(rotation);
	      },

	      default: new THREE.Euler()
	    });

	    _this.hasProp('quaternion', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Quaternion),
	      update: copyUpdate('quaternion'),
	      default: new THREE.Quaternion()
	    });

	    _this.hasProp('scale', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),
	      update: copyUpdate('scale'),
	      default: new THREE.Vector3(1, 1, 1)
	    });

	    _this.hasProp('lookAt', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),
	      update: function update(threeObject, lookAt) {
	        threeObject.userData._lookAt = lookAt;

	        if (lookAt) {
	          threeObject.lookAt(lookAt);
	        }
	      },

	      default: undefined
	    });

	    _this.hasProp('matrix', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Matrix4),
	      update: function update(threeObject, matrix) {
	        threeObject.matrix.copy(matrix);

	        threeObject.matrix.decompose(threeObject.position, threeObject.quaternion, threeObject.scale);
	      },

	      default: new THREE.Matrix4()
	    });

	    ['frustumCulled', 'visible'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.bool,
	        simple: true,
	        default: true
	      });
	    });

	    _this.hasProp('renderOrder', {
	      type: _propTypes2.default.number,
	      simple: true
	    });

	    _this.hasProp('castShadow', {
	      type: _propTypes2.default.bool,
	      simple: true,
	      default: false
	    });

	    _this.hasProp('receiveShadow', {
	      type: _propTypes2.default.bool,
	      updateInitial: true,
	      update: function update(threeObject, receiveShadow) {
	        threeObject.receiveShadow = receiveShadow;

	        if (threeObject.material) {
	          threeObject.material.needsUpdate = true;
	        }
	      },

	      default: false
	    });
	    return _this;
	  }

	  _createClass(Object3DDescriptor, [{
	    key: 'beginPropertyUpdates',
	    value: function beginPropertyUpdates(threeObject, nextProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateMatrixProp(nextProps, threeObject);
	      }
	    }
	  }, {
	    key: 'construct',
	    value: function construct() {
	      return new THREE.Object3D();
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(Object3DDescriptor.prototype.__proto__ || Object.getPrototypeOf(Object3DDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      if (process.env.NODE_ENV !== 'production') {
	        validateMatrixProp(props, threeObject);
	      }

	      if (props.matrix) {
	        threeObject.matrix.copy(props.matrix);
	      } else {
	        if (props.position) {
	          threeObject.position.copy(props.position);
	        }

	        if (props.scale) {
	          threeObject.scale.copy(props.scale);
	        }

	        if (props.rotation) {
	          threeObject.rotation.copy(props.rotation);
	        }

	        if (props.quaternion) {
	          threeObject.quaternion.copy(props.quaternion);
	        }

	        if (props.lookAt) {
	          threeObject.lookAt(props.lookAt);
	        }
	      }

	      if (props.lookAt) {
	        threeObject.userData._lookAt = props.lookAt;
	      }
	    }

	    /**
	     * @param threeObject
	     * @param {Array} children
	     */

	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      children.forEach(function (child) {
	        threeObject.add(child);
	      });
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child, mountIndex) {
	      threeObject.add(child);

	      this.moveChild(threeObject, child, mountIndex, threeObject.children.length - 1);
	    }

	    /**
	     * @param {THREE.Object3D} threeObject
	     * @param child
	     */

	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject, child) {
	      threeObject.remove(child);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild(threeObject, childObject, toIndex, lastIndex) {
	      // eslint-disable-line no-unused-vars
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(toIndex >= 0 && threeObject.children.length > toIndex, 'Cannot move a child to that index');
	      }
	      _arrayMove(threeObject.children, threeObject.children.indexOf(childObject), toIndex);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var _this2 = this;

	      threeObject.userData.events.emit('highlight', {
	        uuid: threeObject.uuid,
	        boundingBoxFunc: function boundingBoxFunc() {
	          return _this2.getBoundingBoxes(threeObject);
	        }
	      });
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var boundingBox = new THREE.Box3();

	      boundingBox.setFromObject(threeObject);

	      return [boundingBox];
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      threeObject.userData.events.emit('hideHighlight');
	    }
	  }]);

	  return Object3DDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = Object3DDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GroupDescriptor = function (_Object3DDescriptor) {
	  _inherits(GroupDescriptor, _Object3DDescriptor);

	  function GroupDescriptor() {
	    _classCallCheck(this, GroupDescriptor);

	    return _possibleConstructorReturn(this, (GroupDescriptor.__proto__ || Object.getPrototypeOf(GroupDescriptor)).apply(this, arguments));
	  }

	  _createClass(GroupDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new THREE.Group();
	    }
	  }]);

	  return GroupDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = GroupDescriptor;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _CameraDescriptorBase2 = __webpack_require__(305);

	var _CameraDescriptorBase3 = _interopRequireDefault(_CameraDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrthographicCameraDescriptor = function (_CameraDescriptorBase) {
	  _inherits(OrthographicCameraDescriptor, _CameraDescriptorBase);

	  function OrthographicCameraDescriptor(react3Instance) {
	    _classCallCheck(this, OrthographicCameraDescriptor);

	    var _this = _possibleConstructorReturn(this, (OrthographicCameraDescriptor.__proto__ || Object.getPrototypeOf(OrthographicCameraDescriptor)).call(this, react3Instance));

	    _this.propTypes = _extends({}, _this.propTypes, {

	      left: _propTypes2.default.number.isRequired,
	      right: _propTypes2.default.number.isRequired,
	      top: _propTypes2.default.number.isRequired,
	      bottom: _propTypes2.default.number.isRequired,
	      near: _propTypes2.default.number,
	      far: _propTypes2.default.number
	    });

	    _this.propUpdates = _extends({}, _this.propUpdates, {

	      left: _this._updateAndRefreshProjection.bind(_this, 'left'),
	      right: _this._updateAndRefreshProjection.bind(_this, 'right'),
	      top: _this._updateAndRefreshProjection.bind(_this, 'top'),
	      bottom: _this._updateAndRefreshProjection.bind(_this, 'bottom'),
	      fov: _this._updateFov,
	      far: _this._updateFar
	    });
	    return _this;
	  }

	  _createClass(OrthographicCameraDescriptor, [{
	    key: '_updateFov',
	    value: function _updateFov(threeObject, fov) {
	      threeObject.fov = fov;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }
	  }, {
	    key: '_updateFar',
	    value: function _updateFar(threeObject, far) {
	      threeObject.far = far;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      return new THREE.OrthographicCamera(props.left, props.right, props.top, props.bottom, props.near, props.far);
	    }
	  }, {
	    key: '_updateAndRefreshProjection',
	    value: function _updateAndRefreshProjection(propName, camera, value) {
	      camera[propName] = value;

	      camera.userData._needsProjectionMatrixUpdate = true;
	    }
	  }]);

	  return OrthographicCameraDescriptor;
	}(_CameraDescriptorBase3.default);

	module.exports = OrthographicCameraDescriptor;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CameraDescriptorBase = function (_Object3DDescriptor) {
	  _inherits(CameraDescriptorBase, _Object3DDescriptor);

	  function CameraDescriptorBase() {
	    _classCallCheck(this, CameraDescriptorBase);

	    return _possibleConstructorReturn(this, (CameraDescriptorBase.__proto__ || Object.getPrototypeOf(CameraDescriptorBase)).apply(this, arguments));
	  }

	  _createClass(CameraDescriptorBase, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(CameraDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(CameraDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(camera, parentObject3D) {
	      _get(CameraDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(CameraDescriptorBase.prototype), 'setParent', this).call(this, camera, parentObject3D);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      _get(CameraDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(CameraDescriptorBase.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: 'beginPropertyUpdates',
	    value: function beginPropertyUpdates(threeObject) {
	      _get(CameraDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(CameraDescriptorBase.prototype), 'beginPropertyUpdates', this).call(this, threeObject);

	      threeObject.userData._needsProjectionMatrixUpdate = false;
	    }

	    /**
	     * @param {THREE.PerspectiveCamera | THREE.OrthographicCamera} threeObject
	     */

	  }, {
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      _get(CameraDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(CameraDescriptorBase.prototype), 'completePropertyUpdates', this).call(this, threeObject);

	      if (threeObject.userData._needsProjectionMatrixUpdate) {
	        threeObject.userData._needsProjectionMatrixUpdate = false;

	        threeObject.updateProjectionMatrix();
	        threeObject.userData.events.emit('updateProjectionMatrix');
	      }
	    }
	  }]);

	  return CameraDescriptorBase;
	}(_Object3DDescriptor3.default);

	module.exports = CameraDescriptorBase;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _CameraDescriptorBase2 = __webpack_require__(305);

	var _CameraDescriptorBase3 = _interopRequireDefault(_CameraDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PerspectiveCameraDescriptor = function (_CameraDescriptorBase) {
	  _inherits(PerspectiveCameraDescriptor, _CameraDescriptorBase);

	  function PerspectiveCameraDescriptor(react3Instance) {
	    _classCallCheck(this, PerspectiveCameraDescriptor);

	    var _this = _possibleConstructorReturn(this, (PerspectiveCameraDescriptor.__proto__ || Object.getPrototypeOf(PerspectiveCameraDescriptor)).call(this, react3Instance));

	    _this.propTypes = _extends({}, _this.propTypes, {

	      fov: _propTypes2.default.number,
	      aspect: _propTypes2.default.number,
	      near: _propTypes2.default.number,
	      far: _propTypes2.default.number
	    });

	    _this.propUpdates = _extends({}, _this.propUpdates, {
	      aspect: _this._updateAspect,
	      fov: _this._updateFov,
	      far: _this._updateFar,
	      near: _this._updateNear
	    });
	    return _this;
	  }

	  _createClass(PerspectiveCameraDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new THREE.PerspectiveCamera(props.fov, props.aspect, props.near, props.far);
	    }
	  }, {
	    key: '_updateFov',
	    value: function _updateFov(threeObject, fov) {
	      threeObject.fov = fov;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }
	  }, {
	    key: '_updateNear',
	    value: function _updateNear(threeObject, near) {
	      threeObject.near = near;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }
	  }, {
	    key: '_updateFar',
	    value: function _updateFar(threeObject, far) {
	      threeObject.far = far;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }

	    /**
	     * @param {THREE.PerspectiveCamera} threeObject
	     * @param newAspect
	     * @private
	     */

	  }, {
	    key: '_updateAspect',
	    value: function _updateAspect(threeObject, newAspect) {
	      threeObject.aspect = newAspect;

	      threeObject.userData._needsProjectionMatrixUpdate = true;
	    }
	  }]);

	  return PerspectiveCameraDescriptor;
	}(_CameraDescriptorBase3.default);

	module.exports = PerspectiveCameraDescriptor;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CubeCameraDescriptor = function (_Object3DDescriptor) {
	  _inherits(CubeCameraDescriptor, _Object3DDescriptor);

	  function CubeCameraDescriptor(react3Instance) {
	    _classCallCheck(this, CubeCameraDescriptor);

	    var _this = _possibleConstructorReturn(this, (CubeCameraDescriptor.__proto__ || Object.getPrototypeOf(CubeCameraDescriptor)).call(this, react3Instance));

	    _this.propTypes = _extends({}, _this.propTypes, {

	      near: _propTypes2.default.number,
	      far: _propTypes2.default.number,
	      cubeResolution: _propTypes2.default.number.isRequired
	    });
	    return _this;
	  }

	  _createClass(CubeCameraDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new THREE.CubeCamera(props.near, props.far, props.cubeResolution);
	    }
	  }]);

	  return CubeCameraDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = CubeCameraDescriptor;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ResourceReference = __webpack_require__(309);

	var _ResourceReference2 = _interopRequireDefault(_ResourceReference);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshDescriptor = function (_Object3DDescriptor) {
	  _inherits(MeshDescriptor, _Object3DDescriptor);

	  function MeshDescriptor() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, MeshDescriptor);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MeshDescriptor.__proto__ || Object.getPrototypeOf(MeshDescriptor)).call.apply(_ref, [this].concat(args))), _this), _this._invalidChild = function (child) {
	      var invalid = !(child instanceof THREE.Material || child instanceof _ResourceReference2.default || child instanceof THREE.Geometry || child instanceof THREE.BufferGeometry);

	      return invalid;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(MeshDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var geometry = props.hasOwnProperty('geometry') ? props.geometry : undefined;
	      var material = props.hasOwnProperty('material') ? props.material : undefined;

	      var mesh = new THREE.Mesh(geometry, material);

	      if (!geometry) {
	        mesh.geometry.dispose();
	        mesh.geometry = undefined;
	      }

	      if (!material) {
	        mesh.material.dispose();
	        mesh.material = undefined;
	      }

	      return mesh;
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'Mesh children can only be materials or geometries!');
	      } else {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, false);
	      }
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      this.addChildren(threeObject, [child]);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      // doesn't matter
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      // recompute bounding box for highlighting from a fresh update
	      if (threeObject.geometry && threeObject.geometry.computeBoundingBox) {
	        threeObject.geometry.computeBoundingBox();
	      }

	      return _get(MeshDescriptor.prototype.__proto__ || Object.getPrototypeOf(MeshDescriptor.prototype), 'getBoundingBoxes', this).call(this, threeObject);
	    }
	  }]);

	  return MeshDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = MeshDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ResourceReference = function ResourceReference(resourceId) {
	  _classCallCheck(this, ResourceReference);

	  this.uuid = THREE.Math.generateUUID();

	  this.resourceId = resourceId;
	  this.userData = {};
	};

	module.exports = ResourceReference;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MeshDescriptor2 = __webpack_require__(308);

	var _MeshDescriptor3 = _interopRequireDefault(_MeshDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineDescriptor = function (_MeshDescriptor) {
	  _inherits(LineDescriptor, _MeshDescriptor);

	  function LineDescriptor() {
	    _classCallCheck(this, LineDescriptor);

	    return _possibleConstructorReturn(this, (LineDescriptor.__proto__ || Object.getPrototypeOf(LineDescriptor)).apply(this, arguments));
	  }

	  _createClass(LineDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var geometry = props.hasOwnProperty('geometry') ? props.geometry : undefined;
	      var material = props.hasOwnProperty('material') ? props.material : undefined;

	      var mesh = new THREE.Line(geometry, material);

	      if (!geometry) {
	        mesh.geometry.dispose();
	        mesh.geometry = undefined;
	      }

	      if (!material) {
	        mesh.material.dispose();
	        mesh.material = undefined;
	      }

	      return mesh;
	    }
	  }]);

	  return LineDescriptor;
	}(_MeshDescriptor3.default);

	module.exports = LineDescriptor;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MeshDescriptor2 = __webpack_require__(308);

	var _MeshDescriptor3 = _interopRequireDefault(_MeshDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineSegmentDescriptor = function (_MeshDescriptor) {
	  _inherits(LineSegmentDescriptor, _MeshDescriptor);

	  function LineSegmentDescriptor() {
	    _classCallCheck(this, LineSegmentDescriptor);

	    return _possibleConstructorReturn(this, (LineSegmentDescriptor.__proto__ || Object.getPrototypeOf(LineSegmentDescriptor)).apply(this, arguments));
	  }

	  _createClass(LineSegmentDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var geometry = props.hasOwnProperty('geometry') ? props.geometry : undefined;
	      var material = props.hasOwnProperty('material') ? props.material : undefined;

	      var mesh = new THREE.LineSegments(geometry, material);

	      if (!geometry) {
	        mesh.geometry.dispose();
	        mesh.geometry = undefined;
	      }

	      if (!material) {
	        mesh.material.dispose();
	        mesh.material = undefined;
	      }

	      return mesh;
	    }
	  }]);

	  return LineSegmentDescriptor;
	}(_MeshDescriptor3.default);

	module.exports = LineSegmentDescriptor;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MeshDescriptor2 = __webpack_require__(308);

	var _MeshDescriptor3 = _interopRequireDefault(_MeshDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PointsDescriptor = function (_MeshDescriptor) {
	    _inherits(PointsDescriptor, _MeshDescriptor);

	    function PointsDescriptor() {
	        _classCallCheck(this, PointsDescriptor);

	        return _possibleConstructorReturn(this, (PointsDescriptor.__proto__ || Object.getPrototypeOf(PointsDescriptor)).apply(this, arguments));
	    }

	    _createClass(PointsDescriptor, [{
	        key: 'construct',
	        value: function construct() {
	            var points = new THREE.Points();

	            points.geometry.dispose();
	            points.material.dispose();

	            points.geometry = undefined;
	            points.material = undefined;

	            return points;
	        }
	    }]);

	    return PointsDescriptor;
	}(_MeshDescriptor3.default);

	module.exports = PointsDescriptor;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _ResourceReference = __webpack_require__(309);

	var _ResourceReference2 = _interopRequireDefault(_ResourceReference);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SpriteDescriptor = function (_Object3DDescriptor) {
	  _inherits(SpriteDescriptor, _Object3DDescriptor);

	  function SpriteDescriptor() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, SpriteDescriptor);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SpriteDescriptor.__proto__ || Object.getPrototypeOf(SpriteDescriptor)).call.apply(_ref, [this].concat(args))), _this), _this._invalidChild = function (child) {
	      var invalid = !(child instanceof THREE.SpriteMaterial || child instanceof _ResourceReference2.default);

	      return invalid;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(SpriteDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var material = props.hasOwnProperty('material') ? props.material : undefined;
	      var sprite = new THREE.Sprite(material);

	      if (!material) {
	        sprite.material.dispose();
	        sprite.material = undefined;
	      }

	      return sprite;
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'Sprite children can only be materials!');
	      } else {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, false);
	      }
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      this.addChildren(threeObject, [child]);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      // doesn't matter
	    }
	  }]);

	  return SpriteDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = SpriteDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _LightDescriptorBase2 = __webpack_require__(315);

	var _LightDescriptorBase3 = _interopRequireDefault(_LightDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AmbientLightDescriptor = function (_LightDescriptorBase) {
	  _inherits(AmbientLightDescriptor, _LightDescriptorBase);

	  function AmbientLightDescriptor(react3Instance) {
	    _classCallCheck(this, AmbientLightDescriptor);

	    var _this = _possibleConstructorReturn(this, (AmbientLightDescriptor.__proto__ || Object.getPrototypeOf(AmbientLightDescriptor)).call(this, react3Instance));

	    _this.hasProp('intensity', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 1
	    });

	    _this.hasColor();
	    return _this;
	  }

	  _createClass(AmbientLightDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var color = props.color,
	          intensity = props.intensity;


	      return new THREE.AmbientLight(color, intensity);
	    }
	  }]);

	  return AmbientLightDescriptor;
	}(_LightDescriptorBase3.default);

	module.exports = AmbientLightDescriptor;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _class, _temp;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var updateLightTargetFromQuaternion = function () {
	  var lightPositionVector = new THREE.Vector3();
	  var forward = new THREE.Vector3();

	  return function (light) {
	    light.updateMatrixWorld();

	    lightPositionVector.setFromMatrixPosition(light.matrixWorld);

	    // rotate forward to match the rotation
	    // then set the target position
	    light.target.position.copy(forward.set(0, 0, 1).applyQuaternion(light.quaternion).add(lightPositionVector));

	    light.target.updateMatrixWorld();
	  };
	}();

	var LightDescriptorBase = (_temp = _class = function (_Object3DDescriptor) {
	  _inherits(LightDescriptorBase, _Object3DDescriptor);

	  function LightDescriptorBase(react3Instance) {
	    _classCallCheck(this, LightDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (LightDescriptorBase.__proto__ || Object.getPrototypeOf(LightDescriptorBase)).call(this, react3Instance));

	    _this.removeProp('receiveShadow');

	    _this._hasDirection = false;

	    if (process.env.NODE_ENV !== 'production') {
	      _this._warnedAboutLightMaterialUpdate = false;
	    }

	    _this.hasProp('updatesRefreshAllMaterials', {
	      type: _propTypes2.default.bool,
	      updateInitial: true,
	      update: function update(threeObject, updatesRefreshAllMaterials) {
	        threeObject.userData._updatesRefreshAllMaterials = updatesRefreshAllMaterials;
	      },

	      default: false
	    });

	    _this.hasProp('shadowBias', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.bias = value;
	        }
	      },

	      default: LightDescriptorBase.defaultShadowBias
	    });

	    _this.hasProp('shadowDarkness', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 0.5
	    });

	    _this.hasProp('shadowMapWidth', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.mapSize.x = value;
	        }
	      },

	      default: 512
	    });

	    _this.hasProp('shadowMapHeight', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.mapSize.y = value;
	        }
	      },

	      default: 512
	    });

	    _this.hasProp('shadowCameraNear', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.near = value;
	        }
	      },

	      default: LightDescriptorBase.defaultShadowCameraNear
	    });

	    _this.hasProp('shadowCameraFar', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.far = value;
	        }
	      },

	      default: LightDescriptorBase.defaultShadowCameraFar
	    });

	    _this.hasProp('castShadow', {
	      override: true,
	      type: _propTypes2.default.bool,
	      update: _this.triggerRemount,
	      default: false
	    });
	    return _this;
	  }

	  _createClass(LightDescriptorBase, [{
	    key: 'hasDirection',
	    value: function hasDirection() {
	      this._hasDirection = true;

	      // recreate the props to use target
	      this.removeProp('position');
	      this.removeProp('rotation');
	      this.removeProp('quaternion');
	      this.removeProp('lookAt');
	      this.removeProp('matrix');

	      this.hasProp('position', {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),
	        update: function update(threeObject, position) {
	          threeObject.position.copy(position);

	          if (threeObject.userData._lookAt) {
	            threeObject.lookAt(threeObject.userData._lookAt);
	          }

	          threeObject.userData._needsDirectionUpdate = true;
	        },

	        default: new THREE.Vector3()
	      });

	      this.hasProp('rotation', {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Euler),
	        update: function update(light, rotation) {
	          light.rotation.copy(rotation);

	          light.userData._needsDirectionUpdate = true;
	        },

	        default: new THREE.Euler()
	      });

	      this.hasProp('quaternion', {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Quaternion),
	        update: function update(light, quaternion) {
	          light.quaternion.copy(quaternion);

	          light.userData._needsDirectionUpdate = true;
	        },

	        default: new THREE.Quaternion()
	      });

	      this.hasProp('matrix', {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Matrix4),
	        update: function update(light, matrix) {
	          light.matrix.copy(matrix);

	          light.matrix.decompose(light.position, light.quaternion, light.scale);

	          light.userData._needsDirectionUpdate = true;
	        },

	        default: new THREE.Matrix4()
	      });

	      this.hasProp('lookAt', {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),
	        update: function update(threeObject, lookAt) {
	          threeObject.userData._lookAt = lookAt;

	          if (lookAt) {
	            threeObject.lookAt(lookAt);

	            threeObject.userData._needsDirectionUpdate = true;
	          }
	        },

	        default: undefined
	      });
	    }
	  }, {
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'completePropertyUpdates', this).call(this, threeObject);

	      if (threeObject.userData._needsDirectionUpdate) {
	        threeObject.userData._needsDirectionUpdate = false;
	        updateLightTargetFromQuaternion(threeObject);
	      }
	    }
	  }, {
	    key: 'hasColor',
	    value: function hasColor() {
	      var colorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'color';
	      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffffff;

	      this.hasProp(colorType, {
	        type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	        update: function update(threeObject, newColor) {
	          threeObject.color.set(newColor);
	        },

	        default: defaultValue
	      });
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      if (props.hasOwnProperty('castShadow')) {
	        threeObject.castShadow = props.castShadow;
	      }

	      if (this._hasDirection) {
	        threeObject.userData._needsDirectionUpdate = false;

	        if (props.position || props.lookAt || props.rotation || props.quaternion) {
	          updateLightTargetFromQuaternion(threeObject);
	        }
	      }
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      this.updateAllMaterials(threeObject);

	      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3d) {
	      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'setParent', this).call(this, threeObject, parentObject3d);

	      this.updateAllMaterials(threeObject);
	    }
	  }, {
	    key: 'updateAllMaterials',
	    value: function updateAllMaterials(threeObject) {
	      var rootInstance = threeObject.userData.markup._rootInstance;
	      if (rootInstance && !rootInstance._willUnmount) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (!this._warnedAboutLightMaterialUpdate && !threeObject.userData._updatesRefreshAllMaterials) {
	            var owner = threeObject.userData.react3internalComponent._currentElement._owner;

	            var elementType = threeObject.userData.react3internalComponent._elementType;

	            (0, _warning2.default)(this._warnedAboutLightMaterialUpdate, LightDescriptorBase.getDynamicWarningMessage(elementType, owner));
	            this._warnedAboutLightMaterialUpdate = true;
	          }
	        }

	        rootInstance.allMaterialsNeedUpdate();
	      }
	    }
	  }]);

	  return LightDescriptorBase;
	}(_Object3DDescriptor3.default), _class.defaultShadowCameraNear = 0.5, _class.defaultShadowCameraFar = 500, _class.defaultShadowBias = 0, _temp);


	if (process.env.NODE_ENV !== 'production') {
	  LightDescriptorBase.getDynamicWarningMessage = function (elementType, owner) {
	    return '<' + elementType + '/> has been updated which triggered a refresh of all materials.\nThis is a potentially expensive operation.\nThis can happen when you add or remove a light, or add or remove any component\nbefore any lights without keys e.g.\n<object3d>\n  {/* new or removed component here */}\n  <ambientLight/>\n</object3d>, or update some properties of lights.\n\nIf you would like to add components, you should either add the components\nafter the lights (recommended), e.g.\n<object3d>\n  <ambientLight/>\n  {/* new or removed component here */}\n</object3d>, or add a \'key\' property to the lights e.g.\n<object3d>\n  {/* new or removed component here */}\n  <ambientLight key="light"/>\n</object3d>.\n\nIf you have modified a light\'s properties e.g. toggled castShadow,\nthe materials need to be rebuilt as well.\n\nTo acknowledge and remove this message, please add the property \'updatesRefreshAllMaterials\'\n  to <' + elementType + '/> inside the render() of ' + (owner && owner.getName() || 'a component') + '.\n\nFor more information, visit https://github.com/mrdoob/threejs/wiki/Updates .';
	  };
	}

	module.exports = LightDescriptorBase;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _class, _temp;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _LightDescriptorBase2 = __webpack_require__(315);

	var _LightDescriptorBase3 = _interopRequireDefault(_LightDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DirectionalLightDescriptor = (_temp = _class = function (_LightDescriptorBase) {
	  _inherits(DirectionalLightDescriptor, _LightDescriptorBase);

	  function DirectionalLightDescriptor(react3Instance) {
	    _classCallCheck(this, DirectionalLightDescriptor);

	    var _this = _possibleConstructorReturn(this, (DirectionalLightDescriptor.__proto__ || Object.getPrototypeOf(DirectionalLightDescriptor)).call(this, react3Instance));

	    _this.hasProp('intensity', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 1
	    });

	    _this.hasProp('shadowCameraLeft', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.left = value;
	        }
	      },

	      default: DirectionalLightDescriptor.defaultShadowCameraLeft
	    });

	    _this.hasProp('shadowCameraBottom', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.bottom = value;
	        }
	      },

	      default: DirectionalLightDescriptor.defaultShadowCameraBottom
	    });

	    _this.hasProp('shadowCameraRight', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.right = value;
	        }
	      },

	      default: DirectionalLightDescriptor.defaultShadowCameraRight
	    });

	    _this.hasProp('shadowCameraTop', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.top = value;
	        }
	      },

	      default: DirectionalLightDescriptor.defaultShadowCameraTop
	    });

	    _this.hasColor();
	    _this.hasDirection();
	    return _this;
	  }

	  _createClass(DirectionalLightDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var color = props.color;
	      var intensity = props.intensity;

	      var result = new THREE.DirectionalLight(color, intensity);

	      result.position.set(0, 0, 0);

	      return result;
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      _get(DirectionalLightDescriptor.prototype.__proto__ || Object.getPrototypeOf(DirectionalLightDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }]);

	  return DirectionalLightDescriptor;
	}(_LightDescriptorBase3.default), _class.defaultShadowCameraLeft = -5, _class.defaultShadowCameraRight = 5, _class.defaultShadowCameraTop = 5, _class.defaultShadowCameraBottom = -5, _temp);


	module.exports = DirectionalLightDescriptor;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _LightDescriptorBase2 = __webpack_require__(315);

	var _LightDescriptorBase3 = _interopRequireDefault(_LightDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SpotLightDescriptor = function (_LightDescriptorBase) {
	  _inherits(SpotLightDescriptor, _LightDescriptorBase);

	  function SpotLightDescriptor(react3Instance) {
	    _classCallCheck(this, SpotLightDescriptor);

	    var _this = _possibleConstructorReturn(this, (SpotLightDescriptor.__proto__ || Object.getPrototypeOf(SpotLightDescriptor)).call(this, react3Instance));

	    var defaults = [1, // intensity
	    0, // distance
	    Math.PI / 3, // angle
	    10, // exponent
	    1, // decay
	    0];

	    ['intensity', 'distance', 'angle', 'exponent', 'decay', 'penumbra'].forEach(function (propName, i) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        simple: true,
	        default: defaults[i]
	      });
	    });

	    _this.hasProp('shadowCameraFov', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.fov = value;
	        }
	      },

	      default: 50
	    });

	    _this.hasColor();
	    _this.hasDirection();
	    return _this;
	  }

	  _createClass(SpotLightDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var color = props.color,
	          intensity = props.intensity,
	          distance = props.distance,
	          angle = props.angle,
	          exponent = props.exponent,
	          decay = props.decay;


	      return new THREE.SpotLight(color, intensity, distance, angle, exponent, decay);
	    }
	  }]);

	  return SpotLightDescriptor;
	}(_LightDescriptorBase3.default);

	module.exports = SpotLightDescriptor;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _LightDescriptorBase2 = __webpack_require__(315);

	var _LightDescriptorBase3 = _interopRequireDefault(_LightDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PointLightDescriptor = (_temp = _class = function (_LightDescriptorBase) {
	  _inherits(PointLightDescriptor, _LightDescriptorBase);

	  function PointLightDescriptor(react3Instance) {
	    _classCallCheck(this, PointLightDescriptor);

	    var _this = _possibleConstructorReturn(this, (PointLightDescriptor.__proto__ || Object.getPrototypeOf(PointLightDescriptor)).call(this, react3Instance));

	    _this.hasColor();

	    ['intensity', 'decay'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        simple: true,
	        default: 1
	      });
	    });

	    _this.hasProp('distance', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 0
	    });

	    _this.hasProp('shadowCameraFov', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.fov = value;
	        }
	      },

	      default: PointLightDescriptor.defaultShadowCameraFov
	    });

	    _this.hasProp('shadowCameraAspect', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value, hasProp) {
	        if (hasProp) {
	          threeObject.shadow.camera.aspect = value;
	        }
	      },

	      default: PointLightDescriptor.defaultShadowCameraAspect
	    });

	    _this.removeProp('lookAt');
	    _this.removeProp('rotation');
	    _this.removeProp('quaternion');
	    return _this;
	  }

	  _createClass(PointLightDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var color = props.color,
	          intensity = props.intensity,
	          distance = props.distance,
	          decay = props.decay;


	      return new THREE.PointLight(color, intensity, distance, decay);
	    }
	  }]);

	  return PointLightDescriptor;
	}(_LightDescriptorBase3.default), _class.defaultShadowCameraFov = 90, _class.defaultShadowCameraAspect = 1, _temp);


	module.exports = PointLightDescriptor;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _LightDescriptorBase2 = __webpack_require__(315);

	var _LightDescriptorBase3 = _interopRequireDefault(_LightDescriptorBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HemisphereLightDescriptor = function (_LightDescriptorBase) {
	  _inherits(HemisphereLightDescriptor, _LightDescriptorBase);

	  function HemisphereLightDescriptor(react3Instance) {
	    _classCallCheck(this, HemisphereLightDescriptor);

	    var _this = _possibleConstructorReturn(this, (HemisphereLightDescriptor.__proto__ || Object.getPrototypeOf(HemisphereLightDescriptor)).call(this, react3Instance));

	    _this.hasColor('skyColor');
	    _this.hasColor('groundColor', 0xcccccc);

	    _this.hasProp('intensity', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 1
	    });
	    return _this;
	  }

	  _createClass(HemisphereLightDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var skyColor = props.skyColor,
	          groundColor = props.groundColor,
	          intensity = props.intensity;


	      return new THREE.HemisphereLight(skyColor, groundColor, intensity);
	    }
	  }]);

	  return HemisphereLightDescriptor;
	}(_LightDescriptorBase3.default);

	module.exports = HemisphereLightDescriptor;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _ResourceContainer = __webpack_require__(294);

	var _ResourceContainer2 = _interopRequireDefault(_ResourceContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ResourcesDescriptor = function (_THREEElementDescript) {
	  _inherits(ResourcesDescriptor, _THREEElementDescript);

	  function ResourcesDescriptor() {
	    _classCallCheck(this, ResourcesDescriptor);

	    return _possibleConstructorReturn(this, (ResourcesDescriptor.__proto__ || Object.getPrototypeOf(ResourcesDescriptor)).apply(this, arguments));
	  }

	  _createClass(ResourcesDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new _ResourceContainer2.default();
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      var parentMarkup = threeObject.userData.markup.parentMarkup;
	      var parentEvents = parentMarkup.threeObject.userData.events;

	      threeObject.resourceIds.forEach(function (id) {
	        parentEvents.emit('resource.removed', {
	          id: id,
	          distance: 0,
	          resource: threeObject.resourceMap[id]
	        });
	      });

	      _get(ResourcesDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourcesDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      children.forEach(function (child) {
	        var resourceId = child.userData._resourceId;

	        if (process.env.NODE_ENV !== 'production') {
	          (0, _invariant2.default)(!!resourceId, 'Resource container can only hold resources. ' + 'Found children without `resourceId` properties:' + (' ' + children.filter(function (currentChild) {
	            return !currentChild.userData._resourceId;
	          }).map(function (currentChild) {
	            return '<' + currentChild.userData.react3internalComponent._elementType + '/>';
	          }).join(', ') + '.'));
	        } else {
	          (0, _invariant2.default)(!!resourceId);
	        }

	        threeObject.resourceIds.push(resourceId);

	        threeObject.resourceMap[resourceId] = child;

	        var parentMarkup = threeObject.userData.markup.parentMarkup;
	        if (parentMarkup) {
	          parentMarkup.threeObject.userData.events.emit('resource.added', {
	            id: resourceId,
	            distance: 0,
	            resource: child
	          });
	        }
	      });
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      this.addChildren(threeObject, [child]);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject, child) {
	      var resourceId = child.userData._resourceId;

	      delete threeObject.resourceIds[resourceId];

	      var parentMarkup = threeObject.userData.markup.parentMarkup;
	      if (parentMarkup) {
	        parentMarkup.threeObject.userData.events.emit('resource.removed', {
	          id: resourceId,
	          distance: 0,
	          resource: child
	        });
	      }
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject) {
	      _get(ResourcesDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourcesDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject);

	      var parentEvents = parentObject.userData.events;

	      parentObject.userData._resources = threeObject;

	      threeObject.resourceIds.forEach(function (id) {
	        parentEvents.emit('resource.added', {
	          id: id,
	          distance: 0,
	          resource: threeObject.resourceMap[id]
	        });
	      });
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var ownerObject = threeObject.userData.markup.parentMarkup.threeObject;

	      if (!(ownerObject.updateMatrixWorld && ownerObject.traverse)) {
	        return;
	      }

	      threeObject.userData.events.emit('highlight', {
	        uuid: threeObject.uuid,
	        boundingBoxFunc: function boundingBoxFunc() {
	          var boundingBox = new THREE.Box3();

	          boundingBox.setFromObject(ownerObject);

	          return [boundingBox];
	        }
	      });
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      threeObject.userData.events.emit('hideHighlight');
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      // child order doesn't matter
	    }
	  }]);

	  return ResourcesDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = ResourcesDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ResourceDescriptorBase = __webpack_require__(322);

	var _ResourceDescriptorBase2 = _interopRequireDefault(_ResourceDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GeometryResourceDescriptor = function (_ResourceDescriptorBa) {
	  _inherits(GeometryResourceDescriptor, _ResourceDescriptorBa);

	  function GeometryResourceDescriptor() {
	    _classCallCheck(this, GeometryResourceDescriptor);

	    return _possibleConstructorReturn(this, (GeometryResourceDescriptor.__proto__ || Object.getPrototypeOf(GeometryResourceDescriptor)).apply(this, arguments));
	  }

	  _createClass(GeometryResourceDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(GeometryResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._propertySlot = 'geometry';
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Mesh || parentObject3D instanceof THREE.Points || parentObject3D instanceof THREE.Line, 'Parent is not a mesh');

	      _get(GeometryResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	    }
	  }]);

	  return GeometryResourceDescriptor;
	}(_ResourceDescriptorBase2.default);

	module.exports = GeometryResourceDescriptor;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _ResourceReference = __webpack_require__(309);

	var _ResourceReference2 = _interopRequireDefault(_ResourceReference);

	var _React3Renderer = __webpack_require__(277);

	var _React3Renderer2 = _interopRequireDefault(_React3Renderer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ResourceDescriptorBase = function (_THREEElementDescript) {
	  _inherits(ResourceDescriptorBase, _THREEElementDescript);

	  function ResourceDescriptorBase(react3RendererInstance) {
	    _classCallCheck(this, ResourceDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (ResourceDescriptorBase.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase)).call(this, react3RendererInstance));

	    _this._addedIntoRoot = function (threeObject) {
	      var currentParentMarkup = threeObject.userData.markup.parentMarkup;

	      var distance = 0;

	      while (currentParentMarkup) {
	        var parentResources = currentParentMarkup.threeObject.userData._resources;

	        if (parentResources) {
	          var resourceId = threeObject.resourceId;
	          var resourceInParent = parentResources.resourceMap[resourceId];

	          if (resourceInParent) {
	            _this._addResource(threeObject, {
	              id: resourceId,
	              distance: distance,
	              resource: resourceInParent
	            });
	          }
	        }

	        distance++;
	        currentParentMarkup = currentParentMarkup.threeObject.userData.markup.parentMarkup;
	      }

	      _this._updateResource(threeObject);
	    };

	    _this.hasProp('resourceId', {
	      type: _propTypes2.default.string.isRequired,
	      update: _this.triggerRemount,
	      default: ''
	    });
	    return _this;
	  }

	  _createClass(ResourceDescriptorBase, [{
	    key: 'construct',
	    value: function construct(props) {
	      (0, _invariant2.default)(props.hasOwnProperty('resourceId'), 'A resource type must have a property named "resourceId"!');

	      return new _ResourceReference2.default(props.resourceId);
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData.resourceMap = [];
	      threeObject.userData._eventCleanupQueue = [];
	      threeObject.userData._chosenResource = undefined;
	      threeObject.userData._debug = props.debug || false;

	      threeObject.userData.events.once('addedIntoRoot', this._addedIntoRoot);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      threeObject.userData._eventCleanupQueue.forEach(function (cleanup) {
	        cleanup();
	      });

	      delete threeObject.userData._eventCleanupQueue;
	      delete threeObject.userData.resourceMap;

	      this.updateChosenResource(threeObject, null);

	      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: 'updateChosenResource',
	    value: function updateChosenResource(threeObject, chosenResource) {
	      var oldResource = threeObject.userData._chosenResource;
	      if (oldResource !== chosenResource) {
	        threeObject.userData._chosenResource = chosenResource;

	        this.resourceUpdated(threeObject, chosenResource, oldResource);
	      }
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      var existingValueInSlot = parentObject3D[threeObject.userData._propertySlot];
	      (0, _invariant2.default)(existingValueInSlot === undefined || existingValueInSlot === null, 'Parent already has a ' + threeObject.userData._propertySlot + ' defined');
	      (0, _invariant2.default)(threeObject.userData._eventCleanupQueue.length === 0, 'Changing parents?');

	      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'setParent', this).call(this, threeObject, parentObject3D);

	      var currentParentMarkup = parentObject3D.userData.markup;

	      var onResourceAdded = this._onResourceAdded.bind(this, threeObject);
	      var onResourceRemoved = this._onResourceRemoved.bind(this, threeObject);

	      var parentEvents = currentParentMarkup.threeObject.userData.events;
	      parentEvents.on('resource.added', onResourceAdded);
	      parentEvents.on('resource.removed', onResourceRemoved);

	      threeObject.userData._eventCleanupQueue.push(function () {
	        parentEvents.removeListener('resource.added', onResourceAdded);
	        parentEvents.removeListener('resource.removed', onResourceRemoved);
	      });
	    }
	  }, {
	    key: '_onResourceAdded',
	    value: function _onResourceAdded(threeObject, resourceInfo) {
	      if (threeObject.resourceId !== resourceInfo.id) {
	        return;
	      }

	      this._addResource(threeObject, resourceInfo);

	      this._updateResource(threeObject);
	    }
	  }, {
	    key: '_addResource',
	    value: function _addResource(threeObject, resourceInfo) {
	      var resourceMap = threeObject.userData.resourceMap;

	      var i = void 0;

	      for (i = 0; i < resourceMap.length; ++i) {
	        if (resourceMap[i].distance === resourceInfo.distance) {
	          if (resourceMap[i].resource !== resourceInfo.resource) {
	            resourceMap[i].resource = resourceInfo.resource;
	          }

	          return;
	        }

	        if (resourceMap[i].distance > resourceInfo.distance) {
	          break;
	        }
	      }

	      resourceMap.splice(i, 0, {
	        distance: resourceInfo.distance,
	        resource: resourceInfo.resource
	      });
	    }
	  }, {
	    key: '_onResourceRemoved',
	    value: function _onResourceRemoved(threeObject, resourceInfo) {
	      if (threeObject.resourceId !== resourceInfo.id) {
	        return;
	      }

	      var resourceMap = threeObject.userData.resourceMap;

	      for (var i = 0; i < resourceMap.length; ++i) {
	        if (resourceMap[i].distance === resourceInfo.distance) {
	          if (resourceMap[i].resource === resourceInfo.resource) {
	            resourceMap.splice(i, 1);

	            this._updateResource(threeObject);
	          }
	          return;
	        }
	      }

	      (0, _invariant2.default)(false, 'This resource was not in this map?');
	    }
	  }, {
	    key: 'applyToSlot',
	    value: function applyToSlot(threeObject, parentObject, newResource) {
	      var propertySlot = threeObject.userData._propertySlot;
	      parentObject[propertySlot] = newResource;
	    }
	  }, {
	    key: 'resourceUpdated',
	    value: function resourceUpdated(threeObject, newResource, oldResource) {
	      var parentObject = threeObject.userData.markup.parentMarkup && threeObject.userData.markup.parentMarkup.threeObject || undefined;

	      if (parentObject) {
	        this.applyToSlot(threeObject, parentObject, newResource);

	        if (newResource === null) {
	          // invariant(false, 'Could not find resource named ' + threeObject.resourceId);
	        } else {
	          newResource.userData._references.push(parentObject);
	        }

	        if (oldResource) {
	          var removalIndex = oldResource.userData._references.indexOf(parentObject);

	          (0, _invariant2.default)(removalIndex !== -1, 'Bad reference count for resource');

	          oldResource.userData._references.splice(removalIndex, 1);
	        }
	      }
	    }
	  }, {
	    key: '_updateResource',
	    value: function _updateResource(threeObject) {
	      var resourceMap = threeObject.userData.resourceMap;

	      var chosenResource = null;

	      if (resourceMap.length > 0) {
	        chosenResource = resourceMap[0].resource;
	      }

	      this.updateChosenResource(threeObject, chosenResource);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var ownerObject = threeObject.userData.markup.parentMarkup.threeObject;
	      ownerObject.userData._descriptor.highlight(ownerObject);
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      var ownerObject = threeObject.userData.markup.parentMarkup.threeObject;
	      ownerObject.userData._descriptor.hideHighlight(ownerObject);
	    }
	  }]);

	  return ResourceDescriptorBase;
	}(_THREEElementDescriptor2.default);

	module.exports = ResourceDescriptorBase;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _GeometryResourceDescriptor = __webpack_require__(321);

	var _GeometryResourceDescriptor2 = _interopRequireDefault(_GeometryResourceDescriptor);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShapeGeometryResourceDescriptor = function (_GeometryResourceDesc) {
	  _inherits(ShapeGeometryResourceDescriptor, _GeometryResourceDesc);

	  function ShapeGeometryResourceDescriptor(react3RendererInstance) {
	    _classCallCheck(this, ShapeGeometryResourceDescriptor);

	    var _this = _possibleConstructorReturn(this, (ShapeGeometryResourceDescriptor.__proto__ || Object.getPrototypeOf(ShapeGeometryResourceDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('type', {
	      type: _propTypes2.default.oneOf(['points', 'spacedPoints', 'shape']).isRequired,
	      update: _this.triggerRemount,
	      default: ''
	    });

	    _this.hasProp('divisions', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 5
	    });
	    return _this;
	  }

	  _createClass(ShapeGeometryResourceDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ShapeGeometryResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShapeGeometryResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._divisions = props.divisions;

	      threeObject.userData._type = props.type;
	    }
	  }, {
	    key: 'applyToSlot',
	    value: function applyToSlot(threeObject, parentObject, shape) {
	      if (!shape) {
	        return _get(ShapeGeometryResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShapeGeometryResourceDescriptor.prototype), 'applyToSlot', this).call(this, threeObject, parentObject, null);
	      }

	      var geometry = void 0;

	      switch (threeObject.userData._type) {
	        case 'points':
	          geometry = shape.createPointsGeometry();
	          break;
	        case 'spacedPoints':
	          geometry = shape.createSpacedPointsGeometry(threeObject.userData._divisions);
	          break;
	        case 'shape':
	          // TODO shapeGeometryDescriptor
	          geometry = new THREE.ShapeGeometry(shape);
	          break;
	        default:
	          break;
	      }

	      return _get(ShapeGeometryResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShapeGeometryResourceDescriptor.prototype), 'applyToSlot', this).call(this, threeObject, parentObject, geometry);
	    }
	  }]);

	  return ShapeGeometryResourceDescriptor;
	}(_GeometryResourceDescriptor2.default);

	module.exports = ShapeGeometryResourceDescriptor;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ResourceDescriptorBase = __webpack_require__(322);

	var _ResourceDescriptorBase2 = _interopRequireDefault(_ResourceDescriptorBase);

	var _Uniform = __webpack_require__(325);

	var _Uniform2 = _interopRequireDefault(_Uniform);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextureResourceDescriptor = function (_ResourceDescriptorBa) {
	  _inherits(TextureResourceDescriptor, _ResourceDescriptorBa);

	  function TextureResourceDescriptor() {
	    _classCallCheck(this, TextureResourceDescriptor);

	    return _possibleConstructorReturn(this, (TextureResourceDescriptor.__proto__ || Object.getPrototypeOf(TextureResourceDescriptor)).apply(this, arguments));
	  }

	  _createClass(TextureResourceDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(TextureResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._propertySlot = 'map';
	    }
	  }, {
	    key: 'applyToSlot',
	    value: function applyToSlot(threeObject, parentObject3D, newResource) {
	      if (parentObject3D instanceof THREE.Material) {
	        _get(TextureResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureResourceDescriptor.prototype), 'applyToSlot', this).call(this, threeObject, parentObject3D, newResource);
	        parentObject3D.dispose();
	      } else if (parentObject3D instanceof _Uniform2.default) {
	        parentObject3D.setValue(newResource);
	      } else {
	        (0, _invariant2.default)(false, 'Parent is not a material or a uniform');
	      }
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      if (parentObject3D instanceof THREE.Material) {
	        _get(TextureResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	      } else if (parentObject3D instanceof _Uniform2.default) {
	        threeObject.userData._propertySlot = 'value';
	        _get(TextureResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	      } else {
	        (0, _invariant2.default)(false, 'Parent is not a material or a uniform');
	      }
	    }
	  }]);

	  return TextureResourceDescriptor;
	}(_ResourceDescriptorBase2.default);

	module.exports = TextureResourceDescriptor;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Uniform = function () {
	  function Uniform() {
	    _classCallCheck(this, Uniform);

	    this.userData = {};
	    this.name = null;
	    this.value = null;
	    this.type = null;
	    this.uuid = THREE.Math.generateUUID();
	  }

	  _createClass(Uniform, [{
	    key: 'setValue',
	    value: function setValue(value) {
	      this.value = value;

	      this.userData.events.emit('valueChanged', value);
	    }
	  }]);

	  return Uniform;
	}();

	module.exports = Uniform;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ResourceDescriptorBase = __webpack_require__(322);

	var _ResourceDescriptorBase2 = _interopRequireDefault(_ResourceDescriptorBase);

	var _ShapeResourceReference = __webpack_require__(327);

	var _ShapeResourceReference2 = _interopRequireDefault(_ShapeResourceReference);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShapeResourceDescriptor = function (_ResourceDescriptorBa) {
	  _inherits(ShapeResourceDescriptor, _ResourceDescriptorBa);

	  function ShapeResourceDescriptor() {
	    _classCallCheck(this, ShapeResourceDescriptor);

	    return _possibleConstructorReturn(this, (ShapeResourceDescriptor.__proto__ || Object.getPrototypeOf(ShapeResourceDescriptor)).apply(this, arguments));
	  }

	  _createClass(ShapeResourceDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ShapeResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShapeResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._remountOnUpdate = true;
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      return new _ShapeResourceReference2.default(props.resourceId);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.ExtrudeGeometry || parentObject3D instanceof THREE.BufferGeometry, 'Parent is not an extrude geometry');

	      _get(ShapeResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShapeResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	    }
	  }, {
	    key: 'applyToSlot',
	    value: function applyToSlot(threeObject, parentObject, newResource) {
	      threeObject.userData.events.emit('resource.set', newResource);
	    }
	  }]);

	  return ShapeResourceDescriptor;
	}(_ResourceDescriptorBase2.default);

	module.exports = ShapeResourceDescriptor;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _ResourceReference2 = __webpack_require__(309);

	var _ResourceReference3 = _interopRequireDefault(_ResourceReference2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// all logic handled within ExtrudeGeometryDescriptor
	// TODO implement here instead
	var ShapeResourceReference = function (_ResourceReference) {
	  _inherits(ShapeResourceReference, _ResourceReference);

	  function ShapeResourceReference() {
	    _classCallCheck(this, ShapeResourceReference);

	    return _possibleConstructorReturn(this, (ShapeResourceReference.__proto__ || Object.getPrototypeOf(ShapeResourceReference)).apply(this, arguments));
	  }

	  return ShapeResourceReference;
	}(_ResourceReference3.default);

	module.exports = ShapeResourceReference;

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(GeometryDescriptor, _GeometryDescriptorBa);

	  function GeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, GeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (GeometryDescriptor.__proto__ || Object.getPrototypeOf(GeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('vertices', {
	      override: true,
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector3)).isRequired,
	      update: function update(threeObject, vertices) {
	        if (threeObject.vertices !== vertices) {
	          threeObject.vertices = vertices;

	          threeObject.verticesNeedUpdate = true;
	        }
	      },

	      updateInitial: true,
	      default: []
	    });
	    return _this;
	  }

	  _createClass(GeometryDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new THREE.Geometry();
	    }
	  }]);

	  return GeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = GeometryDescriptor;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _class;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _resource = __webpack_require__(330);

	var _resource2 = _interopRequireDefault(_resource);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GeometryDescriptorBase = (0, _resource2.default)(_class = function (_THREEElementDescript) {
	  _inherits(GeometryDescriptorBase, _THREEElementDescript);

	  function GeometryDescriptorBase(react3RendererInstance) {
	    _classCallCheck(this, GeometryDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (GeometryDescriptorBase.__proto__ || Object.getPrototypeOf(GeometryDescriptorBase)).call(this, react3RendererInstance));

	    _this.hasName();

	    _this.hasProp('vertices', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector3)),
	      update: function update(threeObject, vertices, hasProp) {
	        if (hasProp) {
	          if (threeObject.vertices !== vertices) {
	            threeObject.vertices = vertices;

	            threeObject.verticesNeedUpdate = true;
	          }
	        }
	      },

	      updateInitial: true,
	      default: []
	    });

	    _this.hasProp('colors', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Color)),
	      update: function update(threeObject, colors, hasProp) {
	        if (hasProp) {
	          if (threeObject.colors !== colors) {
	            threeObject.colors = colors;

	            threeObject.colorsNeedUpdate = true;
	          }
	        }
	      },

	      updateInitial: true,
	      default: []
	    });

	    _this.hasProp('faceVertexUvs', {
	      type: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector2)))), // [materialIndex][faceIndex][vertexIndex]
	      update: function update(threeObject, faceVertexUvs, hasProp) {
	        if (hasProp) {
	          if (threeObject.faceVertexUvs !== faceVertexUvs) {
	            threeObject.faceVertexUvs = faceVertexUvs;

	            threeObject.uvsNeedUpdate = true;
	          }
	        }
	      },

	      updateInitial: true,
	      default: []
	    });

	    _this.hasProp('faces', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Face3)),
	      update: function update(threeObject, faces, hasProp) {
	        if (hasProp) {
	          if (threeObject.faces !== faces) {
	            threeObject.faces = faces;

	            threeObject.verticesNeedUpdate = true;
	            threeObject.elementsNeedUpdate = true;
	          }
	        }
	      },

	      updateInitial: true,
	      default: []
	    });

	    _this.hasProp('dynamic', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, dynamic) {
	        threeObject.dynamic = !!dynamic;
	      },

	      default: false
	    });
	    return _this;
	  }

	  _createClass(GeometryDescriptorBase, [{
	    key: 'setParent',
	    value: function setParent(geometry, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Mesh || parentObject3D instanceof THREE.Points || parentObject3D instanceof THREE.Line, 'Parent is not a mesh');
	      (0, _invariant2.default)(parentObject3D.geometry === undefined, 'Parent already has a geometry');

	      _get(GeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(GeometryDescriptorBase.prototype), 'setParent', this).call(this, geometry, parentObject3D);

	      parentObject3D.geometry = geometry;
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      // ensure the userData is created
	      threeObject.userData = _extends({}, threeObject.userData);

	      if (props.hasOwnProperty('dynamic')) {
	        threeObject.dynamic = !!props.dynamic;
	      }

	      threeObject.userData._remountAfterPropsUpdate = false;

	      _get(GeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(GeometryDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(geometry) {
	      var parent = geometry.userData.markup.parentMarkup.threeObject;

	      // could either be a resource description or an actual geometry
	      if (parent instanceof THREE.Mesh || parent instanceof THREE.Points) {
	        if (parent.geometry === geometry) {
	          parent.geometry = undefined;
	        }
	      }

	      geometry.dispose();

	      _get(GeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(GeometryDescriptorBase.prototype), 'unmount', this).call(this, geometry);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var ownerMesh = threeObject.userData.markup.parentMarkup.threeObject;
	      threeObject.userData.events.emit('highlight', {
	        uuid: threeObject.uuid,
	        boundingBoxFunc: function boundingBoxFunc() {
	          var boundingBox = new THREE.Box3();

	          boundingBox.setFromObject(ownerMesh);

	          return [boundingBox];
	        }
	      });
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var ownerMesh = threeObject.userData.markup.parentMarkup.threeObject;

	      var boundingBox = new THREE.Box3();

	      boundingBox.setFromObject(ownerMesh);

	      return [boundingBox];
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      threeObject.userData.events.emit('hideHighlight');
	    }
	  }]);

	  return GeometryDescriptorBase;
	}(_THREEElementDescriptor2.default)) || _class;

	module.exports = GeometryDescriptorBase;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ResourceContainer = __webpack_require__(294);

	var _ResourceContainer2 = _interopRequireDefault(_ResourceContainer);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Resource decorator.
	 * Allows descriptors to be slotted into the <resources/> component.
	 *
	 * @param descriptor The descriptor to be patched
	 * @returns {ResourceDescriptor} the modified descriptor class
	 */
	function resource(descriptor) {
	  var _class, _temp;

	  var ResourceDescriptor = (_temp = _class = function (_descriptor) {
	    _inherits(ResourceDescriptor, _descriptor);

	    function ResourceDescriptor(react3RendererInstance) {
	      _classCallCheck(this, ResourceDescriptor);

	      var _this = _possibleConstructorReturn(this, (ResourceDescriptor.__proto__ || Object.getPrototypeOf(ResourceDescriptor)).call(this, react3RendererInstance));

	      _this.isResource = true;


	      _this.hasProp('resourceId', {
	        type: _propTypes2.default.string,
	        updateInitial: true,
	        initialOnly: true,
	        update: function update(threeObject, resourceId, hasProp) {
	          if (hasProp) {
	            threeObject.userData._resourceId = resourceId;

	            if (!threeObject.userData._hasReferences) {
	              threeObject.userData._hasReferences = true;
	              threeObject.userData._references = [];
	            }
	          }
	        },
	        default: ''
	      });
	      return _this;
	    }

	    // used for docs


	    _createClass(ResourceDescriptor, [{
	      key: 'applyInitialProps',
	      value: function applyInitialProps(threeObject, props) {
	        _get(ResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	      }
	    }, {
	      key: 'setParent',
	      value: function setParent(threeObject, parentObject3D) {
	        if (parentObject3D instanceof _ResourceContainer2.default) {
	          if (process.env.NODE_ENV !== 'production') {
	            (0, _invariant2.default)(!!threeObject.userData._resourceId, 'All resources inside <resources> should have the "resourceId" property. ' + ('Current resource: <' + threeObject.userData.react3internalComponent._elementType + '>'));
	          } else {
	            (0, _invariant2.default)(!!threeObject.userData._resourceId);
	          }

	          // still let it be mounted to root
	          _THREEElementDescriptor2.default.prototype.setParent.call(this, threeObject, parentObject3D);
	        } else {
	          if (process.env.NODE_ENV !== 'production') {
	            (0, _warning2.default)(!threeObject.userData._resourceId, 'Found <' + threeObject.userData.react3internalComponent._elementType + '> ' + 'with a resourceId property, ' + 'but it was not placed within a <resources/> element.');
	          }
	          _get(ResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	        }
	      }
	    }, {
	      key: 'highlight',
	      value: function highlight(threeObject) {
	        var result = void 0;

	        if (threeObject.userData._resourceId) {
	          // it's a resource. Let's highlight all references.
	          threeObject.userData.events.emit('highlight', {
	            uuid: threeObject.uuid,
	            boundingBoxFunc: function boundingBoxFunc() {
	              return threeObject.userData._references.reduce(function (boxes, objectWithReference) {
	                var boxesForReference = objectWithReference.userData._descriptor.getBoundingBoxes(objectWithReference);
	                if (process.env.NODE_ENV !== 'production') {
	                  (0, _invariant2.default)(boxesForReference.length > 0, 'No boxes found for resource.');
	                } else {
	                  (0, _invariant2.default)(boxesForReference.length > 0);
	                }
	                return boxes.concat(boxesForReference);
	              }, []);
	            }
	          });
	        } else {
	          result = _get(ResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptor.prototype), 'highlight', this).call(this, threeObject);
	        }

	        return result;
	      }
	    }, {
	      key: 'hideHighlight',
	      value: function hideHighlight(threeObject) {
	        var result = void 0;

	        if (threeObject.userData._resourceId) {
	          threeObject.userData.events.emit('hideHighlight');
	        } else {
	          result = _get(ResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptor.prototype), 'hideHighlight', this).call(this, threeObject);
	        }

	        return result;
	      }
	    }]);

	    return ResourceDescriptor;
	  }(descriptor), _class.displayName = '' + (descriptor.displayName || descriptor.name), _temp);


	  return ResourceDescriptor;
	}

	module.exports = resource;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BufferGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(BufferGeometryDescriptor, _GeometryDescriptorBa);

	  function BufferGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, BufferGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (BufferGeometryDescriptor.__proto__ || Object.getPrototypeOf(BufferGeometryDescriptor)).call(this, react3RendererInstance));

	    ['vertices', 'colors', 'faceVertexUvs', 'faces', 'dynamic'].forEach(function (propName) {
	      _this.removeProp(propName);
	    });

	    ['position', 'normal', 'color', 'uv'].forEach(function (attributeName) {
	      _this.hasProp(attributeName, {
	        type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.BufferAttribute), (0, _propTypeInstanceOf2.default)(THREE.InterleavedBufferAttribute)]),
	        update: function update(threeObject, attributeValue) {
	          if (attributeValue) {
	            threeObject.addAttribute(attributeName, attributeValue);
	          } else {
	            threeObject.removeAttribute(attributeName);
	          }
	        },

	        updateInitial: true,
	        default: undefined
	      });
	    });

	    _this.hasProp('index', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.BufferAttribute), (0, _propTypeInstanceOf2.default)(THREE.InterleavedBufferAttribute)]),
	      update: function update(threeObject, attributeValue) {
	        threeObject.setIndex(attributeValue);
	      },

	      updateInitial: true,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(BufferGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new THREE.BufferGeometry();
	    }
	  }]);

	  return BufferGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = BufferGeometryDescriptor;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BoxGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(BoxGeometryDescriptor, _GeometryDescriptorBa);

	  function BoxGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, BoxGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (BoxGeometryDescriptor.__proto__ || Object.getPrototypeOf(BoxGeometryDescriptor)).call(this, react3RendererInstance));

	    ['width', 'height', 'depth'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 1
	      });
	    });

	    ['widthSegments', 'heightSegments', 'depthSegments'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: 1
	      });
	    });
	    return _this;
	  }

	  _createClass(BoxGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var width = props.width,
	          height = props.height,
	          depth = props.depth,
	          widthSegments = props.widthSegments,
	          heightSegments = props.heightSegments,
	          depthSegments = props.depthSegments;


	      return new THREE.BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments);
	    }
	  }]);

	  return BoxGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = BoxGeometryDescriptor;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _BufferGeometryDescriptorBase = __webpack_require__(334);

	var _BufferGeometryDescriptorBase2 = _interopRequireDefault(_BufferGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SphereGeometryDescriptor = function (_BufferGeometryDescri) {
	  _inherits(SphereGeometryDescriptor, _BufferGeometryDescri);

	  function SphereGeometryDescriptor(react3Instance) {
	    _classCallCheck(this, SphereGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (SphereGeometryDescriptor.__proto__ || Object.getPrototypeOf(SphereGeometryDescriptor)).call(this, react3Instance));

	    _this.hasProp('radius', {
	      type: _propTypes2.default.number,
	      update: _this.updateCacheAndReplace.bind(_this, 'radius'),
	      default: undefined
	    });

	    ['widthSegments', 'heightSegments'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });

	    ['phiStart', 'phiLength', 'thetaStart', 'thetaLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.updateCacheAndReplace.bind(_this, propName),
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(SphereGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          widthSegments = props.widthSegments,
	          heightSegments = props.heightSegments,
	          phiStart = props.phiStart,
	          phiLength = props.phiLength,
	          thetaStart = props.thetaStart,
	          thetaLength = props.thetaLength;


	      return new THREE.SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
	    }
	  }]);

	  return SphereGeometryDescriptor;
	}(_BufferGeometryDescriptorBase2.default);

	module.exports = SphereGeometryDescriptor;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BufferGeometryDescriptorBase = function (_GeometryDescriptorBa) {
	  _inherits(BufferGeometryDescriptorBase, _GeometryDescriptorBa);

	  function BufferGeometryDescriptorBase() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, BufferGeometryDescriptorBase);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BufferGeometryDescriptorBase.__proto__ || Object.getPrototypeOf(BufferGeometryDescriptorBase)).call.apply(_ref, [this].concat(args))), _this), _this.updateCacheAndReplace = function (propName, threeObject, newValue) {
	      threeObject.userData._propsCache[propName] = newValue;
	      threeObject.userData._wantPropertyOverwrite = true;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(BufferGeometryDescriptorBase, [{
	    key: 'beginPropertyUpdates',
	    value: function beginPropertyUpdates(threeObject) {
	      _get(BufferGeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(BufferGeometryDescriptorBase.prototype), 'beginPropertyUpdates', this).call(this, threeObject);

	      threeObject.userData._wantPropertyOverwrite = false;
	    }
	  }, {
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      _get(BufferGeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(BufferGeometryDescriptorBase.prototype), 'completePropertyUpdates', this).call(this, threeObject);

	      if (threeObject.userData._wantPropertyOverwrite) {
	        threeObject.userData._wantPropertyOverwrite = false;

	        threeObject.copy(this.construct(threeObject.userData._propsCache));
	      }
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(BufferGeometryDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(BufferGeometryDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._propsCache = _extends({}, props);
	    }
	  }]);

	  return BufferGeometryDescriptorBase;
	}(_GeometryDescriptorBase2.default);

	module.exports = BufferGeometryDescriptorBase;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ParametricGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(ParametricGeometryDescriptor, _GeometryDescriptorBa);

	  function ParametricGeometryDescriptor(react3Instance) {
	    _classCallCheck(this, ParametricGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (ParametricGeometryDescriptor.__proto__ || Object.getPrototypeOf(ParametricGeometryDescriptor)).call(this, react3Instance));

	    ['slices', 'stacks'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });

	    _this.hasProp('parametricFunction', {
	      type: _propTypes2.default.func.isRequired,
	      update: _this.triggerRemount,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(ParametricGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var parametricFunction = props.parametricFunction,
	          slices = props.slices,
	          stacks = props.stacks;


	      return new THREE.ParametricGeometry(parametricFunction, slices, stacks);
	    }
	  }]);

	  return ParametricGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = ParametricGeometryDescriptor;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _BufferGeometryDescriptorBase = __webpack_require__(334);

	var _BufferGeometryDescriptorBase2 = _interopRequireDefault(_BufferGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PlaneBufferGeometryDescriptor = function (_BufferGeometryDescri) {
	  _inherits(PlaneBufferGeometryDescriptor, _BufferGeometryDescri);

	  function PlaneBufferGeometryDescriptor(react3Instance) {
	    _classCallCheck(this, PlaneBufferGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (PlaneBufferGeometryDescriptor.__proto__ || Object.getPrototypeOf(PlaneBufferGeometryDescriptor)).call(this, react3Instance));

	    ['width', 'height'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.updateCacheAndReplace.bind(_this, propName),
	        default: 1
	      });
	    });

	    ['widthSegments', 'heightSegments'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: 1
	      });
	    });
	    return _this;
	  }

	  _createClass(PlaneBufferGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var width = props.width,
	          height = props.height,
	          widthSegments = props.widthSegments,
	          heightSegments = props.heightSegments;


	      return new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments);
	    }
	  }]);

	  return PlaneBufferGeometryDescriptor;
	}(_BufferGeometryDescriptorBase2.default);

	module.exports = PlaneBufferGeometryDescriptor;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PlaneGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(PlaneGeometryDescriptor, _GeometryDescriptorBa);

	  function PlaneGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, PlaneGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (PlaneGeometryDescriptor.__proto__ || Object.getPrototypeOf(PlaneGeometryDescriptor)).call(this, react3RendererInstance));

	    ['width', 'height'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });

	    ['widthSegments', 'heightSegments'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: 1
	      });
	    });
	    return _this;
	  }

	  _createClass(PlaneGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var width = props.width,
	          height = props.height,
	          widthSegments = props.widthSegments,
	          heightSegments = props.heightSegments;


	      return new THREE.PlaneGeometry(width, height, widthSegments, heightSegments);
	    }
	  }]);

	  return PlaneGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = PlaneGeometryDescriptor;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _PolyhedronGeometryDescriptorBase = __webpack_require__(339);

	var _PolyhedronGeometryDescriptorBase2 = _interopRequireDefault(_PolyhedronGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PolyhedronGeometryDescriptor = function (_PolyhedronGeometryDe) {
	  _inherits(PolyhedronGeometryDescriptor, _PolyhedronGeometryDe);

	  function PolyhedronGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, PolyhedronGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (PolyhedronGeometryDescriptor.__proto__ || Object.getPrototypeOf(PolyhedronGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('vertices', {
	      override: true,
	      type: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
	      update: _this.triggerRemount,
	      default: undefined
	    });

	    _this.hasProp('indices', {
	      type: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
	      update: _this.triggerRemount,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(PolyhedronGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var vertices = props.vertices,
	          indices = props.indices,
	          radius = props.radius,
	          detail = props.detail;


	      return new THREE.PolyhedronGeometry(vertices, indices, radius, detail);
	    }
	  }]);

	  return PolyhedronGeometryDescriptor;
	}(_PolyhedronGeometryDescriptorBase2.default);

	module.exports = PolyhedronGeometryDescriptor;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PolyhedronGeometryDescriptorBase = function (_GeometryDescriptorBa) {
	  _inherits(PolyhedronGeometryDescriptorBase, _GeometryDescriptorBa);

	  function PolyhedronGeometryDescriptorBase(react3RendererInstance) {
	    _classCallCheck(this, PolyhedronGeometryDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (PolyhedronGeometryDescriptorBase.__proto__ || Object.getPrototypeOf(PolyhedronGeometryDescriptorBase)).call(this, react3RendererInstance));

	    ['radius', 'detail'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  return PolyhedronGeometryDescriptorBase;
	}(_GeometryDescriptorBase2.default);

	module.exports = PolyhedronGeometryDescriptorBase;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _PolyhedronGeometryDescriptorBase = __webpack_require__(339);

	var _PolyhedronGeometryDescriptorBase2 = _interopRequireDefault(_PolyhedronGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var IcosahedronGeometryDescriptor = function (_PolyhedronGeometryDe) {
	  _inherits(IcosahedronGeometryDescriptor, _PolyhedronGeometryDe);

	  function IcosahedronGeometryDescriptor() {
	    _classCallCheck(this, IcosahedronGeometryDescriptor);

	    return _possibleConstructorReturn(this, (IcosahedronGeometryDescriptor.__proto__ || Object.getPrototypeOf(IcosahedronGeometryDescriptor)).apply(this, arguments));
	  }

	  _createClass(IcosahedronGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          detail = props.detail;


	      return new THREE.IcosahedronGeometry(radius, detail);
	    }
	  }]);

	  return IcosahedronGeometryDescriptor;
	}(_PolyhedronGeometryDescriptorBase2.default);

	module.exports = IcosahedronGeometryDescriptor;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _PolyhedronGeometryDescriptorBase = __webpack_require__(339);

	var _PolyhedronGeometryDescriptorBase2 = _interopRequireDefault(_PolyhedronGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OctahedronGeometryDescriptor = function (_PolyhedronGeometryDe) {
	  _inherits(OctahedronGeometryDescriptor, _PolyhedronGeometryDe);

	  function OctahedronGeometryDescriptor() {
	    _classCallCheck(this, OctahedronGeometryDescriptor);

	    return _possibleConstructorReturn(this, (OctahedronGeometryDescriptor.__proto__ || Object.getPrototypeOf(OctahedronGeometryDescriptor)).apply(this, arguments));
	  }

	  _createClass(OctahedronGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          detail = props.detail;


	      return new THREE.OctahedronGeometry(radius, detail);
	    }
	  }]);

	  return OctahedronGeometryDescriptor;
	}(_PolyhedronGeometryDescriptorBase2.default);

	module.exports = OctahedronGeometryDescriptor;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _PolyhedronGeometryDescriptorBase = __webpack_require__(339);

	var _PolyhedronGeometryDescriptorBase2 = _interopRequireDefault(_PolyhedronGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TetrahedronGeometryDescriptor = function (_PolyhedronGeometryDe) {
	  _inherits(TetrahedronGeometryDescriptor, _PolyhedronGeometryDe);

	  function TetrahedronGeometryDescriptor() {
	    _classCallCheck(this, TetrahedronGeometryDescriptor);

	    return _possibleConstructorReturn(this, (TetrahedronGeometryDescriptor.__proto__ || Object.getPrototypeOf(TetrahedronGeometryDescriptor)).apply(this, arguments));
	  }

	  _createClass(TetrahedronGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          detail = props.detail;


	      return new THREE.TetrahedronGeometry(radius, detail);
	    }
	  }]);

	  return TetrahedronGeometryDescriptor;
	}(_PolyhedronGeometryDescriptorBase2.default);

	module.exports = TetrahedronGeometryDescriptor;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CircleGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(CircleGeometryDescriptor, _GeometryDescriptorBa);

	  function CircleGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, CircleGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (CircleGeometryDescriptor.__proto__ || Object.getPrototypeOf(CircleGeometryDescriptor)).call(this, react3RendererInstance));

	    ['radius', 'segments', 'thetaStart', 'thetaLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(CircleGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          segments = props.segments,
	          thetaStart = props.thetaStart,
	          thetaLength = props.thetaLength;


	      return new THREE.CircleGeometry(radius, segments, thetaStart, thetaLength);
	    }
	  }]);

	  return CircleGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = CircleGeometryDescriptor;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _BufferGeometryDescriptorBase = __webpack_require__(334);

	var _BufferGeometryDescriptorBase2 = _interopRequireDefault(_BufferGeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CircleBufferGeometryDescriptor = function (_BufferGeometryDescri) {
	  _inherits(CircleBufferGeometryDescriptor, _BufferGeometryDescri);

	  function CircleBufferGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, CircleBufferGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (CircleBufferGeometryDescriptor.__proto__ || Object.getPrototypeOf(CircleBufferGeometryDescriptor)).call(this, react3RendererInstance));

	    ['radius', 'segments', 'thetaStart', 'thetaLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.updateCacheAndReplace.bind(_this, propName),
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(CircleBufferGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          segments = props.segments,
	          thetaStart = props.thetaStart,
	          thetaLength = props.thetaLength;


	      return new THREE.CircleBufferGeometry(radius, segments, thetaStart, thetaLength);
	    }
	  }]);

	  return CircleBufferGeometryDescriptor;
	}(_BufferGeometryDescriptorBase2.default);

	module.exports = CircleBufferGeometryDescriptor;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RingGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(RingGeometryDescriptor, _GeometryDescriptorBa);

	  function RingGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, RingGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (RingGeometryDescriptor.__proto__ || Object.getPrototypeOf(RingGeometryDescriptor)).call(this, react3RendererInstance));

	    ['innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(RingGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var innerRadius = props.innerRadius,
	          outerRadius = props.outerRadius,
	          thetaSegments = props.thetaSegments,
	          phiSegments = props.phiSegments,
	          thetaStart = props.thetaStart,
	          thetaLength = props.thetaLength;


	      return new THREE.RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
	    }
	  }]);

	  return RingGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = RingGeometryDescriptor;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CylinderGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(CylinderGeometryDescriptor, _GeometryDescriptorBa);

	  function CylinderGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, CylinderGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (CylinderGeometryDescriptor.__proto__ || Object.getPrototypeOf(CylinderGeometryDescriptor)).call(this, react3RendererInstance));

	    ['radiusTop', 'radiusBottom', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(CylinderGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radiusTop = props.radiusTop,
	          radiusBottom = props.radiusBottom,
	          height = props.height,
	          radialSegments = props.radialSegments,
	          heightSegments = props.heightSegments,
	          openEnded = props.openEnded,
	          thetaStart = props.thetaStart,
	          thetaLength = props.thetaLength;


	      return new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
	    }
	  }]);

	  return CylinderGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = CylinderGeometryDescriptor;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LatheGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(LatheGeometryDescriptor, _GeometryDescriptorBa);

	  function LatheGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, LatheGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (LatheGeometryDescriptor.__proto__ || Object.getPrototypeOf(LatheGeometryDescriptor)).call(this, react3RendererInstance));

	    ['segments', 'phiStart', 'phiLength'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });

	    _this.hasProp('points', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector2)).isRequired,
	      update: _this.triggerRemount,
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(LatheGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var points = props.points,
	          segments = props.segments,
	          phiStart = props.phiStart,
	          phiLength = props.phiLength;


	      return new THREE.LatheGeometry(points, segments, phiStart, phiLength);
	    }
	  }]);

	  return LatheGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = LatheGeometryDescriptor;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TorusGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(TorusGeometryDescriptor, _GeometryDescriptorBa);

	  function TorusGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, TorusGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (TorusGeometryDescriptor.__proto__ || Object.getPrototypeOf(TorusGeometryDescriptor)).call(this, react3RendererInstance));

	    ['radius', 'tube', 'radialSegments', 'tubularSegments', 'arc'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(TorusGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          tube = props.tube,
	          radialSegments = props.radialSegments,
	          tubularSegments = props.tubularSegments,
	          arc = props.arc;


	      return new THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc);
	    }
	  }]);

	  return TorusGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = TorusGeometryDescriptor;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TorusKnotGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(TorusKnotGeometryDescriptor, _GeometryDescriptorBa);

	  function TorusKnotGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, TorusKnotGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (TorusKnotGeometryDescriptor.__proto__ || Object.getPrototypeOf(TorusKnotGeometryDescriptor)).call(this, react3RendererInstance));

	    var defaultValues = [100, // 'radius',
	    40, // 'tube',
	    64, // 'tubularSegments',
	    8, // 'radialSegments',
	    2, // 'p',
	    3, // 'q',
	    undefined];

	    ['radius', 'tube', 'tubularSegments', 'radialSegments', 'p', 'q', 'heightScale'].forEach(function (propName, i) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: _this.triggerRemount,
	        default: defaultValues[i]
	      });
	    });
	    return _this;
	  }

	  _createClass(TorusKnotGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var radius = props.radius,
	          tube = props.tube,
	          tubularSegments = props.tubularSegments,
	          radialSegments = props.radialSegments,
	          p = props.p,
	          q = props.q,
	          heightScale = props.heightScale;


	      return new THREE.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale);
	    }
	  }]);

	  return TorusKnotGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = TorusKnotGeometryDescriptor;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryWithShapesDescriptor = __webpack_require__(351);

	var _GeometryWithShapesDescriptor2 = _interopRequireDefault(_GeometryWithShapesDescriptor);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ExtrudeGeometryDescriptor = function (_GeometryWithShapesDe) {
	  _inherits(ExtrudeGeometryDescriptor, _GeometryWithShapesDe);

	  function ExtrudeGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, ExtrudeGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (ExtrudeGeometryDescriptor.__proto__ || Object.getPrototypeOf(ExtrudeGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('settings', {
	      type: _propTypes2.default.any,
	      update: function update(threeObject, settings) {
	        threeObject.userData._settings = settings;
	      },

	      updateInitial: true,
	      default: undefined
	    });

	    _this.hasProp('UVGenerator', {
	      type: _propTypes2.default.shape({
	        generateTopUV: _propTypes2.default.func,
	        generateSideWallUV: _propTypes2.default.func
	      }),
	      update: function update(threeObject, value) {
	        if (value === undefined) {
	          delete threeObject.userData._options.UVGenerator;
	        } else {
	          threeObject.userData._options.UVGenerator = value;
	        }

	        threeObject.userData._needsToRefreshGeometry = true;
	      },
	      default: undefined
	    });

	    ['steps', 'amount', 'bevelThickness', 'bevelSize', 'bevelSegments', 'extrudeMaterial'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, value) {
	          if (value === undefined) {
	            delete threeObject.userData._options[propName];
	          } else {
	            threeObject.userData._options[propName] = value;
	          }

	          threeObject.userData._needsToRefreshGeometry = true;
	        },
	        default: undefined
	      });
	    });

	    var extraNames = ['bevelEnabled', 'extrudePath', 'frames'];

	    var extraTypes = [_propTypes2.default.bool, // bevelEnabled
	    (0, _propTypeInstanceOf2.default)(THREE.CurvePath), // extrudePath
	    _propTypes2.default.shape({
	      tangents: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector3)),
	      normals: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector3)),
	      binormals: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector3))
	    })];

	    extraNames.forEach(function (propName, i) {
	      _this.hasProp(propName, {
	        type: extraTypes[i],
	        update: function update(threeObject, value) {
	          if (value === undefined) {
	            delete threeObject.userData._options[propName];
	          } else {
	            threeObject.userData._options[propName] = value;
	          }

	          threeObject.userData._needsToRefreshGeometry = true;
	        },
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  // noinspection JSMethodCanBeStatic


	  _createClass(ExtrudeGeometryDescriptor, [{
	    key: 'refreshGeometry',
	    value: function refreshGeometry(threeObject) {
	      var shapes = threeObject.userData._shapeCache.filter(function (shape) {
	        return !!shape;
	      }).concat(threeObject.userData._shapesFromProps);

	      threeObject.fromGeometry(new THREE.ExtrudeGeometry(shapes, _extends({}, threeObject.userData._options, threeObject.userData._settings)));
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions(props) {
	      var options = _get(ExtrudeGeometryDescriptor.prototype.__proto__ || Object.getPrototypeOf(ExtrudeGeometryDescriptor.prototype), 'getOptions', this).call(this, props);

	      ['steps', 'amount', 'bevelEnabled', 'bevelThickness', 'bevelSize', 'bevelSegments', 'extrudePath', 'frames', 'extrudeMaterial'].forEach(function (propName) {
	        if (props.hasOwnProperty(propName)) {
	          options[propName] = props[propName];
	        }
	      });

	      return options;
	    }
	  }]);

	  return ExtrudeGeometryDescriptor;
	}(_GeometryWithShapesDescriptor2.default);

	module.exports = ExtrudeGeometryDescriptor;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	var _ShapeResourceReference = __webpack_require__(327);

	var _ShapeResourceReference2 = _interopRequireDefault(_ShapeResourceReference);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GeometryWithShapesDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(GeometryWithShapesDescriptor, _GeometryDescriptorBa);

	  function GeometryWithShapesDescriptor(react3RendererInstance) {
	    _classCallCheck(this, GeometryWithShapesDescriptor);

	    var _this = _possibleConstructorReturn(this, (GeometryWithShapesDescriptor.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor)).call(this, react3RendererInstance));

	    _this._invalidChild = function (child) {
	      return !(child instanceof THREE.Shape || child instanceof _ShapeResourceReference2.default);
	    };

	    _this.hasProp('shapes', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Shape)),
	      updateInitial: true,
	      update: function update(threeObject, shapes) {
	        threeObject.userData._shapesFromProps = shapes || [];

	        threeObject.userData._needsToRefreshGeometry = true;
	      },
	      default: []
	    });

	    var optionNames = ['curveSegments'];

	    var optionTypes = [_propTypes2.default.number, _propTypes2.default.number, _propTypes2.default.shape({
	      generateTopUV: _propTypes2.default.func,
	      generateSideWallUV: _propTypes2.default.func
	    })];

	    optionNames.forEach(function (propName, i) {
	      _this.hasProp(propName, {
	        type: optionTypes[i],
	        update: function update(threeObject, value) {
	          if (value === undefined) {
	            delete threeObject.userData._options[propName];
	          } else {
	            threeObject.userData._options[propName] = value;
	          }

	          threeObject.userData._needsToRefreshGeometry = true;
	        },
	        default: undefined
	      });
	    });
	    return _this;
	  }

	  _createClass(GeometryWithShapesDescriptor, [{
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      if (threeObject.userData._needsToRefreshGeometry) {
	        this.refreshGeometry(threeObject);

	        threeObject.userData._needsToRefreshGeometry = false;
	      }
	    }
	  }, {
	    key: 'construct',
	    value: function construct() {
	      return new THREE.BufferGeometry();
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions(props) {
	      var options = {};

	      ['curveSegments'].forEach(function (propName) {
	        if (props.hasOwnProperty(propName)) {
	          options[propName] = props[propName];
	        }
	      });

	      return options;
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(GeometryWithShapesDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      threeObject.userData._shapeCache = [];
	      threeObject.userData._options = this.getOptions(props);
	      threeObject.userData._resourceListenerCleanupFunctions = [];
	      threeObject.userData._needsToRefreshGeometry = false;

	      if (!props.children) {
	        // will use shapes only from props
	        this.refreshGeometry(threeObject);
	      }
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      var _this2 = this;

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'shape-based geometry children' + ' can only be shapes!');
	      } else {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, false);
	      }

	      var shapeCache = [];

	      children.forEach(function (child) {
	        if (child instanceof _ShapeResourceReference2.default) {
	          var shapeIndex = shapeCache.length;

	          var resourceListener = function resourceListener(shape) {
	            threeObject.userData._shapeCache[shapeIndex] = shape;

	            _this2.refreshGeometry(threeObject);
	          };

	          resourceListener.target = child;

	          var cleanupFunction = function cleanupFunction() {
	            child.userData.events.removeListener('resource.set', resourceListener);

	            threeObject.userData._resourceListenerCleanupFunctions.splice(threeObject.userData._resourceListenerCleanupFunctions.indexOf(cleanupFunction), 1);
	          };

	          threeObject.userData._resourceListenerCleanupFunctions.push(cleanupFunction);

	          child.userData.events.on('resource.set', resourceListener);
	          child.userData.events.once('dispose', function () {
	            cleanupFunction();
	          });

	          shapeCache.push(null);
	        } else {
	          shapeCache.push(child);
	        }
	      });

	      threeObject.userData._shapeCache = shapeCache;

	      this.refreshGeometry(threeObject);
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject) {
	      // new shape was added
	      // TODO optimize

	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild(threeObject) {
	      // a shape was moved
	      // TODO optimize

	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject) {
	      // shape was removed
	      // TODO optimize

	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(geometry) {
	      geometry.userData._resourceListenerCleanupFunctions.forEach(function (listener) {
	        listener();
	      });

	      delete geometry.userData._options;
	      delete geometry.userData._resourceListenerCleanupFunctions;
	      delete geometry.userData._shapesFromProps;

	      return _get(GeometryWithShapesDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor.prototype), 'unmount', this).call(this, geometry);
	    }
	  }]);

	  return GeometryWithShapesDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = GeometryWithShapesDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TubeGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(TubeGeometryDescriptor, _GeometryDescriptorBa);

	  function TubeGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, TubeGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (TubeGeometryDescriptor.__proto__ || Object.getPrototypeOf(TubeGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('path', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Curve).isRequired,
	      update: _this.triggerRemount
	    });

	    _this.hasProp('segments', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 64
	    });

	    _this.hasProp('radius', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 1
	    });

	    _this.hasProp('radiusSegments', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 8
	    });

	    _this.hasProp('closed', {
	      type: _propTypes2.default.bool,
	      update: _this.triggerRemount,
	      default: false
	    });
	    return _this;
	  }

	  _createClass(TubeGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      // props from https://threejs.org/docs/#api/geometries/TubeGeometry:
	      var path = props.path,
	          segments = props.segments,
	          radius = props.radius,
	          radiusSegments = props.radiusSegments,
	          closed = props.closed;


	      return new THREE.TubeGeometry(path, segments, radius, radiusSegments, closed);
	    }
	  }]);

	  return TubeGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = TubeGeometryDescriptor;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DodecahedronGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(DodecahedronGeometryDescriptor, _GeometryDescriptorBa);

	  function DodecahedronGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, DodecahedronGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (DodecahedronGeometryDescriptor.__proto__ || Object.getPrototypeOf(DodecahedronGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('radius', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 1
	    });

	    _this.hasProp('detail', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 0
	    });
	    return _this;
	  }

	  _createClass(DodecahedronGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      // props from https://threejs.org/docs/#api/geometries/DodecahedronGeometry:
	      var radius = props.radius,
	          detail = props.detail;


	      return new THREE.DodecahedronGeometry(radius, detail);
	    }
	  }]);

	  return DodecahedronGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = DodecahedronGeometryDescriptor;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _GeometryDescriptorBase = __webpack_require__(329);

	var _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextGeometryDescriptor = function (_GeometryDescriptorBa) {
	  _inherits(TextGeometryDescriptor, _GeometryDescriptorBa);

	  function TextGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, TextGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (TextGeometryDescriptor.__proto__ || Object.getPrototypeOf(TextGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('text', {
	      type: _propTypes2.default.string.isRequired,
	      update: _this.triggerRemount,
	      default: 'TEXT MISSING'
	    });

	    _this.hasProp('font', {
	      type: _propTypes2.default.instanceOf(THREE.Font).isRequired,
	      update: _this.triggerRemount
	    });

	    _this.hasProp('size', {
	      type: _propTypes2.default.number.isRequired,
	      update: _this.triggerRemount
	    });

	    _this.hasProp('height', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 50
	    });

	    _this.hasProp('curveSegments', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 12
	    });

	    _this.hasProp('bevelEnabled', {
	      type: _propTypes2.default.bool,
	      update: _this.triggerRemount,
	      default: false
	    });

	    _this.hasProp('bevelThickness', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 10
	    });

	    _this.hasProp('bevelSize', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 8
	    });
	    return _this;
	  }

	  _createClass(TextGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      // props from https://threejs.org/docs/#api/geometries/TextGeometry:
	      var text = props.text,
	          font = props.font,
	          size = props.size,
	          height = props.height,
	          curveSegments = props.curveSegments,
	          bevelEnabled = props.bevelEnabled,
	          bevelThickness = props.bevelThickness,
	          bevelSize = props.bevelSize;


	      return new THREE.TextGeometry(text, {
	        font: font,
	        size: size,
	        height: height,
	        curveSegments: curveSegments,
	        bevelEnabled: bevelEnabled,
	        bevelThickness: bevelThickness,
	        bevelSize: bevelSize
	      });
	    }
	  }]);

	  return TextGeometryDescriptor;
	}(_GeometryDescriptorBase2.default);

	module.exports = TextGeometryDescriptor;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _GeometryWithShapesDescriptor = __webpack_require__(351);

	var _GeometryWithShapesDescriptor2 = _interopRequireDefault(_GeometryWithShapesDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShapeGeometryDescriptor = function (_GeometryWithShapesDe) {
	  _inherits(ShapeGeometryDescriptor, _GeometryWithShapesDe);

	  function ShapeGeometryDescriptor() {
	    _classCallCheck(this, ShapeGeometryDescriptor);

	    return _possibleConstructorReturn(this, (ShapeGeometryDescriptor.__proto__ || Object.getPrototypeOf(ShapeGeometryDescriptor)).apply(this, arguments));
	  }

	  _createClass(ShapeGeometryDescriptor, [{
	    key: 'refreshGeometry',

	    // noinspection JSMethodCanBeStatic
	    value: function refreshGeometry(threeObject) {
	      var shapes = threeObject.userData._shapeCache.filter(function (shape) {
	        return !!shape;
	      }).concat(threeObject.userData._shapesFromProps);

	      if (threeObject.userData._options.hasOwnProperty('curveSegments')) {
	        threeObject.fromGeometry(new THREE.ShapeGeometry(shapes, threeObject.userData._options.curveSegments));
	      } else {
	        threeObject.fromGeometry(new THREE.ShapeGeometry(shapes));
	      }
	    }
	  }]);

	  return ShapeGeometryDescriptor;
	}(_GeometryWithShapesDescriptor2.default);

	module.exports = ShapeGeometryDescriptor;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _BufferGeometryDescriptorBase = __webpack_require__(334);

	var _BufferGeometryDescriptorBase2 = _interopRequireDefault(_BufferGeometryDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EdgesGeometryDescriptor = function (_BufferGeometryDescri) {
	  _inherits(EdgesGeometryDescriptor, _BufferGeometryDescri);

	  function EdgesGeometryDescriptor(react3RendererInstance) {
	    _classCallCheck(this, EdgesGeometryDescriptor);

	    var _this = _possibleConstructorReturn(this, (EdgesGeometryDescriptor.__proto__ || Object.getPrototypeOf(EdgesGeometryDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('thresholdAngle', {
	      type: _propTypes2.default.number,
	      update: _this.updateCacheAndReplace.bind(_this, 'thresholdAngle'),
	      default: undefined
	    });

	    _this.hasProp('geometry', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Geometry), (0, _propTypeInstanceOf2.default)(THREE.BufferGeometry)]).isRequired,
	      update: _this.updateCacheAndReplace.bind(_this, 'geometry'),
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(EdgesGeometryDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var geometry = props.geometry,
	          thresholdAngle = props.thresholdAngle;


	      return new THREE.EdgesGeometry(geometry, thresholdAngle);
	    }
	  }]);

	  return EdgesGeometryDescriptor;
	}(_BufferGeometryDescriptorBase2.default);

	module.exports = EdgesGeometryDescriptor;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _PathDescriptorBase2 = __webpack_require__(358);

	var _PathDescriptorBase3 = _interopRequireDefault(_PathDescriptorBase2);

	var _resource = __webpack_require__(330);

	var _resource2 = _interopRequireDefault(_resource);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShapeDescriptor = (0, _resource2.default)(_class = function (_PathDescriptorBase) {
	  _inherits(ShapeDescriptor, _PathDescriptorBase);

	  function ShapeDescriptor() {
	    _classCallCheck(this, ShapeDescriptor);

	    return _possibleConstructorReturn(this, (ShapeDescriptor.__proto__ || Object.getPrototypeOf(ShapeDescriptor)).apply(this, arguments));
	  }

	  _createClass(ShapeDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      if (props.hasOwnProperty('points')) {
	        return new THREE.Shape(props.points);
	      }

	      return new THREE.Shape();
	    }
	  }]);

	  return ShapeDescriptor;
	}(_PathDescriptorBase3.default)) || _class;

	module.exports = ShapeDescriptor;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _ShapeAction = __webpack_require__(359);

	var _ShapeAction2 = _interopRequireDefault(_ShapeAction);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PathDescriptorBase = function (_THREEElementDescript) {
	  _inherits(PathDescriptorBase, _THREEElementDescript);

	  function PathDescriptorBase(react3RendererInstance) {
	    _classCallCheck(this, PathDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (PathDescriptorBase.__proto__ || Object.getPrototypeOf(PathDescriptorBase)).call(this, react3RendererInstance));

	    _this._invalidChild = function (child) {
	      var invalid = !(child instanceof _ShapeAction2.default);

	      return invalid;
	    };

	    _this.hasProp('points', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector2)),
	      update: _this.triggerRemount,
	      default: []
	    });
	    return _this;
	  }

	  _createClass(PathDescriptorBase, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      threeObject.userData = _extends({}, threeObject.userData);

	      // paths don't have uuids
	      threeObject.uuid = THREE.Math.generateUUID();

	      return _get(PathDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(PathDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      var _this2 = this;

	      // TODO: create paths here

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'Shape children can only be shape actions!');
	      } else {
	        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, false);
	      }

	      // apply all actions in order
	      children.forEach(function (child) {
	        _this2.performChildAction(threeObject, child);
	      });
	    }
	  }, {
	    key: 'performChildAction',
	    value: function performChildAction(threeObject, child) {
	      child.performAction(threeObject);
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject) {
	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild(threeObject) {
	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(threeObject) {
	      this.triggerRemount(threeObject);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var parentObject = threeObject.userData.markup.parentMarkup.threeObject;

	      parentObject.userData._descriptor.highlight(parentObject);
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var parentObject = threeObject.userData.markup.parentMarkup.threeObject;

	      return parentObject.userData._descriptor.getBoundingBoxes(parentObject);
	    }
	  }]);

	  return PathDescriptorBase;
	}(_THREEElementDescriptor2.default);

	module.exports = PathDescriptorBase;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @abstract
	 */
	var ShapeAction = function () {
	  function ShapeAction() {
	    _classCallCheck(this, ShapeAction);

	    this.uuid = THREE.Math.generateUUID();

	    this.userData = {};
	  }

	  _createClass(ShapeAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {// eslint-disable-line no-unused-vars
	      // to be done by subclasses
	    }
	  }]);

	  return ShapeAction;
	}();

	module.exports = ShapeAction;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _MoveToAction = __webpack_require__(363);

	var _MoveToAction2 = _interopRequireDefault(_MoveToAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MoveToDescriptor = function (_ShapeActionDescripto) {
	  _inherits(MoveToDescriptor, _ShapeActionDescripto);

	  function MoveToDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MoveToDescriptor);

	    var _this = _possibleConstructorReturn(this, (MoveToDescriptor.__proto__ || Object.getPrototypeOf(MoveToDescriptor)).call(this, react3RendererInstance));

	    ['x', 'y'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });
	    return _this;
	  }

	  _createClass(MoveToDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new _MoveToAction2.default(props.x, props.y);
	    }
	  }]);

	  return MoveToDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = MoveToDescriptor;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _HoleAction = __webpack_require__(362);

	var _HoleAction2 = _interopRequireDefault(_HoleAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShapeActionDescriptorBase = function (_THREEElementDescript) {
	  _inherits(ShapeActionDescriptorBase, _THREEElementDescript);

	  function ShapeActionDescriptorBase() {
	    _classCallCheck(this, ShapeActionDescriptorBase);

	    return _possibleConstructorReturn(this, (ShapeActionDescriptorBase.__proto__ || Object.getPrototypeOf(ShapeActionDescriptorBase)).apply(this, arguments));
	  }

	  _createClass(ShapeActionDescriptorBase, [{
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Path || parentObject3D instanceof _HoleAction2.default, 'Shape action commands (%s) can only be added to shapes, paths or holes.', this.constructor.name);

	      _get(ShapeActionDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ShapeActionDescriptorBase.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var parentObject = threeObject.userData.markup.parentMarkup.threeObject;

	      parentObject.userData._descriptor.highlight(parentObject);
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var parentObject = threeObject.userData.markup.parentMarkup.threeObject;

	      return parentObject.userData._descriptor.getBoundingBoxes(parentObject);
	    }
	  }]);

	  return ShapeActionDescriptorBase;
	}(_THREEElementDescriptor2.default);

	module.exports = ShapeActionDescriptorBase;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HoleAction = function (_ShapeAction) {
	  _inherits(HoleAction, _ShapeAction);

	  function HoleAction() {
	    _classCallCheck(this, HoleAction);

	    var _this = _possibleConstructorReturn(this, (HoleAction.__proto__ || Object.getPrototypeOf(HoleAction)).call(this));

	    _this.path = new THREE.Path();
	    return _this;
	  }

	  _createClass(HoleAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.holes.push(this.path);
	    }
	  }]);

	  return HoleAction;
	}(_ShapeAction3.default);

	module.exports = HoleAction;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MoveToAction = function (_ShapeAction) {
	  _inherits(MoveToAction, _ShapeAction);

	  function MoveToAction(x, y) {
	    _classCallCheck(this, MoveToAction);

	    var _this = _possibleConstructorReturn(this, (MoveToAction.__proto__ || Object.getPrototypeOf(MoveToAction)).call(this));

	    _this.x = x;
	    _this.y = y;
	    return _this;
	  }

	  _createClass(MoveToAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.moveTo(this.x, this.y);
	    }
	  }]);

	  return MoveToAction;
	}(_ShapeAction3.default);

	module.exports = MoveToAction;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _LineToAction = __webpack_require__(365);

	var _LineToAction2 = _interopRequireDefault(_LineToAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineToDescriptor = function (_ShapeActionDescripto) {
	  _inherits(LineToDescriptor, _ShapeActionDescripto);

	  function LineToDescriptor(react3RendererInstance) {
	    _classCallCheck(this, LineToDescriptor);

	    var _this = _possibleConstructorReturn(this, (LineToDescriptor.__proto__ || Object.getPrototypeOf(LineToDescriptor)).call(this, react3RendererInstance));

	    ['x', 'y'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });
	    return _this;
	  }

	  _createClass(LineToDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new _LineToAction2.default(props.x, props.y);
	    }
	  }]);

	  return LineToDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = LineToDescriptor;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineToAction = function (_ShapeAction) {
	  _inherits(LineToAction, _ShapeAction);

	  function LineToAction(x, y) {
	    _classCallCheck(this, LineToAction);

	    var _this = _possibleConstructorReturn(this, (LineToAction.__proto__ || Object.getPrototypeOf(LineToAction)).call(this));

	    _this.x = x;
	    _this.y = y;
	    return _this;
	  }

	  _createClass(LineToAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.lineTo(this.x, this.y);
	    }
	  }]);

	  return LineToAction;
	}(_ShapeAction3.default);

	module.exports = LineToAction;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _BezierCurveToAction = __webpack_require__(367);

	var _BezierCurveToAction2 = _interopRequireDefault(_BezierCurveToAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BezierCurveToDescriptor = function (_ShapeActionDescripto) {
	  _inherits(BezierCurveToDescriptor, _ShapeActionDescripto);

	  function BezierCurveToDescriptor(react3RendererInstance) {
	    _classCallCheck(this, BezierCurveToDescriptor);

	    var _this = _possibleConstructorReturn(this, (BezierCurveToDescriptor.__proto__ || Object.getPrototypeOf(BezierCurveToDescriptor)).call(this, react3RendererInstance));

	    ['cp1X', 'cp1Y', 'cp2X', 'cp2Y', 'aX', 'aY'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });
	    return _this;
	  }

	  _createClass(BezierCurveToDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var cp1X = props.cp1X,
	          cp1Y = props.cp1Y,
	          cp2X = props.cp2X,
	          cp2Y = props.cp2Y,
	          aX = props.aX,
	          aY = props.aY;


	      return new _BezierCurveToAction2.default(cp1X, cp1Y, cp2X, cp2Y, aX, aY);
	    }
	  }]);

	  return BezierCurveToDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = BezierCurveToDescriptor;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BezierCurveToAction = function (_ShapeAction) {
	  _inherits(BezierCurveToAction, _ShapeAction);

	  function BezierCurveToAction(cp1X, cp1Y, cp2X, cp2Y, aX, aY) {
	    _classCallCheck(this, BezierCurveToAction);

	    var _this = _possibleConstructorReturn(this, (BezierCurveToAction.__proto__ || Object.getPrototypeOf(BezierCurveToAction)).call(this));

	    _this.cp1X = cp1X;
	    _this.cp1Y = cp1Y;
	    _this.cp2X = cp2X;
	    _this.cp2Y = cp2Y;
	    _this.aX = aX;
	    _this.aY = aY;
	    return _this;
	  }

	  _createClass(BezierCurveToAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.bezierCurveTo(this.cp1X, this.cp1Y, this.cp2X, this.cp2Y, this.aX, this.aY);
	    }
	  }]);

	  return BezierCurveToAction;
	}(_ShapeAction3.default);

	module.exports = BezierCurveToAction;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _QuadraticCurveToAction = __webpack_require__(369);

	var _QuadraticCurveToAction2 = _interopRequireDefault(_QuadraticCurveToAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var QuadraticCurveToDescriptor = function (_ShapeActionDescripto) {
	  _inherits(QuadraticCurveToDescriptor, _ShapeActionDescripto);

	  function QuadraticCurveToDescriptor(react3RendererInstance) {
	    _classCallCheck(this, QuadraticCurveToDescriptor);

	    var _this = _possibleConstructorReturn(this, (QuadraticCurveToDescriptor.__proto__ || Object.getPrototypeOf(QuadraticCurveToDescriptor)).call(this, react3RendererInstance));

	    ['cpX', 'cpY', 'x', 'y'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });
	    return _this;
	  }

	  _createClass(QuadraticCurveToDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var cpX = props.cpX,
	          cpY = props.cpY,
	          x = props.x,
	          y = props.y;


	      return new _QuadraticCurveToAction2.default(cpX, cpY, x, y);
	    }
	  }]);

	  return QuadraticCurveToDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = QuadraticCurveToDescriptor;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var QuadraticCurveToAction = function (_ShapeAction) {
	  _inherits(QuadraticCurveToAction, _ShapeAction);

	  function QuadraticCurveToAction(cpX, cpY, x, y) {
	    _classCallCheck(this, QuadraticCurveToAction);

	    var _this = _possibleConstructorReturn(this, (QuadraticCurveToAction.__proto__ || Object.getPrototypeOf(QuadraticCurveToAction)).call(this));

	    _this.cpX = cpX;
	    _this.cpY = cpY;
	    _this.x = x;
	    _this.y = y;
	    return _this;
	  }

	  _createClass(QuadraticCurveToAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.quadraticCurveTo(this.cpX, this.cpY, this.x, this.y);
	    }
	  }]);

	  return QuadraticCurveToAction;
	}(_ShapeAction3.default);

	module.exports = QuadraticCurveToAction;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _AbsArcAction = __webpack_require__(371);

	var _AbsArcAction2 = _interopRequireDefault(_AbsArcAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AbsArcDescriptor = function (_ShapeActionDescripto) {
	  _inherits(AbsArcDescriptor, _ShapeActionDescripto);

	  function AbsArcDescriptor(react3RendererInstance) {
	    _classCallCheck(this, AbsArcDescriptor);

	    var _this = _possibleConstructorReturn(this, (AbsArcDescriptor.__proto__ || Object.getPrototypeOf(AbsArcDescriptor)).call(this, react3RendererInstance));

	    ['x', 'y', 'radius', 'startAngle', 'endAngle'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });

	    _this.hasProp('clockwise', {
	      type: _propTypes2.default.bool.isRequired,
	      update: _this.triggerRemount,
	      default: false
	    });
	    return _this;
	  }

	  _createClass(AbsArcDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var x = props.x,
	          y = props.y,
	          radius = props.radius,
	          startAngle = props.startAngle,
	          endAngle = props.endAngle,
	          clockwise = props.clockwise;


	      return new _AbsArcAction2.default(x, y, radius, startAngle, endAngle, clockwise);
	    }
	  }]);

	  return AbsArcDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = AbsArcDescriptor;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AbsArcAction = function (_ShapeAction) {
	  _inherits(AbsArcAction, _ShapeAction);

	  function AbsArcAction(x, y, radius, startAngle, endAngle, clockwise) {
	    _classCallCheck(this, AbsArcAction);

	    var _this = _possibleConstructorReturn(this, (AbsArcAction.__proto__ || Object.getPrototypeOf(AbsArcAction)).call(this));

	    _this.x = x;
	    _this.y = y;
	    _this.radius = radius;
	    _this.startAngle = startAngle;
	    _this.endAngle = endAngle;
	    _this.clockwise = clockwise;
	    return _this;
	  }

	  _createClass(AbsArcAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.absarc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.clockwise);
	    }
	  }]);

	  return AbsArcAction;
	}(_ShapeAction3.default);

	module.exports = AbsArcAction;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _AbsEllipseAction = __webpack_require__(373);

	var _AbsEllipseAction2 = _interopRequireDefault(_AbsEllipseAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AbsEllipseDescriptor = function (_ShapeActionDescripto) {
	  _inherits(AbsEllipseDescriptor, _ShapeActionDescripto);

	  function AbsEllipseDescriptor(react3RendererInstance) {
	    _classCallCheck(this, AbsEllipseDescriptor);

	    var _this = _possibleConstructorReturn(this, (AbsEllipseDescriptor.__proto__ || Object.getPrototypeOf(AbsEllipseDescriptor)).call(this, react3RendererInstance));

	    ['x', 'y', 'xRadius', 'yRadius', 'startAngle', 'endAngle'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number.isRequired,
	        update: _this.triggerRemount,
	        default: 0
	      });
	    });

	    _this.hasProp('clockwise', {
	      type: _propTypes2.default.bool,
	      update: _this.triggerRemount,
	      default: false
	    });

	    _this.hasProp('rotation', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 0
	    });
	    return _this;
	  }

	  _createClass(AbsEllipseDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var x = props.x,
	          y = props.y,
	          xRadius = props.xRadius,
	          yRadius = props.yRadius,
	          startAngle = props.startAngle,
	          endAngle = props.endAngle,
	          clockwise = props.clockwise,
	          rotation = props.rotation;


	      return new _AbsEllipseAction2.default(x, y, xRadius, yRadius, startAngle, endAngle, clockwise, rotation);
	    }
	  }]);

	  return AbsEllipseDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = AbsEllipseDescriptor;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AbsEllipseAction = function (_ShapeAction) {
	  _inherits(AbsEllipseAction, _ShapeAction);

	  function AbsEllipseAction(x, y, xRadius, yRadius, startAngle, endAngle, clockwise, rotation) {
	    _classCallCheck(this, AbsEllipseAction);

	    var _this = _possibleConstructorReturn(this, (AbsEllipseAction.__proto__ || Object.getPrototypeOf(AbsEllipseAction)).call(this));

	    _this.x = x;
	    _this.y = y;
	    _this.xRadius = xRadius;
	    _this.yRadius = yRadius;
	    _this.startAngle = startAngle;
	    _this.endAngle = endAngle;
	    _this.clockwise = clockwise;
	    _this.rotation = rotation;
	    return _this;
	  }

	  _createClass(AbsEllipseAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.absellipse(this.x, this.y, this.xRadius, this.yRadius, this.startAngle, this.endAngle, this.clockwise, this.rotation);
	    }
	  }]);

	  return AbsEllipseAction;
	}(_ShapeAction3.default);

	module.exports = AbsEllipseAction;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathDescriptorBase2 = __webpack_require__(358);

	var _PathDescriptorBase3 = _interopRequireDefault(_PathDescriptorBase2);

	var _HoleAction = __webpack_require__(362);

	var _HoleAction2 = _interopRequireDefault(_HoleAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HoleDescriptor = function (_PathDescriptorBase) {
	  _inherits(HoleDescriptor, _PathDescriptorBase);

	  function HoleDescriptor() {
	    _classCallCheck(this, HoleDescriptor);

	    return _possibleConstructorReturn(this, (HoleDescriptor.__proto__ || Object.getPrototypeOf(HoleDescriptor)).apply(this, arguments));
	  }

	  _createClass(HoleDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new _HoleAction2.default();
	    }
	  }, {
	    key: 'performChildAction',
	    value: function performChildAction(threeObject, child) {
	      child.performAction(threeObject.path);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Shape, 'Holes can only be added to shapes.');

	      return _get(HoleDescriptor.prototype.__proto__ || Object.getPrototypeOf(HoleDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	    }
	  }]);

	  return HoleDescriptor;
	}(_PathDescriptorBase3.default);

	module.exports = HoleDescriptor;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _ShapeActionDescriptorBase = __webpack_require__(361);

	var _ShapeActionDescriptorBase2 = _interopRequireDefault(_ShapeActionDescriptorBase);

	var _SplineThruAction = __webpack_require__(376);

	var _SplineThruAction2 = _interopRequireDefault(_SplineThruAction);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SplineThruDescriptor = function (_ShapeActionDescripto) {
	  _inherits(SplineThruDescriptor, _ShapeActionDescripto);

	  function SplineThruDescriptor(react3RendererInstance) {
	    _classCallCheck(this, SplineThruDescriptor);

	    var _this = _possibleConstructorReturn(this, (SplineThruDescriptor.__proto__ || Object.getPrototypeOf(SplineThruDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('points', {
	      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Vector2)).isRequired,
	      update: _this.triggerRemount,
	      default: []
	    });
	    return _this;
	  }

	  _createClass(SplineThruDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      return new _SplineThruAction2.default(props.points);
	    }
	  }]);

	  return SplineThruDescriptor;
	}(_ShapeActionDescriptorBase2.default);

	module.exports = SplineThruDescriptor;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShapeAction2 = __webpack_require__(359);

	var _ShapeAction3 = _interopRequireDefault(_ShapeAction2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SplineThruAction = function (_ShapeAction) {
	  _inherits(SplineThruAction, _ShapeAction);

	  function SplineThruAction(points) {
	    _classCallCheck(this, SplineThruAction);

	    var _this = _possibleConstructorReturn(this, (SplineThruAction.__proto__ || Object.getPrototypeOf(SplineThruAction)).call(this));

	    _this.points = points;
	    return _this;
	  }

	  _createClass(SplineThruAction, [{
	    key: 'performAction',
	    value: function performAction(shape) {
	      shape.splineThru(this.points);
	    }
	  }]);

	  return SplineThruAction;
	}(_ShapeAction3.default);

	module.exports = SplineThruAction;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PointsMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(PointsMaterialDescriptor, _MaterialDescriptorBa);

	  function PointsMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, PointsMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (PointsMaterialDescriptor.__proto__ || Object.getPrototypeOf(PointsMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();

	    _this.hasProp('size', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 1
	    });

	    _this.hasProp('sizeAttenuation', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, sizeAttenuation, existsInProps) {
	        if (existsInProps) {
	          threeObject.sizeAttenuation = sizeAttenuation;
	        }
	        threeObject.needsUpdate = true;
	      },

	      updateInitial: true,
	      default: true
	    });

	    _this.hasProp('fog', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, fog, existsInProps) {
	        if (existsInProps) {
	          threeObject.fog = fog;
	        }
	        threeObject.needsUpdate = true;
	      },

	      updateInitial: true,
	      default: true
	    });

	    _this.hasMap();
	    return _this;
	  }

	  _createClass(PointsMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.PointsMaterial(materialDescription);
	    }
	  }]);

	  return PointsMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = PointsMaterialDescriptor;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _class;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _resource = __webpack_require__(330);

	var _resource2 = _interopRequireDefault(_resource);

	var _ResourceReference = __webpack_require__(309);

	var _ResourceReference2 = _interopRequireDefault(_ResourceReference);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MaterialDescriptorBase = (0, _resource2.default)(_class = function (_THREEElementDescript) {
	  _inherits(MaterialDescriptorBase, _THREEElementDescript);

	  function MaterialDescriptorBase(react3Instance) {
	    _classCallCheck(this, MaterialDescriptorBase);

	    var _this = _possibleConstructorReturn(this, (MaterialDescriptorBase.__proto__ || Object.getPrototypeOf(MaterialDescriptorBase)).call(this, react3Instance));

	    _this._invalidChild = function (child) {
	      return _this.invalidChildInternal(child);
	    };

	    _this.hasProp('slot', {
	      type: _propTypes2.default.string,
	      updateInitial: true,
	      update: function update(threeObject, slot, hasProperty) {
	        if (hasProperty) {
	          threeObject.userData._materialSlot = slot;
	        } else {
	          threeObject.userData._materialSlot = 'material';
	        }
	      },
	      default: 'material'
	    });

	    _this.hasProp('transparent', {
	      type: _propTypes2.default.bool,
	      simple: true
	    });

	    _this.hasProp('alphaTest', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, alphaTest) {
	        threeObject.alphaTest = alphaTest;
	        threeObject.needsUpdate = true;
	      },
	      default: 0
	    });

	    _this.hasProp('side', {
	      type: _propTypes2.default.oneOf([THREE.FrontSide, THREE.BackSide, THREE.DoubleSide]),
	      updateInitial: true,
	      update: function update(threeObject, side) {
	        threeObject.side = side;
	      },
	      default: THREE.FrontSide
	    });

	    _this.hasProp('depthTest', {
	      type: _propTypes2.default.bool,
	      simple: true,
	      default: true
	    });

	    _this.hasProp('depthWrite', {
	      type: _propTypes2.default.bool,
	      simple: true,
	      default: true
	    });

	    _this.hasProp('blending', {
	      type: _propTypes2.default.oneOf([THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending, THREE.CustomBlending]),
	      simple: true,
	      default: THREE.NormalBlending
	    });

	    _this.hasProp('depthFunc', {
	      type: _propTypes2.default.oneOf([THREE.NeverDepth, THREE.AlwaysDepth, THREE.LessDepth, THREE.LessEqualDepth, THREE.EqualDepth, THREE.GreaterEqualDepth, THREE.GreaterDepth, THREE.NotEqualDepth]),
	      simple: true,
	      default: THREE.LessEqualDepth
	    });

	    _this.hasProp('opacity', {
	      type: _propTypes2.default.number,
	      simple: true
	    });

	    _this.hasProp('visible', {
	      type: _propTypes2.default.bool,
	      simple: true,
	      default: true
	    });

	    _this.hasProp('vertexColors', {
	      type: _propTypes2.default.oneOf([THREE.NoColors, THREE.FaceColors, THREE.VertexColors]),
	      simple: true,
	      default: THREE.NoColors
	    });

	    _this._colors = [];
	    _this._supportedMaps = {};
	    return _this;
	  }

	  _createClass(MaterialDescriptorBase, [{
	    key: 'hasMap',
	    value: function hasMap() {
	      var mapPropertyName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'map';

	      this._supportedMaps[mapPropertyName] = true;

	      this.hasProp(mapPropertyName, {
	        type: (0, _propTypeInstanceOf2.default)(THREE.Texture),
	        update: function update(threeObject, value) {
	          threeObject.userData['_' + mapPropertyName + '}Property'] = value;

	          if (!threeObject.userData['_has' + mapPropertyName + '}TextureChild']) {
	            if (threeObject[mapPropertyName] !== value) {
	              threeObject.needsUpdate = true;
	            }
	            threeObject[mapPropertyName] = value;
	          } else {
	            var slotInfo = 'texture';

	            if (mapPropertyName !== 'map') {
	              slotInfo += 'with a \'' + mapPropertyName + '\' slot';
	            }

	            (0, _warning2.default)(value === null, 'The material already has a' + (' ' + slotInfo + ' assigned to it as a child;') + (' therefore the \'' + mapPropertyName + '\' property will have no effect'));
	          }
	        },

	        updateInitial: true,
	        default: null
	      });
	    }
	  }, {
	    key: 'getMaterialDescription',
	    value: function getMaterialDescription(props) {
	      var materialDescription = {};

	      this._colors.forEach(function (colorPropName) {
	        if (props.hasOwnProperty(colorPropName)) {
	          materialDescription[colorPropName] = props[colorPropName];
	        }
	      });

	      if (props.hasOwnProperty('side')) {
	        materialDescription.side = props.side;
	      }

	      return materialDescription;
	    }
	  }, {
	    key: 'hasColor',
	    value: function hasColor() {
	      var propName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'color';
	      var defaultVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffffff;

	      if (process.env.NODE_ENV !== 'production') {
	        (0, _invariant2.default)(this._colors.indexOf(propName) === -1, 'This color is already defined for %s.', this.constructor.name);
	      }

	      this._colors.push(propName);

	      this.hasProp(propName, {
	        type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	        update: function update(threeObject, value) {
	          threeObject[propName].set(value);
	        },
	        default: defaultVal
	      });
	    }
	  }, {
	    key: 'hasWireframe',
	    value: function hasWireframe() {
	      this.hasProp('wireframe', {
	        type: _propTypes2.default.bool,
	        simple: true,
	        default: false
	      });

	      this.hasProp('wireframeLinewidth', {
	        type: _propTypes2.default.number,
	        simple: true,
	        default: 1
	      });
	    }
	  }, {
	    key: 'construct',
	    value: function construct() {
	      return new THREE.Material({});
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      threeObject.userData = _extends({}, threeObject.userData, {
	        _hasTextureChild: false
	      });

	      _get(MaterialDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(MaterialDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(material, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Mesh || parentObject3D instanceof THREE.Points || parentObject3D instanceof THREE.Sprite || parentObject3D instanceof THREE.Line, 'Parent is not a mesh');
	      (0, _invariant2.default)(parentObject3D[material.userData._materialSlot] === undefined || parentObject3D[material.userData._materialSlot] === null, 'Parent already has a ' + material.userData._materialSlot + ' defined');
	      _get(MaterialDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(MaterialDescriptorBase.prototype), 'setParent', this).call(this, material, parentObject3D);

	      parentObject3D[material.userData._materialSlot] = material;
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(material) {
	      var parent = material.userData.markup.parentMarkup.threeObject;

	      // could either be a resource description or an actual material
	      if (parent instanceof THREE.Mesh || parent instanceof THREE.Sprite || parent instanceof THREE.Line || parent instanceof THREE.Points) {
	        var slot = material.userData._materialSlot;

	        if (parent[slot] === material) {
	          // TODO: set material slot to null rather than undefined

	          parent[slot] = undefined;
	        }
	      }

	      material.dispose();

	      _get(MaterialDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(MaterialDescriptorBase.prototype), 'unmount', this).call(this, material);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var ownerMesh = threeObject.userData.markup.parentMarkup.threeObject;

	      threeObject.userData.events.emit('highlight', {
	        uuid: threeObject.uuid,
	        boundingBoxFunc: function boundingBoxFunc() {
	          var boundingBox = new THREE.Box3();

	          if (ownerMesh && ownerMesh.geometry && ownerMesh.geometry.computeBoundingBox) {
	            ownerMesh.geometry.computeBoundingBox();
	          }

	          boundingBox.setFromObject(ownerMesh);

	          return [boundingBox];
	        }
	      });
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var boundingBox = new THREE.Box3();

	      var ownerMesh = threeObject.userData.markup.parentMarkup.threeObject;

	      if (ownerMesh && ownerMesh.geometry && ownerMesh.geometry.computeBoundingBox) {
	        ownerMesh.geometry.computeBoundingBox();
	      }

	      boundingBox.setFromObject(ownerMesh);

	      return [boundingBox];
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      threeObject.userData.events.emit('hideHighlight');
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'Material children can only be textures or texture resource references!');
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      this.addChildren(threeObject, [child]);
	    }
	  }, {
	    key: 'moveChild',
	    value: function moveChild() {
	      // doesn't matter
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild() {
	      // doesn't matter since the texture will take care of things on unmount
	    }
	  }, {
	    key: 'invalidChildInternal',
	    value: function invalidChildInternal(child) {
	      return !(child instanceof THREE.Texture || child instanceof _ResourceReference2.default);
	    }
	  }]);

	  return MaterialDescriptorBase;
	}(_THREEElementDescriptor2.default)) || _class;

	module.exports = MaterialDescriptorBase;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshBasicMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshBasicMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshBasicMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshBasicMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshBasicMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshBasicMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();
	    _this.hasWireframe();
	    _this.hasMap();
	    _this.hasMap('aoMap');
	    _this.hasMap('specularMap');
	    _this.hasMap('alphaMap');
	    _this.hasMap('envMap');
	    return _this;
	  }

	  _createClass(MeshBasicMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshBasicMaterial(materialDescription);
	    }
	  }]);

	  return MeshBasicMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshBasicMaterialDescriptor;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshPhongMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshPhongMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshPhongMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshPhongMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshPhongMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshPhongMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();
	    _this.hasColor('specular', 0x111111);
	    _this.hasColor('emissive', 0x000000);
	    _this.hasWireframe();

	    _this.hasProp('shininess', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 30
	    });

	    _this.hasProp('metal', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, metal) {
	        threeObject.metal = metal;
	        threeObject.needsUpdate = true;
	      },
	      default: false
	    });

	    ['lightMapIntensity', 'aoMapIntensity', 'emissiveIntensity', 'bumpScale', 'displacementScale', 'reflectivity'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 1
	      });
	    });

	    ['displacementBias'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 0
	      });
	    });

	    ['refractionRatio'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 0.98
	      });
	    });

	    _this.hasProp('normalScale', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector2),
	      update: function update(threeObject, normalScale) {
	        threeObject.normalScale.copy(normalScale);
	        threeObject.needsUpdate = true;
	      },

	      default: new THREE.Vector2(1, 1)
	    });

	    _this.hasProp('shading', {
	      type: _propTypes2.default.oneOf([THREE.FlatShading, THREE.SmoothShading]),
	      update: function update(threeObject, shading) {
	        threeObject.shading = shading;
	        threeObject.needsUpdate = true;
	      },

	      default: THREE.SmoothShading
	    });

	    ['skinning', 'morphTargets', 'morphNormals'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.bool,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: false
	      });
	    });

	    _this.hasMap();
	    _this.hasMap('lightMap');
	    _this.hasMap('aoMap');
	    _this.hasMap('emissiveMap');
	    _this.hasMap('bumpMap');
	    _this.hasMap('normalMap');
	    _this.hasMap('displacementMap');
	    _this.hasMap('specularMap');
	    _this.hasMap('alphaMap');
	    _this.hasMap('envMap');
	    return _this;
	  }

	  _createClass(MeshPhongMaterialDescriptor, [{
	    key: 'getMaterialDescription',
	    value: function getMaterialDescription(props) {
	      var materialDescription = _get(MeshPhongMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(MeshPhongMaterialDescriptor.prototype), 'getMaterialDescription', this).call(this, props);

	      ['shininess', 'lightMapIntensity', 'aoMapIntensity', 'emissiveIntensity', 'bumpScale', 'displacementScale', 'reflectivity', 'displacementBias', 'refractionRatio', 'normalScale', 'shading', 'skinning', 'morphTargets', 'morphNormals'].forEach(function (propName) {
	        if (props.hasOwnProperty(propName)) {
	          materialDescription[propName] = props[propName];
	        }
	      });

	      return materialDescription;
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshPhongMaterial(materialDescription);
	    }
	  }]);

	  return MeshPhongMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshPhongMaterialDescriptor;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshLambertMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshLambertMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshLambertMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshLambertMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshLambertMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshLambertMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();
	    _this.hasColor('emissive', 0);
	    _this.hasWireframe();
	    _this.hasMap();
	    _this.hasMap('lightMap');
	    _this.hasMap('aoMap');
	    _this.hasMap('emissiveMap');
	    _this.hasMap('specularMap');
	    _this.hasMap('alphaMap');
	    _this.hasMap('envMap');
	    return _this;
	  }

	  _createClass(MeshLambertMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshLambertMaterial(materialDescription);
	    }
	  }, {
	    key: 'getMaterialDescription',
	    value: function getMaterialDescription(props) {
	      var materialDescription = _get(MeshLambertMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(MeshLambertMaterialDescriptor.prototype), 'getMaterialDescription', this).call(this, props);

	      if (props.hasOwnProperty('shininess')) {
	        materialDescription.shininess = props.shininess;
	      }

	      if (props.hasOwnProperty('map')) {
	        materialDescription.map = props.map;
	      }

	      return materialDescription;
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(MeshLambertMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(MeshLambertMaterialDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      if (!props.hasOwnProperty('map')) {
	        threeObject.map = null;
	      }
	    }
	  }]);

	  return MeshLambertMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshLambertMaterialDescriptor;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshStandardMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshStandardMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshStandardMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshStandardMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshStandardMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshStandardMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();
	    _this.hasColor('emissive', 0x000000);
	    _this.hasWireframe();

	    ['roughness', 'metalness'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        simple: true,
	        default: 0.5
	      });
	    });

	    ['lightMapIntensity', 'aoMapIntensity', 'emissiveIntensity', 'bumpScale', 'displacementScale'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 1
	      });
	    });

	    ['displacementBias'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 0
	      });
	    });

	    ['refractionRatio'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: 0.98
	      });
	    });

	    _this.hasProp('normalScale', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector2),
	      update: function update(threeObject, normalScale) {
	        threeObject.normalScale.copy(normalScale);
	        threeObject.needsUpdate = true;
	      },

	      default: new THREE.Vector2(1, 1)
	    });

	    _this.hasProp('shading', {
	      type: _propTypes2.default.oneOf([THREE.FlatShading, THREE.SmoothShading]),
	      update: function update(threeObject, shading) {
	        threeObject.shading = shading;
	        threeObject.needsUpdate = true;
	      },

	      default: THREE.SmoothShading
	    });

	    ['skinning', 'morphTargets', 'morphNormals'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.bool,
	        update: function update(threeObject, propValue) {
	          threeObject[propName] = propValue;
	          threeObject.needsUpdate = true;
	        },

	        default: false
	      });
	    });

	    _this.hasMap();
	    _this.hasMap('lightMap');
	    _this.hasMap('aoMap');
	    _this.hasMap('emissiveMap');
	    _this.hasMap('bumpMap');
	    _this.hasMap('normalMap');
	    _this.hasMap('displacementMap');
	    _this.hasMap('roughnessMap');
	    _this.hasMap('metalnessMap');
	    _this.hasMap('alphaMap');
	    _this.hasMap('envMap');
	    return _this;
	  }

	  _createClass(MeshStandardMaterialDescriptor, [{
	    key: 'getMaterialDescription',
	    value: function getMaterialDescription(props) {
	      var materialDescription = _get(MeshStandardMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(MeshStandardMaterialDescriptor.prototype), 'getMaterialDescription', this).call(this, props);

	      ['roughness', 'metalness', 'lightMapIntensity', 'aoMapIntensity', 'emissiveIntensity', 'bumpScale', 'displacementScale', 'displacementBias', 'refractionRatio', 'normalScale', 'shading', 'skinning', 'morphTargets', 'morphNormals'].forEach(function (propName) {
	        if (props.hasOwnProperty(propName)) {
	          materialDescription[propName] = props[propName];
	        }
	      });

	      return materialDescription;
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshStandardMaterial(materialDescription);
	    }
	  }]);

	  return MeshStandardMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshStandardMaterialDescriptor;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	var _UniformContainer = __webpack_require__(384);

	var _UniformContainer2 = _interopRequireDefault(_UniformContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShaderMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(ShaderMaterialDescriptor, _MaterialDescriptorBa);

	  function ShaderMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, ShaderMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (ShaderMaterialDescriptor.__proto__ || Object.getPrototypeOf(ShaderMaterialDescriptor)).call(this, react3RendererInstance));

	    ['vertexShader', 'fragmentShader'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.string,
	        update: _this.triggerRemount
	      });
	    });

	    _this.hasProp('uniforms', {
	      type: _propTypes2.default.any,
	      simple: true,
	      default: undefined
	    });

	    _this.hasWireframe();
	    return _this;
	  }

	  _createClass(ShaderMaterialDescriptor, [{
	    key: 'getMaterialDescription',
	    value: function getMaterialDescription(props) {
	      var materialDescription = _get(ShaderMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShaderMaterialDescriptor.prototype), 'getMaterialDescription', this).call(this, props);

	      if (props.hasOwnProperty('uniforms')) {
	        materialDescription.uniforms = props.uniforms;
	      }

	      if (props.hasOwnProperty('vertexShader')) {
	        materialDescription.vertexShader = props.vertexShader;
	      }

	      if (props.hasOwnProperty('fragmentShader')) {
	        materialDescription.fragmentShader = props.fragmentShader;
	      }

	      return materialDescription;
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.ShaderMaterial(materialDescription);
	    }
	  }, {
	    key: 'invalidChildInternal',
	    value: function invalidChildInternal(child) {
	      return !(child instanceof _UniformContainer2.default || _get(ShaderMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShaderMaterialDescriptor.prototype), 'invalidChildInternal', this).call(this, child));
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ShaderMaterialDescriptor.prototype.__proto__ || Object.getPrototypeOf(ShaderMaterialDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      if (!props.hasOwnProperty('uniforms')) {
	        threeObject.uniforms = {};
	      }
	    }
	  }]);

	  return ShaderMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = ShaderMaterialDescriptor;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UniformContainer = function UniformContainer() {
	  _classCallCheck(this, UniformContainer);

	  this.userData = {};
	  this.uniforms = {};
	  this.uuid = THREE.Math.generateUUID();
	};

	module.exports = UniformContainer;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _ShaderMaterialDescriptor = __webpack_require__(383);

	var _ShaderMaterialDescriptor2 = _interopRequireDefault(_ShaderMaterialDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RawShaderMaterialDescriptor = function (_ShaderMaterialDescri) {
	  _inherits(RawShaderMaterialDescriptor, _ShaderMaterialDescri);

	  function RawShaderMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, RawShaderMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (RawShaderMaterialDescriptor.__proto__ || Object.getPrototypeOf(RawShaderMaterialDescriptor)).call(this, react3RendererInstance));

	    ['alphaTest'].forEach(function (propName) {
	      _this.removeProp(propName);
	    });
	    return _this;
	  }

	  _createClass(RawShaderMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.RawShaderMaterial(materialDescription);
	    }
	  }]);

	  return RawShaderMaterialDescriptor;
	}(_ShaderMaterialDescriptor2.default);

	module.exports = RawShaderMaterialDescriptor;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _class;

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(9);

	var _warning2 = _interopRequireDefault(_warning);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _resource = __webpack_require__(330);

	var _resource2 = _interopRequireDefault(_resource);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _Uniform = __webpack_require__(325);

	var _Uniform2 = _interopRequireDefault(_Uniform);

	var _React3Renderer = __webpack_require__(277);

	var _React3Renderer2 = _interopRequireDefault(_React3Renderer);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextureDescriptor = (0, _resource2.default)(_class = function (_THREEElementDescript) {
	  _inherits(TextureDescriptor, _THREEElementDescript);

	  function TextureDescriptor(react3RendererInstance) {
	    _classCallCheck(this, TextureDescriptor);

	    var _this = _possibleConstructorReturn(this, (TextureDescriptor.__proto__ || Object.getPrototypeOf(TextureDescriptor)).call(this, react3RendererInstance));

	    _this.hasProp('slot', {
	      type: _propTypes2.default.oneOf(['map', 'specularMap', 'lightMap', 'aoMap', 'emissiveMap', 'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap', 'metalnessMap', 'alphaMap', 'envMap']),
	      updateInitial: true,
	      update: function update(texture, slot) {
	        var lastSlot = texture.userData._materialSlot;
	        texture.userData._materialSlot = slot;

	        if (texture.userData.markup) {
	          var parentMarkup = texture.userData.markup.parentMarkup;
	          if (parentMarkup) {
	            var parent = parentMarkup.threeObject;

	            if (parent instanceof THREE.Material) {
	              if (process.env.NODE_ENV !== 'production') {
	                _this.validateParentSlot(parent, slot);
	              }

	              // remove from previous slot and assign to new slot
	              // TODO add test for this
	              _this.removeFromSlotOfMaterial(parent, lastSlot, texture);
	              _this.addToSlotOfMaterial(parent, slot, texture);
	            }
	          }
	        }
	      },
	      default: 'map'
	    });

	    _this.hasProp('repeat', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector2),
	      updateInitial: true,
	      update: function update(threeObject, repeat) {
	        if (repeat) {
	          threeObject.repeat.copy(repeat);
	        } else {
	          threeObject.repeat.set(1, 1);
	        }
	      },

	      default: new THREE.Vector2(1, 1)
	    });

	    _this.hasProp('offset', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector2),
	      updateInitial: true,
	      update: function update(threeObject, offset) {
	        if (offset) {
	          threeObject.offset.copy(offset);
	        } else {
	          threeObject.offset.set(0, 0);
	        }
	      },

	      default: new THREE.Vector2(0, 0)
	    });

	    ['wrapS', 'wrapT'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.oneOf([THREE.RepeatWrapping, THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping]),
	        updateInitial: true,
	        update: function update(threeObject, value) {
	          threeObject[propName] = value;
	          if (threeObject.image) {
	            threeObject.needsUpdate = true;
	          }
	        },

	        default: THREE.ClampToEdgeWrapping
	      });
	    });

	    _this.hasProp('anisotropy', {
	      type: _propTypes2.default.number,
	      updateInitial: true,
	      update: function update(threeObject, value) {
	        threeObject.anisotropy = value;
	        if (threeObject.image) {
	          threeObject.needsUpdate = true;
	        }
	      },

	      default: 1
	    });

	    _this.hasProp('url', {
	      type: _propTypes2.default.string.isRequired,
	      update: _this.triggerRemount,
	      default: ''
	    });

	    _this.hasProp('crossOrigin', {
	      type: _propTypes2.default.string,
	      update: _this.triggerRemount,
	      default: undefined
	    });

	    ['onLoad', 'onProgress', 'onError'].forEach(function (eventName) {
	      _this.hasProp(eventName, {
	        type: _propTypes2.default.func,
	        update: function update() {
	          // do nothing because these props are only used for initial loading callbacks
	        },

	        default: undefined
	      });
	    });

	    _this.hasProp('magFilter', {
	      type: _propTypes2.default.oneOf([THREE.LinearFilter, THREE.NearestFilter]),
	      update: function update(texture, magFilter) {
	        texture.magFilter = magFilter;
	        if (texture.image) {
	          texture.needsUpdate = true;
	        }
	      },

	      default: THREE.LinearFilter
	    });

	    _this.hasProp('minFilter', {
	      type: _propTypes2.default.oneOf([THREE.LinearMipMapLinearFilter, THREE.NearestFilter, THREE.NearestMipMapNearestFilter, THREE.NearestMipMapLinearFilter, THREE.LinearFilter, THREE.LinearMipMapNearestFilter]),
	      update: function update(texture, minFilter) {
	        texture.minFilter = minFilter;
	        if (texture.image) {
	          texture.needsUpdate = true;
	        }
	      },

	      default: THREE.LinearMipMapLinearFilter
	    });
	    return _this;
	  }

	  _createClass(TextureDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var result = void 0;

	      if (props.hasOwnProperty('url')) {
	        var textureLoader = new THREE.TextureLoader();

	        if (props.hasOwnProperty('crossOrigin')) {
	          textureLoader.crossOrigin = props.crossOrigin;
	        }

	        var onLoad = void 0;
	        var onProgress = void 0;
	        var onError = void 0;

	        if (props.hasOwnProperty('onLoad')) {
	          onLoad = props.onLoad;
	        }

	        if (props.hasOwnProperty('onProgress')) {
	          onProgress = props.onProgress;
	        }

	        if (props.hasOwnProperty('onError')) {
	          onError = props.onError;
	        }

	        result = textureLoader.load(props.url, onLoad, onProgress, onError);
	        if (props.hasOwnProperty('minFilter')) {
	          result.minFilter = props.minFilter;
	        }
	      } else {
	        (0, _invariant2.default)(false, 'The texture needs a url property.');
	      }

	      return result;
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(texture, parent) {
	      if (parent instanceof THREE.Material) {
	        var slot = texture.userData._materialSlot;


	        if (process.env.NODE_ENV !== 'production') {
	          this.validateParentSlot(parent, slot);
	        }

	        this.addToSlotOfMaterial(parent, slot, texture);
	      } else if (parent instanceof _Uniform2.default) {
	        // Uniform as per the assert above
	        parent.setValue(texture);
	      } else {
	        (0, _invariant2.default)(false, 'Parent of a texture is not a material nor a uniform, it needs to be one of them.');
	      }

	      _get(TextureDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureDescriptor.prototype), 'setParent', this).call(this, texture, parent);
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      threeObject.userData = _extends({}, threeObject.userData);

	      _get(TextureDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(texture) {
	      var parent = texture.userData.markup.parentMarkup.threeObject;

	      var slot = texture.userData._materialSlot;

	      // could either be a resource description or an actual texture

	      if (parent instanceof THREE.Material) {
	        this.removeFromSlotOfMaterial(parent, slot, texture);
	      } else if (parent instanceof _Uniform2.default) {
	        if (parent.value === texture) {
	          parent.setValue(null);
	        }
	      }

	      texture.dispose();

	      _get(TextureDescriptor.prototype.__proto__ || Object.getPrototypeOf(TextureDescriptor.prototype), 'unmount', this).call(this, texture);
	    }
	  }, {
	    key: 'removeFromSlotOfMaterial',
	    value: function removeFromSlotOfMaterial(material, slot, texture) {
	      if (material[slot] === texture) {
	        material.userData['_has' + slot + '}TextureChild'] = false;

	        if (material.userData['_' + slot + '}Property']) {
	          // restore the map property
	          material[slot] = material.userData['_' + slot + '}Property'];
	        } else {
	          material[slot] = null;
	        }

	        material.needsUpdate = true;
	      }
	    }
	  }, {
	    key: 'addToSlotOfMaterial',
	    value: function addToSlotOfMaterial(material, slot, texture) {
	      material.userData['_has' + slot + '}TextureChild'] = true;

	      if (material.userData['_' + slot + '}Property']) {
	        var slotInfo = 'texture';

	        if (slot !== 'map') {
	          slotInfo += 'with a \'' + slot + '\' slot';
	        }

	        (0, _warning2.default)(false, 'The material already has a' + (' \'' + slot + '\' property but a ' + slotInfo + ' is being added as a child.') + ' The child will override the property.');
	      } else {
	        // removing invariant to enable slot swapping
	      }

	      if (material[slot] !== texture) {
	        material[slot] = texture;
	      }
	    }
	  }, {
	    key: 'validateParentSlot',
	    value: function validateParentSlot(parent, slot) {
	      var react3internalComponent = parent.userData.react3internalComponent;
	      if (react3internalComponent) {
	        var descriptor = react3internalComponent.threeElementDescriptor;
	        if (descriptor && !descriptor._supportedMaps[slot]) {
	          // TODO add test for this
	          (0, _warning2.default)(false, 'A texture cannot be assigned as a \'' + slot + '\' to \'' + parent.type + '\'');
	        }
	      }
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.highlight(parent);
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.hideHighlight(parent);
	    }
	  }]);

	  return TextureDescriptor;
	}(_THREEElementDescriptor2.default)) || _class;

	module.exports = TextureDescriptor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ResourceDescriptorBase = __webpack_require__(322);

	var _ResourceDescriptorBase2 = _interopRequireDefault(_ResourceDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MaterialResourceDescriptor = function (_ResourceDescriptorBa) {
	  _inherits(MaterialResourceDescriptor, _ResourceDescriptorBa);

	  function MaterialResourceDescriptor() {
	    _classCallCheck(this, MaterialResourceDescriptor);

	    return _possibleConstructorReturn(this, (MaterialResourceDescriptor.__proto__ || Object.getPrototypeOf(MaterialResourceDescriptor)).apply(this, arguments));
	  }

	  _createClass(MaterialResourceDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(MaterialResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(MaterialResourceDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      if (props.hasOwnProperty('slot')) {
	        threeObject.userData._propertySlot = props.slot;
	      } else {
	        threeObject.userData._propertySlot = 'material';
	      }
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.Mesh || parentObject3D instanceof THREE.Points || parentObject3D instanceof THREE.Line, 'Parent is not a mesh');

	      _get(MaterialResourceDescriptor.prototype.__proto__ || Object.getPrototypeOf(MaterialResourceDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);
	    }
	  }]);

	  return MaterialResourceDescriptor;
	}(_ResourceDescriptorBase2.default);

	module.exports = MaterialResourceDescriptor;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	var _UniformContainer = __webpack_require__(384);

	var _UniformContainer2 = _interopRequireDefault(_UniformContainer);

	var _Uniform = __webpack_require__(325);

	var _Uniform2 = _interopRequireDefault(_Uniform);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var UniformsDescriptor = function (_THREEElementDescript) {
	  _inherits(UniformsDescriptor, _THREEElementDescript);

	  function UniformsDescriptor() {
	    _classCallCheck(this, UniformsDescriptor);

	    return _possibleConstructorReturn(this, (UniformsDescriptor.__proto__ || Object.getPrototypeOf(UniformsDescriptor)).apply(this, arguments));
	  }

	  _createClass(UniformsDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new _UniformContainer2.default();
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof THREE.ShaderMaterial, 'Parent of <uniforms/> is not a shader material');

	      _get(UniformsDescriptor.prototype.__proto__ || Object.getPrototypeOf(UniformsDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);

	      parentObject3D.uniforms = threeObject.uniforms;
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      children.forEach(function (child) {
	        (0, _invariant2.default)(child instanceof _Uniform2.default, 'The <uniforms/> component can only have <uniform/> elements as children.');
	      });
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.highlight(parent);
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      return parent.userData._descriptor.getBoundingBoxes(parent);
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.hideHighlight(parent);
	    }
	  }]);

	  return UniformsDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = UniformsDescriptor;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _invariant = __webpack_require__(13);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Uniform = __webpack_require__(325);

	var _Uniform2 = _interopRequireDefault(_Uniform);

	var _UniformContainer = __webpack_require__(384);

	var _UniformContainer2 = _interopRequireDefault(_UniformContainer);

	var _ResourceReference = __webpack_require__(309);

	var _ResourceReference2 = _interopRequireDefault(_ResourceReference);

	var _THREEElementDescriptor = __webpack_require__(289);

	var _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var UniformDescriptor = function (_THREEElementDescript) {
	  _inherits(UniformDescriptor, _THREEElementDescript);

	  function UniformDescriptor(react3Instance) {
	    _classCallCheck(this, UniformDescriptor);

	    var _this = _possibleConstructorReturn(this, (UniformDescriptor.__proto__ || Object.getPrototypeOf(UniformDescriptor)).call(this, react3Instance));

	    _this._invalidChild = function (child) {
	      return _this.invalidChildInternal(child);
	    };

	    _this.hasProp('type', {
	      type: _propTypes2.default.string.isRequired,
	      simple: true
	    });

	    _this.hasProp('value', {
	      type: _propTypes2.default.any,
	      update: function update(threeObject, value) {
	        threeObject.setValue(value);
	      },

	      default: null
	    });

	    _this.hasProp('name', {
	      type: _propTypes2.default.string.isRequired,
	      update: _this.triggerRemount
	    });
	    return _this;
	  }

	  _createClass(UniformDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new _Uniform2.default();
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(UniformDescriptor.prototype.__proto__ || Object.getPrototypeOf(UniformDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      (0, _invariant2.default)(props.hasOwnProperty('name'), 'The <uniform/> should have a \'name\' property');
	      threeObject.name = props.name;
	      threeObject.value = props.value;
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(threeObject, parentObject3D) {
	      (0, _invariant2.default)(parentObject3D instanceof _UniformContainer2.default, 'Parent is not a Uniform Container (<uniforms/>)');

	      var name = threeObject.name;

	      _get(UniformDescriptor.prototype.__proto__ || Object.getPrototypeOf(UniformDescriptor.prototype), 'setParent', this).call(this, threeObject, parentObject3D);

	      parentObject3D.uniforms[name] = {
	        type: threeObject.type,
	        value: threeObject.value
	      };

	      threeObject.userData._onValueChanged = function (newValue) {
	        parentObject3D.uniforms[name].value = newValue;
	      };

	      threeObject.userData.events.on('valueChanged', threeObject.userData._onValueChanged);
	    }
	  }, {
	    key: 'addChildren',
	    value: function addChildren(threeObject, children) {
	      (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'Uniform children can only be textures or resource references');
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(threeObject, child) {
	      this.addChildren(threeObject, [child]);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild() {
	      // do nothing
	    }
	  }, {
	    key: 'invalidChildInternal',
	    value: function invalidChildInternal(child) {
	      var invalid = !(child instanceof THREE.Texture || child instanceof _ResourceReference2.default);

	      return invalid;
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      threeObject.userData.events.removeListener('valueChanged', threeObject.userData._onValueChanged);

	      delete threeObject.userData._onValueChanged;

	      _get(UniformDescriptor.prototype.__proto__ || Object.getPrototypeOf(UniformDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: 'highlight',
	    value: function highlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.highlight(parent);
	    }
	  }, {
	    key: 'getBoundingBoxes',
	    value: function getBoundingBoxes(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      return parent.userData._descriptor.getBoundingBoxes(parent);
	    }
	  }, {
	    key: 'hideHighlight',
	    value: function hideHighlight(threeObject) {
	      var parent = threeObject.userData.markup.parentMarkup.threeObject;
	      parent.userData._descriptor.hideHighlight(parent);
	    }
	  }]);

	  return UniformDescriptor;
	}(_THREEElementDescriptor2.default);

	module.exports = UniformDescriptor;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineBasicMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(LineBasicMaterialDescriptor, _MaterialDescriptorBa);

	  function LineBasicMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, LineBasicMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (LineBasicMaterialDescriptor.__proto__ || Object.getPrototypeOf(LineBasicMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();

	    _this.hasProp('linewidth', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 1
	    });

	    // what are these properties used for?
	    ['linecap', 'linejoin'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.oneOf(['round']),
	        simple: true,
	        default: 'round'
	      });
	    });

	    _this.hasProp('fog', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, fog, existsInProps) {
	        if (existsInProps) {
	          threeObject.fog = fog;
	        }
	        threeObject.needsUpdate = true;
	      },

	      updateInitial: true,
	      default: true
	    });
	    return _this;
	  }

	  _createClass(LineBasicMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.LineBasicMaterial(materialDescription);
	    }
	  }]);

	  return LineBasicMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = LineBasicMaterialDescriptor;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LineDashedMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(LineDashedMaterialDescriptor, _MaterialDescriptorBa);

	  function LineDashedMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, LineDashedMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (LineDashedMaterialDescriptor.__proto__ || Object.getPrototypeOf(LineDashedMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();

	    ['linewidth', 'scale', 'gapSize'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.number,
	        simple: true,
	        default: 1
	      });
	    });

	    _this.hasProp('dashSize', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 3
	    });

	    // what are these properties used for?
	    ['linecap', 'linejoin'].forEach(function (propName) {
	      _this.hasProp(propName, {
	        type: _propTypes2.default.oneOf(['round']),
	        simple: true,
	        default: 'round'
	      });
	    });

	    _this.hasProp('fog', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, fog, existsInProps) {
	        if (existsInProps) {
	          threeObject.fog = fog;
	        }
	        threeObject.needsUpdate = true;
	      },

	      updateInitial: true,
	      default: true
	    });
	    return _this;
	  }

	  _createClass(LineDashedMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.LineDashedMaterial(materialDescription);
	    }
	  }]);

	  return LineDashedMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = LineDashedMaterialDescriptor;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshDepthMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshDepthMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshDepthMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshDepthMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshDepthMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshDepthMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasWireframe();
	    _this.hasMap();
	    _this.hasMap('alphaMap');
	    _this.hasMap('displacementMap');
	    return _this;
	  }

	  _createClass(MeshDepthMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshDepthMaterial(materialDescription);
	    }
	  }]);

	  return MeshDepthMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshDepthMaterialDescriptor;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MeshNormalMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(MeshNormalMaterialDescriptor, _MaterialDescriptorBa);

	  function MeshNormalMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, MeshNormalMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (MeshNormalMaterialDescriptor.__proto__ || Object.getPrototypeOf(MeshNormalMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasWireframe();
	    return _this;
	  }

	  _createClass(MeshNormalMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.MeshNormalMaterial(materialDescription);
	    }
	  }]);

	  return MeshNormalMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = MeshNormalMaterialDescriptor;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _MaterialDescriptorBase = __webpack_require__(378);

	var _MaterialDescriptorBase2 = _interopRequireDefault(_MaterialDescriptorBase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SpriteMaterialDescriptor = function (_MaterialDescriptorBa) {
	  _inherits(SpriteMaterialDescriptor, _MaterialDescriptorBa);

	  function SpriteMaterialDescriptor(react3RendererInstance) {
	    _classCallCheck(this, SpriteMaterialDescriptor);

	    var _this = _possibleConstructorReturn(this, (SpriteMaterialDescriptor.__proto__ || Object.getPrototypeOf(SpriteMaterialDescriptor)).call(this, react3RendererInstance));

	    _this.hasColor();

	    _this.hasProp('rotation', {
	      type: _propTypes2.default.number,
	      simple: true,
	      default: 0
	    });

	    _this.hasProp('fog', {
	      type: _propTypes2.default.bool,
	      update: function update(threeObject, fog, existsInProps) {
	        if (existsInProps) {
	          threeObject.fog = fog;
	        }
	        threeObject.needsUpdate = true;
	      },

	      updateInitial: true,
	      default: false
	    });

	    _this.hasMap();
	    return _this;
	  }

	  _createClass(SpriteMaterialDescriptor, [{
	    key: 'construct',
	    value: function construct(props) {
	      var materialDescription = this.getMaterialDescription(props);

	      return new THREE.SpriteMaterial(materialDescription);
	    }
	  }]);

	  return SpriteMaterialDescriptor;
	}(_MaterialDescriptorBase2.default);

	module.exports = SpriteMaterialDescriptor;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _CameraUtils = __webpack_require__(295);

	var _CameraUtils2 = _interopRequireDefault(_CameraUtils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CameraHelperDescriptor = function (_Object3DDescriptor) {
	  _inherits(CameraHelperDescriptor, _Object3DDescriptor);

	  function CameraHelperDescriptor(react3Instance) {
	    _classCallCheck(this, CameraHelperDescriptor);

	    var _this = _possibleConstructorReturn(this, (CameraHelperDescriptor.__proto__ || Object.getPrototypeOf(CameraHelperDescriptor)).call(this, react3Instance));

	    _this.hasProp('visible', {
	      type: _propTypes2.default.bool,
	      override: true,
	      update: function update(threeObject, visible) {
	        threeObject.userData._visible = visible;

	        threeObject.visible = threeObject.userData._hasCamera && visible;
	      },

	      updateInitial: true,
	      default: true
	    });

	    _this.hasProp('cameraName', {
	      type: _propTypes2.default.string.isRequired,
	      update: function update(threeObject, cameraName) {
	        _this._clearCameraEvents(threeObject);

	        threeObject.userData._cameraName = cameraName;

	        _this._startCameraFinder(threeObject);
	      },
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(CameraHelperDescriptor, [{
	    key: 'construct',
	    value: function construct() {
	      return new THREE.CameraHelper(new THREE.PerspectiveCamera());
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(cameraHelper, props) {
	      var _this2 = this;

	      _get(CameraHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(CameraHelperDescriptor.prototype), 'applyInitialProps', this).call(this, cameraHelper, props);

	      cameraHelper.userData._onCameraProjectionUpdate = function () {
	        cameraHelper.update();
	      };

	      cameraHelper.userData._onCameraDispose = function () {
	        _this2._startCameraFinder(cameraHelper);
	      };

	      cameraHelper.userData._onCameraRename = function (payload) {
	        if (payload.oldName === cameraHelper.userData._cameraName) {
	          _this2._startCameraFinder(cameraHelper);
	        }
	      };

	      cameraHelper.userData._onBeforeRender = function () {
	        cameraHelper.visible = cameraHelper.userData._hasCamera && cameraHelper.userData._visible && _CameraUtils2.default.current !== cameraHelper.userData._camera;
	      };

	      cameraHelper.userData._cameraName = props.cameraName;
	      cameraHelper.userData._visible = props.hasOwnProperty('visible') ? props.visible : true;

	      cameraHelper.userData.events.once('addedIntoRoot', function () {
	        var rootInstance = cameraHelper.userData.markup._rootInstance;

	        rootInstance.addBeforeRenderListener(cameraHelper.userData._onBeforeRender);

	        _this2._startCameraFinder(cameraHelper);
	      });
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      this._clearCameraEvents(threeObject);

	      delete threeObject.userData._onCameraProjectionUpdate;

	      return _get(CameraHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(CameraHelperDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }, {
	    key: '_getCamera',
	    value: function _getCamera(rootInstance, cameraName) {
	      var camera = null;

	      if (cameraName) {
	        var camerasByName = rootInstance.getObjectsByName(cameraName).filter(function (obj) {
	          return obj instanceof THREE.Camera;
	        });

	        if (camerasByName.length > 0) {
	          camera = camerasByName[0];
	        }
	      }

	      return camera;
	    }
	  }, {
	    key: '_clearCameraEvents',
	    value: function _clearCameraEvents(helper) {
	      if (helper.userData._hasCamera) {
	        helper.userData._camera.userData.events.removeListener('updateProjectionMatrix', helper.userData._onCameraProjectionUpdate);
	        helper.userData._camera.userData.events.removeListener('dispose', helper.userData._onCameraDispose);
	        helper.userData._camera.userData.events.removeListener('rename', helper.userData._onCameraRename);
	      }
	    }
	  }, {
	    key: '_setCamera',
	    value: function _setCamera(helper, camera) {
	      var userData = helper.userData;

	      if (userData._camera === camera) {
	        return;
	      }

	      this._clearCameraEvents(helper);

	      userData._hasCamera = true;
	      userData._camera = camera;
	      helper.camera = camera;
	      helper.matrix = camera.matrixWorld;
	      helper.update();
	      helper.visible = userData._visible;
	      var cameraEvents = helper.userData._camera.userData.events;

	      cameraEvents.on('rename', userData._onCameraRename);
	      cameraEvents.on('updateProjectionMatrix', userData._onCameraProjectionUpdate);
	      cameraEvents.once('dispose', userData._onCameraDispose);
	    }
	  }, {
	    key: '_startCameraFinder',
	    value: function _startCameraFinder(helper) {
	      var _this3 = this;

	      this._clearCameraEvents(helper);

	      var rootInstance = helper.userData.markup && helper.userData.markup._rootInstance;

	      if (!rootInstance) {
	        return;
	      }

	      helper.userData._hasCamera = false;
	      helper.userData._camera = null;
	      helper.camera = new THREE.PerspectiveCamera();
	      helper.visible = false;

	      var camera = this._getCamera(rootInstance, helper.userData._cameraName);

	      if (camera) {
	        this._setCamera(helper, camera);
	      } else {
	        // try to find camera before renders
	        var findCamera = function findCamera() {
	          var foundCamera = _this3._getCamera(rootInstance, helper.userData._cameraName);

	          if (foundCamera) {
	            rootInstance.removeAnimateListener(findCamera);

	            _this3._setCamera(helper, foundCamera);
	          }
	        };

	        rootInstance.addAnimateListener(findCamera);
	      }
	    }
	  }]);

	  return CameraHelperDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = CameraHelperDescriptor;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AxisHelperDescriptor = function (_Object3DDescriptor) {
	  _inherits(AxisHelperDescriptor, _Object3DDescriptor);

	  function AxisHelperDescriptor(react3Instance) {
	    _classCallCheck(this, AxisHelperDescriptor);

	    var _this = _possibleConstructorReturn(this, (AxisHelperDescriptor.__proto__ || Object.getPrototypeOf(AxisHelperDescriptor)).call(this, react3Instance));

	    _this.hasProp('size', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 1
	    });
	    return _this;
	  }

	  _createClass(AxisHelperDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(AxisHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(AxisHelperDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var size = props.size;

	      return new THREE.AxisHelper(size);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      threeObject.geometry.dispose();
	      threeObject.material.dispose();

	      _get(AxisHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(AxisHelperDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }]);

	  return AxisHelperDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = AxisHelperDescriptor;

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ArrowHelperDescriptor = function (_Object3DDescriptor) {
	  _inherits(ArrowHelperDescriptor, _Object3DDescriptor);

	  function ArrowHelperDescriptor(react3Instance) {
	    _classCallCheck(this, ArrowHelperDescriptor);

	    var _this = _possibleConstructorReturn(this, (ArrowHelperDescriptor.__proto__ || Object.getPrototypeOf(ArrowHelperDescriptor)).call(this, react3Instance));

	    _this.hasProp('origin', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector3).isRequired,
	      update: function update(threeObject, origin) {
	        threeObject.position.copy(origin);
	      },

	      default: new THREE.Vector3()
	    });

	    _this.hasProp('dir', {
	      type: (0, _propTypeInstanceOf2.default)(THREE.Vector3).isRequired,
	      update: function update(threeObject, newDir) {
	        threeObject.setDirection(newDir);
	      },

	      default: new THREE.Vector3(0, 0, 1)
	    });

	    _this.hasProp('color', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	      update: function update(threeObject, newColor) {
	        threeObject.setColor(newColor);
	      },

	      default: 0xffff00
	    });

	    _this.hasProp('length', {
	      type: _propTypes2.default.number,
	      update: function update(threeObject, length) {
	        threeObject.userData.lengthProps.length = length;

	        threeObject.userData.lengthsChanged = true;
	      },

	      default: 1
	    });

	    _this.hasProp('headLength', {
	      type: _propTypes2.default.number,
	      update: function update(threeObject, headLength) {
	        threeObject.userData.lengthProps.headLength = headLength;

	        threeObject.userData.lengthsChanged = true;
	      },
	      default: undefined
	    });

	    _this.hasProp('headWidth', {
	      type: _propTypes2.default.number,
	      update: function update(threeObject, headWidth) {
	        threeObject.userData.lengthProps.headWidth = headWidth;

	        threeObject.userData.lengthsChanged = true;
	      },
	      default: undefined
	    });
	    return _this;
	  }

	  _createClass(ArrowHelperDescriptor, [{
	    key: 'beginPropertyUpdates',
	    value: function beginPropertyUpdates(threeObject) {
	      threeObject.userData.lengthsChanged = false;
	    }
	  }, {
	    key: 'completePropertyUpdates',
	    value: function completePropertyUpdates(threeObject) {
	      if (threeObject.userData.lengthsChanged) {
	        threeObject.userData.lengthsChanged = false;

	        var length = threeObject.userData.lengthProps.length;
	        var _threeObject$userData = threeObject.userData.lengthProps,
	            headLength = _threeObject$userData.headLength,
	            headWidth = _threeObject$userData.headWidth;


	        if (headLength === undefined) {
	          headLength = 0.2 * length;
	        }

	        if (headWidth === undefined) {
	          headWidth = 0.2 * headLength;
	        }

	        threeObject.setLength(length, headLength, headWidth);
	      }
	    }
	  }, {
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(ArrowHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(ArrowHelperDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);

	      var length = props.length,
	          headLength = props.headLength,
	          headWidth = props.headWidth;


	      threeObject.userData.lengthProps = {
	        length: length,
	        headLength: headLength,
	        headWidth: headWidth
	      };
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var dir = props.dir,
	          origin = props.origin,
	          length = props.length,
	          color = props.color,
	          headLength = props.headLength,
	          headWidth = props.headWidth;


	      var useOrigin = origin;
	      if (useOrigin === undefined) {
	        useOrigin = new THREE.Vector3();
	      }

	      var useDir = dir;
	      if (useDir === undefined) {
	        useDir = new THREE.Vector3(0, 0, 1);
	      }

	      return new THREE.ArrowHelper(useDir, useOrigin, length, color, headLength, headWidth);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      if (threeObject.line) {
	        threeObject.line.geometry.dispose();
	        threeObject.line.material.dispose();
	      }

	      if (threeObject.cone) {
	        threeObject.cone.geometry.dispose();
	        threeObject.cone.material.dispose();
	      }

	      _get(ArrowHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(ArrowHelperDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }]);

	  return ArrowHelperDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = ArrowHelperDescriptor;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _three = __webpack_require__(273);

	var THREE = _interopRequireWildcard(_three);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Object3DDescriptor2 = __webpack_require__(302);

	var _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);

	var _propTypeInstanceOf = __webpack_require__(297);

	var _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var GridHelperDescriptor = function (_Object3DDescriptor) {
	  _inherits(GridHelperDescriptor, _Object3DDescriptor);

	  function GridHelperDescriptor(react3Instance) {
	    _classCallCheck(this, GridHelperDescriptor);

	    var _this = _possibleConstructorReturn(this, (GridHelperDescriptor.__proto__ || Object.getPrototypeOf(GridHelperDescriptor)).call(this, react3Instance));

	    _this.hasProp('size', {
	      type: _propTypes2.default.number.isRequired,
	      update: _this.triggerRemount,
	      default: 1
	    });

	    _this.hasProp('step', {
	      type: _propTypes2.default.number,
	      update: _this.triggerRemount,
	      default: 1
	    });

	    _this.hasProp('colorCenterLine', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	      update: _this.triggerRemount,
	      default: 0x444444
	    });

	    _this.hasProp('colorGrid', {
	      type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),
	      update: _this.triggerRemount,
	      default: 0x888888
	    });
	    return _this;
	  }

	  _createClass(GridHelperDescriptor, [{
	    key: 'applyInitialProps',
	    value: function applyInitialProps(threeObject, props) {
	      _get(GridHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(GridHelperDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);
	    }
	  }, {
	    key: 'construct',
	    value: function construct(props) {
	      var size = props.size,
	          step = props.step,
	          colorCenterLine = props.colorCenterLine,
	          colorGrid = props.colorGrid;

	      return new THREE.GridHelper(size, step, colorCenterLine, colorGrid);
	    }
	  }, {
	    key: 'unmount',
	    value: function unmount(threeObject) {
	      threeObject.geometry.dispose();
	      threeObject.material.dispose();

	      _get(GridHelperDescriptor.prototype.__proto__ || Object.getPrototypeOf(GridHelperDescriptor.prototype), 'unmount', this).call(this, threeObject);
	    }
	  }]);

	  return GridHelperDescriptor;
	}(_Object3DDescriptor3.default);

	module.exports = GridHelperDescriptor;

/***/ }),
/* 399 */
/***/ (function(module, exports) {

	module.exports = function( THREE ) {
		/**
		 * @author qiao / https://github.com/qiao
		 * @author mrdoob / http://mrdoob.com
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author erich666 / http://erichaines.com
		 */

	// This set of controls performs orbiting, dollying (zooming), and panning.
	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
	//
	//    Orbit - left mouse / touch: one finger move
	//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
	//    Pan - right mouse, or arrow keys / touch: three finter swipe

		function OrbitControls( object, domElement ) {

			this.object = object;

			this.domElement = ( domElement !== undefined ) ? domElement : document;

			// Set to false to disable this control
			this.enabled = true;

			// "target" sets the location of focus, where the object orbits around
			this.target = new THREE.Vector3();

			// How far you can dolly in and out ( PerspectiveCamera only )
			this.minDistance = 0;
			this.maxDistance = Infinity;

			// How far you can zoom in and out ( OrthographicCamera only )
			this.minZoom = 0;
			this.maxZoom = Infinity;

			// How far you can orbit vertically, upper and lower limits.
			// Range is 0 to Math.PI radians.
			this.minPolarAngle = 0; // radians
			this.maxPolarAngle = Math.PI; // radians

			// How far you can orbit horizontally, upper and lower limits.
			// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
			this.minAzimuthAngle = - Infinity; // radians
			this.maxAzimuthAngle = Infinity; // radians

			// Set to true to enable damping (inertia)
			// If damping is enabled, you must call controls.update() in your animation loop
			this.enableDamping = false;
			this.dampingFactor = 0.25;

			// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
			// Set to false to disable zooming
			this.enableZoom = true;
			this.zoomSpeed = 1.0;

			// Set to false to disable rotating
			this.enableRotate = true;
			this.rotateSpeed = 1.0;

			// Set to false to disable panning
			this.enablePan = true;
			this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

			// Set to true to automatically rotate around the target
			// If auto-rotate is enabled, you must call controls.update() in your animation loop
			this.autoRotate = false;
			this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

			// Set to false to disable use of the keys
			this.enableKeys = true;

			// The four arrow keys
			this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

			// Mouse buttons
			this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

			// for reset
			this.target0 = this.target.clone();
			this.position0 = this.object.position.clone();
			this.zoom0 = this.object.zoom;

			//
			// public methods
			//

			this.getPolarAngle = function () {

				return spherical.phi;

			};

			this.getAzimuthalAngle = function () {

				return spherical.theta;

			};

			this.reset = function () {

				scope.target.copy( scope.target0 );
				scope.object.position.copy( scope.position0 );
				scope.object.zoom = scope.zoom0;

				scope.object.updateProjectionMatrix();
				scope.dispatchEvent( changeEvent );

				scope.update();

				state = STATE.NONE;

			};

			// this method is exposed, but perhaps it would be better if we can make it private...
			this.update = function() {

				var offset = new THREE.Vector3();

				// so camera.up is the orbit axis
				var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
				var quatInverse = quat.clone().inverse();

				var lastPosition = new THREE.Vector3();
				var lastQuaternion = new THREE.Quaternion();

				return function update () {

					var position = scope.object.position;

					offset.copy( position ).sub( scope.target );

					// rotate offset to "y-axis-is-up" space
					offset.applyQuaternion( quat );

					// angle from z-axis around y-axis
					spherical.setFromVector3( offset );

					if ( scope.autoRotate && state === STATE.NONE ) {

						rotateLeft( getAutoRotationAngle() );

					}

					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;

					// restrict theta to be between desired limits
					spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

					// restrict phi to be between desired limits
					spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

					spherical.makeSafe();


					spherical.radius *= scale;

					// restrict radius to be between desired limits
					spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

					// move target to panned location
					scope.target.add( panOffset );

					offset.setFromSpherical( spherical );

					// rotate offset back to "camera-up-vector-is-up" space
					offset.applyQuaternion( quatInverse );

					position.copy( scope.target ).add( offset );

					scope.object.lookAt( scope.target );

					if ( scope.enableDamping === true ) {

						sphericalDelta.theta *= ( 1 - scope.dampingFactor );
						sphericalDelta.phi *= ( 1 - scope.dampingFactor );

					} else {

						sphericalDelta.set( 0, 0, 0 );

					}

					scale = 1;
					panOffset.set( 0, 0, 0 );

					// update condition is:
					// min(camera displacement, camera rotation in radians)^2 > EPS
					// using small-angle approximation cos(x/2) = 1 - x^2 / 8

					if ( zoomChanged ||
						lastPosition.distanceToSquared( scope.object.position ) > EPS ||
						8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

						scope.dispatchEvent( changeEvent );

						lastPosition.copy( scope.object.position );
						lastQuaternion.copy( scope.object.quaternion );
						zoomChanged = false;

						return true;

					}

					return false;

				};

			}();

			this.dispose = function() {

				scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
				scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
				scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

				scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
				scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
				scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

				document.removeEventListener( 'mousemove', onMouseMove, false );
				document.removeEventListener( 'mouseup', onMouseUp, false );

				window.removeEventListener( 'keydown', onKeyDown, false );

				//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

			};

			//
			// internals
			//

			var scope = this;

			var changeEvent = { type: 'change' };
			var startEvent = { type: 'start' };
			var endEvent = { type: 'end' };

			var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

			var state = STATE.NONE;

			var EPS = 0.000001;

			// current position in spherical coordinates
			var spherical = new THREE.Spherical();
			var sphericalDelta = new THREE.Spherical();

			var scale = 1;
			var panOffset = new THREE.Vector3();
			var zoomChanged = false;

			var rotateStart = new THREE.Vector2();
			var rotateEnd = new THREE.Vector2();
			var rotateDelta = new THREE.Vector2();

			var panStart = new THREE.Vector2();
			var panEnd = new THREE.Vector2();
			var panDelta = new THREE.Vector2();

			var dollyStart = new THREE.Vector2();
			var dollyEnd = new THREE.Vector2();
			var dollyDelta = new THREE.Vector2();

			function getAutoRotationAngle() {

				return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

			}

			function getZoomScale() {

				return Math.pow( 0.95, scope.zoomSpeed );

			}

			function rotateLeft( angle ) {

				sphericalDelta.theta -= angle;

			}

			function rotateUp( angle ) {

				sphericalDelta.phi -= angle;

			}

			var panLeft = function() {

				var v = new THREE.Vector3();

				return function panLeft( distance, objectMatrix ) {

					v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
					v.multiplyScalar( - distance );

					panOffset.add( v );

				};

			}();

			var panUp = function() {

				var v = new THREE.Vector3();

				return function panUp( distance, objectMatrix ) {

					v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
					v.multiplyScalar( distance );

					panOffset.add( v );

				};

			}();

			// deltaX and deltaY are in pixels; right and down are positive
			var pan = function() {

				var offset = new THREE.Vector3();

				return function pan ( deltaX, deltaY ) {

					var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

					if ( scope.object instanceof THREE.PerspectiveCamera ) {

						// perspective
						var position = scope.object.position;
						offset.copy( position ).sub( scope.target );
						var targetDistance = offset.length();

						// half of the fov is center to top of screen
						targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

						// we actually don't use screenWidth, since perspective camera is fixed to screen height
						panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
						panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

					} else if ( scope.object instanceof THREE.OrthographicCamera ) {

						// orthographic
						panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
						panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

					} else {

						// camera neither orthographic nor perspective
						console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
						scope.enablePan = false;

					}

				};

			}();

			function dollyIn( dollyScale ) {

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					scale /= dollyScale;

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
					scope.object.updateProjectionMatrix();
					zoomChanged = true;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			function dollyOut( dollyScale ) {

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					scale *= dollyScale;

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
					scope.object.updateProjectionMatrix();
					zoomChanged = true;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			//
			// event callbacks - update the object state
			//

			function handleMouseDownRotate( event ) {

				//console.log( 'handleMouseDownRotate' );

				rotateStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownDolly( event ) {

				//console.log( 'handleMouseDownDolly' );

				dollyStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownPan( event ) {

				//console.log( 'handleMouseDownPan' );

				panStart.set( event.clientX, event.clientY );

			}

			function handleMouseMoveRotate( event ) {

				//console.log( 'handleMouseMoveRotate' );

				rotateEnd.set( event.clientX, event.clientY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				// rotating across whole screen goes 360 degrees around
				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

				// rotating up and down along whole screen attempts to go 360, but limited to 180
				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

				scope.update();

			}

			function handleMouseMoveDolly( event ) {

				//console.log( 'handleMouseMoveDolly' );

				dollyEnd.set( event.clientX, event.clientY );

				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					dollyIn( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					dollyOut( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

				scope.update();

			}

			function handleMouseMovePan( event ) {

				//console.log( 'handleMouseMovePan' );

				panEnd.set( event.clientX, event.clientY );

				panDelta.subVectors( panEnd, panStart );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();

			}

			function handleMouseUp( event ) {

				//console.log( 'handleMouseUp' );

			}

			function handleMouseWheel( event ) {

				//console.log( 'handleMouseWheel' );

				if ( event.deltaY < 0 ) {

					dollyOut( getZoomScale() );

				} else if ( event.deltaY > 0 ) {

					dollyIn( getZoomScale() );

				}

				scope.update();

			}

			function handleKeyDown( event ) {

				//console.log( 'handleKeyDown' );

				switch ( event.keyCode ) {

					case scope.keys.UP:
						pan( 0, scope.keyPanSpeed );
						scope.update();
						break;

					case scope.keys.BOTTOM:
						pan( 0, - scope.keyPanSpeed );
						scope.update();
						break;

					case scope.keys.LEFT:
						pan( scope.keyPanSpeed, 0 );
						scope.update();
						break;

					case scope.keys.RIGHT:
						pan( - scope.keyPanSpeed, 0 );
						scope.update();
						break;

				}

			}

			function handleTouchStartRotate( event ) {

				//console.log( 'handleTouchStartRotate' );

				rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			}

			function handleTouchStartDolly( event ) {

				//console.log( 'handleTouchStartDolly' );

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

				var distance = Math.sqrt( dx * dx + dy * dy );

				dollyStart.set( 0, distance );

			}

			function handleTouchStartPan( event ) {

				//console.log( 'handleTouchStartPan' );

				panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			}

			function handleTouchMoveRotate( event ) {

				//console.log( 'handleTouchMoveRotate' );

				rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				// rotating across whole screen goes 360 degrees around
				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

				// rotating up and down along whole screen attempts to go 360, but limited to 180
				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

				scope.update();

			}

			function handleTouchMoveDolly( event ) {

				//console.log( 'handleTouchMoveDolly' );

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

				var distance = Math.sqrt( dx * dx + dy * dy );

				dollyEnd.set( 0, distance );

				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					dollyOut( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					dollyIn( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

				scope.update();

			}

			function handleTouchMovePan( event ) {

				//console.log( 'handleTouchMovePan' );

				panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

				panDelta.subVectors( panEnd, panStart );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();

			}

			function handleTouchEnd( event ) {

				//console.log( 'handleTouchEnd' );

			}

			//
			// event handlers - FSM: listen for events and reset state
			//

			function onMouseDown( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();

				if ( event.button === scope.mouseButtons.ORBIT ) {

					if ( scope.enableRotate === false ) return;

					handleMouseDownRotate( event );

					state = STATE.ROTATE;

				} else if ( event.button === scope.mouseButtons.ZOOM ) {

					if ( scope.enableZoom === false ) return;

					handleMouseDownDolly( event );

					state = STATE.DOLLY;

				} else if ( event.button === scope.mouseButtons.PAN ) {

					if ( scope.enablePan === false ) return;

					handleMouseDownPan( event );

					state = STATE.PAN;

				}

				if ( state !== STATE.NONE ) {

					document.addEventListener( 'mousemove', onMouseMove, false );
					document.addEventListener( 'mouseup', onMouseUp, false );

					scope.dispatchEvent( startEvent );

				}

			}

			function onMouseMove( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();

				if ( state === STATE.ROTATE ) {

					if ( scope.enableRotate === false ) return;

					handleMouseMoveRotate( event );

				} else if ( state === STATE.DOLLY ) {

					if ( scope.enableZoom === false ) return;

					handleMouseMoveDolly( event );

				} else if ( state === STATE.PAN ) {

					if ( scope.enablePan === false ) return;

					handleMouseMovePan( event );

				}

			}

			function onMouseUp( event ) {

				if ( scope.enabled === false ) return;

				handleMouseUp( event );

				document.removeEventListener( 'mousemove', onMouseMove, false );
				document.removeEventListener( 'mouseup', onMouseUp, false );

				scope.dispatchEvent( endEvent );

				state = STATE.NONE;

			}

			function onMouseWheel( event ) {

				if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

				event.preventDefault();
				event.stopPropagation();

				handleMouseWheel( event );

				scope.dispatchEvent( startEvent ); // not sure why these are here...
				scope.dispatchEvent( endEvent );

			}

			function onKeyDown( event ) {

				if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

				handleKeyDown( event );

			}

			function onTouchStart( event ) {

				if ( scope.enabled === false ) return;

				switch ( event.touches.length ) {

					case 1:	// one-fingered touch: rotate

						if ( scope.enableRotate === false ) return;

						handleTouchStartRotate( event );

						state = STATE.TOUCH_ROTATE;

						break;

					case 2:	// two-fingered touch: dolly

						if ( scope.enableZoom === false ) return;

						handleTouchStartDolly( event );

						state = STATE.TOUCH_DOLLY;

						break;

					case 3: // three-fingered touch: pan

						if ( scope.enablePan === false ) return;

						handleTouchStartPan( event );

						state = STATE.TOUCH_PAN;

						break;

					default:

						state = STATE.NONE;

				}

				if ( state !== STATE.NONE ) {

					scope.dispatchEvent( startEvent );

				}

			}

			function onTouchMove( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();
				event.stopPropagation();

				switch ( event.touches.length ) {

					case 1: // one-fingered touch: rotate

						if ( scope.enableRotate === false ) return;
						if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

						handleTouchMoveRotate( event );

						break;

					case 2: // two-fingered touch: dolly

						if ( scope.enableZoom === false ) return;
						if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

						handleTouchMoveDolly( event );

						break;

					case 3: // three-fingered touch: pan

						if ( scope.enablePan === false ) return;
						if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

						handleTouchMovePan( event );

						break;

					default:

						state = STATE.NONE;

				}

			}

			function onTouchEnd( event ) {

				if ( scope.enabled === false ) return;

				handleTouchEnd( event );

				scope.dispatchEvent( endEvent );

				state = STATE.NONE;

			}

			function onContextMenu( event ) {

				event.preventDefault();

			}

			//

			scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

			scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

			scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

			window.addEventListener( 'keydown', onKeyDown, false );

			// force an update at start

			this.update();

		};

		OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
		OrbitControls.prototype.constructor = OrbitControls;

		Object.defineProperties( OrbitControls.prototype, {

			center: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
					return this.target;

				}

			},

			// backward compatibility

			noZoom: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
					return ! this.enableZoom;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
					this.enableZoom = ! value;

				}

			},

			noRotate: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
					return ! this.enableRotate;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
					this.enableRotate = ! value;

				}

			},

			noPan: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
					return ! this.enablePan;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
					this.enablePan = ! value;

				}

			},

			noKeys: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
					return ! this.enableKeys;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
					this.enableKeys = ! value;

				}

			},

			staticMoving : {

				get: function () {

					console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
					return ! this.enableDamping;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
					this.enableDamping = ! value;

				}

			},

			dynamicDampingFactor : {

				get: function () {

					console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
					return this.dampingFactor;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
					this.dampingFactor = value;

				}

			}

		} );

		return OrbitControls;
	};


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(2));
		else if(typeof define === 'function' && define.amd)
			define(["react"], factory);
		else if(typeof exports === 'object')
			exports["ReactHtml5Video"] = factory(require("react"));
		else
			root["ReactHtml5Video"] = factory(root["React"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_63__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(1);
		module.exports = __webpack_require__(20);


	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		// removed by extract-text-webpack-plugin

	/***/ },
	/* 2 */,
	/* 3 */,
	/* 4 */,
	/* 5 */,
	/* 6 */,
	/* 7 */,
	/* 8 */,
	/* 9 */,
	/* 10 */,
	/* 11 */,
	/* 12 */,
	/* 13 */,
	/* 14 */,
	/* 15 */,
	/* 16 */,
	/* 17 */,
	/* 18 */,
	/* 19 */,
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(21)['default'];

		var _extends = __webpack_require__(23)['default'];

		var _Object$assign = __webpack_require__(24)['default'];

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _overlayOverlay = __webpack_require__(64);

		var _overlayOverlay2 = _interopRequireDefault(_overlayOverlay);

		var _controlsControls = __webpack_require__(67);

		var _controlsControls2 = _interopRequireDefault(_controlsControls);

		var _controlsSeekSeek = __webpack_require__(69);

		var _controlsSeekSeek2 = _interopRequireDefault(_controlsSeekSeek);

		var _controlsPlayPlay = __webpack_require__(68);

		var _controlsPlayPlay2 = _interopRequireDefault(_controlsPlayPlay);

		var _controlsMuteMute = __webpack_require__(76);

		var _controlsMuteMute2 = _interopRequireDefault(_controlsMuteMute);

		var _controlsFullscreenFullscreen = __webpack_require__(78);

		var _controlsFullscreenFullscreen2 = _interopRequireDefault(_controlsFullscreenFullscreen);

		var _controlsTimeTime = __webpack_require__(77);

		var _controlsTimeTime2 = _interopRequireDefault(_controlsTimeTime);

		var _lodashThrottle = __webpack_require__(79);

		var _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);

		var _assetsCopy = __webpack_require__(82);

		var _assetsCopy2 = _interopRequireDefault(_assetsCopy);

		var EVENTS = ['onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting'];

		var Video = _react2['default'].createClass({
		    displayName: 'Video',

		    propTypes: {
		        // Non-standard props
		        copyKeys: _react2['default'].PropTypes.object,
		        children: _react2['default'].PropTypes.node,
		        className: _react2['default'].PropTypes.string,

		        // HTML5 Video standard attributes
		        autoPlay: _react2['default'].PropTypes.bool,
		        muted: _react2['default'].PropTypes.bool,
		        controls: _react2['default'].PropTypes.bool
		    },

		    getDefaultProps: function getDefaultProps() {
		        return {
		            copyKeys: _assetsCopy2['default']
		        };
		    },

		    getInitialState: function getInitialState() {
		        // Set state from props and always use these
		        // to check state of video as they will update
		        // on the video events. Changing this state however will not
		        // change the video. The API methods must be used.
		        return {
		            networkState: 0,
		            paused: !this.props.autoPlay,
		            muted: !!this.props.muted,
		            volume: 1,
		            playbackRate: 1,
		            error: false,
		            loading: false
		        };
		    },

		    /**
		     * Creates a throttle update method.
		     * @return {undefined}
		     */
		    componentWillMount: function componentWillMount() {
		        var _this = this;

		        this._updateStateFromVideo = (0, _lodashThrottle2['default'])(this.updateStateFromVideo, 100);
		        // Set up all React media events and call method
		        // on props if provided.
		        this.mediaEventProps = EVENTS.reduce(function (p, c) {
		            p[c] = function (e) {
		                if (c in _this.props && typeof _this.props[c] === 'function') {
		                    // A prop exists for this mediaEvent, call it.
		                    _this.props[c](e);
		                }
		                _this._updateStateFromVideo();
		            };
		            return p;
		        }, {});
		    },

		    /**
		     * Bind eventlisteners not supported by React's synthetic events
		     * https://facebook.github.io/react/docs/events.html
		     * @return {undefined}
		     */
		    componentDidMount: function componentDidMount() {
		        // Listen to error of last source.
		        this.videoEl.children[this.videoEl.children.length - 1].addEventListener('error', this._updateStateFromVideo);
		    },

		    /**
		     * Removes event listeners bound outside of React's synthetic events
		     * @return {undefined}
		     */
		    componentWillUnmount: function componentWillUnmount() {
		        // Remove event listener from video.
		        this.videoEl.children[this.videoEl.children.length - 1].removeEventListener('error', this._updateStateFromVideo);
		        // Cancel the throttled function from being called once
		        // the video has been unmounted.
		        // https://github.com/mderrick/react-html5video/issues/35
		        this._updateStateFromVideo.cancel();
		    },

		    /**
		     * Toggles the video to play and pause.
		     * @return {undefined}
		     */
		    togglePlay: function togglePlay() {
		        if (this.state.paused) {
		            this.play();
		        } else {
		            this.pause();
		        }
		    },

		    /**
		     * Toggles the video to mute and unmute.
		     * @return {undefined}
		     */
		    toggleMute: function toggleMute() {
		        if (this.state.muted) {
		            this.unmute();
		        } else {
		            this.mute();
		        }
		    },

		    /**
		     * Loads video.
		     * @return {undefined}
		     */
		    load: function load() {
		        this.videoEl.load();
		    },

		    /**
		     * Sets the video to fullscreen.
		     * @return {undefined}
		     */
		    fullscreen: function fullscreen() {
		        if (this.videoEl.requestFullscreen) {
		            this.videoEl.requestFullscreen();
		        } else if (this.videoEl.msRequestFullscreen) {
		            this.videoEl.msRequestFullscreen();
		        } else if (this.videoEl.mozRequestFullScreen) {
		            this.videoEl.mozRequestFullScreen();
		        } else if (this.videoEl.webkitRequestFullscreen) {
		            this.videoEl.webkitRequestFullscreen();
		        }
		    },

		    /**
		     * Plays the video.
		     * @return {undefined}
		     */
		    play: function play() {
		        this.videoEl.play();
		    },

		    /**
		     * Pauses the video.
		     * @return {undefined}
		     */
		    pause: function pause() {
		        this.videoEl.pause();
		    },

		    /**
		     * Unmutes video.
		     * @return {undefined}
		     */
		    unmute: function unmute() {
		        this.videoEl.muted = false;
		    },

		    /**
		     * Mutes the video.
		     * @return {undefined}
		     */
		    mute: function mute() {
		        this.videoEl.muted = true;
		    },

		    /**
		     * Seeks the video timeline.
		     * @param  {number} time The value in seconds to seek to
		     * @param  {bool}   forceUpdate Forces a state update without waiting for
		     *                              throttled event.          
		     * @return {undefined}
		     */
		    seek: function seek(time, forceUpdate) {
		        this.videoEl.currentTime = time;
		        // In some use cases, we wish not to wait for `onSeeked` or `onSeeking`
		        // throttled event to update state so we force it. This is because
		        // this method is often triggered when dragging a bar and can feel janky.
		        // See https://github.com/mderrick/react-html5video/issues/43
		        if (forceUpdate) {
		            this.updateStateFromVideo();
		        }
		    },

		    /**
		     * Sets the video volume.
		     * @param  {number} volume The volume level between 0 and 1.
		     * @param  {bool}   forceUpdate Forces a state update without waiting for
		     *                              throttled event.  
		     * @return {undefined}
		     */
		    setVolume: function setVolume(volume, forceUpdate) {
		        this.videoEl.volume = volume;
		        // In some use cases, we wish not to wait for `onVolumeChange`
		        // throttled event to update state so we force it. This is because
		        // this method is often triggered when dragging a bar and can feel janky.
		        // See https://github.com/mderrick/react-html5video/issues/43
		        if (forceUpdate) {
		            this.updateStateFromVideo();
		        }
		    },

		    /**
		     * Sets the video playback rate.
		     * @param  {number} rate The playback rate (default 1.0).
		     * @return {undefined}
		     */
		    setPlaybackRate: function setPlaybackRate(rate) {
		        this.videoEl.playbackRate = rate;
		        this.updateStateFromVideo();
		    },

		    /**
		     * Updates the React component state from the DOM video properties.
		     * This is where the magic happens.
		     * @return {undefined}
		     */
		    updateStateFromVideo: function updateStateFromVideo() {
		        this.setState({
		            // Standard video properties
		            duration: this.videoEl.duration,
		            currentTime: this.videoEl.currentTime,
		            buffered: this.videoEl.buffered,
		            paused: this.videoEl.paused,
		            muted: this.videoEl.muted,
		            volume: this.videoEl.volume,
		            playbackRate: this.videoEl.playbackRate,
		            readyState: this.videoEl.readyState,

		            // Non-standard state computed from properties
		            percentageBuffered: this.videoEl.buffered.length && this.videoEl.buffered.end(this.videoEl.buffered.length - 1) / this.videoEl.duration * 100,
		            percentagePlayed: this.videoEl.currentTime / this.videoEl.duration * 100,
		            error: this.videoEl.networkState === this.videoEl.NETWORK_NO_SOURCE,
		            loading: this.videoEl.readyState < this.videoEl.HAVE_ENOUGH_DATA
		        });
		    },

		    /**
		     * Returns everything but 'source' nodes from children
		     * and extends props so all children have access to Video API and state.
		     * If there are no controls provided, returns default Controls.
		     * @return {Array.<ReactElement>} An array of components.
		     */
		    renderControls: function renderControls() {
		        var extendedProps = _Object$assign({
		            // The public methods that all controls should be able to
		            // use.
		            togglePlay: this.togglePlay,
		            toggleMute: this.toggleMute,
		            play: this.play,
		            pause: this.pause,
		            mute: this.mute,
		            unmute: this.unmute,
		            seek: this.seek,
		            fullscreen: this.fullscreen,
		            setVolume: this.setVolume,
		            setPlaybackRate: this.setPlaybackRate
		        }, this.state, { copyKeys: this.props.copyKeys });

		        var controls = _react2['default'].Children.map(this.props.children, function (child) {
		            if (child.type === 'source') {
		                return void 0;
		            }
		            return _react2['default'].cloneElement(child, extendedProps);
		        });

		        if (!controls.length) {
		            controls = _react2['default'].createElement(
		                'div',
		                null,
		                _react2['default'].createElement(_overlayOverlay2['default'], extendedProps),
		                _react2['default'].createElement(_controlsControls2['default'], extendedProps)
		            );
		        }
		        return controls;
		    },

		    /**
		     * Returns video 'source' nodes from children.
		     * @return {Array.<ReactElement>} An array of components.
		     */
		    renderSources: function renderSources() {
		        return _react2['default'].Children.map(this.props.children, function (child) {
		            if (child.type !== 'source') {
		                return void 0;
		            }
		            return child;
		        });
		    },

		    /**
		     * Gets the video class name based on its state
		     * @return {string} Class string
		     */
		    getVideoClassName: function getVideoClassName() {
		        var className = this.props.className;

		        var classString = 'video';

		        if (this.state.error) {
		            classString += ' video--error';
		        } else if (this.state.loading) {
		            classString += ' video--loading';
		        } else if (this.state.paused) {
		            classString += ' video--paused';
		        } else {
		            classString += ' video--playing';
		        }

		        if (this.state.focused) {
		            classString += ' video--focused';
		        }
		        if (className) {
		            classString += ' ' + className;
		        }
		        return classString;
		    },

		    /**
		     * Sets state to show focused class on video player.
		     * @return {undefined}
		     */
		    onFocus: function onFocus() {
		        this.setState({
		            focused: true
		        });
		    },

		    /**
		     * Sets state to not be focused to remove class form video
		     * player.
		     * @return {undefined}
		     */
		    onBlur: function onBlur() {
		        this.setState({
		            focused: false
		        });
		    },

		    render: function render() {
		        var _this2 = this;

		        // If controls prop is provided remove it
		        // and use our own controls.
		        // Leave `copyKeys` here even though not used
		        // as per issue #36.
		        var _props = this.props;
		        var controls = _props.controls;
		        var copyKeys = _props.copyKeys;
		        var style = _props.style;

		        var otherProps = _objectWithoutProperties(_props, ['controls', 'copyKeys', 'style']);

		        return _react2['default'].createElement(
		            'div',
		            { className: this.getVideoClassName(),
		                tabIndex: '0',
		                onFocus: this.onFocus,
		                onBlur: this.onBlur,
		                style: style },
		            _react2['default'].createElement(
		                'video',
		                _extends({}, otherProps, {
		                    className: 'video__el',
		                    ref: function (el) {
		                        _this2.videoEl = el;
		                    }
		                    //  We have throttled `_updateStateFromVideo` so listen to
		                    //  every available Media event that React allows and
		                    //  infer the Video state in that method from the Video properties.
		                }, this.mediaEventProps),
		                this.renderSources()
		            ),
		            controls ? this.renderControls() : ''
		        );
		    }
		});

		exports['default'] = Video;
		exports.Controls = _controlsControls2['default'];
		exports.Seek = _controlsSeekSeek2['default'];
		exports.Play = _controlsPlayPlay2['default'];
		exports.Mute = _controlsMuteMute2['default'];
		exports.Fullscreen = _controlsFullscreenFullscreen2['default'];
		exports.Time = _controlsTimeTime2['default'];
		exports.Overlay = _overlayOverlay2['default'];

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(22);

	/***/ },
	/* 22 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (obj, keys) {
		  var target = {};

		  for (var i in obj) {
		    if (keys.indexOf(i) >= 0) continue;
		    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
		    target[i] = obj[i];
		  }

		  return target;
		};

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _assign = __webpack_require__(24);

		var _assign2 = _interopRequireDefault(_assign);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = _assign2.default || function (target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = arguments[i];

		    for (var key in source) {
		      if (Object.prototype.hasOwnProperty.call(source, key)) {
		        target[key] = source[key];
		      }
		    }
		  }

		  return target;
		};

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(25), __esModule: true };

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(26);
		module.exports = __webpack_require__(29).Object.assign;

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.3.1 Object.assign(target, source)
		var $export = __webpack_require__(27);

		$export($export.S + $export.F, 'Object', {assign: __webpack_require__(42)});

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		var global    = __webpack_require__(28)
		  , core      = __webpack_require__(29)
		  , ctx       = __webpack_require__(30)
		  , hide      = __webpack_require__(32)
		  , PROTOTYPE = 'prototype';

		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , expProto  = exports[PROTOTYPE]
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && target[key] !== undefined;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(a, b, c){
		        if(this instanceof C){
		          switch(arguments.length){
		            case 0: return new C;
		            case 1: return new C(a);
		            case 2: return new C(a, b);
		          } return new C(a, b, c);
		        } return C.apply(this, arguments);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
		    if(IS_PROTO){
		      (exports.virtual || (exports.virtual = {}))[key] = out;
		      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
		      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
		    }
		  }
		};
		// type bitmap
		$export.F = 1;   // forced
		$export.G = 2;   // global
		$export.S = 4;   // static
		$export.P = 8;   // proto
		$export.B = 16;  // bind
		$export.W = 32;  // wrap
		$export.U = 64;  // safe
		$export.R = 128; // real proto method for `library` 
		module.exports = $export;

	/***/ },
	/* 28 */
	/***/ function(module, exports) {

		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

	/***/ },
	/* 29 */
	/***/ function(module, exports) {

		var core = module.exports = {version: '2.4.0'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		// optional / simple context binding
		var aFunction = __webpack_require__(31);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};

	/***/ },
	/* 31 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		var dP         = __webpack_require__(33)
		  , createDesc = __webpack_require__(41);
		module.exports = __webpack_require__(37) ? function(object, key, value){
		  return dP.f(object, key, createDesc(1, value));
		} : function(object, key, value){
		  object[key] = value;
		  return object;
		};

	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

		var anObject       = __webpack_require__(34)
		  , IE8_DOM_DEFINE = __webpack_require__(36)
		  , toPrimitive    = __webpack_require__(40)
		  , dP             = Object.defineProperty;

		exports.f = __webpack_require__(37) ? Object.defineProperty : function defineProperty(O, P, Attributes){
		  anObject(O);
		  P = toPrimitive(P, true);
		  anObject(Attributes);
		  if(IE8_DOM_DEFINE)try {
		    return dP(O, P, Attributes);
		  } catch(e){ /* empty */ }
		  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
		  if('value' in Attributes)O[P] = Attributes.value;
		  return O;
		};

	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(35);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};

	/***/ },
	/* 35 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = !__webpack_require__(37) && !__webpack_require__(38)(function(){
		  return Object.defineProperty(__webpack_require__(39)('div'), 'a', {get: function(){ return 7; }}).a != 7;
		});

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		// Thank's IE8 for his funny defineProperty
		module.exports = !__webpack_require__(38)(function(){
		  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
		});

	/***/ },
	/* 38 */
	/***/ function(module, exports) {

		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(35)
		  , document = __webpack_require__(28).document
		  // in old IE typeof document.createElement is 'object'
		  , is = isObject(document) && isObject(document.createElement);
		module.exports = function(it){
		  return is ? document.createElement(it) : {};
		};

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

		// 7.1.1 ToPrimitive(input [, PreferredType])
		var isObject = __webpack_require__(35);
		// instead of the ES6 spec version, we didn't implement @@toPrimitive case
		// and the second argument - flag - preferred type is a string
		module.exports = function(it, S){
		  if(!isObject(it))return it;
		  var fn, val;
		  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  throw TypeError("Can't convert object to primitive value");
		};

	/***/ },
	/* 41 */
	/***/ function(module, exports) {

		module.exports = function(bitmap, value){
		  return {
		    enumerable  : !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable    : !(bitmap & 4),
		    value       : value
		  };
		};

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// 19.1.2.1 Object.assign(target, source, ...)
		var getKeys  = __webpack_require__(43)
		  , gOPS     = __webpack_require__(58)
		  , pIE      = __webpack_require__(59)
		  , toObject = __webpack_require__(60)
		  , IObject  = __webpack_require__(47)
		  , $assign  = Object.assign;

		// should work with symbols and should have deterministic property order (V8 bug)
		module.exports = !$assign || __webpack_require__(38)(function(){
		  var A = {}
		    , B = {}
		    , S = Symbol()
		    , K = 'abcdefghijklmnopqrst';
		  A[S] = 7;
		  K.split('').forEach(function(k){ B[k] = k; });
		  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
		}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
		  var T     = toObject(target)
		    , aLen  = arguments.length
		    , index = 1
		    , getSymbols = gOPS.f
		    , isEnum     = pIE.f;
		  while(aLen > index){
		    var S      = IObject(arguments[index++])
		      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
		      , length = keys.length
		      , j      = 0
		      , key;
		    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
		  } return T;
		} : $assign;

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.2.14 / 15.2.3.14 Object.keys(O)
		var $keys       = __webpack_require__(44)
		  , enumBugKeys = __webpack_require__(57);

		module.exports = Object.keys || function keys(O){
		  return $keys(O, enumBugKeys);
		};

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		var has          = __webpack_require__(45)
		  , toIObject    = __webpack_require__(46)
		  , arrayIndexOf = __webpack_require__(50)(false)
		  , IE_PROTO     = __webpack_require__(54)('IE_PROTO');

		module.exports = function(object, names){
		  var O      = toIObject(object)
		    , i      = 0
		    , result = []
		    , key;
		  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
		  // Don't enum bug & hidden keys
		  while(names.length > i)if(has(O, key = names[i++])){
		    ~arrayIndexOf(result, key) || result.push(key);
		  }
		  return result;
		};

	/***/ },
	/* 45 */
	/***/ function(module, exports) {

		var hasOwnProperty = {}.hasOwnProperty;
		module.exports = function(it, key){
		  return hasOwnProperty.call(it, key);
		};

	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

		// to indexed object, toObject with fallback for non-array-like ES3 strings
		var IObject = __webpack_require__(47)
		  , defined = __webpack_require__(49);
		module.exports = function(it){
		  return IObject(defined(it));
		};

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		var cof = __webpack_require__(48);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
		  return cof(it) == 'String' ? it.split('') : Object(it);
		};

	/***/ },
	/* 48 */
	/***/ function(module, exports) {

		var toString = {}.toString;

		module.exports = function(it){
		  return toString.call(it).slice(8, -1);
		};

	/***/ },
	/* 49 */
	/***/ function(module, exports) {

		// 7.2.1 RequireObjectCoercible(argument)
		module.exports = function(it){
		  if(it == undefined)throw TypeError("Can't call method on  " + it);
		  return it;
		};

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		// false -> Array#indexOf
		// true  -> Array#includes
		var toIObject = __webpack_require__(46)
		  , toLength  = __webpack_require__(51)
		  , toIndex   = __webpack_require__(53);
		module.exports = function(IS_INCLUDES){
		  return function($this, el, fromIndex){
		    var O      = toIObject($this)
		      , length = toLength(O.length)
		      , index  = toIndex(fromIndex, length)
		      , value;
		    // Array#includes uses SameValueZero equality algorithm
		    if(IS_INCLUDES && el != el)while(length > index){
		      value = O[index++];
		      if(value != value)return true;
		    // Array#toIndex ignores holes, Array#includes - not
		    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
		      if(O[index] === el)return IS_INCLUDES || index || 0;
		    } return !IS_INCLUDES && -1;
		  };
		};

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		// 7.1.15 ToLength
		var toInteger = __webpack_require__(52)
		  , min       = Math.min;
		module.exports = function(it){
		  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
		};

	/***/ },
	/* 52 */
	/***/ function(module, exports) {

		// 7.1.4 ToInteger
		var ceil  = Math.ceil
		  , floor = Math.floor;
		module.exports = function(it){
		  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
		};

	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		var toInteger = __webpack_require__(52)
		  , max       = Math.max
		  , min       = Math.min;
		module.exports = function(index, length){
		  index = toInteger(index);
		  return index < 0 ? max(index + length, 0) : min(index, length);
		};

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		var shared = __webpack_require__(55)('keys')
		  , uid    = __webpack_require__(56);
		module.exports = function(key){
		  return shared[key] || (shared[key] = uid(key));
		};

	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		var global = __webpack_require__(28)
		  , SHARED = '__core-js_shared__'
		  , store  = global[SHARED] || (global[SHARED] = {});
		module.exports = function(key){
		  return store[key] || (store[key] = {});
		};

	/***/ },
	/* 56 */
	/***/ function(module, exports) {

		var id = 0
		  , px = Math.random();
		module.exports = function(key){
		  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
		};

	/***/ },
	/* 57 */
	/***/ function(module, exports) {

		// IE 8- don't enum bug keys
		module.exports = (
		  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
		).split(',');

	/***/ },
	/* 58 */
	/***/ function(module, exports) {

		exports.f = Object.getOwnPropertySymbols;

	/***/ },
	/* 59 */
	/***/ function(module, exports) {

		exports.f = {}.propertyIsEnumerable;

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		// 7.1.13 ToObject(argument)
		var defined = __webpack_require__(49);
		module.exports = function(it){
		  return Object(defined(it));
		};

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(62);

	/***/ },
	/* 62 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    default: obj
		  };
		};

	/***/ },
	/* 63 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_63__;

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _iconIcon = __webpack_require__(65);

		var _iconIcon2 = _interopRequireDefault(_iconIcon);

		var _spinnerSpinner = __webpack_require__(66);

		var _spinnerSpinner2 = _interopRequireDefault(_spinnerSpinner);

		var Overlay = _react2['default'].createClass({
		    displayName: 'Overlay',

		    propTypes: {
		        error: _react2['default'].PropTypes.bool,
		        togglePlay: _react2['default'].PropTypes.func,
		        paused: _react2['default'].PropTypes.bool,
		        copyKeys: _react2['default'].PropTypes.object,
		        loading: _react2['default'].PropTypes.bool
		    },

		    renderContent: function renderContent() {
		        var content;
		        if (this.props.error) {
		            content = _react2['default'].createElement(
		                'div',
		                { className: 'video-overlay__error' },
		                _react2['default'].createElement(
		                    'p',
		                    { className: 'video-overlay__error-text' },
		                    this.props.copyKeys.sourceError
		                )
		            );
		        } else if (this.props.loading) {
		            content = _react2['default'].createElement(
		                'div',
		                { className: 'video-overlay__loader' },
		                _react2['default'].createElement(_spinnerSpinner2['default'], null)
		            );
		        } else {
		            content = _react2['default'].createElement(
		                'div',
		                { className: 'video-overlay__play', onClick: this.props.togglePlay },
		                this.props.paused ? _react2['default'].createElement(_iconIcon2['default'], { name: 'play-1' }) : ''
		            );
		        }
		        return content;
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'div',
		            { className: 'video-overlay' },
		            this.renderContent()
		        );
		    }

		});

		exports['default'] = Overlay;
		module.exports = exports['default'];

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

		/*eslint-disable */
		/*
		 * Generated by the 'fontello-react' Grunt task.
		 */
		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var Icon = _react2['default'].createClass({
		    displayName: 'Icon',

		    propTypes: {
		        name: _react2['default'].PropTypes.oneOf(['play-1', 'volume-off', 'volume-down', 'volume-up', 'resize-full', 'resize-small', 'pause-1'])
		    },

		    /**
		     * Default the icon to the first one just to show something
		     * @return {Object} The default props
		     */
		    getDefaultProps: function getDefaultProps() {
		        return {
		            name: 'play-1'
		        };
		    },

		    render: function render() {
		        return _react2['default'].createElement('span', { className: 'video-icon video-icon--' + this.props.name });
		    }

		});

		exports['default'] = Icon;
		module.exports = exports['default'];

	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		var _interopRequireDefault = __webpack_require__(61)["default"];

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var Spinner = _react2["default"].createClass({
		    displayName: "Spinner",

		    render: function render() {
		        return _react2["default"].createElement(
		            "div",
		            { className: "video-spinner" },
		            _react2["default"].createElement("div", { className: "video-spinner__rect1" }),
		            _react2["default"].createElement("div", { className: "video-spinner__rect2" }),
		            _react2["default"].createElement("div", { className: "video-spinner__rect3" }),
		            _react2["default"].createElement("div", { className: "video-spinner__rect4" }),
		            _react2["default"].createElement("div", { className: "video-spinner__rect5" })
		        );
		    }

		});

		exports["default"] = Spinner;
		module.exports = exports["default"];

	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(23)['default'];

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _playPlay = __webpack_require__(68);

		var _playPlay2 = _interopRequireDefault(_playPlay);

		var _seekSeek = __webpack_require__(69);

		var _seekSeek2 = _interopRequireDefault(_seekSeek);

		var _muteMute = __webpack_require__(76);

		var _muteMute2 = _interopRequireDefault(_muteMute);

		var _timeTime = __webpack_require__(77);

		var _timeTime2 = _interopRequireDefault(_timeTime);

		var _fullscreenFullscreen = __webpack_require__(78);

		var _fullscreenFullscreen2 = _interopRequireDefault(_fullscreenFullscreen);

		var Controls = _react2['default'].createClass({
		    displayName: 'Controls',

		    propTypes: {
		        error: _react2['default'].PropTypes.bool,
		        children: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.node), _react2['default'].PropTypes.node])
		    },

		    getDefaultProps: function getDefaultProps() {
		        return {
		            children: [_react2['default'].createElement(_playPlay2['default'], null), _react2['default'].createElement(_seekSeek2['default'], null), _react2['default'].createElement(_timeTime2['default'], null), _react2['default'].createElement(_muteMute2['default'], null), _react2['default'].createElement(_fullscreenFullscreen2['default'], null)]
		        };
		    },

		    /**
		     * Returns children components with props
		     * from the parent Video component. Needed
		     * for when custom React components are used.
		     * @return {Array.<ReactElement>} An array of components.
		     */
		    renderChildren: function renderChildren() {
		        var _this = this;

		        return _react2['default'].Children.map(this.props.children, function (child) {
		            return _react2['default'].cloneElement(child, _extends({}, _this.props));
		        });
		    },

		    render: function render() {
		        return !this.props.error ? _react2['default'].createElement(
		            'div',
		            { className: 'video-controls video__controls' },
		            this.renderChildren()
		        ) : null;
		    }
		});

		exports['default'] = Controls;
		module.exports = exports['default'];

	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _iconIcon = __webpack_require__(65);

		var _iconIcon2 = _interopRequireDefault(_iconIcon);

		var Play = _react2['default'].createClass({
		    displayName: 'Play',

		    propTypes: {
		        copyKeys: _react2['default'].PropTypes.object,
		        togglePlay: _react2['default'].PropTypes.func,
		        paused: _react2['default'].PropTypes.bool
		    },

		    /**
		     * As controls receive all props for extensibility, we do a quick
		     * check and make sure only the props we care about have changed.
		     * @param  {object} nextProps The next props from parent
		     * @return {boolean}          Whether we re-render or not
		     */
		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		        return this.props.paused !== nextProps.paused || this.props.togglePlay !== nextProps.togglePlay;
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'button',
		            {
		                className: 'video-play video__control',
		                onClick: this.props.togglePlay,
		                'aria-label': this.props.paused ? this.props.copyKeys.play : this.props.copyKeys.pause },
		            this.props.paused ? _react2['default'].createElement(_iconIcon2['default'], { name: 'play-1' }) : _react2['default'].createElement(_iconIcon2['default'], { name: 'pause-1' })
		        );
		    }
		});

		exports['default'] = Play;
		module.exports = exports['default'];

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _progressbarProgressBar = __webpack_require__(70);

		var _progressbarProgressBar2 = _interopRequireDefault(_progressbarProgressBar);

		var Seek = _react2['default'].createClass({
		    displayName: 'Seek',

		    propTypes: {
		        copyKeys: _react2['default'].PropTypes.object,
		        seek: _react2['default'].PropTypes.func,
		        percentageBuffered: _react2['default'].PropTypes.number,
		        percentagePlayed: _react2['default'].PropTypes.number,
		        duration: _react2['default'].PropTypes.number
		    },

		    getInitialState: function getInitialState() {
		        return {
		            // When the child range input becomes focused,
		            // we need to set this custom seek bar to look
		            // 'focused' with the correct styles. Need to
		            // do this via a class.
		            focused: false
		        };
		    },

		    /**
		     * As controls receive all props for extensibility, we do a quick
		     * check and make sure only the props we care about have changed.
		     * @param  {object} nextProps The next props from parent
		     * @return {boolean}          Whether we re-render or not
		     */
		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		        return this.props.seek !== nextProps.seek || this.props.percentageBuffered !== nextProps.percentageBuffered || this.props.percentagePlayed !== nextProps.percentagePlayed || this.props.duration !== nextProps.duration;
		    },

		    /**
		     * Calculates the seek time based on change of input.
		     * @param  {object} e Event object
		     * @return {undefined}
		     */
		    seek: function seek(e) {
		        this.props.seek(e.target.value * this.props.duration / 100, true);
		    },

		    onFocus: function onFocus() {
		        this.setState({
		            focused: true
		        });
		    },

		    onBlur: function onBlur() {
		        this.setState({
		            focused: false
		        });
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'div',
		            {
		                className: 'video-seek video__control' + (this.state.focused ? ' video__control--focused' : ''),
		                'aria-label': this.props.copyKeys.seek },
		            _react2['default'].createElement(
		                'div',
		                { className: 'video-seek__container' },
		                _react2['default'].createElement('div', { style: {
		                        width: this.props.percentageBuffered + '%'
		                    }, className: 'video-seek__buffer-bar' }),
		                _react2['default'].createElement(_progressbarProgressBar2['default'], {
		                    onBlur: this.onBlur,
		                    onFocus: this.onFocus,
		                    onChange: this.seek,
		                    progress: this.props.percentagePlayed })
		            )
		        );
		    }
		});

		exports['default'] = Seek;
		module.exports = exports['default'];

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _defineProperty = __webpack_require__(71)['default'];

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var ProgressBar = _react2['default'].createClass({
		    displayName: 'ProgressBar',

		    propTypes: {
		        orientation: _react2['default'].PropTypes.string,
		        step: _react2['default'].PropTypes.number,
		        progress: _react2['default'].PropTypes.number,
		        onChange: _react2['default'].PropTypes.func,
		        onFocus: _react2['default'].PropTypes.func,
		        onBlur: _react2['default'].PropTypes.func
		    },

		    getDefaultProps: function getDefaultProps() {
		        return {
		            orientation: 'horizontal',
		            step: 0.1,
		            progress: 0,
		            onChange: this.onChange,
		            onFocus: this.onFocus,
		            onBlur: this.onBlur
		        };
		    },

		    componentDidMount: function componentDidMount() {
		        // 'orient' is not supported by React but
		        // is required for Firefox. Setting manually.
		        // https://github.com/facebook/react/issues/2453
		        this.refs.input.setAttribute('orient', this.props.orientation);
		    },

		    onChange: function onChange() {
		        // Placeholder
		    },

		    onFocus: function onFocus() {
		        // Placeholder
		    },

		    onBlur: function onBlur() {
		        // Placeholder
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'div',
		            { className: 'video-progress-bar ' + (this.props.orientation === 'horizontal' ? 'video-progress-bar--horizontal' : 'video-progress-bar--vertical') },
		            _react2['default'].createElement('div', { className: 'video-progress-bar__fill', style: _defineProperty({}, this.props.orientation === 'horizontal' ? 'width' : 'height', this.props.progress + '%') }),
		            _react2['default'].createElement('input', { className: 'video-progress-bar__input',
		                onBlur: this.props.onBlur,
		                onFocus: this.props.onFocus,
		                ref: 'input',
		                onChange: this.props.onChange,
		                type: 'range',
		                min: '0',
		                max: '100',
		                value: this.props.progress,
		                step: this.props.step })
		        );
		    }
		});

		exports['default'] = ProgressBar;
		module.exports = exports['default'];

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(72);

	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _defineProperty = __webpack_require__(73);

		var _defineProperty2 = _interopRequireDefault(_defineProperty);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = function (obj, key, value) {
		  if (key in obj) {
		    (0, _defineProperty2.default)(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }

		  return obj;
		};

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(74), __esModule: true };

	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(75);
		var $Object = __webpack_require__(29).Object;
		module.exports = function defineProperty(it, key, desc){
		  return $Object.defineProperty(it, key, desc);
		};

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		var $export = __webpack_require__(27);
		// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
		$export($export.S + $export.F * !__webpack_require__(37), 'Object', {defineProperty: __webpack_require__(33).f});

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _iconIcon = __webpack_require__(65);

		var _iconIcon2 = _interopRequireDefault(_iconIcon);

		var _progressbarProgressBar = __webpack_require__(70);

		var _progressbarProgressBar2 = _interopRequireDefault(_progressbarProgressBar);

		var Mute = _react2['default'].createClass({
		    displayName: 'Mute',

		    propTypes: {
		        copyKeys: _react2['default'].PropTypes.object,
		        volume: _react2['default'].PropTypes.number,
		        unmute: _react2['default'].PropTypes.func,
		        setVolume: _react2['default'].PropTypes.func,
		        toggleMute: _react2['default'].PropTypes.func,
		        muted: _react2['default'].PropTypes.bool
		    },

		    /**
		     * As controls receive all props for extensibility, we do a quick
		     * check and make sure only the props we care about have changed.
		     * @param  {object} nextProps The next props from parent
		     * @return {boolean}          Whether we re-render or not
		     */
		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		        return this.props.muted !== nextProps.muted || this.props.toggleMute !== nextProps.toggleMute || this.props.volume !== nextProps.volume || this.props.setVolume !== nextProps.setVolume || this.props.unmute !== nextProps.unmute;
		    },

		    /**
		     * Calculates the seek time based on click position and element offset.
		     * @param  {object} e Event object
		     * @return {undefined}
		     */
		    changeVolume: function changeVolume(e) {
		        this.props.setVolume(e.target.value / 100, true);
		        this.props.unmute();
		    },

		    toggleMute: function toggleMute() {
		        // If we volume has been dragged to 0, assume it is in
		        // a muted state and then toggle to full volume.
		        if (this.props.volume <= 0) {
		            this.props.setVolume(1);
		        } else {
		            this.props.toggleMute();
		        }
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'div',
		            { className: 'video-mute video__control' },
		            _react2['default'].createElement(
		                'button',
		                {
		                    className: 'video-mute__inner',
		                    onClick: this.toggleMute,
		                    'aria-label': this.props.muted || this.props.volume <= 0 ? this.props.copyKeys.unmute : this.props.copyKeys.mute },
		                this.props.muted || this.props.volume <= 0 ? _react2['default'].createElement(_iconIcon2['default'], { name: 'volume-off' }) : _react2['default'].createElement(_iconIcon2['default'], { name: 'volume-up' })
		            ),
		            _react2['default'].createElement(
		                'div',
		                { className: 'video-mute__volume' },
		                _react2['default'].createElement(
		                    'div',
		                    { className: 'video-mute__track' },
		                    _react2['default'].createElement(_progressbarProgressBar2['default'], {
		                        orientation: 'vertical',
		                        onChange: this.changeVolume,
		                        progress: this.props.muted ? 0 : this.props.volume * 100
		                    })
		                )
		            )
		        );
		    }
		});

		exports['default'] = Mute;
		module.exports = exports['default'];

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _iconIcon = __webpack_require__(65);

		var _iconIcon2 = _interopRequireDefault(_iconIcon);

		var Time = _react2['default'].createClass({
		    displayName: 'Time',

		    propTypes: {
		        currentTime: _react2['default'].PropTypes.number,
		        duration: _react2['default'].PropTypes.number
		    },

		    /**
		     * As controls receive all props for extensibility, we do a quick
		     * check and make sure only the props we care about have changed.
		     * @param  {object} nextProps The next props from parent
		     * @return {boolean}          Whether we re-render or not
		     */
		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		        return this.props.currentTime !== nextProps.currentTime || this.props.duration !== nextProps.duration;
		    },

		    /**
		     * Formats time into a friendlier format
		     * @param  {number} seconds Time in seconds
		     * @return {string}         Timestamp in the format of HH:MM:SS
		     */
		    formatTime: function formatTime(seconds) {
		        var date = new Date(Date.UTC(1970, 1, 1, 0, 0, 0, 0));
		        seconds = isNaN(seconds) ? 0 : Math.floor(seconds);
		        date.setSeconds(seconds);
		        return date.toISOString().substr(11, 8);
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'div',
		            { className: 'video-time video__control' },
		            _react2['default'].createElement(
		                'span',
		                { className: 'video-time__current' },
		                this.formatTime(this.props.currentTime)
		            ),
		            '/',
		            _react2['default'].createElement(
		                'span',
		                { className: 'video-time__duration' },
		                this.formatTime(this.props.duration)
		            )
		        );
		    }
		});

		exports['default'] = Time;
		module.exports = exports['default'];

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(61)['default'];

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});

		var _react = __webpack_require__(63);

		var _react2 = _interopRequireDefault(_react);

		var _iconIcon = __webpack_require__(65);

		var _iconIcon2 = _interopRequireDefault(_iconIcon);

		var Fullscreen = _react2['default'].createClass({
		    displayName: 'Fullscreen',

		    propTypes: {
		        copyKeys: _react2['default'].PropTypes.object,
		        fullscreen: _react2['default'].PropTypes.func
		    },

		    /**
		     * As controls receive all props for extensibility, we do a quick
		     * check and make sure only the props we care about have changed.
		     * @param  {object} nextProps The next props from parent
		     * @return {boolean}          Whether we re-render or not
		     */
		    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
		        return this.props.fullscreen !== nextProps.fullscreen;
		    },

		    render: function render() {
		        return _react2['default'].createElement(
		            'button',
		            {
		                onClick: this.props.fullscreen,
		                className: 'video-fullscreen video__control',
		                'aria-label': this.props.copyKeys.fullscreen },
		            _react2['default'].createElement(_iconIcon2['default'], { name: 'resize-full' })
		        );
		    }
		});

		exports['default'] = Fullscreen;
		module.exports = exports['default'];

	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
		 * Build: `lodash modern modularize exports="npm" -o ./`
		 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 * Available under MIT license <https://lodash.com/license>
		 */
		var debounce = __webpack_require__(80);

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/**
		 * Creates a throttled function that only invokes `func` at most once per
		 * every `wait` milliseconds. The throttled function comes with a `cancel`
		 * method to cancel delayed invocations. Provide an options object to indicate
		 * that `func` should be invoked on the leading and/or trailing edge of the
		 * `wait` timeout. Subsequent calls to the throttled function return the
		 * result of the last `func` call.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
		 * on the trailing edge of the timeout only if the the throttled function is
		 * invoked more than once during the `wait` timeout.
		 *
		 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
		 * for details over the differences between `_.throttle` and `_.debounce`.
		 *
		 * @static
		 * @memberOf _
		 * @category Function
		 * @param {Function} func The function to throttle.
		 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		 * @param {Object} [options] The options object.
		 * @param {boolean} [options.leading=true] Specify invoking on the leading
		 *  edge of the timeout.
		 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
		 *  edge of the timeout.
		 * @returns {Function} Returns the new throttled function.
		 * @example
		 *
		 * // avoid excessively updating the position while scrolling
		 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		 *
		 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
		 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
		 *   'trailing': false
		 * }));
		 *
		 * // cancel a trailing throttled call
		 * jQuery(window).on('popstate', throttled.cancel);
		 */
		function throttle(func, wait, options) {
		  var leading = true,
		      trailing = true;

		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }
		  if (options === false) {
		    leading = false;
		  } else if (isObject(options)) {
		    leading = 'leading' in options ? !!options.leading : leading;
		    trailing = 'trailing' in options ? !!options.trailing : trailing;
		  }
		  return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
		}

		/**
		 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
		 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(1);
		 * // => false
		 */
		function isObject(value) {
		  // Avoid a V8 JIT bug in Chrome 19-20.
		  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		module.exports = throttle;


	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
		 * Build: `lodash modern modularize exports="npm" -o ./`
		 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 * Available under MIT license <https://lodash.com/license>
		 */
		var getNative = __webpack_require__(81);

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeMax = Math.max,
		    nativeNow = getNative(Date, 'now');

		/**
		 * Gets the number of milliseconds that have elapsed since the Unix epoch
		 * (1 January 1970 00:00:00 UTC).
		 *
		 * @static
		 * @memberOf _
		 * @category Date
		 * @example
		 *
		 * _.defer(function(stamp) {
		 *   console.log(_.now() - stamp);
		 * }, _.now());
		 * // => logs the number of milliseconds it took for the deferred function to be invoked
		 */
		var now = nativeNow || function() {
		  return new Date().getTime();
		};

		/**
		 * Creates a debounced function that delays invoking `func` until after `wait`
		 * milliseconds have elapsed since the last time the debounced function was
		 * invoked. The debounced function comes with a `cancel` method to cancel
		 * delayed invocations. Provide an options object to indicate that `func`
		 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
		 * Subsequent calls to the debounced function return the result of the last
		 * `func` invocation.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
		 * on the trailing edge of the timeout only if the the debounced function is
		 * invoked more than once during the `wait` timeout.
		 *
		 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
		 * for details over the differences between `_.debounce` and `_.throttle`.
		 *
		 * @static
		 * @memberOf _
		 * @category Function
		 * @param {Function} func The function to debounce.
		 * @param {number} [wait=0] The number of milliseconds to delay.
		 * @param {Object} [options] The options object.
		 * @param {boolean} [options.leading=false] Specify invoking on the leading
		 *  edge of the timeout.
		 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
		 *  delayed before it is invoked.
		 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
		 *  edge of the timeout.
		 * @returns {Function} Returns the new debounced function.
		 * @example
		 *
		 * // avoid costly calculations while the window size is in flux
		 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		 *
		 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
		 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
		 *   'leading': true,
		 *   'trailing': false
		 * }));
		 *
		 * // ensure `batchLog` is invoked once after 1 second of debounced calls
		 * var source = new EventSource('/stream');
		 * jQuery(source).on('message', _.debounce(batchLog, 250, {
		 *   'maxWait': 1000
		 * }));
		 *
		 * // cancel a debounced call
		 * var todoChanges = _.debounce(batchLog, 1000);
		 * Object.observe(models.todo, todoChanges);
		 *
		 * Object.observe(models, function(changes) {
		 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
		 *     todoChanges.cancel();
		 *   }
		 * }, ['delete']);
		 *
		 * // ...at some point `models.todo` is changed
		 * models.todo.completed = true;
		 *
		 * // ...before 1 second has passed `models.todo` is deleted
		 * // which cancels the debounced `todoChanges` call
		 * delete models.todo;
		 */
		function debounce(func, wait, options) {
		  var args,
		      maxTimeoutId,
		      result,
		      stamp,
		      thisArg,
		      timeoutId,
		      trailingCall,
		      lastCalled = 0,
		      maxWait = false,
		      trailing = true;

		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }
		  wait = wait < 0 ? 0 : (+wait || 0);
		  if (options === true) {
		    var leading = true;
		    trailing = false;
		  } else if (isObject(options)) {
		    leading = !!options.leading;
		    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
		    trailing = 'trailing' in options ? !!options.trailing : trailing;
		  }

		  function cancel() {
		    if (timeoutId) {
		      clearTimeout(timeoutId);
		    }
		    if (maxTimeoutId) {
		      clearTimeout(maxTimeoutId);
		    }
		    lastCalled = 0;
		    maxTimeoutId = timeoutId = trailingCall = undefined;
		  }

		  function complete(isCalled, id) {
		    if (id) {
		      clearTimeout(id);
		    }
		    maxTimeoutId = timeoutId = trailingCall = undefined;
		    if (isCalled) {
		      lastCalled = now();
		      result = func.apply(thisArg, args);
		      if (!timeoutId && !maxTimeoutId) {
		        args = thisArg = undefined;
		      }
		    }
		  }

		  function delayed() {
		    var remaining = wait - (now() - stamp);
		    if (remaining <= 0 || remaining > wait) {
		      complete(trailingCall, maxTimeoutId);
		    } else {
		      timeoutId = setTimeout(delayed, remaining);
		    }
		  }

		  function maxDelayed() {
		    complete(trailing, timeoutId);
		  }

		  function debounced() {
		    args = arguments;
		    stamp = now();
		    thisArg = this;
		    trailingCall = trailing && (timeoutId || !leading);

		    if (maxWait === false) {
		      var leadingCall = leading && !timeoutId;
		    } else {
		      if (!maxTimeoutId && !leading) {
		        lastCalled = stamp;
		      }
		      var remaining = maxWait - (stamp - lastCalled),
		          isCalled = remaining <= 0 || remaining > maxWait;

		      if (isCalled) {
		        if (maxTimeoutId) {
		          maxTimeoutId = clearTimeout(maxTimeoutId);
		        }
		        lastCalled = stamp;
		        result = func.apply(thisArg, args);
		      }
		      else if (!maxTimeoutId) {
		        maxTimeoutId = setTimeout(maxDelayed, remaining);
		      }
		    }
		    if (isCalled && timeoutId) {
		      timeoutId = clearTimeout(timeoutId);
		    }
		    else if (!timeoutId && wait !== maxWait) {
		      timeoutId = setTimeout(delayed, wait);
		    }
		    if (leadingCall) {
		      isCalled = true;
		      result = func.apply(thisArg, args);
		    }
		    if (isCalled && !timeoutId && !maxTimeoutId) {
		      args = thisArg = undefined;
		    }
		    return result;
		  }
		  debounced.cancel = cancel;
		  return debounced;
		}

		/**
		 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
		 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(1);
		 * // => false
		 */
		function isObject(value) {
		  // Avoid a V8 JIT bug in Chrome 19-20.
		  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		module.exports = debounce;


	/***/ },
	/* 81 */
	/***/ function(module, exports) {

		/**
		 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
		 * Build: `lodash modern modularize exports="npm" -o ./`
		 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 * Available under MIT license <https://lodash.com/license>
		 */

		/** `Object#toString` result references. */
		var funcTag = '[object Function]';

		/** Used to detect host constructors (Safari > 5). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/**
		 * Checks if `value` is object-like.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 */
		function isObjectLike(value) {
		  return !!value && typeof value == 'object';
		}

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to resolve the decompiled source of functions. */
		var fnToString = Function.prototype.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = object == null ? undefined : object[key];
		  return isNative(value) ? value : undefined;
		}

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in older versions of Chrome and Safari which return 'function' for regexes
		  // and Safari 8 equivalents which return 'object' for typed array constructors.
		  return isObject(value) && objToString.call(value) == funcTag;
		}

		/**
		 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
		 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(1);
		 * // => false
		 */
		function isObject(value) {
		  // Avoid a V8 JIT bug in Chrome 19-20.
		  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is a native function.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
		 * @example
		 *
		 * _.isNative(Array.prototype.push);
		 * // => true
		 *
		 * _.isNative(_);
		 * // => false
		 */
		function isNative(value) {
		  if (value == null) {
		    return false;
		  }
		  if (isFunction(value)) {
		    return reIsNative.test(fnToString.call(value));
		  }
		  return isObjectLike(value) && reIsHostCtor.test(value);
		}

		module.exports = getNative;


	/***/ },
	/* 82 */
	/***/ function(module, exports) {

		'use strict';

		Object.defineProperty(exports, '__esModule', {
		    value: true
		});
		var copy = {
		    sourceError: 'Video cannot be played in this browser.',
		    play: 'Play video',
		    pause: 'Pause video',
		    mute: 'Mute video',
		    unmute: 'Unmute video',
		    fullscreen: 'View video fullscreen',
		    seek: 'Seek video'
		};
		exports['default'] = copy;
		module.exports = exports['default'];

	/***/ }
	/******/ ])
	});
	;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	          value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(186);

	var _reactAddonsCssTransitionGroup = __webpack_require__(402);

	var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

	var _HeaderLeft = __webpack_require__(415);

	var _HeaderLeft2 = _interopRequireDefault(_HeaderLeft);

	var _Expose = __webpack_require__(416);

	var _Expose2 = _interopRequireDefault(_Expose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Layout = function (_React$Component) {
	          _inherits(Layout, _React$Component);

	          function Layout() {
	                    _classCallCheck(this, Layout);

	                    return _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).apply(this, arguments));
	          }

	          _createClass(Layout, [{
	                    key: "render",


	                    //////////////////////////////////////////////////////


	                    value: function render() {

	                              //set up logic in transitions here
	                              var path = this.props.location.pathname; // not to mess with yet


	                              // console.log('Path reads', path);

	                              ///////////////////////////////////////////////////////////////
	                              return _react2.default.createElement(
	                                        "div",
	                                        null,
	                                        _react2.default.createElement(
	                                                  "div",
	                                                  null,
	                                                  _react2.default.createElement(_HeaderLeft2.default, null)
	                                        ),
	                                        _react2.default.createElement(
	                                                  "div",
	                                                  null,
	                                                  _react2.default.createElement(_Expose2.default, null)
	                                        ),
	                                        _react2.default.createElement(
	                                                  "div",
	                                                  { className: "mainContainer" },
	                                                  _react2.default.createElement(
	                                                            _reactAddonsCssTransitionGroup2.default,
	                                                            { transitionName: path,
	                                                                      transitionEnterTimeout: 600, transitionLeaveTimeout: 600 },
	                                                            _react2.default.cloneElement(this.props.children, { key: path })
	                                                  )
	                                        )
	                              );
	                    }
	          }]);

	          return Layout;
	}(_react2.default.Component);

	exports.default = Layout;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	module.exports = __webpack_require__(403);


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TransitionGroup = __webpack_require__(404);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _CSSTransitionGroupChild = __webpack_require__(407);

	var _CSSTransitionGroupChild2 = _interopRequireDefault(_CSSTransitionGroupChild);

	var _PropTypes = __webpack_require__(414);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  transitionName: _PropTypes.nameShape.isRequired,

	  transitionAppear: _propTypes2.default.bool,
	  transitionEnter: _propTypes2.default.bool,
	  transitionLeave: _propTypes2.default.bool,
	  transitionAppearTimeout: (0, _PropTypes.transitionTimeout)('Appear'),
	  transitionEnterTimeout: (0, _PropTypes.transitionTimeout)('Enter'),
	  transitionLeaveTimeout: (0, _PropTypes.transitionTimeout)('Leave')
	};

	var defaultProps = {
	  transitionAppear: false,
	  transitionEnter: true,
	  transitionLeave: true
	};

	var CSSTransitionGroup = function (_React$Component) {
	  _inherits(CSSTransitionGroup, _React$Component);

	  function CSSTransitionGroup() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, CSSTransitionGroup);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._wrapChild = function (child) {
	      return _react2.default.createElement(_CSSTransitionGroupChild2.default, {
	        name: _this.props.transitionName,
	        appear: _this.props.transitionAppear,
	        enter: _this.props.transitionEnter,
	        leave: _this.props.transitionLeave,
	        appearTimeout: _this.props.transitionAppearTimeout,
	        enterTimeout: _this.props.transitionEnterTimeout,
	        leaveTimeout: _this.props.transitionLeaveTimeout
	      }, child);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  // We need to provide this childFactory so that
	  // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	  // leave while it is leaving.


	  CSSTransitionGroup.prototype.render = function render() {
	    return _react2.default.createElement(_TransitionGroup2.default, _extends({}, this.props, { childFactory: this._wrapChild }));
	  };

	  return CSSTransitionGroup;
	}(_react2.default.Component);

	CSSTransitionGroup.displayName = 'CSSTransitionGroup';


	CSSTransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	CSSTransitionGroup.defaultProps = defaultProps;

	exports.default = CSSTransitionGroup;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _chainFunction = __webpack_require__(405);

	var _chainFunction2 = _interopRequireDefault(_chainFunction);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(191);

	var _warning2 = _interopRequireDefault(_warning);

	var _ChildMapping = __webpack_require__(406);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  component: _propTypes2.default.any,
	  childFactory: _propTypes2.default.func,
	  children: _propTypes2.default.node
	};

	var defaultProps = {
	  component: 'span',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};

	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.performAppear = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));
	      } else {
	        _this._handleDoneAppearing(key, component);
	      }
	    };

	    _this._handleDoneAppearing = function (key, component) {
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performEnter = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));
	      } else {
	        _this._handleDoneEntering(key, component);
	      }
	    };

	    _this._handleDoneEntering = function (key, component) {
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performLeave = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key, component);
	      }
	    };

	    _this._handleDoneLeaving = function (key, component) {
	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.keysToEnter.push(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _extends({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    };

	    _this.childRefs = Object.create(null);

	    _this.state = {
	      children: (0, _ChildMapping.getChildMapping)(props.children)
	    };
	    return _this;
	  }

	  TransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };

	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key, this.childRefs[key]);
	      }
	    }
	  };

	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)
	    });

	    for (var key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (var _key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);
	      if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {
	        this.keysToLeave.push(_key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  };

	  TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;

	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(function (key) {
	      return _this2.performEnter(key, _this2.childRefs[key]);
	    });

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(function (key) {
	      return _this2.performLeave(key, _this2.childRefs[key]);
	    });
	  };

	  TransitionGroup.prototype.render = function render() {
	    var _this3 = this;

	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];

	    var _loop = function _loop(key) {
	      var child = _this3.state.children[key];
	      if (child) {
	        var isCallbackRef = typeof child.ref !== 'string';
	        var factoryChild = _this3.props.childFactory(child);
	        var ref = function ref(r) {
	          _this3.childRefs[key] = r;
	        };

	        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(isCallbackRef, 'string refs are not supported on children of TransitionGroup and will be ignored. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute') : void 0;

	        // Always chaining the refs leads to problems when the childFactory
	        // wraps the child. The child ref callback gets called twice with the
	        // wrapper and the child. So we only need to chain the ref if the
	        // factoryChild is not different from child.
	        if (factoryChild === child && isCallbackRef) {
	          ref = (0, _chainFunction2.default)(child.ref, ref);
	        }

	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(_react2.default.cloneElement(factoryChild, {
	          key: key,
	          ref: ref
	        }));
	      }
	    };

	    for (var key in this.state.children) {
	      _loop(key);
	    }

	    // Do not forward TransitionGroup props to primitive DOM nodes
	    var props = _extends({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;

	    return _react2.default.createElement(this.props.component, props, childrenToRender);
	  };

	  return TransitionGroup;
	}(_react2.default.Component);

	TransitionGroup.displayName = 'TransitionGroup';


	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	TransitionGroup.defaultProps = defaultProps;

	exports.default = TransitionGroup;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 405 */
/***/ (function(module, exports) {

	
	module.exports = function chain(){
	  var len = arguments.length
	  var args = [];

	  for (var i = 0; i < len; i++)
	    args[i] = arguments[i]

	  args = args.filter(function(fn){ return fn != null })

	  if (args.length === 0) return undefined
	  if (args.length === 1) return args[0]

	  return args.reduce(function(current, next){
	    return function chainedFunction() {
	      current.apply(this, arguments);
	      next.apply(this, arguments);
	    };
	  })
	}


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;

	var _react = __webpack_require__(2);

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children) {
	  if (!children) {
	    return children;
	  }
	  var result = {};
	  _react.Children.map(children, function (child) {
	    return child;
	  }).forEach(function (child) {
	    result[child.key] = child;
	  });
	  return result;
	}

	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    if (next.hasOwnProperty(key)) {
	      return next[key];
	    }

	    return prev[key];
	  }

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = {};

	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (next.hasOwnProperty(prevKey)) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending.hasOwnProperty(nextKey)) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }

	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _addClass = __webpack_require__(408);

	var _addClass2 = _interopRequireDefault(_addClass);

	var _removeClass = __webpack_require__(410);

	var _removeClass2 = _interopRequireDefault(_removeClass);

	var _requestAnimationFrame = __webpack_require__(411);

	var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);

	var _properties = __webpack_require__(413);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(39);

	var _PropTypes = __webpack_require__(414);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var events = [];
	if (_properties.transitionEnd) events.push(_properties.transitionEnd);
	if (_properties.animationEnd) events.push(_properties.animationEnd);

	function addEndListener(node, listener) {
	  if (events.length) {
	    events.forEach(function (e) {
	      return node.addEventListener(e, listener, false);
	    });
	  } else {
	    setTimeout(listener, 0);
	  }

	  return function () {
	    if (!events.length) return;
	    events.forEach(function (e) {
	      return node.removeEventListener(e, listener, false);
	    });
	  };
	}

	var propTypes = {
	  children: _propTypes2.default.node,
	  name: _PropTypes.nameShape.isRequired,

	  // Once we require timeouts to be specified, we can remove the
	  // boolean flags (appear etc.) and just accept a number
	  // or a bool for the timeout flags (appearTimeout etc.)
	  appear: _propTypes2.default.bool,
	  enter: _propTypes2.default.bool,
	  leave: _propTypes2.default.bool,
	  appearTimeout: _propTypes2.default.number,
	  enterTimeout: _propTypes2.default.number,
	  leaveTimeout: _propTypes2.default.number
	};

	var CSSTransitionGroupChild = function (_React$Component) {
	  _inherits(CSSTransitionGroupChild, _React$Component);

	  function CSSTransitionGroupChild() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, CSSTransitionGroupChild);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.componentWillAppear = function (done) {
	      if (_this.props.appear) {
	        _this.transition('appear', done, _this.props.appearTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillEnter = function (done) {
	      if (_this.props.enter) {
	        _this.transition('enter', done, _this.props.enterTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillLeave = function (done) {
	      if (_this.props.leave) {
	        _this.transition('leave', done, _this.props.leaveTimeout);
	      } else {
	        done();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  CSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {
	    this.classNameAndNodeQueue = [];
	    this.transitionTimeouts = [];
	  };

	  CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounted = true;

	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });

	    this.classNameAndNodeQueue.length = 0;
	  };

	  CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {
	    var node = (0, _reactDom.findDOMNode)(this);

	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }

	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timer = null;
	    var removeListeners = void 0;

	    (0, _addClass2.default)(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClassAndNode(activeClassName, node);

	    // Clean-up the animation after the specified delay
	    var finish = function finish(e) {
	      if (e && e.target !== node) {
	        return;
	      }

	      clearTimeout(timer);
	      if (removeListeners) removeListeners();

	      (0, _removeClass2.default)(node, className);
	      (0, _removeClass2.default)(node, activeClassName);

	      if (removeListeners) removeListeners();

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    if (timeout) {
	      timer = setTimeout(finish, timeout);
	      this.transitionTimeouts.push(timer);
	    } else if (_properties.transitionEnd) {
	      removeListeners = addEndListener(node, finish);
	    }
	  };

	  CSSTransitionGroupChild.prototype.queueClassAndNode = function queueClassAndNode(className, node) {
	    var _this2 = this;

	    this.classNameAndNodeQueue.push({
	      className: className,
	      node: node
	    });

	    if (!this.rafHandle) {
	      this.rafHandle = (0, _requestAnimationFrame2.default)(function () {
	        return _this2.flushClassNameAndNodeQueue();
	      });
	    }
	  };

	  CSSTransitionGroupChild.prototype.flushClassNameAndNodeQueue = function flushClassNameAndNodeQueue() {
	    if (!this.unmounted) {
	      this.classNameAndNodeQueue.forEach(function (obj) {
	        // This is for to force a repaint,
	        // which is necessary in order to transition styles when adding a class name.
	        /* eslint-disable no-unused-expressions */
	        obj.node.scrollTop;
	        /* eslint-enable no-unused-expressions */
	        (0, _addClass2.default)(obj.node, obj.className);
	      });
	    }
	    this.classNameAndNodeQueue.length = 0;
	    this.rafHandle = null;
	  };

	  CSSTransitionGroupChild.prototype.render = function render() {
	    var props = _extends({}, this.props);
	    delete props.name;
	    delete props.appear;
	    delete props.enter;
	    delete props.leave;
	    delete props.appearTimeout;
	    delete props.enterTimeout;
	    delete props.leaveTimeout;
	    delete props.children;
	    return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);
	  };

	  return CSSTransitionGroupChild;
	}(_react2.default.Component);

	CSSTransitionGroupChild.displayName = 'CSSTransitionGroupChild';


	CSSTransitionGroupChild.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};

	exports.default = CSSTransitionGroupChild;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addClass;

	var _hasClass = __webpack_require__(409);

	var _hasClass2 = _interopRequireDefault(_hasClass);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element)) element.className = element.className + ' ' + className;
	}
	module.exports = exports['default'];

/***/ }),
/* 409 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hasClass;
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
	}
	module.exports = exports["default"];

/***/ }),
/* 410 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	};

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _inDOM = __webpack_require__(412);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
	var cancel = 'clearTimeout';
	var raf = fallback;
	var compatRaf = void 0;

	var getKey = function getKey(vendor, k) {
	  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
	};

	if (_inDOM2.default) {
	  vendors.some(function (vendor) {
	    var rafKey = getKey(vendor, 'request');

	    if (rafKey in window) {
	      cancel = getKey(vendor, 'cancel');
	      return raf = function raf(cb) {
	        return window[rafKey](cb);
	      };
	    }
	  });
	}

	/* https://github.com/component/raf */
	var prev = new Date().getTime();
	function fallback(fn) {
	  var curr = new Date().getTime(),
	      ms = Math.max(0, 16 - (curr - prev)),
	      req = setTimeout(fn, ms);

	  prev = curr;
	  return req;
	}

	compatRaf = function compatRaf(cb) {
	  return raf(cb);
	};
	compatRaf.cancel = function (id) {
	  window[cancel] && typeof window[cancel] === 'function' && window[cancel](id);
	};
	exports.default = compatRaf;
	module.exports = exports['default'];

/***/ }),
/* 412 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = undefined;

	var _inDOM = __webpack_require__(412);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var transform = 'transform';
	var prefix = void 0,
	    transitionEnd = void 0,
	    animationEnd = void 0;
	var transitionProperty = void 0,
	    transitionDuration = void 0,
	    transitionTiming = void 0,
	    transitionDelay = void 0;
	var animationName = void 0,
	    animationDuration = void 0,
	    animationTiming = void 0,
	    animationDelay = void 0;

	if (_inDOM2.default) {
	  var _getTransitionPropert = getTransitionProperties();

	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;


	  exports.transform = transform = prefix + '-' + transform;
	  exports.transitionProperty = transitionProperty = prefix + '-transition-property';
	  exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
	  exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
	  exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';

	  exports.animationName = animationName = prefix + '-animation-name';
	  exports.animationDuration = animationDuration = prefix + '-animation-duration';
	  exports.animationTiming = animationTiming = prefix + '-animation-delay';
	  exports.animationDelay = animationDelay = prefix + '-animation-timing-function';
	}

	exports.transform = transform;
	exports.transitionProperty = transitionProperty;
	exports.transitionTiming = transitionTiming;
	exports.transitionDelay = transitionDelay;
	exports.transitionDuration = transitionDuration;
	exports.transitionEnd = transitionEnd;
	exports.animationName = animationName;
	exports.animationDuration = animationDuration;
	exports.animationTiming = animationTiming;
	exports.animationDelay = animationDelay;
	exports.animationEnd = animationEnd;
	exports.default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};


	function getTransitionProperties() {
	  var style = document.createElement('div').style;

	  var vendorMap = {
	    O: function O(e) {
	      return 'o' + e.toLowerCase();
	    },
	    Moz: function Moz(e) {
	      return e.toLowerCase();
	    },
	    Webkit: function Webkit(e) {
	      return 'webkit' + e;
	    },
	    ms: function ms(e) {
	      return 'MS' + e;
	    }
	  };

	  var vendors = Object.keys(vendorMap);

	  var transitionEnd = void 0,
	      animationEnd = void 0;
	  var prefix = '';

	  for (var i = 0; i < vendors.length; i++) {
	    var vendor = vendors[i];

	    if (vendor + 'TransitionProperty' in style) {
	      prefix = '-' + vendor.toLowerCase();
	      transitionEnd = vendorMap[vendor]('TransitionEnd');
	      animationEnd = vendorMap[vendor]('AnimationEnd');
	      break;
	    }
	  }

	  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';

	  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';

	  style = null;

	  return { animationEnd: animationEnd, transitionEnd: transitionEnd, prefix: prefix };
	}

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.nameShape = undefined;
	exports.transitionTimeout = transitionTimeout;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(262);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function transitionTimeout(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	      }
	    }

	    return null;
	  };
	}

	var nameShape = exports.nameShape = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  active: _propTypes2.default.string
	}), _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  enterActive: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  leaveActive: _propTypes2.default.string,
	  appear: _propTypes2.default.string,
	  appearActive: _propTypes2.default.string
	})]);

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactMotion = __webpack_require__(253);

	var _reactRouter = __webpack_require__(186);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HeaderLeft = _react2.default.createClass({
	  displayName: 'HeaderLeft',
	  getInitialState: function getInitialState() {
	    return { open: false };
	    return { compact: false };
	  },
	  handleMouseDown: function handleMouseDown() {
	    this.setState({ open: !this.state.open });
	  },
	  handleTouchStart: function handleTouchStart(e) {
	    e.preventDefault();
	    this.handleMouseDown();
	  },
	  navaHome: function navaHome() {
	    var Messanger = window.location.pathname;

	    if (Messanger === "/") {
	      //set curent path to..
	      var Messanger = 0;
	    }
	    if (Messanger === "/home") {
	      //set curent path to..
	      var Messanger = 1;
	    }
	    if (Messanger === "/about") {
	      //set curent path to..
	      var Messanger = 2;
	    }
	    if (Messanger === "/contact") {
	      //set curent path to..
	      var Messanger = 3;
	    }
	    _reactRouter.browserHistory.push({
	      pathname: 'home',
	      state: { message: Messanger }
	    });
	    //console.log(Messanger);
	  },
	  navaHomeTouch: function navaHomeTouch(e) {
	    e.preventDefault();
	    this.navaHome();
	  },
	  navaAbout: function navaAbout() {
	    var Messanger = window.location.pathname;

	    if (Messanger === "/") {
	      //set curent path to..
	      var Messanger = 0;
	    }
	    if (Messanger === "/home") {
	      //set curent path to..
	      var Messanger = 1;
	    }
	    if (Messanger === "/about") {
	      //set curent path to..
	      var Messanger = 2;
	    }
	    if (Messanger === "/contact") {
	      //set curent path to..
	      var Messanger = 3;
	    }

	    _reactRouter.browserHistory.push({
	      pathname: 'about',
	      state: { message: Messanger }
	    });
	    //console.log(Messanger);
	  },
	  navaAboutTouch: function navaAboutTouch(e) {
	    e.preventDefault();
	    this.navaAbout();
	  },
	  navaContact: function navaContact() {
	    var Messanger = window.location.pathname;

	    if (Messanger === "/") {
	      //set curent path to..
	      var Messanger = 0;
	    }
	    if (Messanger === "/home") {
	      //set curent path to..
	      var Messanger = 1;
	    }
	    if (Messanger === "/about") {
	      //set curent path to..
	      var Messanger = 2;
	    }
	    if (Messanger === "/contact") {
	      //set curent path to..
	      var Messanger = 3;
	    }
	    _reactRouter.browserHistory.push({
	      pathname: 'contact',
	      state: { message: Messanger }
	    });
	    //console.log(Messanger);
	  },
	  navaContactTouch: function navaContactTouch(e) {
	    e.preventDefault();
	    this.navaAbout();
	  },

	  ////////////////////////Hamburger fun Start //////////////////////

	  hamburgerToggle: function hamburgerToggle() {
	    //toggle it
	    this.setState({ compact: !this.state.compact });
	  },
	  hamburgerTouchToggle: function hamburgerTouchToggle(e) {
	    e.preventDefault();
	    this.hamburgerToggle();
	  },


	  ///////////////////////Hamburger Fun End /////////////////////////
	  render: function render() {
	    var _this = this;

	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(
	        'div',
	        { id: 'MenuBar1' },
	        _react2.default.createElement(
	          'div',
	          { id: 'MenuBtn',
	            onMouseDown: function onMouseDown() {
	              _this.handleMouseDown();_this.hamburgerToggle();
	            },

	            onTouchStart: function onTouchStart() {
	              _this.hamburgerTouchToggle;_this.handleTouchStart;
	            } },
	          _react2.default.createElement(
	            _reactMotion.Motion,
	            { style: {
	                //designate all of the differences in interpolated values in these ternary operators
	                dash: (0, _reactMotion.spring)(this.state.compact ? -41 : 160),
	                translateY: (0, _reactMotion.spring)(this.state.compact ? 8 : 0),
	                translateX: (0, _reactMotion.spring)(this.state.compact ? -8 : 0),

	                mozTranslateY: (0, _reactMotion.spring)(this.state.compact ? 8 : 0),
	                mozTranslateX: (0, _reactMotion.spring)(this.state.compact ? -8 : 0),

	                msTranslateY: (0, _reactMotion.spring)(this.state.compact ? 10 : 0),
	                msTranslateX: (0, _reactMotion.spring)(this.state.compact ? -0 : 0),

	                rotate: (0, _reactMotion.spring)(this.state.compact ? 45 : 180) } },
	            function (_ref) {
	              var dash = _ref.dash,
	                  rotate = _ref.rotate,
	                  translateY = _ref.translateY,
	                  translateX = _ref.translateX,
	                  mozTranslateY = _ref.mozTranslateY,
	                  mozTranslateX = _ref.mozTranslateX,
	                  msTranslateX = _ref.msTranslateX,
	                  msTranslateY = _ref.msTranslateY;
	              return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                  'svg',
	                  { id: 'HambergerButton', viewBox: '0 0 50 50' },
	                  _react2.default.createElement(
	                    'title',
	                    null,
	                    'Hamberger Button'
	                  ),
	                  _react2.default.createElement(
	                    'g',
	                    { style: {
	                        strokeDashoffset: '' + dash
	                      },
	                      className: 'react-letters', 'data-name': 'react motion letters' },
	                    _react2.default.createElement('path', {
	                      className: 'cls-5', d: 'M44.5,25H3.4C3.7,13.3,13.2,3.4,25,3.4C37,3.4,46.6,13,46.6,25S37,46.6,25,46.6C13.2,46.6,3.6,36.7,3.4,25' })
	                  )
	                ),
	                _react2.default.createElement('div', { id: 'HamX1', style: {
	                    WebkitTransform: 'rotate(' + -rotate + 'deg) translateY( ' + translateY + 'px)\n                    translateX( ' + translateX + 'px)',
	                    transform: 'rotate(' + -rotate + 'deg) translateY( ' + translateY + 'px )\n                    translateX( ' + translateX + 'px)',
	                    MozTransform: 'rotate(' + -rotate + 'deg) translateY( ' + mozTranslateY + 'px )\n                    translateX( ' + mozTranslateX + 'px)',
	                    MsTransform: 'rotate(' + -rotate + 'deg) translateY( ' + mozTranslateY + 'px )\n                    translateX( ' + mozTranslateX + 'px)'

	                  } }),
	                _react2.default.createElement('div', { id: 'HamX2', style: {
	                    WebkitTransform: 'rotate(' + rotate + 'deg) translateY( ' + -translateY + 'px)\n                   translateX( ' + translateX + 'px)',
	                    transform: 'rotate(' + rotate + 'deg) translateY( ' + -translateY + 'px )\n                  translateX( ' + translateX + 'px)',
	                    MozTransform: 'rotate(' + rotate + 'deg) translateY( ' + -mozTranslateY + 'px )\n                  translateX( ' + mozTranslateX + 'px)'

	                  } })
	              );
	            }
	          )
	        )
	      ),
	      _react2.default.createElement(
	        _reactMotion.Motion,
	        { style: { x: (0, _reactMotion.spring)(this.state.open ? 360 : 0) } },
	        function (_ref2) {
	          var x = _ref2.x;
	          return (
	            // children is a callback which should accept the current value of
	            // `style`

	            _react2.default.createElement(
	              'div',
	              { id: 'MenuTab', style: {
	                  WebkitTransform: 'translate3d(' + x + 'px, 0, 0)',
	                  transform: 'translate3d(' + x + 'px, 0, 0)'
	                } },
	              _react2.default.createElement(
	                'div',
	                { id: 'LogoMain' },
	                _react2.default.createElement('img', { id: 'LogoSVG', src: './images/FinalOCMLogoINC.svg', alt: 'Occipital Core Media Inc.' }),
	                _react2.default.createElement(
	                  'h2',
	                  null,
	                  ' Design | Market Experience '
	                ),
	                _react2.default.createElement(
	                  'h3',
	                  null,
	                  '"We love to create great design concepts and deliver them to the world."'
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { id: 'NavArea' },
	                _react2.default.createElement(
	                  'nav',
	                  null,
	                  _react2.default.createElement(
	                    'ul',
	                    { id: 'NavAreaNav' },
	                    _react2.default.createElement(
	                      'li',
	                      null,
	                      _react2.default.createElement(
	                        'a',
	                        {
	                          onMouseDown: function onMouseDown() {
	                            _this.navaHome();_this.handleMouseDown();_this.hamburgerToggle();
	                          },
	                          onTouchStart: function onTouchStart() {
	                            _this.navaHomeTouch;_this.handleTouchStart;
	                          }
	                        },
	                        'Home'
	                      )
	                    ),
	                    _react2.default.createElement(
	                      'li',
	                      null,
	                      _react2.default.createElement(
	                        'a',
	                        {
	                          onMouseDown: function onMouseDown() {
	                            _this.navaAbout();_this.handleMouseDown();_this.hamburgerToggle();
	                          },
	                          onTouchStart: function onTouchStart() {
	                            _this.navaAboutTouch;_this.handleTouchStart;
	                          }
	                        },
	                        'About'
	                      )
	                    ),
	                    _react2.default.createElement(
	                      'li',
	                      null,
	                      _react2.default.createElement(
	                        'a',
	                        {
	                          onMouseDown: function onMouseDown() {
	                            _this.navaContact();_this.handleMouseDown();_this.hamburgerToggle();
	                          },
	                          onTouchStart: function onTouchStart() {
	                            _this.navaContactTouch;_this.handleTouchStart;
	                          }
	                        },
	                        'Contact'
	                      )
	                    )
	                  )
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { id: 'TwitterArea' },
	                _react2.default.createElement('a', { id: 'Twitter', href: 'https://www.adobe.com' })
	              )
	            )
	          );
	        }
	      )
	    );
	  }
	});

	exports.default = HeaderLeft;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactMotion = __webpack_require__(253);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Expose = _react2.default.createClass({
	  displayName: 'Expose',
	  getInitialState: function getInitialState() {
	    return { open: false };
	  },
	  handleMouseDown: function handleMouseDown() {
	    this.setState({ open: !this.state.open });
	  },
	  handleTouchStart: function handleTouchStart(e) {
	    e.preventDefault();
	    this.handleMouseDown();
	  },
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(
	        'div',
	        { id: 'ExpoBtn',
	          onMouseDown: this.handleMouseDown,
	          onTouchStart: this.handleTouchStart },
	        _react2.default.createElement('img', { src: './images/BubbleLogo.gif', width: '60', height: '60', alt: 'Expose of Projects' })
	      ),
	      _react2.default.createElement(
	        _reactMotion.Motion,
	        { style: { x: (0, _reactMotion.spring)(this.state.open ? 0 : -2000) } },
	        function (_ref) {
	          var x = _ref.x;
	          return (
	            // children is a callback which should accept the current value of
	            // `style`

	            _react2.default.createElement(
	              'div',
	              { id: 'ExpoPane', style: {
	                  WebkitTransform: 'translate3d(' + x + 'px, 0, 0)',
	                  transform: 'translate3d(' + x + 'px, 0, 0)'
	                } },
	              _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                  'h2',
	                  null,
	                  'Hi there'
	                )
	              )
	            )
	          );
	        }
	      )
	    );
	  }
	});

	exports.default = Expose;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(186);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Title = _react2.default.createClass({
	  displayName: "Title",
	  getInitialState: function getInitialState() {
	    return { countItDown: 100 };
	  },
	  tick: function tick() {
	    this.setState({ countItDown: this.state.countItDown - 1 });
	    if (this.state.countItDown <= 0) {
	      clearInterval(this.interval);
	    }
	    if (this.state.countItDown === 0) {

	      var Messanger = window.location.pathname;
	      if (Messanger === "/") {
	        //set curent path to..
	        var Messanger = 0;
	      }
	      if (Messanger === "/home") {
	        //set curent path to..
	        var Messanger = 1;
	      }
	      if (Messanger === "/about") {
	        //set curent path to..
	        var Messanger = 2;
	      }
	      if (Messanger === "/contact") {
	        //set curent path to..
	        var Messanger = 3;
	      }
	      _reactRouter.browserHistory.push({
	        pathname: 'home',
	        state: { message: Messanger }
	      });
	    }
	  },
	  componentDidMount: function componentDidMount() {
	    this.setState({ secondsRemaining: this.props.countItDown });
	    this.interval = setInterval(this.tick, 100);
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    clearInterval(this.interval);
	  },
	  render: function render() {

	    return _react2.default.createElement(
	      "div",
	      { className: "TitleScreen" },
	      _react2.default.createElement(
	        "div",
	        { id: "Loader" },
	        _react2.default.createElement(
	          "svg",
	          { id: "LoaderSVG", viewBox: "0 0 500 500" },
	          _react2.default.createElement(
	            "g",
	            { id: "Blue" },
	            _react2.default.createElement(
	              "style",
	              null,
	              ".st0{fill:#1D4F90;}"
	            ),
	            _react2.default.createElement("circle", { className: "st0", cx: "250", cy: "248", r: "223.4" })
	          ),
	          _react2.default.createElement(
	            "g",
	            { id: "Ring" },
	            _react2.default.createElement(
	              "style",
	              null,
	              ".st1{height:200px;width:200px;fill:none;stroke:#39B54A;stroke-width:23.4;stroke-dashoffset:" + this.state.countItDown * 15 + ";stroke-dasharray: 1500 1500 ;}"
	            ),
	            _react2.default.createElement("path", { className: "st1", d: "M14.5,247.9C15.1,118.4,120.3,12.5,250,12.5c130.1,0,235.5,105.4,235.5,235.5S380.1,483.5,250,483.5\r C120.2,483.5,15,377.6,14.5,247.9" })
	          ),
	          _react2.default.createElement(
	            "g",
	            { id: "brain" },
	            _react2.default.createElement(
	              "style",
	              null,
	              ".st4{fill:#FD9A2B;}"
	            ),
	            _react2.default.createElement("path", { className: "st4", d: "M218.9,328.2c3.5,5,9.6,6.9,9.5,13.4c-2.2,1.5-4.2,1.3-6-1c-0.6-0.7-1.9-1.5-2.6-1.3\r c-7.8,2.2-13.1-2.6-18.8-6.5c-2.7-1.8-4.7-3.9-5.2-7.4c-0.1-1-2.2-2.3-3.5-2.4c-4.2-0.5-5.2-1.9-3.7-5.5c1.7-4,2.1-7.5-0.5-11.8\r c-1.5-2.6,0.4-7.1,0.8-10.8c0-0.2,0.5-0.5,0.8-0.5c5-1.1,10-2.1,14.9-3.2c0.8-0.2,1.7-0.3,2.5-0.8c0.7-0.4,1.3-1.2,1.9-1.8\r c-0.7-0.5-1.4-1.4-2.2-1.4c-3.2,0-6.4,0.2-9.6,0.5c-4.7,0.6-9.4,1.5-14.2,1.9c-1,0.1-2.5-1.7-3.2-2.9c-0.4-0.9-0.2-2.9,0.5-3.4\r c1.4-1,3.2-1.9,4.9-2c3.3-0.1,5.2-1.5,6.4-4.5c1.2-3.1,2.7-6.1,4.1-9.1c1.3-3,0.5-4.4-2.7-4.8c-2.6-0.4-5.1-0.7-7.6-1.5\r c-2.4-0.7-3.7-3.1-2.9-5.1c1.7-4.4,0-7-3.7-9.4c0.8-0.5,1.3-0.8,1.8-1.1c1.9-1.1,3.1-2.7,2.4-5c-0.7-2.4-1-5.2-4.7-5.1\r c-1.4,0.1-2.8-0.7-4.2-1.1c1.2-0.8,2.4-1.5,3.5-2.3c0.8-0.5,1.7-1,2.4-1.6c2.4-1.7,4.2-1.7,6.4,0.7c1.3,1.4,3.9,1.6,5.9,2.2\r c0.7,0.2,1.6-0.1,2.2,0.3c2.8,1.6,5.5,2,8.6,0.9c1-0.3,2.8,1.7,4.4,2.7c1.6-1.4,1.4-3.6-1.6-10.3c3.6,2.6,5.1,7.5,4.1,11.7\r c-0.6,2.4-3.1,2.5-3.8,2c-3-2-3.6,0.6-4,2.1c-1.4,6-2.6,12-3.6,18c-0.2,1,0.6,2.4,1.4,3.3c1.2,1.2,2.8,2.1,4.1,3.2\r c1.9,1.6,3.3,3.4,2.2,6.2c-0.3,0.9,0,2.1,0.4,3c0.2,0.5,1.3,1,1.8,0.9c0.5-0.1,1-1,1.2-1.6c0.8-2.6,1.3-5.2,2.2-7.8\r c0.3-0.9,1.2-1.6,1.8-2.4c0.7,0.8,1.5,1.5,2.2,2.3c0.2,0.2,0.4,0.5,0.8,0.9c0.7-1.3,1.3-2.4,2.3-4.3c0.8,2.8,1.3,4.9,1.9,6.9\r c2.2,7.9,4.9,10.1,13.1,10.2c3.8,0,7.5-0.2,11.3-0.4c0.8,0,1.6-0.5,2.4-0.8c3-1.3,6-2.8,9.1-3.9c3.1-1.1,3.9-3,1.7-6.7\r c1.7,1,2.6,1.3,3.3,1.9c4.3,3.3,9.1,3.1,13-0.8c2.1-2.1,3.9-4.6,5.8-6.9c1.3-1.6,1.1-2.9-0.9-3.9c-2.6-1.3-5-2.8-7.5-4.2\r c1.2-0.9,2.9-1.5,3-2.3c0.7-5.9,5.1-8.4,9.7-10.6c1.3-0.6,2.4-0.9,1.6-2.8c-0.7-1.7-1.7-1.8-3.3-1.4c-4.7,1.3-9.5,2.8-14.8,0.5\r c2.7-3.6,5.6-7,10-8.7c2.2-0.9,4.4-1.5,6.5-2.6c5.1-2.6,10-5.4,15.1-7.9c0.6-0.3,2.1,0,2.5,0.6c0.6,0.8,0.9,2.2,0.7,3.2\r c-0.1,0.8-1.1,1.5-1.8,2.2c-3.4,3.5-6.8,7-10.2,10.4c-0.9,0.9-2,1.6-3,2.3c2.3,2,6.7,1.8,7.5-0.8c1.3-4,4.7-5.2,7.8-6.7\r c3.8-1.8,7.7-3.3,11.8-4.4c2.7-0.8,5.7-0.5,8.5-0.9c1.1-0.2,2.3-0.6,3.2-1.3c4-2.8,7.9-5.5,13-5.7c2.5-0.1,4.9-0.5,7.4-0.9\r c0.7-0.1,1.4-0.8,2-1.2c-0.5-0.7-0.9-1.4-1.4-2c-0.3-0.4-0.9-0.7-1.2-1c-2.8-2.7-2.8-6.5,0.4-8.6c2.6-1.7,5.5-3,8.5-3.9\r c4-1.3,4.5-2.4,2.3-6c-0.8-1.3-0.7-3.7-1.8-4.2c-2.9-1.6-4.6-5.4-8.5-5.3c-0.4,0-0.8-0.3-1.1-0.6c-1-1.1-0.7-8.3,0.4-9.3\r c6.4-5.7,12.9-11.4,19.3-17c0.5-0.4,1.3-0.7,1.4-1.2c0.4-1.3,1.1-2.9,0.6-3.8c-0.5-0.9-2.2-1.3-3.4-1.6c-0.7-0.2-1.6,0.4-2.4,0.6\r c-1.6-2.9-1.5-3.2,1.8-6.6c-5.3-2.5-10.2-5.1-15.5-7.1c-3.8-1.4-7.9-1.8-11.9-2.8c-1.7-0.5-3.3-1.4-5-2.1\r c-1.1-0.4-2.5-1.1-3.5-0.8c-0.6,0.2-0.8,1.9-1.3,3.2c-4.1-3.4-8.3-6.8-12.4-10.3c-2.3-2-4.4-4.4-6.9-6.2c-1-0.8-2.7-0.7-4.5-1.2\r c2.6-4.2,6.4-2.5,9.7-2.6c0-0.3,0.1-0.5,0.1-0.8c-5.6-0.9-11.3-1.8-16.9-2.7c-0.2,0.4-0.4,0.8-0.6,1.1c1.7,1.5,3.4,2.9,4.9,4.3\r c-1.3,1.4-2.6,2.7-4.1,4.3c-1.6-1.3-3.4-2.6-5.2-3.9c-0.9-0.7-1.8-1.6-2.9-2c-6.3-2.9-7.9-2-9,4.8c-0.2,1.4-1,2.8-1.6,4.1\r c-0.4-0.1-0.8-0.2-1.2-0.3c0-2.6,0-5.3,0-7.9c-6.6-1.7-13.5-2.1-19.5-5.3c0-0.5,0.1-1,0.1-1.5c2.1,0,4.2-0.3,6.3-0.1\r c2,0.2,4,1.1,6,1.3c1.2,0.1,2.5-0.5,3.7-0.8c-0.7-1.8-1-4.3-2.3-5.1c-2.4-1.4-5.4-1.8-8.2-2.5c-3.2-0.7-6.5-1.2-9.8-1.9\r c-0.8-0.2-1.4-1.2-1.6-1.4c4,0.7,8.2,1.7,12.5,2.2c1.7,0.2,3.6-0.7,5.4-1c0.6-0.1,1.3-0.5,1.9-0.4c3.9,0.6,7.9,1.2,11.8,2.1\r c1,0.2,1.7,1.4,2.6,2.2c-0.2,0.3-0.3,0.5-0.5,0.8c-2-0.5-4-0.9-6.2-1.4c1.1,3,7.1,2.4,4.3,7.4c3.1,0.8,5.9,1.8,8.2-1.4\r c0.6-0.7,2-1,3.1-1.2c1-0.2,2.2,0.2,3.2-0.2c0.9-0.3,1.6-1.2,2.4-1.8c-0.7-0.8-1.2-1.6-2-2.2c-0.6-0.4-1.5-0.4-2.1-0.8\r c-1-0.6-2-1.4-2.9-2.1c0.9-0.8,1.7-1.8,2.7-2.5c0.6-0.5,1.5-0.8,2.1-1.1c-5.4-5.1-11.8-4-18.1-3.2c-0.9,0.1-1.8,0.7-2.6,1.2\r c-0.5,0.3-0.8,1-1.2,1c-4,0.5-8,0.9-12.1,1c1.6-0.7,3.2-1.3,5.1-2.1c-2.6-1.4-4.9-2.6-7.1-3.8c0.1-0.3,0.1-0.7,0.2-1\r c1.6,0,3.3-0.4,4.7,0.1c5.2,1.5,10.4,1.9,15.6,0.8c0.9-0.2,2.2-0.7,1.7,1.2c0.8-0.1,1.9,0.2,2.4-0.3c2.9-2.6,6.3-1.8,9.4-1.2\r c3.9,0.8,7.8,2.1,11.6,3.4c1,0.3,2,1.1,2.5,2c1.7,3.7,4.8,3.4,8,3c2.7-0.3,5.3-0.8,8-1.1c6.2-0.8,12-0.1,17,3.9\r c1.2,0.9,2.2,2.1,3.3,3.1c5.5,5.5,11.4,10.3,18.3,14.1c8,4.3,15.2,10.1,22.7,15.3c3.7,2.6,7.6,5.1,10.7,8.3c6.3,6.7,11,14.2,11,24\r c0,3.1,0.6,6.3,1.1,10.5c-1.6-2.9-2.7-5.2-4-7.3c-1.4-2.2-2.9-4.5-4.7-6.4c-3-2.9-6.3-5.4-9.4-8c-0.5,1.5-0.6,4.5-2,5.5\r c-1.4,1-4.2-0.2-7-0.4c-1.4,2,0.9,7-5.5,7.2c2.5,1.7,4.2,2.6,5.5,3.9c2.6,2.4,4.9,5.2,7.6,7.5c1.8,1.5,4.2,2.4,6.3,3.6\r c1.6,0.9,3.1,1.8,4.5,2.9c3.5,2.8,7.8,1.8,9.2-3.1c4.2,4.1,8.1,7.8,11.5,11.1c-2.3,0.2-4.6,0.3-6.8,0.6c-0.6,0.1-1.6,0.8-1.6,1.3\r c-0.3,4.7-4.6,5-7.5,6.8c-1.9,1.2-4.6,2.2-2.3,5.4c0.3,0.4,0.2,1.4,0,2c-0.7,2.2,0.7,6,2.7,7.1c2.8,1.5,5.7,2.7,6.2,6.4\r c0.1,0.6,1.1,1.2,1.9,1.4c1.9,0.6,3.9,1.5,5.8,1.5c1.4,0,2.8-1.3,4.8-2.3c-0.9,4.2-1.7,8.5-2.9,12.6c-0.8,3-1.9,5.9-3.2,8.7\r c-1.5,3.2-2.9,6.9-5.4,9c-7.6,6.4-12.9,14.7-19.4,22.1c-3.2,3.7-6.9,7.1-10.8,10.1c-6.3,4.8-12.9,9.3-19.5,13.7\r c-2.7,1.8-5.8,2.8-8.7,4.2c-5,2.5-9.8,5.6-15,7.3c-7.8,2.6-15.9,4.2-23.9,6.4c-2.4,0.6-4.7,1.7-7.1,2.1c-5.1,1-10.3,1.4-15.3,2.6\r c-4.9,1.2-9.5,3.3-14.3,4.7c-4.6,1.3-9.3,2.4-14,3.3c-1.7,0.3-3.5,0-4.5-2.3c-0.5-1.1-2.3-1.7-3.7-2.3c-1.5-0.6-3.1-1-4.6-1.4\r c-2.4-0.6-3.7-2.1-3.7-4.6c0-2.6-1.2-4.1-3.9-4.2c-9.6-0.2-16.1-6.4-22.9-12c-1.4-1.1-3-2-4.4-3.1c-1.2-0.9-2.4-2-3.5-3\r c-1.7,2-1.8,3.3,0.8,5.1c5.4,3.6,10.9,6.9,16.3,10.4c0.9,0.6,1.8,1.8,1.9,2.8c0.1,0.5-1.4,1.5-2.4,1.8c-2,0.8-4,1.5-6.1,2.1\r c-2.6,0.7-2.6,1.9-1,3.6c0.4,0.5,1,0.9,1.2,1.5c0.2,0.5,0.5,1.5,0.2,1.7c-0.5,0.4-1.3,0.5-1.9,0.5\r C221.8,329.1,220.8,328.7,218.9,328.2z M380.6,216.2c0.4,0.1,0.8,0.2,1.2,0.3c1.9-4.5,3.7-9,5.6-13.5c0.4,0,0.8,0,1.3-0.1\r c0.5,1.4,1.5,2.8,1.3,4c-1.6,7.1-4.5,13.5-10.3,18.3c-1.1,0.9-1.8,2.4-2.4,3.7c-0.9,2.1,1,2.8,2.3,3c0.9,0.1,2.6-0.9,2.7-1.6\r c1-8.2,6.3-14.3,10.3-20.9c1.7-2.8,0.7-5.9-1.9-7.7c-2.9-2-5.8-1.9-9.1-1.2C382.1,205.8,378,210.9,380.6,216.2z M366.3,191.9\r c3.7-4.2,4.7-4.6,10.1-5c0.9-0.1,2.4-0.6,2.4-0.9c-0.2-2.1-0.7-4.1-1.1-6.2c-1.6,0.3-3.2,0.6-4.7,1.1c-0.5,0.2-0.9,0.9-1.3,1.4\r c-2,2.6-4.2,5.1-6,7.9c-1.4,2.2-2.3,4.7-3.1,7.2c-0.2,0.6,1,2.3,1.7,2.4c1.6,0.2,3.6,0.2,5-0.4c2.3-1.1,4.4-2.7,6.6,0\r c2.4-5.6,2.4-5.6-3.4-6C370.6,193.3,368.8,192.5,366.3,191.9z M372.9,132.1c0.2-0.3,0.5-0.6,0.7-0.9c-3.3-2.3-6.5-4.6-9.9-6.8\r c-4.5-2.9-9-5.9-14.6-6.6c-3.3-0.4-4.2,0.2-3.8,3.6c0.1,1,0.9,2.2,1.7,2.7c2.2,1.2,4.5,1.9,6.8,2.9c2.1,0.9,4,1.1,6-0.5\r c0.6-0.5,2.3-0.3,3.1,0.1C366.4,128.4,369.6,130.3,372.9,132.1z M406.7,193c-0.7-0.8-1-1.6-1.5-1.7c-3.6-0.7-7.1-1.4-10.7-1.9\r c-0.1,0-0.9,1.6-0.7,2.3c1.1,3.6,2.5,7,0.8,10.9c-0.2,0.4,0.7,1.7,1.3,1.8c2.7,0.4,5-1.5,5.1-4.3\r C401.2,196.5,401.8,193.4,406.7,193z M239.2,310.9c-0.1-1,0-1.4-0.1-1.6c-5.6-6-11.2-12.1-17-18c-0.9-0.9-2.5-1.1-3.8-1.7\r c0.4,1.4,0.8,2.8,1.3,4.2c0.1,0.3,0.4,0.5,0.6,0.8c5.2,4.9,10.3,9.7,15.6,14.5C236.6,309.9,237.8,310.2,239.2,310.9z M336.6,108.2\r c-2-6.8-11.3-6.7-17.9-1.2c2.7,1,5,2.6,7.3,2.7C329.4,109.7,332.9,108.7,336.6,108.2z M317.4,238.8c3.4,3.3,6.1,4.9,10.1,3.1\r c2.5-1.2,5.3-1.6,7.9-2.5c1.8-0.6,3.5-1.6,2.9-4.2c-0.6,0.1-1,0.1-1.4,0.3c-4.6,1.2-9.2,2.9-14.2,1.9\r C321.2,237,319.5,238.1,317.4,238.8z M396.4,208.3c-0.1,0.5-0.5,1.1-0.4,1.7c0.4,3.1-0.5,5.5-2.5,8c-2.2,2.7-4,5.9-5.6,9.1\r c-1,2-1.3,4.4-1.9,6.6c0.6,0.2,1.1,0.5,1.7,0.7c1.5-2.3,3.4-4.5,4.5-7c2.2-4.9,4-10,5.8-14.6C397.4,211.2,396.9,209.9,396.4,208.3\r z M388.4,143.5c0.1,3.1,0.3,5.4,3.1,5.6c2.2,0.2,2.3,1.3,2.5,2.9c0.3,3,1.1,3.3,3.5,2c-0.1-1.7-0.5-3.3-0.3-4.7\r c0.3-2-0.3-3.2-2.1-3.8C393.1,144.8,391,144.3,388.4,143.5z M373.2,176.2c-0.2-0.4-0.4-1.2-1-1.6c-0.3-0.2-1.2,0.1-1.7,0.5\r c-2.3,2-4.7,3.3-7.9,2.4c-0.7-0.2-2.1,0.9-2.5,1.8c-0.4,0.8,0.2,2,0.3,3c1-0.3,2.1-0.4,3.1-0.8c2.2-0.8,4.4-2.5,6.4-2.3\r C372.6,179.6,372.8,178.3,373.2,176.2z M371.5,136.9c-4-0.8-7.3-1.5-10.5-2.2c-0.1,0.4-0.2,0.7-0.4,1.1c0.7,0.8,1.4,1.5,2.1,2.3\r C366.8,142.3,366.8,142.3,371.5,136.9z M375.4,225.3c-1.5-0.1-2.7-0.3-3.8-0.1c-0.8,0.1-1.8,0.7-2.1,1.4c-0.5,1.2-0.6,2.6-0.9,3.9\r c1.1,0.2,2.3,0.7,3.3,0.5C374.7,230.2,375.3,227.9,375.4,225.3z M342.3,122c0.1-3.3-2.2-4.9-4.8-6.1c-1-0.5-2.3-0.2-3.4-0.3\r c0.6,1.1,1,2.5,2,3.1C337.9,120.1,340.1,121,342.3,122z M298.5,239.4c-0.9,1.1-1.9,2.5-2.9,3.7c1.7,1.3,2.9,2.1,4.4,3.2\r c1-1.2,2-2.4,3-3.6C301.3,241.5,300.1,240.6,298.5,239.4z M390.8,240.2c0-0.3,0.1-0.5,0.1-0.8c-2-0.6-3.9-1.4-6-1.7\r c-0.9-0.1-1.9,0.8-2.9,1.3c0.9,0.5,1.9,1.5,2.8,1.6C386.8,240.8,388.8,240.4,390.8,240.2z M338.7,128.9c0.2-0.5,0.4-0.9,0.6-1.4\r c-2.3-1-4.6-2.1-6.8-3.1c-0.2,0.4-0.4,0.8-0.5,1.2C333.7,127.5,335.6,129.5,338.7,128.9z M380.2,149.7c0.6,0.2,1.3,0.4,1.9,0.6\r c0.4-1.3,0.8-2.7,1.1-4c0-0.1-1.2-0.4-1.8-0.6C381,147,380.6,148.4,380.2,149.7z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M137.5,145.3c-1.4,4-2.8,7.8-4.1,11.6c-0.1,0.3,0.2,0.7,0.6,2.3c1.2-2.1,2-3.4,2.8-4.8\r c0.4,0.3,0.8,0.5,1.2,0.8c0.1,2.7-1.5,5-2.5,7.4c-0.4,0.9-0.3,2-0.4,3c0.9,0,1.8,0.1,2.6,0.1c0.2,0.2,0.3,0.3,0.5,0.5\r c-2.3,1.4-4.5,3.5-7,4.2c-8.1,2.2-11.2,8.8-14,15.4c-0.9,2.1-0.3,5,0,7.5c0.2,1.7,1,3.2-1.7,4.1c-0.4-3.2-0.8-6.4-1.1-9.5\r c-0.4-0.1-0.7-0.1-1.1-0.2c-1,2.2-2.3,4.3-3.1,6.5c-1.4,4.1-3.3,7.3-7.9,8.6c-1.7,0.5-3.3,2.1-4.3,3.7c-2.3,3.3-4.3,6.9-6.4,10.4\r c-1.1-4.2-2.2-8.4-3.3-12.7c-0.2-0.1-0.5-0.2-0.7-0.4c-1.6,3.6-3.2,7.1-4.8,10.9c-0.8-0.7-1.3-1.2-1.9-1.8\r c-0.2,0.3-0.4,0.6-0.5,0.9c-3.2,5.3-4.8,10.8-3.9,17.3c0.6,4.3-0.3,8.8-0.5,13.2c-0.1,1.1,0,2.2,0,3.6c5.5-1.2,5.9-5.3,6-9.5\r c0.4,0,0.8,0,1.3,0c0.3,1.3,1,2.6,0.9,3.8c-0.2,2.6-1.1,5.1-1.3,7.7c-0.2,2.7-0.8,4-3.9,3.6c-1.5-0.2-3.1,0.9-4.9,1.4\r c-0.6-2.7-2.7-5.6,0.7-8.4c-2.9-1.4-3.3-1.8-1.7-4.5c1.9-3.2,1.8-6.3,1.5-9.9c-0.7-7.7,0.2-15.3,4.8-22c3.9-5.5,6.7-11.3,6.8-18.4\r c0.1-4.5,2.8-8.3,6.1-11.4c2.1-2,3.4-4.1,3.9-7.1c0.8-4.8,2.4-9.4,6.1-12.9c2-1.9,4.1-3.8,6.2-5.8c0.3-0.3,0.9-0.7,0.8-1\r c-1.3-3.7,2.3-6,2.6-9.3c0.1-1.1,1.2-2.3,1.9-3.3c2.2-3,4.4-6,6.6-9c0.7-0.9,0.8-2.4,2.9-1.6c0.6,0.2,2.3-1.9,3.3-3.1\r c0.9-1,1.3-2.4,2.1-3.5c0.3-0.4,1.3-0.4,2-0.5c0.1,0.7,0.4,1.4,0.1,2c-1.1,2.5-1,5.7-4.5,6.5c-0.4,0.1-0.6,1.1-0.8,1.6\r c-0.6,1.4-1.1,2.8-1.8,4.1c-1.8,3-2.9,2.9-4.5-0.1c-3.1,3.5-3.4,6.3-1.1,10.1c2.8-1.2,5.4-2.5,6.8-5.7c1-2.3,2.9-4.3,4.4-6.4\r c0.2-0.3,0.5-0.8,0.5-1.1c-0.2-5.2,3.7-7.9,6.4-11.3c-1.2,5.8-2.2,11.5-3.8,17.1c-0.5,1.8-2.2,4.2-3.8,4.7\r c-5.5,1.7-6.6,6.1-7.6,10.7c-0.9,4.2-1.5,8.5-2.7,12.6c-1.2,4-4.8,5.9-8.2,7.9c-3.4,2-6.6,4-7.2,8.7c2.2-0.1,4.3-0.3,6.7-0.4\r c-3.3,5.9-10.2,8.2-12.3,14.8c0.8,0.3,1.2,0.6,1.7,0.8c0.5,0.2,1,0.3,1.2,0.4c4.3-5.3,8.4-10.3,12.5-15.4c0.4-0.5,0.9-1.1,0.9-1.7\r c-0.3-5.1,3.3-7.8,6.5-10.8c1.8-1.7,3.5-3.5,5.2-5.3c0.4-0.5,0.7-1.4,1.2-1.5c3.9-0.9,3.4-4.2,3.8-6.9c0.5-3,0.5-6,1.1-9\r C132,145.4,133.2,144.7,137.5,145.3z M104.7,161.7c-0.3-0.1-0.6-0.2-0.9-0.3c-1.8,6.5-3.6,12.9-5.6,19.9\r C106,175.9,103.2,168.2,104.7,161.7z M87.1,192.6c0.4,0.2,0.8,0.5,1.3,0.7c1.9-3.1,3.9-6.3,5.8-9.4c-0.4-0.2-0.8-0.5-1.2-0.7\r C91.1,186.4,89.1,189.5,87.1,192.6z M112.6,156.1c-0.5-0.2-0.9-0.4-1.4-0.7c-1.3,3-2.6,5.9-3.9,8.9c0.5,0.2,0.9,0.4,1.4,0.6\r C110,162,111.3,159.1,112.6,156.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M150.1,320.2c3.9,0.6,6.7,1,9.5,1.4c0.8-6.3,5.8-8.4,11-4.8c1.8,1.2,3.6,2.4,5.5,3.4c3.3,1.8,5.1,4.4,4.9,8.4\r c7.8-1.9,11.7,4.4,17.1,7.5c0.3,0.2,0,2.4-0.6,3.1c-3.2,3.4-7.6,4.4-12,4.7c-4.1,0.3-8.2,0.4-12.2,1c-1.5,0.2-3.1,1.4-4.1,2.6\r c-1.9,2.2-3.6,4.3-6.8,5.1c-2.3,0.6-4,2.8-6.2,3.9c-1.9,0.9-4.1,1.3-6.1,1.8c-0.1-0.3-0.3-0.7-0.4-1c2.5-1.3,4.9-2.5,7.4-3.8\r c-0.2-0.4-0.4-0.9-0.7-1.3c-0.6,0.4-1.2,0.8-1.8,1.1c-1.1,0.4-2.2,0.7-3.2,1.1c-0.2-0.9-0.2-2-0.7-2.6c-1.3-1.5-2.7-2.9-4.3-4\r c-1.4-0.9-3.2-1.2-5-1.9c1.2-1.6,2.2-3,3.2-4.3c-1.5-2.4-6.4-1-6.4-6.4c2.1,1.3,3.7,2.1,5,3.1c4.9,3.7,11.5,1.8,13.2-4\r c0.3-0.9-0.1-2.2-0.6-3.1C154,327.8,152.3,324.5,150.1,320.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M323.7,172.8c-2.8-1.2-5.6-0.4-8.5,1.6c-0.6,0.4-3.1-0.9-3.9-2c-0.7-1-0.8-3.4-0.1-4.1\r c3.5-3.9,7.4-7.4,11.2-11.1c1.4-1.4,2.8-1.1,3.9,0.1c1.8,2.1,3.5,4.4,5.1,6.6c0.2,0.3,0.4,0.8,0.5,1.2\r C331.9,167.5,326.7,172.9,323.7,172.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M290.4,163.4c-1,3.1-2.6,5.6-2.4,8.1c0.2,3,1.6,6,2.9,8.8c1.6,3.5,2.9,7,1.8,11.7c-1-2.2-1.4-3.8-2.4-5\r c-0.9-1.2-2.3-2.5-3.7-2.7c-4.8-0.8-9.6-5.4-10.1-10.2c-0.3-3.1,0.8-5.4,3.9-6.6C283.5,166.3,286.6,165,290.4,163.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M150.8,228.3c0-1.4-0.2-2.8,0-4.2c1.5-7.8,3-15.7,4.9-23.3c1-4,2.7-8.1,5-11.5c3.7-5.6,5.8-11.7,7.7-18\r c1.3-4.4,3.2-6.9,6.3-8.9c-8,21.9-19.2,42.7-22.4,66.2C151.8,228.5,151.3,228.4,150.8,228.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M183,102.1c-2.1,1.5-4.2,3-6.5,4.6c-0.4-0.3-0.9-0.7-1.9-1.4c-0.3,1.6-0.5,2.7-0.7,3.9\r c2.1,0.3,3.9,0.6,5.7,0.8c0,0.4,0,0.9,0,1.3c-3.9,0.4-7.8,0.7-11.7,1.2c-1.2,0.2-2.2,1.2-3.3,1.8c-0.2,0.1-0.2,0.7-0.4,0.9\r c-1.5,1-3.1,1.9-4.7,2.8c-0.6-1.5-1.7-3-1.7-4.5c0-5.5,2.3-7.6,7.8-7.7c3.8,0,7.5,0,10.7-3.2c1.2-1.2,4.1-0.8,6.3-1.1\r C182.7,101.8,182.9,102,183,102.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M251.2,238.2c-0.4-2-0.9-4-1.2-6c-1.3-10.6,2.5-19.9,7.2-29c0.6-1.2,1.1-2.7,2-3.7c0.7-0.8,1.9-1,2.9-1.5\r c0.2,1.1,0.6,2.1,0.6,3.2c0,0.6-0.4,1.2-0.7,1.8c-6.1,10.9-9.5,22.6-9.5,35.2C252,238.1,251.6,238.2,251.2,238.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M308.5,208.6c-4.1,1.9-7.7,2.4-11.9,1.6c-2.8-0.6-6,0.7-9,1.2c-1.6,0.2-3.2,0.6-4.8,0.6\r c-0.8,0-1.8-0.7-2.1-1.4c-0.2-0.4,0.6-2,1-2c3.9-0.2,6.3-3.7,9.7-4.4C297.3,203,303.3,203.6,308.5,208.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M290.4,129.1c2.3-0.9,4.6-1.7,6.8-2.6c-0.1,0.4-0.2,0.9-0.3,1.3c1.2,1.9,2.2,3.9,3.7,5.5\r c6,6.3,12.5,11.9,21.4,13.6c3.7,0.7,5.5,3,6,6.6c-7.2-3.5-14.3-6.7-21.2-10.3c-2.2-1.2-4.2-3.2-5.6-5.3c-2.3-3.7-5.2-6.3-9.6-7\r c-0.4-0.1-0.8-0.6-1.2-0.9C290.6,129.9,290.5,129.5,290.4,129.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M213.2,127c2.5-3,5.1-5.9,7.6-8.9l-0.1,0.1c4.5-3.9,2.8-9,2.9-14.1c-1.2,0.2-1.9,0.4-3.1,0.7\r c0.2-0.9,0.4-1.9,0.5-1.9c3.9,0.3,3.6-3.1,4.7-5.3c0.1-0.2,0.3-0.3,1.1-1.1c0.5,1.4,1.2,2.4,1.3,3.5c0.1,1.9-0.5,3.9-0.2,5.8\r c0.8,5.6-2.6,9.4-5.4,13.6c-0.7,1.1-1.6,2-2.1,2.7c4,1,7.7,1.8,12.1,2.9c-2.3,2.5-4.4,3.4-6.5,2.1\r C221.6,124.5,217.5,124.5,213.2,127L213.2,127z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M324.3,188.3c-1.8-1.1-3.6-1.6-4.3-2.8c-0.5-0.8,0.1-2.7,0.8-3.8c1.4-2.3,3.1-4.4,4.8-6.5\r c0.4-0.4,1.3-0.6,1.9-0.6c0.5,0,1,0.4,1.5,0.6c5,1.9,5.8,4,2.5,8.2C329.8,185.6,326.8,186.7,324.3,188.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M235,228.9c0.7,2.3,2.3,5.3,2.4,8.3c0.1,3-3.1,3.8-5.7,4.2c-2.7,0.5-5.3,0.1-6.9-2.4c-1-1.6,0.9-4.5,3.4-5.9\r C230.2,231.9,232.3,230.5,235,228.9z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M186.9,116.3c2.1-0.6,4.2-1.4,6.3-1.7c2.9-0.5,5.8-0.7,8.7-0.8c1,0,2,0.5,3.1,0.8c1.4,0.4,2.8,0.7,4.1,1.2\r c0.8,0.3,2.1,0.6,2.3,1.1c0.2,0.7-0.2,2.1-0.8,2.5c-1.9,1.2-4.2,2.3-6.1,0.4c-2-2-3.7-1.8-6-0.4c-1.8,1.1-4.1,2.3-4.5-1.6\r c-0.1-0.6-1.5-1.4-2.4-1.4c-1.4,0-2.9,0.6-4.3,0.9C187.1,117,187,116.7,186.9,116.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M142.3,150.1c-0.1-2.1-0.7-3.8-0.1-4.8c2.4-4,5-7.9,7.7-11.8c1.5-2.2,3.4-4.1,5.1-6.1\r C156.7,132,151.6,141.4,142.3,150.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M194,185.8c2.1,2.4,2.6,13.8,1.2,25.2C191.5,206,190.7,191.2,194,185.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M214.6,97c1.6,5.5,1.1,9.9-4.5,12.1c1.1-2.3,2.3-4.7,3.7-7.6c-4.6,0.8-8.6,1.4-12.2-2.6\r C206.4,98.1,210.6,97.5,214.6,97z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M162.3,130.9c-1.7,4.9-18.8,27.4-20.6,27.9c-0.2-3.2,1.5-6.4,4.1-7.8c0.6-0.3,1.2-0.9,1.7-1.4\r c4.3-5.6,8.6-11.3,12.9-16.9C160.9,132,161.7,131.5,162.3,130.9z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M130,311.7c-2.3-0.8-5.2,0-5.9-3.5c-0.1-0.5-1.3-0.7-1.6-1.2c-0.6-0.9-1.2-2-1.1-3c0-0.9,0.8-2.2,1.5-2.4\r c0.7-0.2,2,0.4,2.7,1c2,1.6,3.9,3.2,5.7,5c0.8,0.8,1.1,1.9,1.7,2.9C132.1,310.9,131.1,311.3,130,311.7z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M235.6,125.3c0.6-6.4,1.2-12.2,1.7-18.2c2.2,0.7,4,1.2,6,1.8c-3.8,2.9-3.4,7.4-3.5,11.7\r C239.7,123,238.4,124.3,235.6,125.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M294.9,163.1c3.9,3.1,5.7,7.2,4.5,10.6c-0.3,0.7-0.9,1.7-1.5,1.8c-0.6,0.1-1.4-0.7-1.9-1.3\r c-0.7-0.8-1.1-1.8-1.8-2.6C291.3,168.1,291.3,166.5,294.9,163.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M84.2,215.3c1.1,1.6,2.3,2.9,2.8,4.5c0.4,1.1,0.2,2.9-0.5,3.7c-2.1,2.1-4.5,3.8-6.8,5.6\r C78.6,226.8,80.9,219.2,84.2,215.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M130,198.4c0.5-4.4,3.6-6.6,5.8-9.2c1.3-1.5,3.3-2.5,4.6-4.1c2.1-2.7,3.9-5.6,5.7-8.3\r c1.5,2.3,0.4,8.1-2.7,9.7c-5.3,2.6-9.9,5.7-12.1,11.5C131.3,198.2,130.9,198.2,130,198.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M135,178.8c0.8-6.2,11.2-15.6,17-15.3C143.7,166.5,141.5,175,135,178.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M198.7,109.2c-2,0-4,0.3-5.9-0.1c-0.9-0.2-2.3-2.4-2.1-2.7c0.9-1.4,2.2-2.8,3.7-3.5c1.2-0.6,2.8-0.1,4.5-0.1\r c-0.1,1.4-0.2,3.3-0.3,5.2C198.7,108.3,198.7,108.7,198.7,109.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M333.7,194.3c1.3-2.6,2.3-4.7,3.4-7c-0.5-0.4-1.1-0.8-2.1-1.5c0.7-0.6,1.1-1.2,1.7-1.4\r c1.1-0.3,2.2-0.3,3.3-0.5c0.2,1.9,1.1,4.2,0.4,5.8C339.4,191.9,338.5,195.5,333.7,194.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M226.5,163.9c-7.2,4.1-16.8-1.5-20.3-7C212.5,160.6,218.7,164.4,226.5,163.9z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M91.9,258.9c6,5.3,6,5.3,14.3,0.8c0.3,0.2,0.5,0.3,0.8,0.5c-1.3,2.2-2.5,4.5-4,6.5c-0.5,0.6-2.3,0.6-3.2,0.2\r c-2.5-1.2-4.9-2.6-7.1-4.2c-0.9-0.7-1.3-2.2-1.9-3.3C91.2,259.3,91.6,259.1,91.9,258.9z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M165.8,160.6c-3.1,2.9-6.1,5.8-9.8,9.2c-0.8-2.2-1.3-3.8-1.6-4.5c1.9-1.4,3.1-2.7,4.6-3.5\r c1.8-1.1,3.8-1.8,5.7-2.7C165.1,159.7,165.4,160.2,165.8,160.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M220.8,118.1c-1.2,0.9-2.3,2-3.6,2.7c-0.8,0.4-1.9-0.1-2.9-0.2c0.1-0.9-0.1-2.2,0.4-2.8\r c1.8-2,3.9-3.8,5.9-5.7c0.4,0.2,0.8,0.4,1.2,0.6c-0.3,1.9-0.7,3.7-1,5.6L220.8,118.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M125.1,300.4c-0.5-1.3-1.7-2.9-1.4-4c0.4-1.5,2-2.6,3.2-3.8c0.7,0.9,2.2,2,2.1,2.6c-0.5,1.8-1.7,3.5-2.6,5.2\r C125.9,300.4,125.5,300.4,125.1,300.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M183.5,119c-3.2,4.2-6.8,8.8-10.5,13.6C172.4,128.2,176,123.7,183.5,119z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M124.9,217.6c0.9-5.7,1.8-10.8,2.7-16.5C129.3,204.3,127.6,215.9,124.9,217.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M91.8,233.3c-1.7,1.6-3.1,2.8-4.4,4c-0.5-0.8-1.5-1.9-1.3-2.3c0.7-1.6,1.9-3,2.9-4.5\r C89.7,231.2,90.5,231.9,91.8,233.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M213.2,126.9c-2.2,1.7-4.6,2.4-8.1,1.8c1.6-1.9,2.8-3.3,4.5-5.4C210.8,124.6,212,125.8,213.2,126.9\r L213.2,126.9z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M96.5,248.1c-2.3,2.1-3.8,3.4-5.9,5.4c-0.2-2.6-0.4-4.5-0.6-7.3C92.3,247,93.9,247.4,96.5,248.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M337.7,161.4c0-3.5,0-6.4,0-9.6C341.1,153.9,341.1,157.9,337.7,161.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M214.7,189.8c1.6-2.8,3.2-5.5,4.7-8.3c1.3,3.2-0.8,7.1-3.8,8.8C215.3,190.1,215,190,214.7,189.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M104.4,240.2c0.3,4.7,0.2,4.8-5.9,4.5C99.1,242.2,99.1,242.2,104.4,240.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M246.4,88.8c4.4-1,7.6,1.2,10.9,3.4c-0.2,0.4-0.3,0.8-0.5,1.2C253.4,91.8,249.9,90.3,246.4,88.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M159,130.8c-0.7-2.2-1.5-4.4-2.1-6.7c-0.1-0.3,0.6-1.1,0.9-1.1c0.7,0,1.6,0.3,1.9,0.8\r c1.4,2.2,1.6,4.5,0.5,6.7C159.7,130.6,159.3,130.7,159,130.8z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M210,157.1c1.4-4.6,2.8-8.9,4.1-13.3C215.4,147.3,213.5,153.8,210,157.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M248.2,262c-2.2-1.9-3.1-3.8-2.2-6c0.3-0.7,1.3-1.2,1.9-1.7c0.3,0.7,1,1.4,0.9,2.1\r C248.9,258.1,248.5,259.8,248.2,262z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M293,141.7c-0.3,2.9-0.7,5.7-1,8.6c-0.6-0.1-1.2-0.1-1.8-0.2c0.3-2.9,0.6-5.8,0.8-8.6\r C291.7,141.5,292.3,141.6,293,141.7z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M297,185.1c-2.2-3.3-4.4-6.7-6.5-10c0.3-0.2,0.6-0.4,0.9-0.6c2.3,3.3,4.5,6.6,6.8,10\r C297.8,184.7,297.4,184.9,297,185.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M145.9,124.4c-2.3-2.7-1.4-5.7,2-8.2C147.2,119,146.6,121.7,145.9,124.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M357.3,151.2c-0.4,4.4-4.3,3.8-6.4,6.4C351.4,154.5,352.6,153.4,357.3,151.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M119.6,276.6c-0.9-3.5,2.2-5.6,2.9-8.5c0.4,0.1,0.8,0.3,1.2,0.4c-1.1,2.8-2.1,5.6-3.2,8.4\r C120.2,276.8,119.9,276.7,119.6,276.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M318.1,210.2c2.1-1.3,4.2-2.6,6.7-4.2c-0.2,4.9-3.5,4.4-6.1,5.1C318.5,210.8,318.3,210.5,318.1,210.2z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M111.6,262.7c3.3,3,3.2,3.8,0,7.5C111.6,267.7,111.6,265.5,111.6,262.7z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M425.3,204.4c0.2,2,0.4,4,0.7,6.5C422.7,209.2,422.3,206.8,425.3,204.4z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M117.5,329.3c1.6,0.9,3.3,1.8,4.8,2.8c0.3,0.2,0.4,1.6,0.2,1.7c-0.6,0.3-1.6,0.5-2,0.2\r c-1.4-1-2.6-2.3-3.9-3.5C116.9,330.1,117.2,329.7,117.5,329.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M192.5,167.6c0,2.8,0,5.4,0,8.4C190,173.4,190.1,170.5,192.5,167.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M206.3,133.5c3.8,0.8,4.1,1.8,3.1,8.4C208.2,138.8,207.3,136.3,206.3,133.5z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M149.3,159.3c0.8-1.5,1.6-3.1,2.5-4.6c0.4,0.2,0.7,0.4,1.1,0.6c0.2,2.1,0.2,4-2.3,4.8\r C150.1,159.8,149.7,159.5,149.3,159.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M123.5,249.5c-1.1,1-1.8,1.6-2.5,2.3c-0.5-0.6-1.5-1.4-1.4-1.8c0.3-0.9,1.1-1.6,1.9-2.2\r C121.7,247.7,122.6,248.7,123.5,249.5z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M231.9,333.6c1-0.8,2.1-1.6,3.1-2.4c0.3,0.4,1,1.2,1,1.3c-0.9,0.9-1.9,1.7-2.9,2.5\r C232.6,334.6,232.2,334.1,231.9,333.6z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M239.5,181.3c-0.4,2.3-0.9,4.5-1.3,6.8c-0.4-0.1-0.8-0.1-1.2-0.2c0.4-2.3,0.8-4.5,1.2-6.8\r C238.6,181.2,239,181.3,239.5,181.3z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M196.4,145c-0.6-1.9-1.2-3.9-1.7-5.8c0.5-0.1,1-0.3,1.4-0.4c0.5,1.9,1,3.9,1.6,5.8\r C197.2,144.7,196.8,144.9,196.4,145z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M235.1,218.4c0-2,0-3.9,0-5.9c0.4,0,0.9,0,1.3,0c-0.1,2-0.3,3.9-0.4,5.9C235.7,218.4,235.4,218.4,235.1,218.4\r z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M71.9,263.1c0.9-0.9,1.8-1.9,2.6-2.8c0.5,0.5,1,0.9,1.5,1.4c-1.1,0.8-2.1,1.6-3.2,2.4\r C72.5,263.7,72.2,263.4,71.9,263.1z" }),
	            _react2.default.createElement("path", { className: "st4", d: "M232.9,119.6c0.3-1.3,0.6-2.7,1-4c0-0.1,0.9,0.1,1.4,0.1c-0.3,1.4-0.5,2.8-0.8,4.2\r C234,119.8,233.5,119.7,232.9,119.6z" })
	          )
	        )
	      ),
	      _react2.default.createElement(
	        "div",
	        { id: "LoadingWord" },
	        " ",
	        _react2.default.createElement(
	          "h1",
	          null,
	          "Loading...",
	          this.state.countItDown,
	          "%"
	        )
	      )
	    );
	  }
	});
	exports.default = Title;

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(419);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(421)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(420)();
	// imports
	exports.push([module.id, "@import url(https://use.edgefonts.net/redressed:n4:default;calligraffitti:n4:default;asap:n4,i4:default;antic-didone:n4:default;abril-fatface:n4:default.js);", ""]);

	// module
	exports.push([module.id, "body {\n  overflow-x: hidden;\n  overflow-y: hidden;\n  min-height: 800px;\n  background-color: #FFFFFF;\n  margin-top: 0px;\n  margin-left: 0px; }\n\n#Message {\n  background-color: #00FF00;\n  color: #FFFFFF; }\n\n#MenuBar1 {\n  width: 60px;\n  height: 100vh;\n  background-color: #001b2a;\n  position: absolute;\n  border: 1px solid #938f8f;\n  z-index: 50; }\n\n#MenuTab {\n  width: 300px;\n  height: 100vh;\n  background-color: #001b2a;\n  position: absolute;\n  border: 1px solid #938f8f;\n  z-index: 35;\n  color: #FFFFFF;\n  margin-left: -300px; }\n  #MenuTab #LogoMain {\n    position: relative;\n    width: 294px;\n    height: 435px;\n    margin-left: 2px;\n    border: 1px double #938f8f;\n    z-index: 36; }\n    #MenuTab #LogoMain #LogoSVG {\n      position: relative;\n      width: 294px;\n      top: 5px; }\n  #MenuTab h2 {\n    text-align: center;\n    color: #955b1b;\n    font-family: redressed;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 30px;\n    margin-top: 8px; }\n  #MenuTab h3 {\n    text-align: center;\n    color: #aaadb8;\n    font-family: calligraffitti;\n    font-style: normal;\n    font-weight: 400;\n    padding-left: 10px;\n    padding-right: 10px; }\n  #MenuTab #NavArea {\n    position: relative;\n    width: 294px;\n    margin-left: 2px;\n    border: 1px double #938f8f;\n    margin-top: 1px;\n    height: 45%; }\n\n#NavAreaNav {\n  margin-top: 20px;\n  margin-left: -44px;\n  position: relative;\n  cursor: pointer;\n  list-style-type: none;\n  text-decoration: none;\n  color: #FFFFFF;\n  font-size: 35px;\n  font-family: antic-didone;\n  font-style: normal;\n  font-weight: 500;\n  text-align: center; }\n\n#MenuBtn {\n  width: 50px;\n  height: 50px;\n  z-index: 51;\n  position: relative;\n  margin-left: 5px;\n  top: 50%;\n  margin-top: -25px;\n  cursor: pointer; }\n  #MenuBtn #HamX1 {\n    width: 30px;\n    height: 3px;\n    left: 10px;\n    top: 12px;\n    border-radius: 2px;\n    background-color: #FFFFFF;\n    position: relative;\n    cursor: pointer; }\n  #MenuBtn #HamX2 {\n    width: 30px;\n    height: 3px;\n    left: 10px;\n    top: 33px;\n    border-radius: 2px;\n    background-color: #FFFFFF;\n    position: relative;\n    cursor: pointer; }\n\n#ExpoPane {\n  width: 100%;\n  height: 130px;\n  margin-left: 0px;\n  background-color: #00FF00;\n  position: absolute;\n  z-index: 30;\n  display: block;\n  float: left;\n  clear: both;\n  top: 100%;\n  margin-top: -130px;\n  margin-left: 61px; }\n\n#ExpoBtn {\n  width: 49px;\n  height: 49px;\n  margin-left: 1px;\n  background-color: #FFFFFF;\n  position: absolute;\n  z-index: 52;\n  display: block;\n  float: left;\n  clear: both;\n  top: 100%;\n  margin-top: -90px;\n  cursor: pointer; }\n\n#MainContent {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: 20;\n  background-color: #510909;\n  float: left;\n  margin-top: 0px; }\n  #MainContent #MoreInfo {\n    height: 50px;\n    width: 50px;\n    position: relative;\n    float: right;\n    background-color: #FFFFFF;\n    top: 100%;\n    margin-right: 55px;\n    margin-top: -300px;\n    cursor: pointer; }\n\n#MortInfoTab {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: 25;\n  background-color: #32e057;\n  float: left;\n  margin-top: 0px; }\n  #MortInfoTab #LessInfo {\n    height: 50px;\n    width: 50px;\n    position: relative;\n    float: right;\n    background-color: #FFFFFF;\n    cursor: pointer;\n    margin-right: 200px; }\n\n#H1 {\n  top: 50%;\n  margin-right: auto;\n  background-color: #FFFFFF;\n  z-index: 300; }\n\n#TwitterArea {\n  width: 55px;\n  height: 50px;\n  display: block;\n  margin-left: 135px;\n  position: absolute; }\n  #TwitterArea #Twitter {\n    width: 55px;\n    height: 49px;\n    background-image: url(\"/images/TwitFLy.png\");\n    transition: background 0.8s steps(5);\n    -webkit-transition: background 0.8s steps(5);\n    -ms-transition: background 0.8s steps(5);\n    -o-transition: background 0.8s steps(5);\n    -moz-transition: background 0.8s steps(5);\n    background-position: 0em;\n    display: block;\n    background-repeat: repeat-x; }\n  #TwitterArea #Twitter:hover {\n    -webkit-animation: Twitter 0.8s steps(5) 1;\n    -moz-animation: Twitter 0.8s steps(5) 1;\n    -ms-animation: Twitter 0.8s steps(5) 1;\n    -o-animation: Twitter 0.8s steps(5) 1;\n    animation: Twitter 0.8s steps(5) 1;\n    background-position: -275px; }\n\n@-webkit-keyframes Twitter {\n  0% {\n    background-position: 0px 0; }\n  100% {\n    background-position: -275px 0; } }\n\n@-moz-keyframes Twitter {\n  0% {\n    background-position: 0px 0; }\n  100% {\n    background-position: -275px 0; } }\n\n@-ms-keyframes Twitter {\n  #TwitterArea 0% {\n    background-position: 0px 0; }\n  #TwitterArea 100% {\n    background-position: -275px 0; } }\n\n@-o-keyframes Twitter {\n  0% {\n    background-position: 0px 0; }\n  100% {\n    background-position: -275px 0; } }\n\n@keyframes Twitter {\n  0% {\n    background-position: 0px 0; }\n  100% {\n    background-position: -275px 0; } }\n\n.mainContainer {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  margin-left: 30px;\n  display: block;\n  opacity: 1;\n  background-color: #000000; }\n\n.home-leave {\n  opacity: 1;\n  z-index: 1; }\n\n.home-leave.home-leave-active {\n  opacity: 0;\n  z-index: 0; }\n\n.home-enter {\n  opacity: 0;\n  z-index: 0; }\n\n.home-enter.home-enter-active {\n  opacity: 1;\n  z-index: 1;\n  transition: all 600ms; }\n\n.about-leave {\n  opacity: 1;\n  z-index: 1; }\n\n.about-leave.about-leave-active {\n  opacity: 0;\n  z-index: 0; }\n\n.about-enter {\n  opacity: 0;\n  z-index: 0; }\n\n.about-enter.about-enter-active {\n  opacity: 1;\n  z-index: 1;\n  transition: all 600ms; }\n\n.contact-leave {\n  opacity: 1;\n  z-index: 1; }\n\n.contact-leave.contact-leave-active {\n  opacity: 0;\n  z-index: 0; }\n\n.contact-enter {\n  opacity: 0;\n  z-index: 0; }\n\n.contact-enter.contact-enter-active {\n  opacity: 1;\n  z-index: 1;\n  transition: all 600ms; }\n\n.TouchSwipe {\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n  background-color: black;\n  opacity: .5;\n  z-index: 3; }\n\n.LinkPrev {\n  width: 100px;\n  height: 100px;\n  margin-left: 45%;\n  position: absolute;\n  background-color: orange;\n  z-index: 4; }\n\n.LinkPrev:hover {\n  background-color: green; }\n\n.LinkNext {\n  width: 100px;\n  height: 100px;\n  top: 91%;\n  margin-left: 45%;\n  position: absolute;\n  z-index: 4; }\n  .LinkNext #LinkDwnLgo {\n    fill: #ffffff;\n    left: 15px;\n    height: 50px;\n    width: 50px;\n    position: relative; }\n  .LinkNext #HomeArowDwn {\n    height: 25px;\n    width: 25px;\n    position: relative;\n    left: -22px;\n    top: 22px;\n    -moz-transition: linear 0.2s;\n    -ms-transition: linear 0.2s;\n    -o-transition: linear 0.2s;\n    -webkit-transition: linear 0.2s;\n    transition: linear 0.2s; }\n\n.LinkNext:hover #LinkDwnLgo {\n  fill: #00ff00; }\n\n.LinkNext:hover #HomeArowDwn {\n  top: 40px; }\n\n.precipPage {\n  color: #FFFFFF;\n  width: 100vw;\n  height: 100vh;\n  left: auto;\n  position: absolute; }\n\n#ip_content {\n  position: absolute;\n  display: inline-block;\n  top: 200px;\n  left: 600px;\n  width: 600px;\n  height: 300px;\n  text-color: black; }\n\n#place {\n  position: absolute;\n  display: inline-block;\n  left: 600px;\n  width: 600px;\n  height: 300px;\n  text-color: black; }\n\n#weather {\n  position: absolute;\n  display: inline-block;\n  top: 200px;\n  left: 50px;\n  width: 600px;\n  height: 300px;\n  text-color: black; }\n\n#weathercanvas {\n  display: block;\n  width: 100vw;\n  height: 100vh; }\n\n/* The switch - the box around the slider */\n#Switch {\n  position: absolute;\n  display: inline-block;\n  width: 60px;\n  height: 34px; }\n\n/* Hide default HTML checkbox */\n#Switch input {\n  display: none; }\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(67, 112, 172, 0.5);\n  -webkit-transition: .4s;\n  transition: .4s; }\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s; }\n\ninput:checked + .slider {\n  background-color: #ccc; }\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #2196F3; }\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px); }\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 34px; }\n\n.slider.round:before {\n  border-radius: 50%; }\n\n#HomeAsideBtn {\n  width: 100px;\n  height: 100px;\n  margin-top: 100vh;\n  left: 80vw;\n  top: -90px;\n  z-index: 3;\n  position: absolute;\n  margin-left: 5px;\n  cursor: pointer; }\n  #HomeAsideBtn #LearnMoreArrow {\n    width: 80px;\n    height: 50px;\n    color: #FFFFFF;\n    font-size: 20px;\n    font-family: antic-didone;\n    font-style: normal;\n    font-weight: 400;\n    text-align: center;\n    position: relative;\n    z-index: 10; }\n    #HomeAsideBtn #LearnMoreArrow #btmArrow {\n      width: 25px;\n      height: 2px;\n      top: -15px;\n      left: 70px;\n      background-color: #FFFFFF;\n      position: relative;\n      transform: rotate(-45deg);\n      -moz-transition: linear 0.3s;\n      -ms-transition: linear 0.3s;\n      -o-transition: linear 0.3s;\n      -webkit-transition: linear 0.3s;\n      transition: linear 0.3s; }\n    #HomeAsideBtn #LearnMoreArrow #topArrow {\n      width: 25px;\n      height: 2px;\n      top: -30px;\n      left: 70px;\n      background-color: #FFFFFF;\n      position: relative;\n      transform: rotate(45deg);\n      -moz-transition: linear 0.3s;\n      -ms-transition: linear 0.3s;\n      -o-transition: linear 0.3s;\n      -webkit-transition: linear 0.3s;\n      transition: linear 0.3s; }\n  #HomeAsideBtn #LearnMoreArrow:hover #topArrow {\n    left: 90px; }\n  #HomeAsideBtn #LearnMoreArrow:hover #btmArrow {\n    left: 90px; }\n\n#HomeAsidePane {\n  width: 100vw;\n  height: 100vh;\n  background-color: #001b2a;\n  position: absolute;\n  border: 1px solid #938f8f;\n  z-index: 15;\n  color: #FFFFFF;\n  float: right;\n  clear: right; }\n  #HomeAsidePane #HomeAsidePaneWraper {\n    margin-right: 500px;\n    padding-right: 50%;\n    float: left;\n    width: 90%;\n    height: 100%;\n    overflow-x: hidden;\n    user-select: none;\n    background-color: green; }\n    #HomeAsidePane #HomeAsidePaneWraper #PageTitle {\n      height: 100px;\n      width: 225px;\n      margin-top: 5vh;\n      margin-left: 0vw;\n      position: absolute;\n      top: -15px;\n      left: 40px;\n      opacity: 0;\n      background-color: gray; }\n    #HomeAsidePane #HomeAsidePaneWraper #MarkerO {\n      position: absolute;\n      margin-left: 0vw;\n      left: 200px;\n      top: 5;\n      margin-top: 5vh;\n      height: 50px;\n      width: 50px; }\n    #HomeAsidePane #HomeAsidePaneWraper #MarkerO2 {\n      position: absolute;\n      margin-left: 50vw;\n      top: 5px;\n      margin-top: 20vh;\n      height: 50px;\n      width: 50px; }\n    #HomeAsidePane #HomeAsidePaneWraper #MarkerO3 {\n      position: absolute;\n      margin-left: 41vw;\n      top: 5px;\n      margin-top: 50vh;\n      height: 50px;\n      width: 50px; }\n    #HomeAsidePane #HomeAsidePaneWraper #MarkerO4 {\n      position: absolute;\n      margin-left: 48vw;\n      stroke: #00ff00;\n      top: 5px;\n      margin-top: 80vh;\n      height: 50px;\n      width: 50px; }\n    #HomeAsidePane #HomeAsidePaneWraper #Para2 {\n      height: 150px;\n      width: 35%;\n      margin-top: 20vh;\n      position: absolute;\n      top: 0px;\n      right: 10px;\n      margin-left: 50vw;\n      left: 62px;\n      opacity: 0; }\n    #HomeAsidePane #HomeAsidePaneWraper #Para3 {\n      height: 100px;\n      width: 40%;\n      margin-top: 50vh;\n      position: absolute;\n      right: 10px;\n      left: 100px;\n      opacity: 0; }\n    #HomeAsidePane #HomeAsidePaneWraper #Para4 {\n      height: 150px;\n      width: 40%;\n      margin-top: 80vh;\n      position: absolute;\n      top: 0px;\n      margin-left: 50vw;\n      left: 62px;\n      opacity: 0; }\n    #HomeAsidePane #HomeAsidePaneWraper #Pic1home {\n      border: 1px solid #938f8f;\n      top: 10vh;\n      width: 38%;\n      height: 380px;\n      left: 20px;\n      opacity: 0;\n      overflow: hidden;\n      position: absolute; }\n    #HomeAsidePane #HomeAsidePaneWraper #Pic2home {\n      border: 1px solid #938f8f;\n      top: 37vh;\n      margin-left: 52%;\n      width: 34%;\n      height: 330px;\n      left: 20px;\n      opacity: 0;\n      overflow: hidden;\n      position: absolute; }\n    #HomeAsidePane #HomeAsidePaneWraper #Pic3home {\n      border: 1px solid #938f8f;\n      top: 60vh;\n      width: 34%;\n      height: 330px;\n      left: 20px;\n      opacity: 0;\n      overflow: hidden;\n      position: absolute; }\n    #HomeAsidePane #HomeAsidePaneWraper #CloseBtn {\n      width: 50px;\n      height: 50px;\n      margin-top: 5vh;\n      left: 85vw;\n      z-index: 3;\n      stroke: #FFFFFF;\n      position: absolute;\n      margin-left: 5px;\n      cursor: pointer;\n      -moz-transition: linear 0.3s;\n      -ms-transition: linear 0.3s;\n      -o-transition: linear 0.3s;\n      -webkit-transition: linear 0.3s;\n      transition: linear 0.3s; }\n    #HomeAsidePane #HomeAsidePaneWraper #CloseBtn:hover {\n      transform: rotate(-90deg); }\n\n.video1 {\n  width: auto;\n  visibility: visible; }\n\nh1 {\n  color: #FFFFFF;\n  padding-left: 20px; }\n\n#AboutContent {\n  margin-right: 50px;\n  padding-right: 5%;\n  float: right;\n  width: 90%;\n  height: 100%;\n  overflow-x: hidden;\n  user-select: none; }\n\nh1 {\n  color: #FFFFFF;\n  padding-left: 20px; }\n\n.TitleScreen {\n  color: #FFFFFF;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  margin-left: -30px;\n  background-color: black;\n  z-index: 10000; }\n\n#LoadingWord {\n  color: #FFFFFF;\n  padding-left: 20px; }\n  #LoadingWord h1 {\n    top: 50%;\n    left: 50%;\n    text-align: center;\n    color: #FFFFFF;\n    font-family: redressed;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 60px;\n    margin-top: 100px;\n    margin-left: -150px;\n    position: absolute;\n    z-index: 2; }\n\n#Loader {\n  height: 200px;\n  width: 200px;\n  margin-left: -100px;\n  left: 50vw;\n  top: 50vh;\n  margin-top: -100px;\n  position: absolute; }\n\n#HambergerButton {\n  position: absolute;\n  height: 50px;\n  width: 50px;\n  cursor: pointer; }\n\n.polygon, polygon {\n  transform-origin: 50% 50%; }\n\n.react-letters path {\n  stroke-dasharray: 200; }\n\n.cls-5,\n.cls-4 {\n  opacity: 1;\n  fill: none;\n  stroke-miterlimit: 10;\n  stroke: #FFFFFF;\n  stroke-width: 3px;\n  stroke-linecap: round;\n  stroke-linejoin: round; }\n", ""]);

	// exports


/***/ }),
/* 420 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ })
/******/ ]);